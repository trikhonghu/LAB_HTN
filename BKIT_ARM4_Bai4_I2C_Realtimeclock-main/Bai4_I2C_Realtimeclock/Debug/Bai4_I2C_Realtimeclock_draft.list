
Bai4_I2C_Realtimeclock_draft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b760  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004490  0800b8e8  0800b8e8  0000c8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd78  0800fd78  000112c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd78  0800fd78  00010d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd80  0800fd80  000112c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd80  0800fd80  00010d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd84  0800fd84  00010d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0800fd88  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000112c0  2**0
                  CONTENTS
 10 .bss          00000540  200002c0  200002c0  000112c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000800  20000800  000112c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000112c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c55a  00000000  00000000  000112f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005025  00000000  00000000  0002d84a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001900  00000000  00000000  00032870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001333  00000000  00000000  00034170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000282d9  00000000  00000000  000354a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000255d4  00000000  00000000  0005d77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1566  00000000  00000000  00082d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001642b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006830  00000000  00000000  001642fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  0016ab2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002c0 	.word	0x200002c0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b8d0 	.word	0x0800b8d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002c4 	.word	0x200002c4
 80001c4:	0800b8d0 	.word	0x0800b8d0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b96a 	b.w	8000ddc <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9d08      	ldr	r5, [sp, #32]
 8000b26:	460c      	mov	r4, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14e      	bne.n	8000bca <__udivmoddi4+0xaa>
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	458c      	cmp	ip, r1
 8000b30:	4686      	mov	lr, r0
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	d962      	bls.n	8000bfe <__udivmoddi4+0xde>
 8000b38:	b14a      	cbz	r2, 8000b4e <__udivmoddi4+0x2e>
 8000b3a:	f1c2 0320 	rsb	r3, r2, #32
 8000b3e:	4091      	lsls	r1, r2
 8000b40:	fa20 f303 	lsr.w	r3, r0, r3
 8000b44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b48:	4319      	orrs	r1, r3
 8000b4a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b52:	fa1f f68c 	uxth.w	r6, ip
 8000b56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b66:	fb04 f106 	mul.w	r1, r4, r6
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	d90a      	bls.n	8000b84 <__udivmoddi4+0x64>
 8000b6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b72:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b76:	f080 8112 	bcs.w	8000d9e <__udivmoddi4+0x27e>
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	f240 810f 	bls.w	8000d9e <__udivmoddi4+0x27e>
 8000b80:	3c02      	subs	r4, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	1a59      	subs	r1, r3, r1
 8000b86:	fa1f f38e 	uxth.w	r3, lr
 8000b8a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8e:	fb07 1110 	mls	r1, r7, r0, r1
 8000b92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b96:	fb00 f606 	mul.w	r6, r0, r6
 8000b9a:	429e      	cmp	r6, r3
 8000b9c:	d90a      	bls.n	8000bb4 <__udivmoddi4+0x94>
 8000b9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba6:	f080 80fc 	bcs.w	8000da2 <__udivmoddi4+0x282>
 8000baa:	429e      	cmp	r6, r3
 8000bac:	f240 80f9 	bls.w	8000da2 <__udivmoddi4+0x282>
 8000bb0:	4463      	add	r3, ip
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	1b9b      	subs	r3, r3, r6
 8000bb6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bba:	2100      	movs	r1, #0
 8000bbc:	b11d      	cbz	r5, 8000bc6 <__udivmoddi4+0xa6>
 8000bbe:	40d3      	lsrs	r3, r2
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d905      	bls.n	8000bda <__udivmoddi4+0xba>
 8000bce:	b10d      	cbz	r5, 8000bd4 <__udivmoddi4+0xb4>
 8000bd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	e7f5      	b.n	8000bc6 <__udivmoddi4+0xa6>
 8000bda:	fab3 f183 	clz	r1, r3
 8000bde:	2900      	cmp	r1, #0
 8000be0:	d146      	bne.n	8000c70 <__udivmoddi4+0x150>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xcc>
 8000be6:	4290      	cmp	r0, r2
 8000be8:	f0c0 80f0 	bcc.w	8000dcc <__udivmoddi4+0x2ac>
 8000bec:	1a86      	subs	r6, r0, r2
 8000bee:	eb64 0303 	sbc.w	r3, r4, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	2d00      	cmp	r5, #0
 8000bf6:	d0e6      	beq.n	8000bc6 <__udivmoddi4+0xa6>
 8000bf8:	e9c5 6300 	strd	r6, r3, [r5]
 8000bfc:	e7e3      	b.n	8000bc6 <__udivmoddi4+0xa6>
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	f040 8090 	bne.w	8000d24 <__udivmoddi4+0x204>
 8000c04:	eba1 040c 	sub.w	r4, r1, ip
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	fa1f f78c 	uxth.w	r7, ip
 8000c10:	2101      	movs	r1, #1
 8000c12:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c22:	fb07 f006 	mul.w	r0, r7, r6
 8000c26:	4298      	cmp	r0, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x11c>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x11a>
 8000c34:	4298      	cmp	r0, r3
 8000c36:	f200 80cd 	bhi.w	8000dd4 <__udivmoddi4+0x2b4>
 8000c3a:	4626      	mov	r6, r4
 8000c3c:	1a1c      	subs	r4, r3, r0
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c46:	fb08 4410 	mls	r4, r8, r0, r4
 8000c4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4e:	fb00 f707 	mul.w	r7, r0, r7
 8000c52:	429f      	cmp	r7, r3
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x148>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x146>
 8000c60:	429f      	cmp	r7, r3
 8000c62:	f200 80b0 	bhi.w	8000dc6 <__udivmoddi4+0x2a6>
 8000c66:	4620      	mov	r0, r4
 8000c68:	1bdb      	subs	r3, r3, r7
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0x9c>
 8000c70:	f1c1 0620 	rsb	r6, r1, #32
 8000c74:	408b      	lsls	r3, r1
 8000c76:	fa22 f706 	lsr.w	r7, r2, r6
 8000c7a:	431f      	orrs	r7, r3
 8000c7c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c80:	fa04 f301 	lsl.w	r3, r4, r1
 8000c84:	ea43 030c 	orr.w	r3, r3, ip
 8000c88:	40f4      	lsrs	r4, r6
 8000c8a:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8e:	0c38      	lsrs	r0, r7, #16
 8000c90:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c94:	fbb4 fef0 	udiv	lr, r4, r0
 8000c98:	fa1f fc87 	uxth.w	ip, r7
 8000c9c:	fb00 441e 	mls	r4, r0, lr, r4
 8000ca0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca4:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca8:	45a1      	cmp	r9, r4
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	d90a      	bls.n	8000cc6 <__udivmoddi4+0x1a6>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cb6:	f080 8084 	bcs.w	8000dc2 <__udivmoddi4+0x2a2>
 8000cba:	45a1      	cmp	r9, r4
 8000cbc:	f240 8081 	bls.w	8000dc2 <__udivmoddi4+0x2a2>
 8000cc0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc4:	443c      	add	r4, r7
 8000cc6:	eba4 0409 	sub.w	r4, r4, r9
 8000cca:	fa1f f983 	uxth.w	r9, r3
 8000cce:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cd2:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cda:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cde:	45a4      	cmp	ip, r4
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x1d2>
 8000ce2:	193c      	adds	r4, r7, r4
 8000ce4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ce8:	d267      	bcs.n	8000dba <__udivmoddi4+0x29a>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0x29a>
 8000cee:	3b02      	subs	r3, #2
 8000cf0:	443c      	add	r4, r7
 8000cf2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf6:	fba0 9302 	umull	r9, r3, r0, r2
 8000cfa:	eba4 040c 	sub.w	r4, r4, ip
 8000cfe:	429c      	cmp	r4, r3
 8000d00:	46ce      	mov	lr, r9
 8000d02:	469c      	mov	ip, r3
 8000d04:	d351      	bcc.n	8000daa <__udivmoddi4+0x28a>
 8000d06:	d04e      	beq.n	8000da6 <__udivmoddi4+0x286>
 8000d08:	b155      	cbz	r5, 8000d20 <__udivmoddi4+0x200>
 8000d0a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d12:	fa04 f606 	lsl.w	r6, r4, r6
 8000d16:	40cb      	lsrs	r3, r1
 8000d18:	431e      	orrs	r6, r3
 8000d1a:	40cc      	lsrs	r4, r1
 8000d1c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d20:	2100      	movs	r1, #0
 8000d22:	e750      	b.n	8000bc6 <__udivmoddi4+0xa6>
 8000d24:	f1c2 0320 	rsb	r3, r2, #32
 8000d28:	fa20 f103 	lsr.w	r1, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	fa24 f303 	lsr.w	r3, r4, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	430c      	orrs	r4, r1
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d40:	fa1f f78c 	uxth.w	r7, ip
 8000d44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d48:	fb08 3110 	mls	r1, r8, r0, r3
 8000d4c:	0c23      	lsrs	r3, r4, #16
 8000d4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d52:	fb00 f107 	mul.w	r1, r0, r7
 8000d56:	4299      	cmp	r1, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x24c>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d62:	d22c      	bcs.n	8000dbe <__udivmoddi4+0x29e>
 8000d64:	4299      	cmp	r1, r3
 8000d66:	d92a      	bls.n	8000dbe <__udivmoddi4+0x29e>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d74:	fb08 3311 	mls	r3, r8, r1, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb01 f307 	mul.w	r3, r1, r7
 8000d80:	42a3      	cmp	r3, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x276>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d8c:	d213      	bcs.n	8000db6 <__udivmoddi4+0x296>
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	d911      	bls.n	8000db6 <__udivmoddi4+0x296>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	1ae4      	subs	r4, r4, r3
 8000d98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d9c:	e739      	b.n	8000c12 <__udivmoddi4+0xf2>
 8000d9e:	4604      	mov	r4, r0
 8000da0:	e6f0      	b.n	8000b84 <__udivmoddi4+0x64>
 8000da2:	4608      	mov	r0, r1
 8000da4:	e706      	b.n	8000bb4 <__udivmoddi4+0x94>
 8000da6:	45c8      	cmp	r8, r9
 8000da8:	d2ae      	bcs.n	8000d08 <__udivmoddi4+0x1e8>
 8000daa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dae:	eb63 0c07 	sbc.w	ip, r3, r7
 8000db2:	3801      	subs	r0, #1
 8000db4:	e7a8      	b.n	8000d08 <__udivmoddi4+0x1e8>
 8000db6:	4631      	mov	r1, r6
 8000db8:	e7ed      	b.n	8000d96 <__udivmoddi4+0x276>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	e799      	b.n	8000cf2 <__udivmoddi4+0x1d2>
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	e7d4      	b.n	8000d6c <__udivmoddi4+0x24c>
 8000dc2:	46d6      	mov	lr, sl
 8000dc4:	e77f      	b.n	8000cc6 <__udivmoddi4+0x1a6>
 8000dc6:	4463      	add	r3, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e74d      	b.n	8000c68 <__udivmoddi4+0x148>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	4623      	mov	r3, r4
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e70f      	b.n	8000bf4 <__udivmoddi4+0xd4>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	e730      	b.n	8000c3c <__udivmoddi4+0x11c>
 8000dda:	bf00      	nop

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000de6:	463b      	mov	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000df2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000df4:	4a3d      	ldr	r2, [pc, #244]	@ (8000eec <MX_ADC1_Init+0x10c>)
 8000df6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000df8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e04:	4b38      	ldr	r3, [pc, #224]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e0a:	4b37      	ldr	r3, [pc, #220]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e10:	4b35      	ldr	r3, [pc, #212]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e18:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e1e:	4b32      	ldr	r3, [pc, #200]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e20:	4a33      	ldr	r2, [pc, #204]	@ (8000ef0 <MX_ADC1_Init+0x110>)
 8000e22:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e24:	4b30      	ldr	r3, [pc, #192]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e2c:	2205      	movs	r2, #5
 8000e2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e38:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e3e:	482a      	ldr	r0, [pc, #168]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e40:	f004 fcf8 	bl	8005834 <HAL_ADC_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e4a:	f002 fe63 	bl	8003b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e4e:	2308      	movs	r3, #8
 8000e50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4822      	ldr	r0, [pc, #136]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e60:	f004 fd2c 	bl	80058bc <HAL_ADC_ConfigChannel>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e6a:	f002 fe53 	bl	8003b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e6e:	2309      	movs	r3, #9
 8000e70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e72:	2302      	movs	r3, #2
 8000e74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e76:	463b      	mov	r3, r7
 8000e78:	4619      	mov	r1, r3
 8000e7a:	481b      	ldr	r0, [pc, #108]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e7c:	f004 fd1e 	bl	80058bc <HAL_ADC_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e86:	f002 fe45 	bl	8003b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e8a:	230a      	movs	r3, #10
 8000e8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	4619      	mov	r1, r3
 8000e96:	4814      	ldr	r0, [pc, #80]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e98:	f004 fd10 	bl	80058bc <HAL_ADC_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000ea2:	f002 fe37 	bl	8003b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ea6:	230b      	movs	r3, #11
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000eb4:	f004 fd02 	bl	80058bc <HAL_ADC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ebe:	f002 fe29 	bl	8003b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ec2:	230c      	movs	r3, #12
 8000ec4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000ed0:	f004 fcf4 	bl	80058bc <HAL_ADC_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000eda:	f002 fe1b 	bl	8003b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200002dc 	.word	0x200002dc
 8000eec:	40012000 	.word	0x40012000
 8000ef0:	0f000001 	.word	0x0f000001

08000ef4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	@ 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a3c      	ldr	r2, [pc, #240]	@ (8001004 <HAL_ADC_MspInit+0x110>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d171      	bne.n	8000ffa <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1e:	4a3a      	ldr	r2, [pc, #232]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f26:	4b38      	ldr	r3, [pc, #224]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b34      	ldr	r3, [pc, #208]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a33      	ldr	r2, [pc, #204]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b31      	ldr	r3, [pc, #196]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a2c      	ldr	r2, [pc, #176]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4823      	ldr	r0, [pc, #140]	@ (800100c <HAL_ADC_MspInit+0x118>)
 8000f7e:	f005 fb49 	bl	8006614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f82:	2303      	movs	r3, #3
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f86:	2303      	movs	r3, #3
 8000f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	481e      	ldr	r0, [pc, #120]	@ (8001010 <HAL_ADC_MspInit+0x11c>)
 8000f96:	f005 fb3d 	bl	8006614 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001018 <HAL_ADC_MspInit+0x124>)
 8000f9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fb8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fc0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fc8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fca:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fd0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fe0:	f004 ff9c 	bl	8005f1c <HAL_DMA_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fea:	f002 fd93 	bl	8003b14 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a08      	ldr	r2, [pc, #32]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000ff2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ff4:	4a07      	ldr	r2, [pc, #28]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3728      	adds	r7, #40	@ 0x28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40012000 	.word	0x40012000
 8001008:	40023800 	.word	0x40023800
 800100c:	40020800 	.word	0x40020800
 8001010:	40020400 	.word	0x40020400
 8001014:	20000324 	.word	0x20000324
 8001018:	40026410 	.word	0x40026410

0800101c <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	at24c_Check();
 8001020:	f000 f83c 	bl	800109c <at24c_Check>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af04      	add	r7, sp, #16
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	230a      	movs	r3, #10
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2301      	movs	r3, #1
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	f107 030f 	add.w	r3, r7, #15
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2310      	movs	r3, #16
 8001048:	21a0      	movs	r1, #160	@ 0xa0
 800104a:	4804      	ldr	r0, [pc, #16]	@ (800105c <at24c_ReadOneByte+0x34>)
 800104c:	f005 ff08 	bl	8006e60 <HAL_I2C_Mem_Read>
	return temp;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000418 	.word	0x20000418

08001060 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af04      	add	r7, sp, #16
 8001066:	4603      	mov	r3, r0
 8001068:	460a      	mov	r2, r1
 800106a:	80fb      	strh	r3, [r7, #6]
 800106c:	4613      	mov	r3, r2
 800106e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 8001070:	88fa      	ldrh	r2, [r7, #6]
 8001072:	230a      	movs	r3, #10
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	2301      	movs	r3, #1
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	1d7b      	adds	r3, r7, #5
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2310      	movs	r3, #16
 8001080:	21a0      	movs	r1, #160	@ 0xa0
 8001082:	4805      	ldr	r0, [pc, #20]	@ (8001098 <at24c_WriteOneByte+0x38>)
 8001084:	f005 fdf2 	bl	8006c6c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001088:	2005      	movs	r0, #5
 800108a:	f004 fbaf 	bl	80057ec <HAL_Delay>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000418 	.word	0x20000418

0800109c <at24c_Check>:

uint8_t at24c_Check(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 80010a2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80010a6:	f7ff ffbf 	bl	8001028 <at24c_ReadOneByte>
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b55      	cmp	r3, #85	@ 0x55
 80010b2:	d101      	bne.n	80010b8 <at24c_Check+0x1c>
 80010b4:	2300      	movs	r3, #0
 80010b6:	e010      	b.n	80010da <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 80010b8:	2155      	movs	r1, #85	@ 0x55
 80010ba:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80010be:	f7ff ffcf 	bl	8001060 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 80010c2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80010c6:	f7ff ffaf 	bl	8001028 <at24c_ReadOneByte>
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b55      	cmp	r3, #85	@ 0x55
 80010d2:	d101      	bne.n	80010d8 <at24c_Check+0x3c>
 80010d4:	2300      	movs	r3, #0
 80010d6:	e000      	b.n	80010da <at24c_Check+0x3e>
	}
	return 1;
 80010d8:	2301      	movs	r3, #1
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 80010e2:	b590      	push	{r4, r7, lr}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	6039      	str	r1, [r7, #0]
 80010ec:	80fb      	strh	r3, [r7, #6]
 80010ee:	4613      	mov	r3, r2
 80010f0:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80010f2:	e00d      	b.n	8001110 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	80fa      	strh	r2, [r7, #6]
 80010fa:	683c      	ldr	r4, [r7, #0]
 80010fc:	1c62      	adds	r2, r4, #1
 80010fe:	603a      	str	r2, [r7, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff91 	bl	8001028 <at24c_ReadOneByte>
 8001106:	4603      	mov	r3, r0
 8001108:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 800110a:	88bb      	ldrh	r3, [r7, #4]
 800110c:	3b01      	subs	r3, #1
 800110e:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001110:	88bb      	ldrh	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1ee      	bne.n	80010f4 <at24c_Read+0x12>
	}
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}

08001120 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	80fb      	strh	r3, [r7, #6]
 800112c:	4613      	mov	r3, r2
 800112e:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 8001130:	e00c      	b.n	800114c <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	781a      	ldrb	r2, [r3, #0]
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff90 	bl	8001060 <at24c_WriteOneByte>
		WriteAddr++;
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	3301      	adds	r3, #1
 8001144:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 800114c:	88bb      	ldrh	r3, [r7, #4]
 800114e:	1e5a      	subs	r2, r3, #1
 8001150:	80ba      	strh	r2, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1ed      	bne.n	8001132 <at24c_Write+0x12>
	}
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001164:	2201      	movs	r2, #1
 8001166:	2108      	movs	r1, #8
 8001168:	4802      	ldr	r0, [pc, #8]	@ (8001174 <button_init+0x14>)
 800116a:	f005 fc07 	bl	800697c <HAL_GPIO_WritePin>
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40020c00 	.word	0x40020c00

08001178 <button_Scan>:

void button_Scan(){
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2108      	movs	r1, #8
 8001182:	482f      	ldr	r0, [pc, #188]	@ (8001240 <button_Scan+0xc8>)
 8001184:	f005 fbfa 	bl	800697c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001188:	2201      	movs	r2, #1
 800118a:	2108      	movs	r1, #8
 800118c:	482c      	ldr	r0, [pc, #176]	@ (8001240 <button_Scan+0xc8>)
 800118e:	f005 fbf5 	bl	800697c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001192:	230a      	movs	r3, #10
 8001194:	2202      	movs	r2, #2
 8001196:	492b      	ldr	r1, [pc, #172]	@ (8001244 <button_Scan+0xcc>)
 8001198:	482b      	ldr	r0, [pc, #172]	@ (8001248 <button_Scan+0xd0>)
 800119a:	f007 fbd9 	bl	8008950 <HAL_SPI_Receive>
	  int button_index = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80011a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011a6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	e03f      	b.n	800122e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db06      	blt.n	80011c2 <button_Scan+0x4a>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	dc03      	bgt.n	80011c2 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3304      	adds	r3, #4
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	e018      	b.n	80011f4 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	dd07      	ble.n	80011d8 <button_Scan+0x60>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b07      	cmp	r3, #7
 80011cc:	dc04      	bgt.n	80011d8 <button_Scan+0x60>
			  button_index = 7 - i;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f1c3 0307 	rsb	r3, r3, #7
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	e00d      	b.n	80011f4 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b07      	cmp	r3, #7
 80011dc:	dd06      	ble.n	80011ec <button_Scan+0x74>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0b      	cmp	r3, #11
 80011e2:	dc03      	bgt.n	80011ec <button_Scan+0x74>
			  button_index = i + 4;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3304      	adds	r3, #4
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	e003      	b.n	80011f4 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f1c3 0317 	rsb	r3, r3, #23
 80011f2:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80011f4:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <button_Scan+0xcc>)
 80011f6:	881a      	ldrh	r2, [r3, #0]
 80011f8:	897b      	ldrh	r3, [r7, #10]
 80011fa:	4013      	ands	r3, r2
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <button_Scan+0x96>
 8001202:	4a12      	ldr	r2, [pc, #72]	@ (800124c <button_Scan+0xd4>)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2100      	movs	r1, #0
 8001208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800120c:	e009      	b.n	8001222 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800120e:	4a0f      	ldr	r2, [pc, #60]	@ (800124c <button_Scan+0xd4>)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001216:	3301      	adds	r3, #1
 8001218:	b299      	uxth	r1, r3
 800121a:	4a0c      	ldr	r2, [pc, #48]	@ (800124c <button_Scan+0xd4>)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8001222:	897b      	ldrh	r3, [r7, #10]
 8001224:	085b      	lsrs	r3, r3, #1
 8001226:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3301      	adds	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	ddbc      	ble.n	80011ae <button_Scan+0x36>
	  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40020c00 	.word	0x40020c00
 8001244:	200003a4 	.word	0x200003a4
 8001248:	2000049c 	.word	0x2000049c
 800124c:	20000384 	.word	0x20000384

08001250 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001254:	2100      	movs	r1, #0
 8001256:	4802      	ldr	r0, [pc, #8]	@ (8001260 <buzzer_init+0x10>)
 8001258:	f008 f94e 	bl	80094f8 <HAL_TIM_PWM_Start>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000584 	.word	0x20000584

08001264 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <MX_DMA_Init+0x3c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a0b      	ldr	r2, [pc, #44]	@ (80012a0 <MX_DMA_Init+0x3c>)
 8001274:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <MX_DMA_Init+0x3c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2038      	movs	r0, #56	@ 0x38
 800128c:	f004 fe0f 	bl	8005eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001290:	2038      	movs	r0, #56	@ 0x38
 8001292:	f004 fe28 	bl	8005ee6 <HAL_NVIC_EnableIRQ>

}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <ds3231_init>:

const char* daysOfWeek[7] = {
    "Sat", "Sun", "Mon", "Tue", "Wed", "Thu", "Fri"
};

void ds3231_init(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80012a8:	201e      	movs	r0, #30
 80012aa:	f004 f9df 	bl	800566c <DEC2BCD>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <ds3231_init+0x80>)
 80012b4:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80012b6:	2016      	movs	r0, #22
 80012b8:	f004 f9d8 	bl	800566c <DEC2BCD>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <ds3231_init+0x80>)
 80012c2:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80012c4:	2015      	movs	r0, #21
 80012c6:	f004 f9d1 	bl	800566c <DEC2BCD>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <ds3231_init+0x80>)
 80012d0:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80012d2:	2006      	movs	r0, #6
 80012d4:	f004 f9ca 	bl	800566c <DEC2BCD>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <ds3231_init+0x80>)
 80012de:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80012e0:	200f      	movs	r0, #15
 80012e2:	f004 f9c3 	bl	800566c <DEC2BCD>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <ds3231_init+0x80>)
 80012ec:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80012ee:	2009      	movs	r0, #9
 80012f0:	f004 f9bc 	bl	800566c <DEC2BCD>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <ds3231_init+0x80>)
 80012fa:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80012fc:	2017      	movs	r0, #23
 80012fe:	f004 f9b5 	bl	800566c <DEC2BCD>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <ds3231_init+0x80>)
 8001308:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 800130a:	2332      	movs	r3, #50	@ 0x32
 800130c:	2203      	movs	r2, #3
 800130e:	21d0      	movs	r1, #208	@ 0xd0
 8001310:	4805      	ldr	r0, [pc, #20]	@ (8001328 <ds3231_init+0x84>)
 8001312:	f005 ffd7 	bl	80072c4 <HAL_I2C_IsDeviceReady>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <ds3231_init+0x7c>
		while(1);
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <ds3231_init+0x78>
	};
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200003a8 	.word	0x200003a8
 8001328:	20000418 	.word	0x20000418

0800132c <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af04      	add	r7, sp, #16
 8001332:	4603      	mov	r3, r0
 8001334:	460a      	mov	r2, r1
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	4613      	mov	r3, r2
 800133a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	4618      	mov	r0, r3
 8001340:	f004 f994 	bl	800566c <DEC2BCD>
 8001344:	4603      	mov	r3, r0
 8001346:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	b29a      	uxth	r2, r3
 800134c:	230a      	movs	r3, #10
 800134e:	9302      	str	r3, [sp, #8]
 8001350:	2301      	movs	r3, #1
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	f107 030f 	add.w	r3, r7, #15
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2301      	movs	r3, #1
 800135c:	21d0      	movs	r1, #208	@ 0xd0
 800135e:	4803      	ldr	r0, [pc, #12]	@ (800136c <ds3231_Write+0x40>)
 8001360:	f005 fc84 	bl	8006c6c <HAL_I2C_Mem_Write>
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000418 	.word	0x20000418

08001370 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8001376:	230a      	movs	r3, #10
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	2307      	movs	r3, #7
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <ds3231_ReadTime+0xa4>)
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	2200      	movs	r2, #0
 8001386:	21d0      	movs	r1, #208	@ 0xd0
 8001388:	4823      	ldr	r0, [pc, #140]	@ (8001418 <ds3231_ReadTime+0xa8>)
 800138a:	f005 fd69 	bl	8006e60 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800138e:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <ds3231_ReadTime+0xa4>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f004 f950 	bl	8005638 <BCD2DEC>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <ds3231_ReadTime+0xac>)
 800139e:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80013a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <ds3231_ReadTime+0xa4>)
 80013a2:	785b      	ldrb	r3, [r3, #1]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f004 f947 	bl	8005638 <BCD2DEC>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <ds3231_ReadTime+0xb0>)
 80013b0:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80013b2:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <ds3231_ReadTime+0xa4>)
 80013b4:	789b      	ldrb	r3, [r3, #2]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f004 f93e 	bl	8005638 <BCD2DEC>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <ds3231_ReadTime+0xb4>)
 80013c2:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80013c4:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <ds3231_ReadTime+0xa4>)
 80013c6:	78db      	ldrb	r3, [r3, #3]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f004 f935 	bl	8005638 <BCD2DEC>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <ds3231_ReadTime+0xb8>)
 80013d4:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80013d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <ds3231_ReadTime+0xa4>)
 80013d8:	791b      	ldrb	r3, [r3, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	f004 f92c 	bl	8005638 <BCD2DEC>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <ds3231_ReadTime+0xbc>)
 80013e6:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80013e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <ds3231_ReadTime+0xa4>)
 80013ea:	795b      	ldrb	r3, [r3, #5]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 f923 	bl	8005638 <BCD2DEC>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <ds3231_ReadTime+0xc0>)
 80013f8:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <ds3231_ReadTime+0xa4>)
 80013fc:	799b      	ldrb	r3, [r3, #6]
 80013fe:	4618      	mov	r0, r3
 8001400:	f004 f91a 	bl	8005638 <BCD2DEC>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <ds3231_ReadTime+0xc4>)
 800140a:	701a      	strb	r2, [r3, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200003a8 	.word	0x200003a8
 8001418:	20000418 	.word	0x20000418
 800141c:	200003b4 	.word	0x200003b4
 8001420:	200003b3 	.word	0x200003b3
 8001424:	200003b2 	.word	0x200003b2
 8001428:	200003b6 	.word	0x200003b6
 800142c:	200003b5 	.word	0x200003b5
 8001430:	200003b7 	.word	0x200003b7
 8001434:	200003b8 	.word	0x200003b8

08001438 <update_Time>:

void update_Time(uint8_t day, uint8_t date, uint8_t month, uint8_t year, uint8_t sec, uint8_t min, uint8_t hours){
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4604      	mov	r4, r0
 8001440:	4608      	mov	r0, r1
 8001442:	4611      	mov	r1, r2
 8001444:	461a      	mov	r2, r3
 8001446:	4623      	mov	r3, r4
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	4603      	mov	r3, r0
 800144c:	71bb      	strb	r3, [r7, #6]
 800144e:	460b      	mov	r3, r1
 8001450:	717b      	strb	r3, [r7, #5]
 8001452:	4613      	mov	r3, r2
 8001454:	713b      	strb	r3, [r7, #4]
	ds3231_Write(ADDRESS_YEAR, year);
 8001456:	793b      	ldrb	r3, [r7, #4]
 8001458:	4619      	mov	r1, r3
 800145a:	2006      	movs	r0, #6
 800145c:	f7ff ff66 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, month);
 8001460:	797b      	ldrb	r3, [r7, #5]
 8001462:	4619      	mov	r1, r3
 8001464:	2005      	movs	r0, #5
 8001466:	f7ff ff61 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, date);
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	4619      	mov	r1, r3
 800146e:	2004      	movs	r0, #4
 8001470:	f7ff ff5c 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, day);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	4619      	mov	r1, r3
 8001478:	2003      	movs	r0, #3
 800147a:	f7ff ff57 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, hours);
 800147e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001482:	4619      	mov	r1, r3
 8001484:	2002      	movs	r0, #2
 8001486:	f7ff ff51 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, min);
 800148a:	7f3b      	ldrb	r3, [r7, #28]
 800148c:	4619      	mov	r1, r3
 800148e:	2001      	movs	r0, #1
 8001490:	f7ff ff4c 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, sec);
 8001494:	7e3b      	ldrb	r3, [r7, #24]
 8001496:	4619      	mov	r1, r3
 8001498:	2000      	movs	r0, #0
 800149a:	f7ff ff47 	bl	800132c <ds3231_Write>
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd90      	pop	{r4, r7, pc}
	...

080014a8 <ds3231_ReadAlarm>:

void ds3231_ReadAlarm(){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0X08, I2C_MEMADD_SIZE_8BIT, ds3231_alram_buffer, 2, 10);
 80014ae:	230a      	movs	r3, #10
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2302      	movs	r3, #2
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <ds3231_ReadAlarm+0x48>)
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	2208      	movs	r2, #8
 80014be:	21d0      	movs	r1, #208	@ 0xd0
 80014c0:	480c      	ldr	r0, [pc, #48]	@ (80014f4 <ds3231_ReadAlarm+0x4c>)
 80014c2:	f005 fccd 	bl	8006e60 <HAL_I2C_Mem_Read>
	ds3231_alarm_min = BCD2DEC(ds3231_alram_buffer[0]);
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <ds3231_ReadAlarm+0x48>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f004 f8b4 	bl	8005638 <BCD2DEC>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <ds3231_ReadAlarm+0x50>)
 80014d6:	701a      	strb	r2, [r3, #0]
	ds3231_alarm_hour = BCD2DEC(ds3231_alram_buffer[1]);
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <ds3231_ReadAlarm+0x48>)
 80014da:	785b      	ldrb	r3, [r3, #1]
 80014dc:	4618      	mov	r0, r3
 80014de:	f004 f8ab 	bl	8005638 <BCD2DEC>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <ds3231_ReadAlarm+0x54>)
 80014e8:	701a      	strb	r2, [r3, #0]
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200003b0 	.word	0x200003b0
 80014f4:	20000418 	.word	0x20000418
 80014f8:	200003ba 	.word	0x200003ba
 80014fc:	200003b9 	.word	0x200003b9

08001500 <update_Alarm>:

void update_Alarm(){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_ALARM_HOUR, ds3231_alarm_hour);
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <update_Alarm+0x20>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	2009      	movs	r0, #9
 800150c:	f7ff ff0e 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_ALARM_MIN, ds3231_alarm_min);
 8001510:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <update_Alarm+0x24>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	2008      	movs	r0, #8
 8001518:	f7ff ff08 	bl	800132c <ds3231_Write>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200003b9 	.word	0x200003b9
 8001524:	200003ba 	.word	0x200003ba

08001528 <is_touch_alarm>:
uint8_t mode = 0;
uint8_t toggle_normal = 0;

uint8_t alarm_state;

int is_touch_alarm(){
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af04      	add	r7, sp, #16
	if(!touch_IsTouched())
 800152e:	f003 fe2f 	bl	8005190 <touch_IsTouched>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <is_touch_alarm+0x14>
		return 0;
 8001538:	2300      	movs	r3, #0
 800153a:	e037      	b.n	80015ac <is_touch_alarm+0x84>
	else{
		lcd_ShowIntNum(20, 220, touch_GetX(), 4, WHITE, BLACK, 24);
 800153c:	f003 fe3a 	bl	80051b4 <touch_GetX>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	2318      	movs	r3, #24
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	2300      	movs	r3, #0
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2304      	movs	r3, #4
 8001554:	21dc      	movs	r1, #220	@ 0xdc
 8001556:	2014      	movs	r0, #20
 8001558:	f001 fca4 	bl	8002ea4 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 220, touch_GetY(), 4, WHITE, BLACK, 24);
 800155c:	f003 fe36 	bl	80051cc <touch_GetY>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	2318      	movs	r3, #24
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	2300      	movs	r3, #0
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2304      	movs	r3, #4
 8001574:	21dc      	movs	r1, #220	@ 0xdc
 8001576:	2046      	movs	r0, #70	@ 0x46
 8001578:	f001 fc94 	bl	8002ea4 <lcd_ShowIntNum>
		return (touch_GetX() > 20 && touch_GetX() < 70 && touch_GetY() > 235 && touch_GetY() < 285);
 800157c:	f003 fe1a 	bl	80051b4 <touch_GetX>
 8001580:	4603      	mov	r3, r0
 8001582:	2b14      	cmp	r3, #20
 8001584:	d911      	bls.n	80015aa <is_touch_alarm+0x82>
 8001586:	f003 fe15 	bl	80051b4 <touch_GetX>
 800158a:	4603      	mov	r3, r0
 800158c:	2b45      	cmp	r3, #69	@ 0x45
 800158e:	d80c      	bhi.n	80015aa <is_touch_alarm+0x82>
 8001590:	f003 fe1c 	bl	80051cc <touch_GetY>
 8001594:	4603      	mov	r3, r0
 8001596:	2beb      	cmp	r3, #235	@ 0xeb
 8001598:	d907      	bls.n	80015aa <is_touch_alarm+0x82>
 800159a:	f003 fe17 	bl	80051cc <touch_GetY>
 800159e:	4603      	mov	r3, r0
 80015a0:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80015a4:	d801      	bhi.n	80015aa <is_touch_alarm+0x82>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <is_touch_alarm+0x84>
 80015aa:	2300      	movs	r3, #0
	}
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <displayTime>:
//lcd_ShowPicture(20, 235, 50, 50, bell_sign);

void displayTime(){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 80015ba:	4b44      	ldr	r3, [pc, #272]	@ (80016cc <displayTime+0x118>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	2318      	movs	r3, #24
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	2300      	movs	r3, #0
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2302      	movs	r3, #2
 80015d0:	2164      	movs	r1, #100	@ 0x64
 80015d2:	2046      	movs	r0, #70	@ 0x46
 80015d4:	f001 fc66 	bl	8002ea4 <lcd_ShowIntNum>
//	lcd_ShowStr(95, 100, ":", GREEN, BLACK, 24, 1);
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80015d8:	4b3d      	ldr	r3, [pc, #244]	@ (80016d0 <displayTime+0x11c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	2318      	movs	r3, #24
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	2300      	movs	r3, #0
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2302      	movs	r3, #2
 80015ee:	2164      	movs	r1, #100	@ 0x64
 80015f0:	206e      	movs	r0, #110	@ 0x6e
 80015f2:	f001 fc57 	bl	8002ea4 <lcd_ShowIntNum>
//	lcd_ShowStr(135, 100, ":", GREEN, BLACK, 24, 1);
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80015f6:	4b37      	ldr	r3, [pc, #220]	@ (80016d4 <displayTime+0x120>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	2318      	movs	r3, #24
 80015fe:	9302      	str	r3, [sp, #8]
 8001600:	2300      	movs	r3, #0
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2302      	movs	r3, #2
 800160c:	2164      	movs	r1, #100	@ 0x64
 800160e:	2096      	movs	r0, #150	@ 0x96
 8001610:	f001 fc48 	bl	8002ea4 <lcd_ShowIntNum>
//	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001614:	4b30      	ldr	r3, [pc, #192]	@ (80016d8 <displayTime+0x124>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	2318      	movs	r3, #24
 800161c:	9302      	str	r3, [sp, #8]
 800161e:	2300      	movs	r3, #0
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2302      	movs	r3, #2
 800162a:	2182      	movs	r1, #130	@ 0x82
 800162c:	2046      	movs	r0, #70	@ 0x46
 800162e:	f001 fc39 	bl	8002ea4 <lcd_ShowIntNum>
	lcd_ShowChar(95, 130, '/', YELLOW, BLACK, 24, 0);
 8001632:	2300      	movs	r3, #0
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	2318      	movs	r3, #24
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	2300      	movs	r3, #0
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001642:	222f      	movs	r2, #47	@ 0x2f
 8001644:	2182      	movs	r1, #130	@ 0x82
 8001646:	205f      	movs	r0, #95	@ 0x5f
 8001648:	f001 fb40 	bl	8002ccc <lcd_ShowChar>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 800164c:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <displayTime+0x128>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	2318      	movs	r3, #24
 8001654:	9302      	str	r3, [sp, #8]
 8001656:	2300      	movs	r3, #0
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2302      	movs	r3, #2
 8001662:	2182      	movs	r1, #130	@ 0x82
 8001664:	206e      	movs	r0, #110	@ 0x6e
 8001666:	f001 fc1d 	bl	8002ea4 <lcd_ShowIntNum>
	lcd_ShowChar(135, 130, '/', YELLOW, BLACK, 24, 0);
 800166a:	2300      	movs	r3, #0
 800166c:	9302      	str	r3, [sp, #8]
 800166e:	2318      	movs	r3, #24
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	2300      	movs	r3, #0
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800167a:	222f      	movs	r2, #47	@ 0x2f
 800167c:	2182      	movs	r1, #130	@ 0x82
 800167e:	2087      	movs	r0, #135	@ 0x87
 8001680:	f001 fb24 	bl	8002ccc <lcd_ShowChar>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001684:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <displayTime+0x12c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	2318      	movs	r3, #24
 800168c:	9302      	str	r3, [sp, #8]
 800168e:	2300      	movs	r3, #0
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2302      	movs	r3, #2
 800169a:	2182      	movs	r1, #130	@ 0x82
 800169c:	2096      	movs	r0, #150	@ 0x96
 800169e:	f001 fc01 	bl	8002ea4 <lcd_ShowIntNum>
	lcd_ShowStr(25, 130, daysOfWeek[ds3231_day-1], YELLOW, BLACK, 24, 0);
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <displayTime+0x130>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	4a0f      	ldr	r2, [pc, #60]	@ (80016e8 <displayTime+0x134>)
 80016aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016ae:	2300      	movs	r3, #0
 80016b0:	9302      	str	r3, [sp, #8]
 80016b2:	2318      	movs	r3, #24
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	2300      	movs	r3, #0
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80016be:	2182      	movs	r1, #130	@ 0x82
 80016c0:	2019      	movs	r0, #25
 80016c2:	f001 ff3f 	bl	8003544 <lcd_ShowStr>
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200003b2 	.word	0x200003b2
 80016d0:	200003b3 	.word	0x200003b3
 80016d4:	200003b4 	.word	0x200003b4
 80016d8:	200003b5 	.word	0x200003b5
 80016dc:	200003b7 	.word	0x200003b7
 80016e0:	200003b8 	.word	0x200003b8
 80016e4:	200003b6 	.word	0x200003b6
 80016e8:	20000000 	.word	0x20000000

080016ec <fsm_machine_mode>:
	lcd_ShowIntNum(70, 130, ds3231_date, 2, BLACK, BLACK, 24);
	lcd_ShowIntNum(110, 130, ds3231_month, 2, BLACK, BLACK, 24);
	lcd_ShowIntNum(150, 130, ds3231_year, 2, BLACK, BLACK, 24);
}

void fsm_machine_mode(){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af04      	add	r7, sp, #16
	switch (mode) {
 80016f2:	4bb6      	ldr	r3, [pc, #728]	@ (80019cc <fsm_machine_mode+0x2e0>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	f200 8165 	bhi.w	80019c6 <fsm_machine_mode+0x2da>
 80016fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001704 <fsm_machine_mode+0x18>)
 80016fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001702:	bf00      	nop
 8001704:	08001715 	.word	0x08001715
 8001708:	08001877 	.word	0x08001877
 800170c:	080018b7 	.word	0x080018b7
 8001710:	0800180b 	.word	0x0800180b
		case NORMAL_MODE:
			ds3231_ReadTime();
 8001714:	f7ff fe2c 	bl	8001370 <ds3231_ReadTime>
			fsm_colon();
 8001718:	f000 fd0a 	bl	8002130 <fsm_colon>
			displayTime();
 800171c:	f7ff ff4a 	bl	80015b4 <displayTime>
			update_clock();
 8001720:	f000 ff8a 	bl	8002638 <update_clock>
//			lcd_StrCenter(0,2,"TIMER_MODE",BLACK,BLACK,16,1);
//			lcd_StrCenter(0,2,"NORMAL_MODE",WHITE,BLUE,16,1);
			if(button_count[15] == 1 || is_touch_alarm()){
 8001724:	4baa      	ldr	r3, [pc, #680]	@ (80019d0 <fsm_machine_mode+0x2e4>)
 8001726:	8bdb      	ldrh	r3, [r3, #30]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d004      	beq.n	8001736 <fsm_machine_mode+0x4a>
 800172c:	f7ff fefc 	bl	8001528 <is_touch_alarm>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d027      	beq.n	8001786 <fsm_machine_mode+0x9a>
				alarm_state = 1-alarm_state;
 8001736:	4ba7      	ldr	r3, [pc, #668]	@ (80019d4 <fsm_machine_mode+0x2e8>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	f1c3 0301 	rsb	r3, r3, #1
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4ba4      	ldr	r3, [pc, #656]	@ (80019d4 <fsm_machine_mode+0x2e8>)
 8001742:	701a      	strb	r2, [r3, #0]
				if(alarm_state == 1){
 8001744:	4ba3      	ldr	r3, [pc, #652]	@ (80019d4 <fsm_machine_mode+0x2e8>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d10e      	bne.n	800176a <fsm_machine_mode+0x7e>
					lcd_ShowStr(0, 280, "Alarm ON ", RED, BLACK, 24, 0);
 800174c:	2300      	movs	r3, #0
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	2318      	movs	r3, #24
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	2300      	movs	r3, #0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800175c:	4a9e      	ldr	r2, [pc, #632]	@ (80019d8 <fsm_machine_mode+0x2ec>)
 800175e:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001762:	2000      	movs	r0, #0
 8001764:	f001 feee 	bl	8003544 <lcd_ShowStr>
 8001768:	e00d      	b.n	8001786 <fsm_machine_mode+0x9a>
				}else{
					lcd_ShowStr(0, 280, "Alarm OFF", WHITE, BLACK, 24, 0);
 800176a:	2300      	movs	r3, #0
 800176c:	9302      	str	r3, [sp, #8]
 800176e:	2318      	movs	r3, #24
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	2300      	movs	r3, #0
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800177a:	4a98      	ldr	r2, [pc, #608]	@ (80019dc <fsm_machine_mode+0x2f0>)
 800177c:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001780:	2000      	movs	r0, #0
 8001782:	f001 fedf 	bl	8003544 <lcd_ShowStr>
				}
			}
			if(ds3231_min == ds3231_alarm_min && ds3231_hours == ds3231_alarm_hour && alarm_state == 1){
 8001786:	4b96      	ldr	r3, [pc, #600]	@ (80019e0 <fsm_machine_mode+0x2f4>)
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	4b96      	ldr	r3, [pc, #600]	@ (80019e4 <fsm_machine_mode+0x2f8>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d10c      	bne.n	80017ac <fsm_machine_mode+0xc0>
 8001792:	4b95      	ldr	r3, [pc, #596]	@ (80019e8 <fsm_machine_mode+0x2fc>)
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	4b95      	ldr	r3, [pc, #596]	@ (80019ec <fsm_machine_mode+0x300>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d106      	bne.n	80017ac <fsm_machine_mode+0xc0>
 800179e:	4b8d      	ldr	r3, [pc, #564]	@ (80019d4 <fsm_machine_mode+0x2e8>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d102      	bne.n	80017ac <fsm_machine_mode+0xc0>
				mode = ALARM_MODE;
 80017a6:	4b89      	ldr	r3, [pc, #548]	@ (80019cc <fsm_machine_mode+0x2e0>)
 80017a8:	2203      	movs	r2, #3
 80017aa:	701a      	strb	r2, [r3, #0]
			}
			led7_SetDigit(alarm_state, 2, 0);
 80017ac:	4b89      	ldr	r3, [pc, #548]	@ (80019d4 <fsm_machine_mode+0x2e8>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2200      	movs	r2, #0
 80017b2:	2102      	movs	r1, #2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f001 fff3 	bl	80037a0 <led7_SetDigit>

			if(touch_IsTouched()){
 80017ba:	f003 fce9 	bl	8005190 <touch_IsTouched>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <fsm_machine_mode+0xe6>
				mode = SET_TIME_MODE;
 80017c4:	4b81      	ldr	r3, [pc, #516]	@ (80019cc <fsm_machine_mode+0x2e0>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin);
 80017ca:	2120      	movs	r1, #32
 80017cc:	4888      	ldr	r0, [pc, #544]	@ (80019f0 <fsm_machine_mode+0x304>)
 80017ce:	f005 f8ee 	bl	80069ae <HAL_GPIO_TogglePin>
			}

			if(button_count[0] == 1){
 80017d2:	4b7f      	ldr	r3, [pc, #508]	@ (80019d0 <fsm_machine_mode+0x2e4>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	f040 8126 	bne.w	8001a28 <fsm_machine_mode+0x33c>
				mode = SET_TIME_MODE;
 80017dc:	4b7b      	ldr	r3, [pc, #492]	@ (80019cc <fsm_machine_mode+0x2e0>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
				mode_set_time = MIN_MODE;
 80017e2:	4b84      	ldr	r3, [pc, #528]	@ (80019f4 <fsm_machine_mode+0x308>)
 80017e4:	220b      	movs	r2, #11
 80017e6:	701a      	strb	r2, [r3, #0]
//				lcd_StrCenter(0,2,"NORMAL_MODE",BLACK,BLACK,16,1);
				lcd_Clear(BLACK);
 80017e8:	2000      	movs	r0, #0
 80017ea:	f001 f963 	bl	8002ab4 <lcd_Clear>
				lcd_StrCenter(0,2,"SET_TIME_MODE",WHITE,BLACK,16,0);
 80017ee:	2300      	movs	r3, #0
 80017f0:	9302      	str	r3, [sp, #8]
 80017f2:	2310      	movs	r3, #16
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	2300      	movs	r3, #0
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017fe:	4a7e      	ldr	r2, [pc, #504]	@ (80019f8 <fsm_machine_mode+0x30c>)
 8001800:	2102      	movs	r1, #2
 8001802:	2000      	movs	r0, #0
 8001804:	f001 ff02 	bl	800360c <lcd_StrCenter>
			}
			break;
 8001808:	e10e      	b.n	8001a28 <fsm_machine_mode+0x33c>
		case ALARM_MODE:
			led7_SetDigit(2, 1, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2101      	movs	r1, #1
 800180e:	2002      	movs	r0, #2
 8001810:	f001 ffc6 	bl	80037a0 <led7_SetDigit>
			ds3231_ReadTime();
 8001814:	f7ff fdac 	bl	8001370 <ds3231_ReadTime>
			fsm_colon();
 8001818:	f000 fc8a 	bl	8002130 <fsm_colon>
			displayTime();
 800181c:	f7ff feca 	bl	80015b4 <displayTime>
			play_note_in_main(note, dur, sizeof(dur)/4);
 8001820:	223e      	movs	r2, #62	@ 0x3e
 8001822:	4976      	ldr	r1, [pc, #472]	@ (80019fc <fsm_machine_mode+0x310>)
 8001824:	4876      	ldr	r0, [pc, #472]	@ (8001a00 <fsm_machine_mode+0x314>)
 8001826:	f002 f9c7 	bl	8003bb8 <play_note_in_main>
			if(ds3231_min != ds3231_alarm_min || button_count[15] == 1){
 800182a:	4b6d      	ldr	r3, [pc, #436]	@ (80019e0 <fsm_machine_mode+0x2f4>)
 800182c:	781a      	ldrb	r2, [r3, #0]
 800182e:	4b6d      	ldr	r3, [pc, #436]	@ (80019e4 <fsm_machine_mode+0x2f8>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d104      	bne.n	8001840 <fsm_machine_mode+0x154>
 8001836:	4b66      	ldr	r3, [pc, #408]	@ (80019d0 <fsm_machine_mode+0x2e4>)
 8001838:	8bdb      	ldrh	r3, [r3, #30]
 800183a:	2b01      	cmp	r3, #1
 800183c:	f040 80f6 	bne.w	8001a2c <fsm_machine_mode+0x340>
				mode = NORMAL_MODE;
 8001840:	4b62      	ldr	r3, [pc, #392]	@ (80019cc <fsm_machine_mode+0x2e0>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
				alarm_state = 1 - alarm_state;
 8001846:	4b63      	ldr	r3, [pc, #396]	@ (80019d4 <fsm_machine_mode+0x2e8>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f1c3 0301 	rsb	r3, r3, #1
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b60      	ldr	r3, [pc, #384]	@ (80019d4 <fsm_machine_mode+0x2e8>)
 8001852:	701a      	strb	r2, [r3, #0]
				stop_buzzer();
 8001854:	f002 f9a4 	bl	8003ba0 <stop_buzzer>
				lcd_ShowStr(0, 280, "Alarm OFF", WHITE, BLACK, 24, 0);
 8001858:	2300      	movs	r3, #0
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	2318      	movs	r3, #24
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	2300      	movs	r3, #0
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001868:	4a5c      	ldr	r2, [pc, #368]	@ (80019dc <fsm_machine_mode+0x2f0>)
 800186a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800186e:	2000      	movs	r0, #0
 8001870:	f001 fe68 	bl	8003544 <lcd_ShowStr>
			}
			break;
 8001874:	e0da      	b.n	8001a2c <fsm_machine_mode+0x340>
		case SET_TIME_MODE:
			fsm_set_time();
 8001876:	f000 f911 	bl	8001a9c <fsm_set_time>
			if(button_count[0] == 1){
 800187a:	4b55      	ldr	r3, [pc, #340]	@ (80019d0 <fsm_machine_mode+0x2e4>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	f040 80d6 	bne.w	8001a30 <fsm_machine_mode+0x344>
				mode = TIMER_MODE;
 8001884:	4b51      	ldr	r3, [pc, #324]	@ (80019cc <fsm_machine_mode+0x2e0>)
 8001886:	2202      	movs	r2, #2
 8001888:	701a      	strb	r2, [r3, #0]
				mode_timer = MIN_MODE;
 800188a:	4b5e      	ldr	r3, [pc, #376]	@ (8001a04 <fsm_machine_mode+0x318>)
 800188c:	220b      	movs	r2, #11
 800188e:	701a      	strb	r2, [r3, #0]
//				lcd_StrCenter(0,2,"SET_TIME_MODE",BLACK,BLACK,16,1);
				lcd_Clear(BLACK);
 8001890:	2000      	movs	r0, #0
 8001892:	f001 f90f 	bl	8002ab4 <lcd_Clear>
				lcd_StrCenter(0,2,"  TIMER_MODE  ",WHITE,BLACK,16,0);
 8001896:	2300      	movs	r3, #0
 8001898:	9302      	str	r3, [sp, #8]
 800189a:	2310      	movs	r3, #16
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	2300      	movs	r3, #0
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018a6:	4a58      	ldr	r2, [pc, #352]	@ (8001a08 <fsm_machine_mode+0x31c>)
 80018a8:	2102      	movs	r1, #2
 80018aa:	2000      	movs	r0, #0
 80018ac:	f001 feae 	bl	800360c <lcd_StrCenter>
				update_Alarm();
 80018b0:	f7ff fe26 	bl	8001500 <update_Alarm>
			}
			break;
 80018b4:	e0bc      	b.n	8001a30 <fsm_machine_mode+0x344>
		case TIMER_MODE:
			lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
 80018b6:	4b55      	ldr	r3, [pc, #340]	@ (8001a0c <fsm_machine_mode+0x320>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	2318      	movs	r3, #24
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	2300      	movs	r3, #0
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	2300      	movs	r3, #0
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2302      	movs	r3, #2
 80018ca:	2164      	movs	r1, #100	@ 0x64
 80018cc:	2096      	movs	r0, #150	@ 0x96
 80018ce:	f001 fae9 	bl	8002ea4 <lcd_ShowIntNum>
			lcd_ShowIntNum(20, 130, ds3231_day, 2, BLACK, BLACK, 24);
 80018d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001a10 <fsm_machine_mode+0x324>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	2318      	movs	r3, #24
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	2300      	movs	r3, #0
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	2300      	movs	r3, #0
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2302      	movs	r3, #2
 80018e6:	2182      	movs	r1, #130	@ 0x82
 80018e8:	2014      	movs	r0, #20
 80018ea:	f001 fadb 	bl	8002ea4 <lcd_ShowIntNum>
			lcd_ShowIntNum(70, 130, ds3231_date, 2, BLACK, BLACK, 24);
 80018ee:	4b49      	ldr	r3, [pc, #292]	@ (8001a14 <fsm_machine_mode+0x328>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	2318      	movs	r3, #24
 80018f6:	9302      	str	r3, [sp, #8]
 80018f8:	2300      	movs	r3, #0
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	2300      	movs	r3, #0
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2302      	movs	r3, #2
 8001902:	2182      	movs	r1, #130	@ 0x82
 8001904:	2046      	movs	r0, #70	@ 0x46
 8001906:	f001 facd 	bl	8002ea4 <lcd_ShowIntNum>
			lcd_ShowIntNum(110, 130, ds3231_month, 2, BLACK, BLACK, 24);
 800190a:	4b43      	ldr	r3, [pc, #268]	@ (8001a18 <fsm_machine_mode+0x32c>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	2318      	movs	r3, #24
 8001912:	9302      	str	r3, [sp, #8]
 8001914:	2300      	movs	r3, #0
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	2300      	movs	r3, #0
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2302      	movs	r3, #2
 800191e:	2182      	movs	r1, #130	@ 0x82
 8001920:	206e      	movs	r0, #110	@ 0x6e
 8001922:	f001 fabf 	bl	8002ea4 <lcd_ShowIntNum>
			lcd_ShowIntNum(150, 130, ds3231_year, 2, BLACK, BLACK, 24);
 8001926:	4b3d      	ldr	r3, [pc, #244]	@ (8001a1c <fsm_machine_mode+0x330>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	2318      	movs	r3, #24
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	2300      	movs	r3, #0
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2300      	movs	r3, #0
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2302      	movs	r3, #2
 800193a:	2182      	movs	r1, #130	@ 0x82
 800193c:	2096      	movs	r0, #150	@ 0x96
 800193e:	f001 fab1 	bl	8002ea4 <lcd_ShowIntNum>
			fsm_timer();
 8001942:	f000 fc5f 	bl	8002204 <fsm_timer>
			if(button_count[0] == 1){
 8001946:	4b22      	ldr	r3, [pc, #136]	@ (80019d0 <fsm_machine_mode+0x2e4>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d172      	bne.n	8001a34 <fsm_machine_mode+0x348>
				mode = NORMAL_MODE;
 800194e:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <fsm_machine_mode+0x2e0>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
				lcd_StrCenter(0,2,"NORMAL_MODE",WHITE,BLACK,16,0);
 8001954:	2300      	movs	r3, #0
 8001956:	9302      	str	r3, [sp, #8]
 8001958:	2310      	movs	r3, #16
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	2300      	movs	r3, #0
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001964:	4a2e      	ldr	r2, [pc, #184]	@ (8001a20 <fsm_machine_mode+0x334>)
 8001966:	2102      	movs	r1, #2
 8001968:	2000      	movs	r0, #0
 800196a:	f001 fe4f 	bl	800360c <lcd_StrCenter>
				lcd_ShowPicture(20, 235, 50, 50, bell_sign);
 800196e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a24 <fsm_machine_mode+0x338>)
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2332      	movs	r3, #50	@ 0x32
 8001974:	2232      	movs	r2, #50	@ 0x32
 8001976:	21eb      	movs	r1, #235	@ 0xeb
 8001978:	2014      	movs	r0, #20
 800197a:	f001 fb11 	bl	8002fa0 <lcd_ShowPicture>
				if(alarm_state == 1){
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <fsm_machine_mode+0x2e8>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d10e      	bne.n	80019a4 <fsm_machine_mode+0x2b8>
					lcd_ShowStr(0, 280, "Alarm ON ", RED, BLACK, 24, 0);
 8001986:	2300      	movs	r3, #0
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	2318      	movs	r3, #24
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	2300      	movs	r3, #0
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001996:	4a10      	ldr	r2, [pc, #64]	@ (80019d8 <fsm_machine_mode+0x2ec>)
 8001998:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800199c:	2000      	movs	r0, #0
 800199e:	f001 fdd1 	bl	8003544 <lcd_ShowStr>
 80019a2:	e00d      	b.n	80019c0 <fsm_machine_mode+0x2d4>
				}else{
					lcd_ShowStr(0, 280, "Alarm OFF", WHITE, BLACK, 24, 0);
 80019a4:	2300      	movs	r3, #0
 80019a6:	9302      	str	r3, [sp, #8]
 80019a8:	2318      	movs	r3, #24
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	2300      	movs	r3, #0
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019b4:	4a09      	ldr	r2, [pc, #36]	@ (80019dc <fsm_machine_mode+0x2f0>)
 80019b6:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80019ba:	2000      	movs	r0, #0
 80019bc:	f001 fdc2 	bl	8003544 <lcd_ShowStr>
				}
				update_Alarm();
 80019c0:	f7ff fd9e 	bl	8001500 <update_Alarm>
			}
			break;
 80019c4:	e036      	b.n	8001a34 <fsm_machine_mode+0x348>
		default:
			break;
 80019c6:	bf00      	nop
 80019c8:	e035      	b.n	8001a36 <fsm_machine_mode+0x34a>
 80019ca:	bf00      	nop
 80019cc:	200003bb 	.word	0x200003bb
 80019d0:	20000384 	.word	0x20000384
 80019d4:	200003bc 	.word	0x200003bc
 80019d8:	0800b904 	.word	0x0800b904
 80019dc:	0800b910 	.word	0x0800b910
 80019e0:	200003b3 	.word	0x200003b3
 80019e4:	200003ba 	.word	0x200003ba
 80019e8:	200003b2 	.word	0x200003b2
 80019ec:	200003b9 	.word	0x200003b9
 80019f0:	40021000 	.word	0x40021000
 80019f4:	200003bd 	.word	0x200003bd
 80019f8:	0800b91c 	.word	0x0800b91c
 80019fc:	20000124 	.word	0x20000124
 8001a00:	2000002c 	.word	0x2000002c
 8001a04:	200003bf 	.word	0x200003bf
 8001a08:	0800b92c 	.word	0x0800b92c
 8001a0c:	200003b4 	.word	0x200003b4
 8001a10:	200003b6 	.word	0x200003b6
 8001a14:	200003b5 	.word	0x200003b5
 8001a18:	200003b7 	.word	0x200003b7
 8001a1c:	200003b8 	.word	0x200003b8
 8001a20:	0800b93c 	.word	0x0800b93c
 8001a24:	0800ba50 	.word	0x0800ba50
			break;
 8001a28:	bf00      	nop
 8001a2a:	e004      	b.n	8001a36 <fsm_machine_mode+0x34a>
			break;
 8001a2c:	bf00      	nop
 8001a2e:	e002      	b.n	8001a36 <fsm_machine_mode+0x34a>
			break;
 8001a30:	bf00      	nop
 8001a32:	e000      	b.n	8001a36 <fsm_machine_mode+0x34a>
			break;
 8001a34:	bf00      	nop
	}

}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <is_leap_year>:
#include "fsm_set_time.h"

uint8_t mode_set_time = 0;
uint8_t toggle = 0;

int is_leap_year(int year){
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	if((year % 4 ==0 && year % 100 !=0) || year%400 == 0)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10c      	bne.n	8001a68 <is_leap_year+0x2c>
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <is_leap_year+0x5c>)
 8001a52:	fb83 1302 	smull	r1, r3, r3, r2
 8001a56:	1159      	asrs	r1, r3, #5
 8001a58:	17d3      	asrs	r3, r2, #31
 8001a5a:	1acb      	subs	r3, r1, r3
 8001a5c:	2164      	movs	r1, #100	@ 0x64
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10d      	bne.n	8001a84 <is_leap_year+0x48>
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <is_leap_year+0x5c>)
 8001a6c:	fb83 1302 	smull	r1, r3, r3, r2
 8001a70:	11d9      	asrs	r1, r3, #7
 8001a72:	17d3      	asrs	r3, r2, #31
 8001a74:	1acb      	subs	r3, r1, r3
 8001a76:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001a7a:	fb01 f303 	mul.w	r3, r1, r3
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <is_leap_year+0x4c>
		return 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <is_leap_year+0x4e>
	return 0;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	51eb851f 	.word	0x51eb851f

08001a9c <fsm_set_time>:

void fsm_set_time(){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af04      	add	r7, sp, #16
	switch (mode_set_time) {
 8001aa2:	4b9a      	ldr	r3, [pc, #616]	@ (8001d0c <fsm_set_time+0x270>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	3b0b      	subs	r3, #11
 8001aa8:	2b05      	cmp	r3, #5
 8001aaa:	f200 831f 	bhi.w	80020ec <fsm_set_time+0x650>
 8001aae:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab4 <fsm_set_time+0x18>)
 8001ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab4:	08001acd 	.word	0x08001acd
 8001ab8:	08001b9f 	.word	0x08001b9f
 8001abc:	08001c71 	.word	0x08001c71
 8001ac0:	08001d29 	.word	0x08001d29
 8001ac4:	08001ecf 	.word	0x08001ecf
 8001ac8:	08001fed 	.word	0x08001fed
		case MIN_MODE:
			if(button_count[3] == 1 || button_count[3] >= 40 && button_count[3] % 4 == 1){
 8001acc:	4b90      	ldr	r3, [pc, #576]	@ (8001d10 <fsm_set_time+0x274>)
 8001ace:	88db      	ldrh	r3, [r3, #6]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d00a      	beq.n	8001aea <fsm_set_time+0x4e>
 8001ad4:	4b8e      	ldr	r3, [pc, #568]	@ (8001d10 <fsm_set_time+0x274>)
 8001ad6:	88db      	ldrh	r3, [r3, #6]
 8001ad8:	2b27      	cmp	r3, #39	@ 0x27
 8001ada:	d90c      	bls.n	8001af6 <fsm_set_time+0x5a>
 8001adc:	4b8c      	ldr	r3, [pc, #560]	@ (8001d10 <fsm_set_time+0x274>)
 8001ade:	88db      	ldrh	r3, [r3, #6]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d105      	bne.n	8001af6 <fsm_set_time+0x5a>
				ds3231_min++;
 8001aea:	4b8a      	ldr	r3, [pc, #552]	@ (8001d14 <fsm_set_time+0x278>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4b88      	ldr	r3, [pc, #544]	@ (8001d14 <fsm_set_time+0x278>)
 8001af4:	701a      	strb	r2, [r3, #0]
			}
			if(button_count[7] == 1 || button_count[7] >= 40 && button_count[7] % 4 == 1){
 8001af6:	4b86      	ldr	r3, [pc, #536]	@ (8001d10 <fsm_set_time+0x274>)
 8001af8:	89db      	ldrh	r3, [r3, #14]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d00a      	beq.n	8001b14 <fsm_set_time+0x78>
 8001afe:	4b84      	ldr	r3, [pc, #528]	@ (8001d10 <fsm_set_time+0x274>)
 8001b00:	89db      	ldrh	r3, [r3, #14]
 8001b02:	2b27      	cmp	r3, #39	@ 0x27
 8001b04:	d913      	bls.n	8001b2e <fsm_set_time+0x92>
 8001b06:	4b82      	ldr	r3, [pc, #520]	@ (8001d10 <fsm_set_time+0x274>)
 8001b08:	89db      	ldrh	r3, [r3, #14]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d10c      	bne.n	8001b2e <fsm_set_time+0x92>
				ds3231_min--;
 8001b14:	4b7f      	ldr	r3, [pc, #508]	@ (8001d14 <fsm_set_time+0x278>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b7d      	ldr	r3, [pc, #500]	@ (8001d14 <fsm_set_time+0x278>)
 8001b1e:	701a      	strb	r2, [r3, #0]
				if(ds3231_min == 0)
 8001b20:	4b7c      	ldr	r3, [pc, #496]	@ (8001d14 <fsm_set_time+0x278>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <fsm_set_time+0x92>
					ds3231_min = 59;
 8001b28:	4b7a      	ldr	r3, [pc, #488]	@ (8001d14 <fsm_set_time+0x278>)
 8001b2a:	223b      	movs	r2, #59	@ 0x3b
 8001b2c:	701a      	strb	r2, [r3, #0]
			}
			if(ds3231_min >= 60){
 8001b2e:	4b79      	ldr	r3, [pc, #484]	@ (8001d14 <fsm_set_time+0x278>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b3b      	cmp	r3, #59	@ 0x3b
 8001b34:	d902      	bls.n	8001b3c <fsm_set_time+0xa0>
				ds3231_min = 0;
 8001b36:	4b77      	ldr	r3, [pc, #476]	@ (8001d14 <fsm_set_time+0x278>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
			}

			if(flag_timer3 == 1){
 8001b3c:	4b76      	ldr	r3, [pc, #472]	@ (8001d18 <fsm_set_time+0x27c>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d11d      	bne.n	8001b80 <fsm_set_time+0xe4>
				if(toggle == 1){
 8001b44:	4b75      	ldr	r3, [pc, #468]	@ (8001d1c <fsm_set_time+0x280>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <fsm_set_time+0xbc>
					toggle = 0;
 8001b4c:	4b73      	ldr	r3, [pc, #460]	@ (8001d1c <fsm_set_time+0x280>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
					displayTime();
 8001b52:	f7ff fd2f 	bl	80015b4 <displayTime>
 8001b56:	e010      	b.n	8001b7a <fsm_set_time+0xde>
				}else{
					lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, BLACK, 24);
 8001b58:	4b6e      	ldr	r3, [pc, #440]	@ (8001d14 <fsm_set_time+0x278>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2318      	movs	r3, #24
 8001b60:	9302      	str	r3, [sp, #8]
 8001b62:	2300      	movs	r3, #0
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	2300      	movs	r3, #0
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	2164      	movs	r1, #100	@ 0x64
 8001b6e:	206e      	movs	r0, #110	@ 0x6e
 8001b70:	f001 f998 	bl	8002ea4 <lcd_ShowIntNum>
					toggle = 1;
 8001b74:	4b69      	ldr	r3, [pc, #420]	@ (8001d1c <fsm_set_time+0x280>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
				}
				setTimer3(50);
 8001b7a:	2032      	movs	r0, #50	@ 0x32
 8001b7c:	f002 f896 	bl	8003cac <setTimer3>
			}
			if(button_count[12] == 1){
 8001b80:	4b63      	ldr	r3, [pc, #396]	@ (8001d10 <fsm_set_time+0x274>)
 8001b82:	8b1b      	ldrh	r3, [r3, #24]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	f040 82b3 	bne.w	80020f0 <fsm_set_time+0x654>
				mode_set_time = HOUR_MODE;
 8001b8a:	4b60      	ldr	r3, [pc, #384]	@ (8001d0c <fsm_set_time+0x270>)
 8001b8c:	220c      	movs	r2, #12
 8001b8e:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_MIN, ds3231_min);
 8001b90:	4b60      	ldr	r3, [pc, #384]	@ (8001d14 <fsm_set_time+0x278>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	2001      	movs	r0, #1
 8001b98:	f7ff fbc8 	bl	800132c <ds3231_Write>
			}
			break;
 8001b9c:	e2a8      	b.n	80020f0 <fsm_set_time+0x654>
		case HOUR_MODE:
			if(button_count[3] == 1 || button_count[3] >= 40 && button_count[3] % 4 == 1){
 8001b9e:	4b5c      	ldr	r3, [pc, #368]	@ (8001d10 <fsm_set_time+0x274>)
 8001ba0:	88db      	ldrh	r3, [r3, #6]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d00a      	beq.n	8001bbc <fsm_set_time+0x120>
 8001ba6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d10 <fsm_set_time+0x274>)
 8001ba8:	88db      	ldrh	r3, [r3, #6]
 8001baa:	2b27      	cmp	r3, #39	@ 0x27
 8001bac:	d90c      	bls.n	8001bc8 <fsm_set_time+0x12c>
 8001bae:	4b58      	ldr	r3, [pc, #352]	@ (8001d10 <fsm_set_time+0x274>)
 8001bb0:	88db      	ldrh	r3, [r3, #6]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <fsm_set_time+0x12c>
				ds3231_hours++;
 8001bbc:	4b58      	ldr	r3, [pc, #352]	@ (8001d20 <fsm_set_time+0x284>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	4b56      	ldr	r3, [pc, #344]	@ (8001d20 <fsm_set_time+0x284>)
 8001bc6:	701a      	strb	r2, [r3, #0]
			}
			if(button_count[7] == 1 || button_count[7] >= 40 && button_count[7] % 4 == 1){
 8001bc8:	4b51      	ldr	r3, [pc, #324]	@ (8001d10 <fsm_set_time+0x274>)
 8001bca:	89db      	ldrh	r3, [r3, #14]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d00a      	beq.n	8001be6 <fsm_set_time+0x14a>
 8001bd0:	4b4f      	ldr	r3, [pc, #316]	@ (8001d10 <fsm_set_time+0x274>)
 8001bd2:	89db      	ldrh	r3, [r3, #14]
 8001bd4:	2b27      	cmp	r3, #39	@ 0x27
 8001bd6:	d913      	bls.n	8001c00 <fsm_set_time+0x164>
 8001bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8001d10 <fsm_set_time+0x274>)
 8001bda:	89db      	ldrh	r3, [r3, #14]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d10c      	bne.n	8001c00 <fsm_set_time+0x164>
				ds3231_hours--;
 8001be6:	4b4e      	ldr	r3, [pc, #312]	@ (8001d20 <fsm_set_time+0x284>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4b4c      	ldr	r3, [pc, #304]	@ (8001d20 <fsm_set_time+0x284>)
 8001bf0:	701a      	strb	r2, [r3, #0]
				if(ds3231_hours == 0)
 8001bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8001d20 <fsm_set_time+0x284>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <fsm_set_time+0x164>
					ds3231_hours = 23;
 8001bfa:	4b49      	ldr	r3, [pc, #292]	@ (8001d20 <fsm_set_time+0x284>)
 8001bfc:	2217      	movs	r2, #23
 8001bfe:	701a      	strb	r2, [r3, #0]
			}
			if(ds3231_hours >= 24){
 8001c00:	4b47      	ldr	r3, [pc, #284]	@ (8001d20 <fsm_set_time+0x284>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b17      	cmp	r3, #23
 8001c06:	d902      	bls.n	8001c0e <fsm_set_time+0x172>
				ds3231_hours = 0;
 8001c08:	4b45      	ldr	r3, [pc, #276]	@ (8001d20 <fsm_set_time+0x284>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
			}

			if(flag_timer3 == 1){
 8001c0e:	4b42      	ldr	r3, [pc, #264]	@ (8001d18 <fsm_set_time+0x27c>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d11d      	bne.n	8001c52 <fsm_set_time+0x1b6>
				if(toggle == 1){
 8001c16:	4b41      	ldr	r3, [pc, #260]	@ (8001d1c <fsm_set_time+0x280>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d105      	bne.n	8001c2a <fsm_set_time+0x18e>
					toggle = 0;
 8001c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d1c <fsm_set_time+0x280>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
					displayTime();
 8001c24:	f7ff fcc6 	bl	80015b4 <displayTime>
 8001c28:	e010      	b.n	8001c4c <fsm_set_time+0x1b0>
				}else{
					lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, BLACK, 24);
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d20 <fsm_set_time+0x284>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2318      	movs	r3, #24
 8001c32:	9302      	str	r3, [sp, #8]
 8001c34:	2300      	movs	r3, #0
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	2164      	movs	r1, #100	@ 0x64
 8001c40:	2046      	movs	r0, #70	@ 0x46
 8001c42:	f001 f92f 	bl	8002ea4 <lcd_ShowIntNum>
					toggle = 1;
 8001c46:	4b35      	ldr	r3, [pc, #212]	@ (8001d1c <fsm_set_time+0x280>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
				}
				setTimer3(50);
 8001c4c:	2032      	movs	r0, #50	@ 0x32
 8001c4e:	f002 f82d 	bl	8003cac <setTimer3>
			}
			if(button_count[12] == 1){
 8001c52:	4b2f      	ldr	r3, [pc, #188]	@ (8001d10 <fsm_set_time+0x274>)
 8001c54:	8b1b      	ldrh	r3, [r3, #24]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	f040 824c 	bne.w	80020f4 <fsm_set_time+0x658>
				mode_set_time = DATE_MODE;
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d0c <fsm_set_time+0x270>)
 8001c5e:	220e      	movs	r2, #14
 8001c60:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8001c62:	4b2f      	ldr	r3, [pc, #188]	@ (8001d20 <fsm_set_time+0x284>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	4619      	mov	r1, r3
 8001c68:	2002      	movs	r0, #2
 8001c6a:	f7ff fb5f 	bl	800132c <ds3231_Write>
			}
			break;
 8001c6e:	e241      	b.n	80020f4 <fsm_set_time+0x658>
		case DAY_MODE:
			if(button_count[3] == 1 || button_count[3] >= 40 && button_count[3] % 4 == 1){
 8001c70:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <fsm_set_time+0x274>)
 8001c72:	88db      	ldrh	r3, [r3, #6]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d00a      	beq.n	8001c8e <fsm_set_time+0x1f2>
 8001c78:	4b25      	ldr	r3, [pc, #148]	@ (8001d10 <fsm_set_time+0x274>)
 8001c7a:	88db      	ldrh	r3, [r3, #6]
 8001c7c:	2b27      	cmp	r3, #39	@ 0x27
 8001c7e:	d90c      	bls.n	8001c9a <fsm_set_time+0x1fe>
 8001c80:	4b23      	ldr	r3, [pc, #140]	@ (8001d10 <fsm_set_time+0x274>)
 8001c82:	88db      	ldrh	r3, [r3, #6]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d105      	bne.n	8001c9a <fsm_set_time+0x1fe>
				ds3231_day++;
 8001c8e:	4b25      	ldr	r3, [pc, #148]	@ (8001d24 <fsm_set_time+0x288>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <fsm_set_time+0x288>)
 8001c98:	701a      	strb	r2, [r3, #0]
			}
			if(ds3231_day > 7){
 8001c9a:	4b22      	ldr	r3, [pc, #136]	@ (8001d24 <fsm_set_time+0x288>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b07      	cmp	r3, #7
 8001ca0:	d902      	bls.n	8001ca8 <fsm_set_time+0x20c>
				ds3231_day = 1;
 8001ca2:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <fsm_set_time+0x288>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
			}

			if(flag_timer3 == 1){
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <fsm_set_time+0x27c>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d11d      	bne.n	8001cec <fsm_set_time+0x250>
				if(toggle == 1){
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d1c <fsm_set_time+0x280>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d105      	bne.n	8001cc4 <fsm_set_time+0x228>
					toggle = 0;
 8001cb8:	4b18      	ldr	r3, [pc, #96]	@ (8001d1c <fsm_set_time+0x280>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
					displayTime();
 8001cbe:	f7ff fc79 	bl	80015b4 <displayTime>
 8001cc2:	e010      	b.n	8001ce6 <fsm_set_time+0x24a>
				}else{
					lcd_ShowIntNum(20, 130, ds3231_day, 2, BLACK, BLACK, 24);
 8001cc4:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <fsm_set_time+0x288>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2318      	movs	r3, #24
 8001ccc:	9302      	str	r3, [sp, #8]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	2182      	movs	r1, #130	@ 0x82
 8001cda:	2014      	movs	r0, #20
 8001cdc:	f001 f8e2 	bl	8002ea4 <lcd_ShowIntNum>
					toggle = 1;
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d1c <fsm_set_time+0x280>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
				}
				setTimer3(50);
 8001ce6:	2032      	movs	r0, #50	@ 0x32
 8001ce8:	f001 ffe0 	bl	8003cac <setTimer3>
			}
			if(button_count[12] == 1){
 8001cec:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <fsm_set_time+0x274>)
 8001cee:	8b1b      	ldrh	r3, [r3, #24]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	f040 8201 	bne.w	80020f8 <fsm_set_time+0x65c>
				mode_set_time = DATE_MODE;
 8001cf6:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <fsm_set_time+0x270>)
 8001cf8:	220e      	movs	r2, #14
 8001cfa:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_DAY, ds3231_day);
 8001cfc:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <fsm_set_time+0x288>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4619      	mov	r1, r3
 8001d02:	2003      	movs	r0, #3
 8001d04:	f7ff fb12 	bl	800132c <ds3231_Write>
			}
			break;
 8001d08:	e1f6      	b.n	80020f8 <fsm_set_time+0x65c>
 8001d0a:	bf00      	nop
 8001d0c:	200003bd 	.word	0x200003bd
 8001d10:	20000384 	.word	0x20000384
 8001d14:	200003b3 	.word	0x200003b3
 8001d18:	20000486 	.word	0x20000486
 8001d1c:	200003be 	.word	0x200003be
 8001d20:	200003b2 	.word	0x200003b2
 8001d24:	200003b6 	.word	0x200003b6
		case DATE_MODE:
			if(button_count[3] == 1 || button_count[3] >= 40 && button_count[3] % 4 == 1){
 8001d28:	4b8c      	ldr	r3, [pc, #560]	@ (8001f5c <fsm_set_time+0x4c0>)
 8001d2a:	88db      	ldrh	r3, [r3, #6]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d00a      	beq.n	8001d46 <fsm_set_time+0x2aa>
 8001d30:	4b8a      	ldr	r3, [pc, #552]	@ (8001f5c <fsm_set_time+0x4c0>)
 8001d32:	88db      	ldrh	r3, [r3, #6]
 8001d34:	2b27      	cmp	r3, #39	@ 0x27
 8001d36:	d90c      	bls.n	8001d52 <fsm_set_time+0x2b6>
 8001d38:	4b88      	ldr	r3, [pc, #544]	@ (8001f5c <fsm_set_time+0x4c0>)
 8001d3a:	88db      	ldrh	r3, [r3, #6]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d105      	bne.n	8001d52 <fsm_set_time+0x2b6>
				ds3231_date++;
 8001d46:	4b86      	ldr	r3, [pc, #536]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b84      	ldr	r3, [pc, #528]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001d50:	701a      	strb	r2, [r3, #0]
			}
			if(button_count[7] == 1 || button_count[7] >= 40 && button_count[7] % 4 == 1){
 8001d52:	4b82      	ldr	r3, [pc, #520]	@ (8001f5c <fsm_set_time+0x4c0>)
 8001d54:	89db      	ldrh	r3, [r3, #14]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d00a      	beq.n	8001d70 <fsm_set_time+0x2d4>
 8001d5a:	4b80      	ldr	r3, [pc, #512]	@ (8001f5c <fsm_set_time+0x4c0>)
 8001d5c:	89db      	ldrh	r3, [r3, #14]
 8001d5e:	2b27      	cmp	r3, #39	@ 0x27
 8001d60:	d90c      	bls.n	8001d7c <fsm_set_time+0x2e0>
 8001d62:	4b7e      	ldr	r3, [pc, #504]	@ (8001f5c <fsm_set_time+0x4c0>)
 8001d64:	89db      	ldrh	r3, [r3, #14]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d105      	bne.n	8001d7c <fsm_set_time+0x2e0>
				ds3231_date--;
 8001d70:	4b7b      	ldr	r3, [pc, #492]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b79      	ldr	r3, [pc, #484]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001d7a:	701a      	strb	r2, [r3, #0]
			}
			if(ds3231_month == 2){
 8001d7c:	4b79      	ldr	r3, [pc, #484]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d125      	bne.n	8001dd0 <fsm_set_time+0x334>
				if(is_leap_year(ds3231_year) == 1){
 8001d84:	4b78      	ldr	r3, [pc, #480]	@ (8001f68 <fsm_set_time+0x4cc>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fe57 	bl	8001a3c <is_leap_year>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d10e      	bne.n	8001db2 <fsm_set_time+0x316>
					if(ds3231_date > 29)
 8001d94:	4b72      	ldr	r3, [pc, #456]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b1d      	cmp	r3, #29
 8001d9a:	d902      	bls.n	8001da2 <fsm_set_time+0x306>
						ds3231_date = 1;
 8001d9c:	4b70      	ldr	r3, [pc, #448]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
					if(ds3231_date == 0)
 8001da2:	4b6f      	ldr	r3, [pc, #444]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d14b      	bne.n	8001e42 <fsm_set_time+0x3a6>
						ds3231_date = 29;
 8001daa:	4b6d      	ldr	r3, [pc, #436]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001dac:	221d      	movs	r2, #29
 8001dae:	701a      	strb	r2, [r3, #0]
 8001db0:	e047      	b.n	8001e42 <fsm_set_time+0x3a6>
				}else{
					if(ds3231_date > 28)
 8001db2:	4b6b      	ldr	r3, [pc, #428]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b1c      	cmp	r3, #28
 8001db8:	d902      	bls.n	8001dc0 <fsm_set_time+0x324>
						ds3231_date = 1;
 8001dba:	4b69      	ldr	r3, [pc, #420]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
					if(ds3231_date == 0)
 8001dc0:	4b67      	ldr	r3, [pc, #412]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d13c      	bne.n	8001e42 <fsm_set_time+0x3a6>
						ds3231_date = 28;
 8001dc8:	4b65      	ldr	r3, [pc, #404]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001dca:	221c      	movs	r2, #28
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	e038      	b.n	8001e42 <fsm_set_time+0x3a6>
				}

			}else if(ds3231_month == 1 ||
 8001dd0:	4b64      	ldr	r3, [pc, #400]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d017      	beq.n	8001e08 <fsm_set_time+0x36c>
					ds3231_month == 3 ||
 8001dd8:	4b62      	ldr	r3, [pc, #392]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
			}else if(ds3231_month == 1 ||
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d013      	beq.n	8001e08 <fsm_set_time+0x36c>
					ds3231_month == 5 ||
 8001de0:	4b60      	ldr	r3, [pc, #384]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
					ds3231_month == 3 ||
 8001de4:	2b05      	cmp	r3, #5
 8001de6:	d00f      	beq.n	8001e08 <fsm_set_time+0x36c>
					ds3231_month == 7 ||
 8001de8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
					ds3231_month == 5 ||
 8001dec:	2b07      	cmp	r3, #7
 8001dee:	d00b      	beq.n	8001e08 <fsm_set_time+0x36c>
					ds3231_month == 8 ||
 8001df0:	4b5c      	ldr	r3, [pc, #368]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
					ds3231_month == 7 ||
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d007      	beq.n	8001e08 <fsm_set_time+0x36c>
					ds3231_month == 10 ||
 8001df8:	4b5a      	ldr	r3, [pc, #360]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
					ds3231_month == 8 ||
 8001dfc:	2b0a      	cmp	r3, #10
 8001dfe:	d003      	beq.n	8001e08 <fsm_set_time+0x36c>
				ds3231_month == 12){
 8001e00:	4b58      	ldr	r3, [pc, #352]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
					ds3231_month == 10 ||
 8001e04:	2b0c      	cmp	r3, #12
 8001e06:	d10e      	bne.n	8001e26 <fsm_set_time+0x38a>
				if(ds3231_date > 31){
 8001e08:	4b55      	ldr	r3, [pc, #340]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b1f      	cmp	r3, #31
 8001e0e:	d902      	bls.n	8001e16 <fsm_set_time+0x37a>
					ds3231_date = 1;
 8001e10:	4b53      	ldr	r3, [pc, #332]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
				}
				if(ds3231_date == 0)
 8001e16:	4b52      	ldr	r3, [pc, #328]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d111      	bne.n	8001e42 <fsm_set_time+0x3a6>
					ds3231_date = 31;
 8001e1e:	4b50      	ldr	r3, [pc, #320]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001e20:	221f      	movs	r2, #31
 8001e22:	701a      	strb	r2, [r3, #0]
				if(ds3231_date == 0)
 8001e24:	e00d      	b.n	8001e42 <fsm_set_time+0x3a6>
			}else{
				if(ds3231_date > 30)
 8001e26:	4b4e      	ldr	r3, [pc, #312]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b1e      	cmp	r3, #30
 8001e2c:	d902      	bls.n	8001e34 <fsm_set_time+0x398>
					ds3231_date = 1;
 8001e2e:	4b4c      	ldr	r3, [pc, #304]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
				if(ds3231_date == 0)
 8001e34:	4b4a      	ldr	r3, [pc, #296]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <fsm_set_time+0x3a6>
					ds3231_date = 30;
 8001e3c:	4b48      	ldr	r3, [pc, #288]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001e3e:	221e      	movs	r2, #30
 8001e40:	701a      	strb	r2, [r3, #0]
			}

			if(flag_timer3 == 1){
 8001e42:	4b4a      	ldr	r3, [pc, #296]	@ (8001f6c <fsm_set_time+0x4d0>)
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d11d      	bne.n	8001e86 <fsm_set_time+0x3ea>
				if(toggle == 1){
 8001e4a:	4b49      	ldr	r3, [pc, #292]	@ (8001f70 <fsm_set_time+0x4d4>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d105      	bne.n	8001e5e <fsm_set_time+0x3c2>
					toggle = 0;
 8001e52:	4b47      	ldr	r3, [pc, #284]	@ (8001f70 <fsm_set_time+0x4d4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
					displayTime();
 8001e58:	f7ff fbac 	bl	80015b4 <displayTime>
 8001e5c:	e010      	b.n	8001e80 <fsm_set_time+0x3e4>
				}else{
					lcd_ShowIntNum(70, 130, ds3231_date, 2, BLACK, BLACK, 24);
 8001e5e:	4b40      	ldr	r3, [pc, #256]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	2318      	movs	r3, #24
 8001e66:	9302      	str	r3, [sp, #8]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2302      	movs	r3, #2
 8001e72:	2182      	movs	r1, #130	@ 0x82
 8001e74:	2046      	movs	r0, #70	@ 0x46
 8001e76:	f001 f815 	bl	8002ea4 <lcd_ShowIntNum>
					toggle = 1;
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f70 <fsm_set_time+0x4d4>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
				}
				setTimer3(50);
 8001e80:	2032      	movs	r0, #50	@ 0x32
 8001e82:	f001 ff13 	bl	8003cac <setTimer3>
			}
			if(button_count[12] == 1){
 8001e86:	4b35      	ldr	r3, [pc, #212]	@ (8001f5c <fsm_set_time+0x4c0>)
 8001e88:	8b1b      	ldrh	r3, [r3, #24]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	f040 8136 	bne.w	80020fc <fsm_set_time+0x660>
				mode_set_time = MONTH_MODE;
 8001e90:	4b38      	ldr	r3, [pc, #224]	@ (8001f74 <fsm_set_time+0x4d8>)
 8001e92:	220f      	movs	r2, #15
 8001e94:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_DATE, ds3231_date);
 8001e96:	4b32      	ldr	r3, [pc, #200]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	2004      	movs	r0, #4
 8001e9e:	f7ff fa45 	bl	800132c <ds3231_Write>
				ds3231_day = getDayOfWeek(ds3231_date, ds3231_month, ds3231_year);
 8001ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f60 <fsm_set_time+0x4c4>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	4b2e      	ldr	r3, [pc, #184]	@ (8001f68 <fsm_set_time+0x4cc>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f003 f996 	bl	80051e4 <getDayOfWeek>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8001f78 <fsm_set_time+0x4dc>)
 8001ebe:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_DAY, ds3231_day);
 8001ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f78 <fsm_set_time+0x4dc>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	2003      	movs	r0, #3
 8001ec8:	f7ff fa30 	bl	800132c <ds3231_Write>
			}
			break;
 8001ecc:	e116      	b.n	80020fc <fsm_set_time+0x660>

		case MONTH_MODE:
			if(button_count[3] == 1 || button_count[3] >= 40 && button_count[3] % 4 == 1){
 8001ece:	4b23      	ldr	r3, [pc, #140]	@ (8001f5c <fsm_set_time+0x4c0>)
 8001ed0:	88db      	ldrh	r3, [r3, #6]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d00a      	beq.n	8001eec <fsm_set_time+0x450>
 8001ed6:	4b21      	ldr	r3, [pc, #132]	@ (8001f5c <fsm_set_time+0x4c0>)
 8001ed8:	88db      	ldrh	r3, [r3, #6]
 8001eda:	2b27      	cmp	r3, #39	@ 0x27
 8001edc:	d90c      	bls.n	8001ef8 <fsm_set_time+0x45c>
 8001ede:	4b1f      	ldr	r3, [pc, #124]	@ (8001f5c <fsm_set_time+0x4c0>)
 8001ee0:	88db      	ldrh	r3, [r3, #6]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <fsm_set_time+0x45c>
				ds3231_month++;
 8001eec:	4b1d      	ldr	r3, [pc, #116]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001ef6:	701a      	strb	r2, [r3, #0]
			}
			if(ds3231_month >= 13){
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b0c      	cmp	r3, #12
 8001efe:	d902      	bls.n	8001f06 <fsm_set_time+0x46a>
				ds3231_month = 1;
 8001f00:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
			}

			if(button_count[7] == 1 || button_count[7] >= 40 && button_count[7] % 4 == 1){
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <fsm_set_time+0x4c0>)
 8001f08:	89db      	ldrh	r3, [r3, #14]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d00a      	beq.n	8001f24 <fsm_set_time+0x488>
 8001f0e:	4b13      	ldr	r3, [pc, #76]	@ (8001f5c <fsm_set_time+0x4c0>)
 8001f10:	89db      	ldrh	r3, [r3, #14]
 8001f12:	2b27      	cmp	r3, #39	@ 0x27
 8001f14:	d913      	bls.n	8001f3e <fsm_set_time+0x4a2>
 8001f16:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <fsm_set_time+0x4c0>)
 8001f18:	89db      	ldrh	r3, [r3, #14]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d10c      	bne.n	8001f3e <fsm_set_time+0x4a2>
				ds3231_month--;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001f2e:	701a      	strb	r2, [r3, #0]
				if(ds3231_month == 0)
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <fsm_set_time+0x4a2>
					ds3231_month = 12;
 8001f38:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <fsm_set_time+0x4c8>)
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	701a      	strb	r2, [r3, #0]
			}

			if(flag_timer3 == 1){
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <fsm_set_time+0x4d0>)
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d12e      	bne.n	8001fa4 <fsm_set_time+0x508>
				if(toggle == 1){
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <fsm_set_time+0x4d4>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d116      	bne.n	8001f7c <fsm_set_time+0x4e0>
					toggle = 0;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <fsm_set_time+0x4d4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
					displayTime();
 8001f54:	f7ff fb2e 	bl	80015b4 <displayTime>
 8001f58:	e021      	b.n	8001f9e <fsm_set_time+0x502>
 8001f5a:	bf00      	nop
 8001f5c:	20000384 	.word	0x20000384
 8001f60:	200003b5 	.word	0x200003b5
 8001f64:	200003b7 	.word	0x200003b7
 8001f68:	200003b8 	.word	0x200003b8
 8001f6c:	20000486 	.word	0x20000486
 8001f70:	200003be 	.word	0x200003be
 8001f74:	200003bd 	.word	0x200003bd
 8001f78:	200003b6 	.word	0x200003b6
				}else{
					lcd_ShowIntNum(110, 130, ds3231_month, 2, BLACK, BLACK, 24);
 8001f7c:	4b63      	ldr	r3, [pc, #396]	@ (800210c <fsm_set_time+0x670>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	2318      	movs	r3, #24
 8001f84:	9302      	str	r3, [sp, #8]
 8001f86:	2300      	movs	r3, #0
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2302      	movs	r3, #2
 8001f90:	2182      	movs	r1, #130	@ 0x82
 8001f92:	206e      	movs	r0, #110	@ 0x6e
 8001f94:	f000 ff86 	bl	8002ea4 <lcd_ShowIntNum>
					toggle = 1;
 8001f98:	4b5d      	ldr	r3, [pc, #372]	@ (8002110 <fsm_set_time+0x674>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
				}
				setTimer3(50);
 8001f9e:	2032      	movs	r0, #50	@ 0x32
 8001fa0:	f001 fe84 	bl	8003cac <setTimer3>
			}
			if(button_count[12] == 1){
 8001fa4:	4b5b      	ldr	r3, [pc, #364]	@ (8002114 <fsm_set_time+0x678>)
 8001fa6:	8b1b      	ldrh	r3, [r3, #24]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	f040 80a9 	bne.w	8002100 <fsm_set_time+0x664>
				mode_set_time = YEAR_MODE;
 8001fae:	4b5a      	ldr	r3, [pc, #360]	@ (8002118 <fsm_set_time+0x67c>)
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_MONTH, ds3231_month);
 8001fb4:	4b55      	ldr	r3, [pc, #340]	@ (800210c <fsm_set_time+0x670>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	2005      	movs	r0, #5
 8001fbc:	f7ff f9b6 	bl	800132c <ds3231_Write>
				ds3231_day = getDayOfWeek(ds3231_date, ds3231_month, ds3231_year);
 8001fc0:	4b56      	ldr	r3, [pc, #344]	@ (800211c <fsm_set_time+0x680>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	4b51      	ldr	r3, [pc, #324]	@ (800210c <fsm_set_time+0x670>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4b54      	ldr	r3, [pc, #336]	@ (8002120 <fsm_set_time+0x684>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	f003 f907 	bl	80051e4 <getDayOfWeek>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4b52      	ldr	r3, [pc, #328]	@ (8002124 <fsm_set_time+0x688>)
 8001fdc:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_DAY, ds3231_day);
 8001fde:	4b51      	ldr	r3, [pc, #324]	@ (8002124 <fsm_set_time+0x688>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f7ff f9a1 	bl	800132c <ds3231_Write>
			}
			break;
 8001fea:	e089      	b.n	8002100 <fsm_set_time+0x664>
		case YEAR_MODE:
			if(button_count[3] == 1 || button_count[3] >= 40 && button_count[3] % 4 == 1){
 8001fec:	4b49      	ldr	r3, [pc, #292]	@ (8002114 <fsm_set_time+0x678>)
 8001fee:	88db      	ldrh	r3, [r3, #6]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d00a      	beq.n	800200a <fsm_set_time+0x56e>
 8001ff4:	4b47      	ldr	r3, [pc, #284]	@ (8002114 <fsm_set_time+0x678>)
 8001ff6:	88db      	ldrh	r3, [r3, #6]
 8001ff8:	2b27      	cmp	r3, #39	@ 0x27
 8001ffa:	d90c      	bls.n	8002016 <fsm_set_time+0x57a>
 8001ffc:	4b45      	ldr	r3, [pc, #276]	@ (8002114 <fsm_set_time+0x678>)
 8001ffe:	88db      	ldrh	r3, [r3, #6]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <fsm_set_time+0x57a>
				ds3231_year++;
 800200a:	4b45      	ldr	r3, [pc, #276]	@ (8002120 <fsm_set_time+0x684>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b43      	ldr	r3, [pc, #268]	@ (8002120 <fsm_set_time+0x684>)
 8002014:	701a      	strb	r2, [r3, #0]
			}

			if(ds3231_year > 99)
 8002016:	4b42      	ldr	r3, [pc, #264]	@ (8002120 <fsm_set_time+0x684>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b63      	cmp	r3, #99	@ 0x63
 800201c:	d902      	bls.n	8002024 <fsm_set_time+0x588>
				ds3231_year = 0;
 800201e:	4b40      	ldr	r3, [pc, #256]	@ (8002120 <fsm_set_time+0x684>)
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]

			if(button_count[7] == 1 || button_count[7] >= 40 && button_count[7] % 4 == 1){
 8002024:	4b3b      	ldr	r3, [pc, #236]	@ (8002114 <fsm_set_time+0x678>)
 8002026:	89db      	ldrh	r3, [r3, #14]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d00a      	beq.n	8002042 <fsm_set_time+0x5a6>
 800202c:	4b39      	ldr	r3, [pc, #228]	@ (8002114 <fsm_set_time+0x678>)
 800202e:	89db      	ldrh	r3, [r3, #14]
 8002030:	2b27      	cmp	r3, #39	@ 0x27
 8002032:	d916      	bls.n	8002062 <fsm_set_time+0x5c6>
 8002034:	4b37      	ldr	r3, [pc, #220]	@ (8002114 <fsm_set_time+0x678>)
 8002036:	89db      	ldrh	r3, [r3, #14]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	b29b      	uxth	r3, r3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d10f      	bne.n	8002062 <fsm_set_time+0x5c6>
				ds3231_year = (ds3231_year + 99)%100;
 8002042:	4b37      	ldr	r3, [pc, #220]	@ (8002120 <fsm_set_time+0x684>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	3363      	adds	r3, #99	@ 0x63
 8002048:	4a37      	ldr	r2, [pc, #220]	@ (8002128 <fsm_set_time+0x68c>)
 800204a:	fb82 1203 	smull	r1, r2, r2, r3
 800204e:	1151      	asrs	r1, r2, #5
 8002050:	17da      	asrs	r2, r3, #31
 8002052:	1a8a      	subs	r2, r1, r2
 8002054:	2164      	movs	r1, #100	@ 0x64
 8002056:	fb01 f202 	mul.w	r2, r1, r2
 800205a:	1a9a      	subs	r2, r3, r2
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	4b30      	ldr	r3, [pc, #192]	@ (8002120 <fsm_set_time+0x684>)
 8002060:	701a      	strb	r2, [r3, #0]
			}

			if(flag_timer3 == 1){
 8002062:	4b32      	ldr	r3, [pc, #200]	@ (800212c <fsm_set_time+0x690>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d11d      	bne.n	80020a6 <fsm_set_time+0x60a>
				if(toggle == 1){
 800206a:	4b29      	ldr	r3, [pc, #164]	@ (8002110 <fsm_set_time+0x674>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d105      	bne.n	800207e <fsm_set_time+0x5e2>
					toggle = 0;
 8002072:	4b27      	ldr	r3, [pc, #156]	@ (8002110 <fsm_set_time+0x674>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
					displayTime();
 8002078:	f7ff fa9c 	bl	80015b4 <displayTime>
 800207c:	e010      	b.n	80020a0 <fsm_set_time+0x604>
				}else{
					lcd_ShowIntNum(150, 130, ds3231_year, 2, BLACK, BLACK, 24);
 800207e:	4b28      	ldr	r3, [pc, #160]	@ (8002120 <fsm_set_time+0x684>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	2318      	movs	r3, #24
 8002086:	9302      	str	r3, [sp, #8]
 8002088:	2300      	movs	r3, #0
 800208a:	9301      	str	r3, [sp, #4]
 800208c:	2300      	movs	r3, #0
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	2302      	movs	r3, #2
 8002092:	2182      	movs	r1, #130	@ 0x82
 8002094:	2096      	movs	r0, #150	@ 0x96
 8002096:	f000 ff05 	bl	8002ea4 <lcd_ShowIntNum>
					toggle = 1;
 800209a:	4b1d      	ldr	r3, [pc, #116]	@ (8002110 <fsm_set_time+0x674>)
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
				}
				setTimer3(50);
 80020a0:	2032      	movs	r0, #50	@ 0x32
 80020a2:	f001 fe03 	bl	8003cac <setTimer3>
			}
			if(button_count[12] == 1){
 80020a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <fsm_set_time+0x678>)
 80020a8:	8b1b      	ldrh	r3, [r3, #24]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d12a      	bne.n	8002104 <fsm_set_time+0x668>
				mode_set_time = MIN_MODE;
 80020ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002118 <fsm_set_time+0x67c>)
 80020b0:	220b      	movs	r2, #11
 80020b2:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_YEAR, ds3231_year);
 80020b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <fsm_set_time+0x684>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	2006      	movs	r0, #6
 80020bc:	f7ff f936 	bl	800132c <ds3231_Write>
				ds3231_day = getDayOfWeek(ds3231_date, ds3231_month, ds3231_year);
 80020c0:	4b16      	ldr	r3, [pc, #88]	@ (800211c <fsm_set_time+0x680>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	4b11      	ldr	r3, [pc, #68]	@ (800210c <fsm_set_time+0x670>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	4619      	mov	r1, r3
 80020cc:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <fsm_set_time+0x684>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	f003 f887 	bl	80051e4 <getDayOfWeek>
 80020d6:	4603      	mov	r3, r0
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <fsm_set_time+0x688>)
 80020dc:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_DAY, ds3231_day);
 80020de:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <fsm_set_time+0x688>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	4619      	mov	r1, r3
 80020e4:	2003      	movs	r0, #3
 80020e6:	f7ff f921 	bl	800132c <ds3231_Write>
			}
			break;
 80020ea:	e00b      	b.n	8002104 <fsm_set_time+0x668>
		default:
			break;
 80020ec:	bf00      	nop
 80020ee:	e00a      	b.n	8002106 <fsm_set_time+0x66a>
			break;
 80020f0:	bf00      	nop
 80020f2:	e008      	b.n	8002106 <fsm_set_time+0x66a>
			break;
 80020f4:	bf00      	nop
 80020f6:	e006      	b.n	8002106 <fsm_set_time+0x66a>
			break;
 80020f8:	bf00      	nop
 80020fa:	e004      	b.n	8002106 <fsm_set_time+0x66a>
			break;
 80020fc:	bf00      	nop
 80020fe:	e002      	b.n	8002106 <fsm_set_time+0x66a>
			break;
 8002100:	bf00      	nop
 8002102:	e000      	b.n	8002106 <fsm_set_time+0x66a>
			break;
 8002104:	bf00      	nop
	}
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200003b7 	.word	0x200003b7
 8002110:	200003be 	.word	0x200003be
 8002114:	20000384 	.word	0x20000384
 8002118:	200003bd 	.word	0x200003bd
 800211c:	200003b5 	.word	0x200003b5
 8002120:	200003b8 	.word	0x200003b8
 8002124:	200003b6 	.word	0x200003b6
 8002128:	51eb851f 	.word	0x51eb851f
 800212c:	20000486 	.word	0x20000486

08002130 <fsm_colon>:
uint8_t min_timer = 0;
uint8_t hours_timer = 0;

uint8_t flag_colon;

void fsm_colon(){
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af04      	add	r7, sp, #16
	if(flag_timer6 == 1){
 8002136:	4b30      	ldr	r3, [pc, #192]	@ (80021f8 <fsm_colon+0xc8>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d152      	bne.n	80021e4 <fsm_colon+0xb4>
		if(flag_colon == 0){
 800213e:	4b2f      	ldr	r3, [pc, #188]	@ (80021fc <fsm_colon+0xcc>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d124      	bne.n	8002190 <fsm_colon+0x60>
			lcd_ShowStr(95, 100, ":", GREEN, BLACK, 24, 1);
 8002146:	2301      	movs	r3, #1
 8002148:	9302      	str	r3, [sp, #8]
 800214a:	2318      	movs	r3, #24
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	2300      	movs	r3, #0
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002156:	4a2a      	ldr	r2, [pc, #168]	@ (8002200 <fsm_colon+0xd0>)
 8002158:	2164      	movs	r1, #100	@ 0x64
 800215a:	205f      	movs	r0, #95	@ 0x5f
 800215c:	f001 f9f2 	bl	8003544 <lcd_ShowStr>
			lcd_ShowStr(135, 100, ":", GREEN, BLACK, 24, 1);
 8002160:	2301      	movs	r3, #1
 8002162:	9302      	str	r3, [sp, #8]
 8002164:	2318      	movs	r3, #24
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	2300      	movs	r3, #0
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002170:	4a23      	ldr	r2, [pc, #140]	@ (8002200 <fsm_colon+0xd0>)
 8002172:	2164      	movs	r1, #100	@ 0x64
 8002174:	2087      	movs	r0, #135	@ 0x87
 8002176:	f001 f9e5 	bl	8003544 <lcd_ShowStr>
			led7_SetDigit(flag_colon, 0, 0);
 800217a:	4b20      	ldr	r3, [pc, #128]	@ (80021fc <fsm_colon+0xcc>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f001 fb0c 	bl	80037a0 <led7_SetDigit>
			flag_colon = 1;
 8002188:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <fsm_colon+0xcc>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e025      	b.n	80021dc <fsm_colon+0xac>
		}
		else if(flag_colon == 1){
 8002190:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <fsm_colon+0xcc>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d121      	bne.n	80021dc <fsm_colon+0xac>
			lcd_ShowStr(95, 100, ":", BLACK, BLACK, 24, 1);
 8002198:	2301      	movs	r3, #1
 800219a:	9302      	str	r3, [sp, #8]
 800219c:	2318      	movs	r3, #24
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	2300      	movs	r3, #0
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2300      	movs	r3, #0
 80021a6:	4a16      	ldr	r2, [pc, #88]	@ (8002200 <fsm_colon+0xd0>)
 80021a8:	2164      	movs	r1, #100	@ 0x64
 80021aa:	205f      	movs	r0, #95	@ 0x5f
 80021ac:	f001 f9ca 	bl	8003544 <lcd_ShowStr>
			lcd_ShowStr(135, 100, ":", BLACK, BLACK, 24, 1);
 80021b0:	2301      	movs	r3, #1
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	2318      	movs	r3, #24
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	2300      	movs	r3, #0
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2300      	movs	r3, #0
 80021be:	4a10      	ldr	r2, [pc, #64]	@ (8002200 <fsm_colon+0xd0>)
 80021c0:	2164      	movs	r1, #100	@ 0x64
 80021c2:	2087      	movs	r0, #135	@ 0x87
 80021c4:	f001 f9be 	bl	8003544 <lcd_ShowStr>
			led7_SetDigit(flag_colon, 0, 0);
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <fsm_colon+0xcc>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2200      	movs	r2, #0
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f001 fae5 	bl	80037a0 <led7_SetDigit>
			flag_colon = 0;
 80021d6:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <fsm_colon+0xcc>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
//		lcd_ShowStr(95, 100, ":", GREEN, BLACK, 24, 1);
//		lcd_ShowStr(135, 100, ":", GREEN, BLACK, 24, 1);
//		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
//		flag_colon = flag_colon + 1;
//		led7_SetDigit(flag_colon, 0, 0);
		setTimer6(500);
 80021dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80021e0:	f001 fda6 	bl	8003d30 <setTimer6>
	}
	led7_SetDigit(flag_timer6, 1, 0);
 80021e4:	4b04      	ldr	r3, [pc, #16]	@ (80021f8 <fsm_colon+0xc8>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	2200      	movs	r2, #0
 80021ea:	2101      	movs	r1, #1
 80021ec:	4618      	mov	r0, r3
 80021ee:	f001 fad7 	bl	80037a0 <led7_SetDigit>
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000492 	.word	0x20000492
 80021fc:	200003c3 	.word	0x200003c3
 8002200:	0800b948 	.word	0x0800b948

08002204 <fsm_timer>:

void fsm_timer(){
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af04      	add	r7, sp, #16
	switch (mode_timer) {
 800220a:	4b9b      	ldr	r3, [pc, #620]	@ (8002478 <fsm_timer+0x274>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b0b      	cmp	r3, #11
 8002210:	d003      	beq.n	800221a <fsm_timer+0x16>
 8002212:	2b0c      	cmp	r3, #12
 8002214:	f000 8096 	beq.w	8002344 <fsm_timer+0x140>
//				update_Alarm();
			}
			break;

		default:
			break;
 8002218:	e12b      	b.n	8002472 <fsm_timer+0x26e>
			if(button_count[3] == 1 || button_count[3] >= 40 && button_count[3] % 4 == 1){
 800221a:	4b98      	ldr	r3, [pc, #608]	@ (800247c <fsm_timer+0x278>)
 800221c:	88db      	ldrh	r3, [r3, #6]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d00a      	beq.n	8002238 <fsm_timer+0x34>
 8002222:	4b96      	ldr	r3, [pc, #600]	@ (800247c <fsm_timer+0x278>)
 8002224:	88db      	ldrh	r3, [r3, #6]
 8002226:	2b27      	cmp	r3, #39	@ 0x27
 8002228:	d912      	bls.n	8002250 <fsm_timer+0x4c>
 800222a:	4b94      	ldr	r3, [pc, #592]	@ (800247c <fsm_timer+0x278>)
 800222c:	88db      	ldrh	r3, [r3, #6]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	b29b      	uxth	r3, r3
 8002234:	2b01      	cmp	r3, #1
 8002236:	d10b      	bne.n	8002250 <fsm_timer+0x4c>
				min_timer++;
 8002238:	4b91      	ldr	r3, [pc, #580]	@ (8002480 <fsm_timer+0x27c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b8f      	ldr	r3, [pc, #572]	@ (8002480 <fsm_timer+0x27c>)
 8002242:	701a      	strb	r2, [r3, #0]
				ds3231_alarm_min++;
 8002244:	4b8f      	ldr	r3, [pc, #572]	@ (8002484 <fsm_timer+0x280>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b8d      	ldr	r3, [pc, #564]	@ (8002484 <fsm_timer+0x280>)
 800224e:	701a      	strb	r2, [r3, #0]
			if(min_timer >= 60){
 8002250:	4b8b      	ldr	r3, [pc, #556]	@ (8002480 <fsm_timer+0x27c>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b3b      	cmp	r3, #59	@ 0x3b
 8002256:	d902      	bls.n	800225e <fsm_timer+0x5a>
				min_timer = 0;
 8002258:	4b89      	ldr	r3, [pc, #548]	@ (8002480 <fsm_timer+0x27c>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
			if(button_count[7] == 1 || button_count[7] >= 40 && button_count[7] % 4 == 1){
 800225e:	4b87      	ldr	r3, [pc, #540]	@ (800247c <fsm_timer+0x278>)
 8002260:	89db      	ldrh	r3, [r3, #14]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d00a      	beq.n	800227c <fsm_timer+0x78>
 8002266:	4b85      	ldr	r3, [pc, #532]	@ (800247c <fsm_timer+0x278>)
 8002268:	89db      	ldrh	r3, [r3, #14]
 800226a:	2b27      	cmp	r3, #39	@ 0x27
 800226c:	d91c      	bls.n	80022a8 <fsm_timer+0xa4>
 800226e:	4b83      	ldr	r3, [pc, #524]	@ (800247c <fsm_timer+0x278>)
 8002270:	89db      	ldrh	r3, [r3, #14]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	b29b      	uxth	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d115      	bne.n	80022a8 <fsm_timer+0xa4>
				min_timer--;
 800227c:	4b80      	ldr	r3, [pc, #512]	@ (8002480 <fsm_timer+0x27c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	3b01      	subs	r3, #1
 8002282:	b2da      	uxtb	r2, r3
 8002284:	4b7e      	ldr	r3, [pc, #504]	@ (8002480 <fsm_timer+0x27c>)
 8002286:	701a      	strb	r2, [r3, #0]
				ds3231_alarm_min--;
 8002288:	4b7e      	ldr	r3, [pc, #504]	@ (8002484 <fsm_timer+0x280>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	3b01      	subs	r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b7c      	ldr	r3, [pc, #496]	@ (8002484 <fsm_timer+0x280>)
 8002292:	701a      	strb	r2, [r3, #0]
				if(ds3231_alarm_min == 0){
 8002294:	4b7b      	ldr	r3, [pc, #492]	@ (8002484 <fsm_timer+0x280>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d105      	bne.n	80022a8 <fsm_timer+0xa4>
					min_timer = 59;
 800229c:	4b78      	ldr	r3, [pc, #480]	@ (8002480 <fsm_timer+0x27c>)
 800229e:	223b      	movs	r2, #59	@ 0x3b
 80022a0:	701a      	strb	r2, [r3, #0]
					ds3231_alarm_min = 59;
 80022a2:	4b78      	ldr	r3, [pc, #480]	@ (8002484 <fsm_timer+0x280>)
 80022a4:	223b      	movs	r2, #59	@ 0x3b
 80022a6:	701a      	strb	r2, [r3, #0]
			if(ds3231_alarm_min >= 60){
 80022a8:	4b76      	ldr	r3, [pc, #472]	@ (8002484 <fsm_timer+0x280>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b3b      	cmp	r3, #59	@ 0x3b
 80022ae:	d902      	bls.n	80022b6 <fsm_timer+0xb2>
				ds3231_alarm_min = 0;
 80022b0:	4b74      	ldr	r3, [pc, #464]	@ (8002484 <fsm_timer+0x280>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
			if(flag_timer4 == 1){
 80022b6:	4b74      	ldr	r3, [pc, #464]	@ (8002488 <fsm_timer+0x284>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d139      	bne.n	8002332 <fsm_timer+0x12e>
				if(toggle_timer == 1){
 80022be:	4b73      	ldr	r3, [pc, #460]	@ (800248c <fsm_timer+0x288>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d121      	bne.n	800230a <fsm_timer+0x106>
					toggle_timer = 0;
 80022c6:	4b71      	ldr	r3, [pc, #452]	@ (800248c <fsm_timer+0x288>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
					lcd_ShowIntNum(110, 100, ds3231_alarm_min, 2, GREEN, BLACK, 24);
 80022cc:	4b6d      	ldr	r3, [pc, #436]	@ (8002484 <fsm_timer+0x280>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	2318      	movs	r3, #24
 80022d4:	9302      	str	r3, [sp, #8]
 80022d6:	2300      	movs	r3, #0
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2302      	movs	r3, #2
 80022e2:	2164      	movs	r1, #100	@ 0x64
 80022e4:	206e      	movs	r0, #110	@ 0x6e
 80022e6:	f000 fddd 	bl	8002ea4 <lcd_ShowIntNum>
					lcd_ShowIntNum(70, 100, ds3231_alarm_hour, 2, GREEN, BLACK, 24);
 80022ea:	4b69      	ldr	r3, [pc, #420]	@ (8002490 <fsm_timer+0x28c>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	2318      	movs	r3, #24
 80022f2:	9302      	str	r3, [sp, #8]
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	2302      	movs	r3, #2
 8002300:	2164      	movs	r1, #100	@ 0x64
 8002302:	2046      	movs	r0, #70	@ 0x46
 8002304:	f000 fdce 	bl	8002ea4 <lcd_ShowIntNum>
 8002308:	e010      	b.n	800232c <fsm_timer+0x128>
					lcd_ShowIntNum(110, 100, ds3231_alarm_min, 2, BLACK, BLACK, 24);
 800230a:	4b5e      	ldr	r3, [pc, #376]	@ (8002484 <fsm_timer+0x280>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	2318      	movs	r3, #24
 8002312:	9302      	str	r3, [sp, #8]
 8002314:	2300      	movs	r3, #0
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	2300      	movs	r3, #0
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2302      	movs	r3, #2
 800231e:	2164      	movs	r1, #100	@ 0x64
 8002320:	206e      	movs	r0, #110	@ 0x6e
 8002322:	f000 fdbf 	bl	8002ea4 <lcd_ShowIntNum>
					toggle_timer = 1;
 8002326:	4b59      	ldr	r3, [pc, #356]	@ (800248c <fsm_timer+0x288>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
				setTimer4(50);
 800232c:	2032      	movs	r0, #50	@ 0x32
 800232e:	f001 fcd3 	bl	8003cd8 <setTimer4>
			if(button_count[12] == 1){
 8002332:	4b52      	ldr	r3, [pc, #328]	@ (800247c <fsm_timer+0x278>)
 8002334:	8b1b      	ldrh	r3, [r3, #24]
 8002336:	2b01      	cmp	r3, #1
 8002338:	f040 8098 	bne.w	800246c <fsm_timer+0x268>
				mode_timer = HOUR_MODE;
 800233c:	4b4e      	ldr	r3, [pc, #312]	@ (8002478 <fsm_timer+0x274>)
 800233e:	220c      	movs	r2, #12
 8002340:	701a      	strb	r2, [r3, #0]
			break;
 8002342:	e093      	b.n	800246c <fsm_timer+0x268>
			if(button_count[3] == 1 || button_count[3] >= 40 && button_count[3] % 4 == 1){
 8002344:	4b4d      	ldr	r3, [pc, #308]	@ (800247c <fsm_timer+0x278>)
 8002346:	88db      	ldrh	r3, [r3, #6]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d00a      	beq.n	8002362 <fsm_timer+0x15e>
 800234c:	4b4b      	ldr	r3, [pc, #300]	@ (800247c <fsm_timer+0x278>)
 800234e:	88db      	ldrh	r3, [r3, #6]
 8002350:	2b27      	cmp	r3, #39	@ 0x27
 8002352:	d912      	bls.n	800237a <fsm_timer+0x176>
 8002354:	4b49      	ldr	r3, [pc, #292]	@ (800247c <fsm_timer+0x278>)
 8002356:	88db      	ldrh	r3, [r3, #6]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10b      	bne.n	800237a <fsm_timer+0x176>
				hours_timer++;
 8002362:	4b4c      	ldr	r3, [pc, #304]	@ (8002494 <fsm_timer+0x290>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b4a      	ldr	r3, [pc, #296]	@ (8002494 <fsm_timer+0x290>)
 800236c:	701a      	strb	r2, [r3, #0]
				ds3231_alarm_hour++;
 800236e:	4b48      	ldr	r3, [pc, #288]	@ (8002490 <fsm_timer+0x28c>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	3301      	adds	r3, #1
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4b46      	ldr	r3, [pc, #280]	@ (8002490 <fsm_timer+0x28c>)
 8002378:	701a      	strb	r2, [r3, #0]
			if(hours_timer >= 24){
 800237a:	4b46      	ldr	r3, [pc, #280]	@ (8002494 <fsm_timer+0x290>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b17      	cmp	r3, #23
 8002380:	d902      	bls.n	8002388 <fsm_timer+0x184>
				hours_timer = 0;
 8002382:	4b44      	ldr	r3, [pc, #272]	@ (8002494 <fsm_timer+0x290>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
			if(button_count[7] == 1 || button_count[7] >= 40 && button_count[7] % 4 == 1){
 8002388:	4b3c      	ldr	r3, [pc, #240]	@ (800247c <fsm_timer+0x278>)
 800238a:	89db      	ldrh	r3, [r3, #14]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d00a      	beq.n	80023a6 <fsm_timer+0x1a2>
 8002390:	4b3a      	ldr	r3, [pc, #232]	@ (800247c <fsm_timer+0x278>)
 8002392:	89db      	ldrh	r3, [r3, #14]
 8002394:	2b27      	cmp	r3, #39	@ 0x27
 8002396:	d91c      	bls.n	80023d2 <fsm_timer+0x1ce>
 8002398:	4b38      	ldr	r3, [pc, #224]	@ (800247c <fsm_timer+0x278>)
 800239a:	89db      	ldrh	r3, [r3, #14]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d115      	bne.n	80023d2 <fsm_timer+0x1ce>
				hours_timer--;
 80023a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002494 <fsm_timer+0x290>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b39      	ldr	r3, [pc, #228]	@ (8002494 <fsm_timer+0x290>)
 80023b0:	701a      	strb	r2, [r3, #0]
				ds3231_alarm_hour--;
 80023b2:	4b37      	ldr	r3, [pc, #220]	@ (8002490 <fsm_timer+0x28c>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4b35      	ldr	r3, [pc, #212]	@ (8002490 <fsm_timer+0x28c>)
 80023bc:	701a      	strb	r2, [r3, #0]
				if(ds3231_alarm_hour == 0){
 80023be:	4b34      	ldr	r3, [pc, #208]	@ (8002490 <fsm_timer+0x28c>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <fsm_timer+0x1ce>
					min_timer = 23;
 80023c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002480 <fsm_timer+0x27c>)
 80023c8:	2217      	movs	r2, #23
 80023ca:	701a      	strb	r2, [r3, #0]
					ds3231_alarm_hour = 23;
 80023cc:	4b30      	ldr	r3, [pc, #192]	@ (8002490 <fsm_timer+0x28c>)
 80023ce:	2217      	movs	r2, #23
 80023d0:	701a      	strb	r2, [r3, #0]
			if(ds3231_alarm_hour >= 24){
 80023d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002490 <fsm_timer+0x28c>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b17      	cmp	r3, #23
 80023d8:	d902      	bls.n	80023e0 <fsm_timer+0x1dc>
				ds3231_alarm_hour = 0;
 80023da:	4b2d      	ldr	r3, [pc, #180]	@ (8002490 <fsm_timer+0x28c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
			if(flag_timer4 == 1){
 80023e0:	4b29      	ldr	r3, [pc, #164]	@ (8002488 <fsm_timer+0x284>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d139      	bne.n	800245c <fsm_timer+0x258>
				if(toggle_timer == 1){
 80023e8:	4b28      	ldr	r3, [pc, #160]	@ (800248c <fsm_timer+0x288>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d121      	bne.n	8002434 <fsm_timer+0x230>
					toggle_timer = 0;
 80023f0:	4b26      	ldr	r3, [pc, #152]	@ (800248c <fsm_timer+0x288>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
					lcd_ShowIntNum(110, 100, ds3231_alarm_min, 2, GREEN, BLACK, 24);
 80023f6:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <fsm_timer+0x280>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	2318      	movs	r3, #24
 80023fe:	9302      	str	r3, [sp, #8]
 8002400:	2300      	movs	r3, #0
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2302      	movs	r3, #2
 800240c:	2164      	movs	r1, #100	@ 0x64
 800240e:	206e      	movs	r0, #110	@ 0x6e
 8002410:	f000 fd48 	bl	8002ea4 <lcd_ShowIntNum>
					lcd_ShowIntNum(70, 100, ds3231_alarm_hour, 2, GREEN, BLACK, 24);
 8002414:	4b1e      	ldr	r3, [pc, #120]	@ (8002490 <fsm_timer+0x28c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	2318      	movs	r3, #24
 800241c:	9302      	str	r3, [sp, #8]
 800241e:	2300      	movs	r3, #0
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2302      	movs	r3, #2
 800242a:	2164      	movs	r1, #100	@ 0x64
 800242c:	2046      	movs	r0, #70	@ 0x46
 800242e:	f000 fd39 	bl	8002ea4 <lcd_ShowIntNum>
 8002432:	e010      	b.n	8002456 <fsm_timer+0x252>
					lcd_ShowIntNum(70, 100, ds3231_alarm_hour, 2, BLACK, BLACK, 24);
 8002434:	4b16      	ldr	r3, [pc, #88]	@ (8002490 <fsm_timer+0x28c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	2318      	movs	r3, #24
 800243c:	9302      	str	r3, [sp, #8]
 800243e:	2300      	movs	r3, #0
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	2300      	movs	r3, #0
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2302      	movs	r3, #2
 8002448:	2164      	movs	r1, #100	@ 0x64
 800244a:	2046      	movs	r0, #70	@ 0x46
 800244c:	f000 fd2a 	bl	8002ea4 <lcd_ShowIntNum>
					toggle_timer = 1;
 8002450:	4b0e      	ldr	r3, [pc, #56]	@ (800248c <fsm_timer+0x288>)
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
				setTimer4(50);
 8002456:	2032      	movs	r0, #50	@ 0x32
 8002458:	f001 fc3e 	bl	8003cd8 <setTimer4>
			if(button_count[12] == 1){
 800245c:	4b07      	ldr	r3, [pc, #28]	@ (800247c <fsm_timer+0x278>)
 800245e:	8b1b      	ldrh	r3, [r3, #24]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <fsm_timer+0x26c>
				mode_timer = MIN_MODE;
 8002464:	4b04      	ldr	r3, [pc, #16]	@ (8002478 <fsm_timer+0x274>)
 8002466:	220b      	movs	r2, #11
 8002468:	701a      	strb	r2, [r3, #0]
			break;
 800246a:	e001      	b.n	8002470 <fsm_timer+0x26c>
			break;
 800246c:	bf00      	nop
 800246e:	e000      	b.n	8002472 <fsm_timer+0x26e>
			break;
 8002470:	bf00      	nop
	}
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	200003bf 	.word	0x200003bf
 800247c:	20000384 	.word	0x20000384
 8002480:	200003c1 	.word	0x200003c1
 8002484:	200003ba 	.word	0x200003ba
 8002488:	2000048a 	.word	0x2000048a
 800248c:	200003c0 	.word	0x200003c0
 8002490:	200003b9 	.word	0x200003b9
 8002494:	200003c2 	.word	0x200003c2

08002498 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08e      	sub	sp, #56	@ 0x38
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800249e:	f107 031c 	add.w	r3, r7, #28
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	60da      	str	r2, [r3, #12]
 80024ac:	611a      	str	r2, [r3, #16]
 80024ae:	615a      	str	r2, [r3, #20]
 80024b0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80024b2:	463b      	mov	r3, r7
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
 80024c0:	615a      	str	r2, [r3, #20]
 80024c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80024c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002584 <MX_FSMC_Init+0xec>)
 80024c6:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80024ca:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80024cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002584 <MX_FSMC_Init+0xec>)
 80024ce:	4a2e      	ldr	r2, [pc, #184]	@ (8002588 <MX_FSMC_Init+0xf0>)
 80024d0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80024d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002584 <MX_FSMC_Init+0xec>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80024d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002584 <MX_FSMC_Init+0xec>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80024de:	4b29      	ldr	r3, [pc, #164]	@ (8002584 <MX_FSMC_Init+0xec>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80024e4:	4b27      	ldr	r3, [pc, #156]	@ (8002584 <MX_FSMC_Init+0xec>)
 80024e6:	2210      	movs	r2, #16
 80024e8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80024ea:	4b26      	ldr	r3, [pc, #152]	@ (8002584 <MX_FSMC_Init+0xec>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80024f0:	4b24      	ldr	r3, [pc, #144]	@ (8002584 <MX_FSMC_Init+0xec>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80024f6:	4b23      	ldr	r3, [pc, #140]	@ (8002584 <MX_FSMC_Init+0xec>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80024fc:	4b21      	ldr	r3, [pc, #132]	@ (8002584 <MX_FSMC_Init+0xec>)
 80024fe:	2200      	movs	r2, #0
 8002500:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002502:	4b20      	ldr	r3, [pc, #128]	@ (8002584 <MX_FSMC_Init+0xec>)
 8002504:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002508:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800250a:	4b1e      	ldr	r3, [pc, #120]	@ (8002584 <MX_FSMC_Init+0xec>)
 800250c:	2200      	movs	r2, #0
 800250e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8002510:	4b1c      	ldr	r3, [pc, #112]	@ (8002584 <MX_FSMC_Init+0xec>)
 8002512:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002516:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002518:	4b1a      	ldr	r3, [pc, #104]	@ (8002584 <MX_FSMC_Init+0xec>)
 800251a:	2200      	movs	r2, #0
 800251c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800251e:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <MX_FSMC_Init+0xec>)
 8002520:	2200      	movs	r2, #0
 8002522:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002524:	4b17      	ldr	r3, [pc, #92]	@ (8002584 <MX_FSMC_Init+0xec>)
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800252a:	230f      	movs	r3, #15
 800252c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800252e:	230f      	movs	r3, #15
 8002530:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8002532:	233c      	movs	r3, #60	@ 0x3c
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800253a:	2310      	movs	r3, #16
 800253c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 800253e:	2311      	movs	r3, #17
 8002540:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002542:	2300      	movs	r3, #0
 8002544:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8002546:	2308      	movs	r3, #8
 8002548:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800254a:	230f      	movs	r3, #15
 800254c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800254e:	2309      	movs	r3, #9
 8002550:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8002556:	2310      	movs	r3, #16
 8002558:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800255a:	2311      	movs	r3, #17
 800255c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8002562:	463a      	mov	r2, r7
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	4619      	mov	r1, r3
 800256a:	4806      	ldr	r0, [pc, #24]	@ (8002584 <MX_FSMC_Init+0xec>)
 800256c:	f006 fdfa 	bl	8009164 <HAL_SRAM_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8002576:	f001 facd 	bl	8003b14 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800257a:	bf00      	nop
 800257c:	3738      	adds	r7, #56	@ 0x38
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200003c4 	.word	0x200003c4
 8002588:	a0000104 	.word	0xa0000104

0800258c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80025a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002614 <HAL_FSMC_MspInit+0x88>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d131      	bne.n	800260c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80025a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002614 <HAL_FSMC_MspInit+0x88>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	4b19      	ldr	r3, [pc, #100]	@ (8002618 <HAL_FSMC_MspInit+0x8c>)
 80025b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b6:	4a18      	ldr	r2, [pc, #96]	@ (8002618 <HAL_FSMC_MspInit+0x8c>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6393      	str	r3, [r2, #56]	@ 0x38
 80025be:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <HAL_FSMC_MspInit+0x8c>)
 80025c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80025ca:	f64f 7388 	movw	r3, #65416	@ 0xff88
 80025ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d8:	2303      	movs	r3, #3
 80025da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80025dc:	230c      	movs	r3, #12
 80025de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	4619      	mov	r1, r3
 80025e4:	480d      	ldr	r0, [pc, #52]	@ (800261c <HAL_FSMC_MspInit+0x90>)
 80025e6:	f004 f815 	bl	8006614 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80025ea:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80025ee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f8:	2303      	movs	r3, #3
 80025fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80025fc:	230c      	movs	r3, #12
 80025fe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	4619      	mov	r1, r3
 8002604:	4806      	ldr	r0, [pc, #24]	@ (8002620 <HAL_FSMC_MspInit+0x94>)
 8002606:	f004 f805 	bl	8006614 <HAL_GPIO_Init>
 800260a:	e000      	b.n	800260e <HAL_FSMC_MspInit+0x82>
    return;
 800260c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000414 	.word	0x20000414
 8002618:	40023800 	.word	0x40023800
 800261c:	40021000 	.word	0x40021000
 8002620:	40020c00 	.word	0x40020c00

08002624 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800262c:	f7ff ffae 	bl	800258c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <update_clock>:

#include "get_time_from_internet.h"

uint8_t flag_get_time = 0;

void update_clock(void){
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 800263c:	4b04      	ldr	r3, [pc, #16]	@ (8002650 <update_clock+0x18>)
 800263e:	8b5b      	ldrh	r3, [r3, #26]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d103      	bne.n	800264c <update_clock+0x14>
		uart_EspSendBytes("t", 1);
 8002644:	2101      	movs	r1, #1
 8002646:	4803      	ldr	r0, [pc, #12]	@ (8002654 <update_clock+0x1c>)
 8002648:	f002 fe4e 	bl	80052e8 <uart_EspSendBytes>
//		lcd_ShowStr(10, 250, "sent", WHITE, BLACK, 24, 0);
	}
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000384 	.word	0x20000384
 8002654:	0800b94c 	.word	0x0800b94c

08002658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08e      	sub	sp, #56	@ 0x38
 800265c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
 800266c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	623b      	str	r3, [r7, #32]
 8002672:	4b8f      	ldr	r3, [pc, #572]	@ (80028b0 <MX_GPIO_Init+0x258>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	4a8e      	ldr	r2, [pc, #568]	@ (80028b0 <MX_GPIO_Init+0x258>)
 8002678:	f043 0310 	orr.w	r3, r3, #16
 800267c:	6313      	str	r3, [r2, #48]	@ 0x30
 800267e:	4b8c      	ldr	r3, [pc, #560]	@ (80028b0 <MX_GPIO_Init+0x258>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	623b      	str	r3, [r7, #32]
 8002688:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	4b88      	ldr	r3, [pc, #544]	@ (80028b0 <MX_GPIO_Init+0x258>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	4a87      	ldr	r2, [pc, #540]	@ (80028b0 <MX_GPIO_Init+0x258>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	6313      	str	r3, [r2, #48]	@ 0x30
 800269a:	4b85      	ldr	r3, [pc, #532]	@ (80028b0 <MX_GPIO_Init+0x258>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	4b81      	ldr	r3, [pc, #516]	@ (80028b0 <MX_GPIO_Init+0x258>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a80      	ldr	r2, [pc, #512]	@ (80028b0 <MX_GPIO_Init+0x258>)
 80026b0:	f043 0320 	orr.w	r3, r3, #32
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b7e      	ldr	r3, [pc, #504]	@ (80028b0 <MX_GPIO_Init+0x258>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	4b7a      	ldr	r3, [pc, #488]	@ (80028b0 <MX_GPIO_Init+0x258>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	4a79      	ldr	r2, [pc, #484]	@ (80028b0 <MX_GPIO_Init+0x258>)
 80026cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d2:	4b77      	ldr	r3, [pc, #476]	@ (80028b0 <MX_GPIO_Init+0x258>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	4b73      	ldr	r3, [pc, #460]	@ (80028b0 <MX_GPIO_Init+0x258>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	4a72      	ldr	r2, [pc, #456]	@ (80028b0 <MX_GPIO_Init+0x258>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ee:	4b70      	ldr	r3, [pc, #448]	@ (80028b0 <MX_GPIO_Init+0x258>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b6c      	ldr	r3, [pc, #432]	@ (80028b0 <MX_GPIO_Init+0x258>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	4a6b      	ldr	r2, [pc, #428]	@ (80028b0 <MX_GPIO_Init+0x258>)
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	6313      	str	r3, [r2, #48]	@ 0x30
 800270a:	4b69      	ldr	r3, [pc, #420]	@ (80028b0 <MX_GPIO_Init+0x258>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	4b65      	ldr	r3, [pc, #404]	@ (80028b0 <MX_GPIO_Init+0x258>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	4a64      	ldr	r2, [pc, #400]	@ (80028b0 <MX_GPIO_Init+0x258>)
 8002720:	f043 0308 	orr.w	r3, r3, #8
 8002724:	6313      	str	r3, [r2, #48]	@ 0x30
 8002726:	4b62      	ldr	r3, [pc, #392]	@ (80028b0 <MX_GPIO_Init+0x258>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	4b5e      	ldr	r3, [pc, #376]	@ (80028b0 <MX_GPIO_Init+0x258>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	4a5d      	ldr	r2, [pc, #372]	@ (80028b0 <MX_GPIO_Init+0x258>)
 800273c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002740:	6313      	str	r3, [r2, #48]	@ 0x30
 8002742:	4b5b      	ldr	r3, [pc, #364]	@ (80028b0 <MX_GPIO_Init+0x258>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800274e:	2200      	movs	r2, #0
 8002750:	2170      	movs	r1, #112	@ 0x70
 8002752:	4858      	ldr	r0, [pc, #352]	@ (80028b4 <MX_GPIO_Init+0x25c>)
 8002754:	f004 f912 	bl	800697c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8002758:	2200      	movs	r2, #0
 800275a:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 800275e:	4856      	ldr	r0, [pc, #344]	@ (80028b8 <MX_GPIO_Init+0x260>)
 8002760:	f004 f90c 	bl	800697c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8002764:	2200      	movs	r2, #0
 8002766:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800276a:	4854      	ldr	r0, [pc, #336]	@ (80028bc <MX_GPIO_Init+0x264>)
 800276c:	f004 f906 	bl	800697c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8002770:	2200      	movs	r2, #0
 8002772:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8002776:	4852      	ldr	r0, [pc, #328]	@ (80028c0 <MX_GPIO_Init+0x268>)
 8002778:	f004 f900 	bl	800697c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800277c:	2200      	movs	r2, #0
 800277e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002782:	4850      	ldr	r0, [pc, #320]	@ (80028c4 <MX_GPIO_Init+0x26c>)
 8002784:	f004 f8fa 	bl	800697c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8002788:	2200      	movs	r2, #0
 800278a:	2108      	movs	r1, #8
 800278c:	484e      	ldr	r0, [pc, #312]	@ (80028c8 <MX_GPIO_Init+0x270>)
 800278e:	f004 f8f5 	bl	800697c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8002792:	2370      	movs	r3, #112	@ 0x70
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002796:	2301      	movs	r3, #1
 8002798:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027a6:	4619      	mov	r1, r3
 80027a8:	4842      	ldr	r0, [pc, #264]	@ (80028b4 <MX_GPIO_Init+0x25c>)
 80027aa:	f003 ff33 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80027ae:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b4:	2301      	movs	r3, #1
 80027b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027bc:	2300      	movs	r3, #0
 80027be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027c4:	4619      	mov	r1, r3
 80027c6:	483c      	ldr	r0, [pc, #240]	@ (80028b8 <MX_GPIO_Init+0x260>)
 80027c8:	f003 ff24 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 80027cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 80027da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027de:	4619      	mov	r1, r3
 80027e0:	4836      	ldr	r0, [pc, #216]	@ (80028bc <MX_GPIO_Init+0x264>)
 80027e2:	f003 ff17 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 80027e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ec:	2301      	movs	r3, #1
 80027ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	2300      	movs	r3, #0
 80027f6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 80027f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027fc:	4619      	mov	r1, r3
 80027fe:	482f      	ldr	r0, [pc, #188]	@ (80028bc <MX_GPIO_Init+0x264>)
 8002800:	f003 ff08 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8002804:	23c0      	movs	r3, #192	@ 0xc0
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002808:	2300      	movs	r3, #0
 800280a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002814:	4619      	mov	r1, r3
 8002816:	482b      	ldr	r0, [pc, #172]	@ (80028c4 <MX_GPIO_Init+0x26c>)
 8002818:	f003 fefc 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800281c:	2330      	movs	r3, #48	@ 0x30
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002820:	2300      	movs	r3, #0
 8002822:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800282c:	4619      	mov	r1, r3
 800282e:	4822      	ldr	r0, [pc, #136]	@ (80028b8 <MX_GPIO_Init+0x260>)
 8002830:	f003 fef0 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8002834:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283a:	2301      	movs	r3, #1
 800283c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	2300      	movs	r3, #0
 8002844:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800284a:	4619      	mov	r1, r3
 800284c:	481c      	ldr	r0, [pc, #112]	@ (80028c0 <MX_GPIO_Init+0x268>)
 800284e:	f003 fee1 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8002852:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002858:	2300      	movs	r3, #0
 800285a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800285c:	2301      	movs	r3, #1
 800285e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002860:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002864:	4619      	mov	r1, r3
 8002866:	4814      	ldr	r0, [pc, #80]	@ (80028b8 <MX_GPIO_Init+0x260>)
 8002868:	f003 fed4 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800286c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002872:	2301      	movs	r3, #1
 8002874:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287a:	2300      	movs	r3, #0
 800287c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800287e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002882:	4619      	mov	r1, r3
 8002884:	480f      	ldr	r0, [pc, #60]	@ (80028c4 <MX_GPIO_Init+0x26c>)
 8002886:	f003 fec5 	bl	8006614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800288a:	2308      	movs	r3, #8
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800288e:	2301      	movs	r3, #1
 8002890:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800289a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800289e:	4619      	mov	r1, r3
 80028a0:	4809      	ldr	r0, [pc, #36]	@ (80028c8 <MX_GPIO_Init+0x270>)
 80028a2:	f003 feb7 	bl	8006614 <HAL_GPIO_Init>

}
 80028a6:	bf00      	nop
 80028a8:	3738      	adds	r7, #56	@ 0x38
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40020800 	.word	0x40020800
 80028bc:	40021400 	.word	0x40021400
 80028c0:	40021800 	.word	0x40021800
 80028c4:	40020000 	.word	0x40020000
 80028c8:	40020c00 	.word	0x40020c00

080028cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028d0:	4b12      	ldr	r3, [pc, #72]	@ (800291c <MX_I2C1_Init+0x50>)
 80028d2:	4a13      	ldr	r2, [pc, #76]	@ (8002920 <MX_I2C1_Init+0x54>)
 80028d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80028d6:	4b11      	ldr	r3, [pc, #68]	@ (800291c <MX_I2C1_Init+0x50>)
 80028d8:	4a12      	ldr	r2, [pc, #72]	@ (8002924 <MX_I2C1_Init+0x58>)
 80028da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028dc:	4b0f      	ldr	r3, [pc, #60]	@ (800291c <MX_I2C1_Init+0x50>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028e2:	4b0e      	ldr	r3, [pc, #56]	@ (800291c <MX_I2C1_Init+0x50>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028e8:	4b0c      	ldr	r3, [pc, #48]	@ (800291c <MX_I2C1_Init+0x50>)
 80028ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028f0:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <MX_I2C1_Init+0x50>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028f6:	4b09      	ldr	r3, [pc, #36]	@ (800291c <MX_I2C1_Init+0x50>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028fc:	4b07      	ldr	r3, [pc, #28]	@ (800291c <MX_I2C1_Init+0x50>)
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002902:	4b06      	ldr	r3, [pc, #24]	@ (800291c <MX_I2C1_Init+0x50>)
 8002904:	2200      	movs	r2, #0
 8002906:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002908:	4804      	ldr	r0, [pc, #16]	@ (800291c <MX_I2C1_Init+0x50>)
 800290a:	f004 f86b 	bl	80069e4 <HAL_I2C_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002914:	f001 f8fe 	bl	8003b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000418 	.word	0x20000418
 8002920:	40005400 	.word	0x40005400
 8002924:	000186a0 	.word	0x000186a0

08002928 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	@ 0x28
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a19      	ldr	r2, [pc, #100]	@ (80029ac <HAL_I2C_MspInit+0x84>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d12b      	bne.n	80029a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	4b18      	ldr	r3, [pc, #96]	@ (80029b0 <HAL_I2C_MspInit+0x88>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	4a17      	ldr	r2, [pc, #92]	@ (80029b0 <HAL_I2C_MspInit+0x88>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	6313      	str	r3, [r2, #48]	@ 0x30
 800295a:	4b15      	ldr	r3, [pc, #84]	@ (80029b0 <HAL_I2C_MspInit+0x88>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002966:	23c0      	movs	r3, #192	@ 0xc0
 8002968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800296a:	2312      	movs	r3, #18
 800296c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002976:	2304      	movs	r3, #4
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4619      	mov	r1, r3
 8002980:	480c      	ldr	r0, [pc, #48]	@ (80029b4 <HAL_I2C_MspInit+0x8c>)
 8002982:	f003 fe47 	bl	8006614 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_I2C_MspInit+0x88>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	4a08      	ldr	r2, [pc, #32]	@ (80029b0 <HAL_I2C_MspInit+0x88>)
 8002990:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002994:	6413      	str	r3, [r2, #64]	@ 0x40
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_I2C_MspInit+0x88>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80029a2:	bf00      	nop
 80029a4:	3728      	adds	r7, #40	@ 0x28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40005400 	.word	0x40005400
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40020400 	.word	0x40020400

080029b8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80029c2:	4a04      	ldr	r2, [pc, #16]	@ (80029d4 <LCD_WR_REG+0x1c>)
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	8013      	strh	r3, [r2, #0]
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	600ffffe 	.word	0x600ffffe

080029d8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80029e2:	4a04      	ldr	r2, [pc, #16]	@ (80029f4 <LCD_WR_DATA+0x1c>)
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	8053      	strh	r3, [r2, #2]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	600ffffe 	.word	0x600ffffe

080029f8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80029fe:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <LCD_RD_DATA+0x20>)
 8002a00:	885b      	ldrh	r3, [r3, #2]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	80fb      	strh	r3, [r7, #6]
	return ram;
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	b29b      	uxth	r3, r3
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	600ffffe 	.word	0x600ffffe

08002a1c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4604      	mov	r4, r0
 8002a24:	4608      	mov	r0, r1
 8002a26:	4611      	mov	r1, r2
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4623      	mov	r3, r4
 8002a2c:	80fb      	strh	r3, [r7, #6]
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80bb      	strh	r3, [r7, #4]
 8002a32:	460b      	mov	r3, r1
 8002a34:	807b      	strh	r3, [r7, #2]
 8002a36:	4613      	mov	r3, r2
 8002a38:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 8002a3a:	202a      	movs	r0, #42	@ 0x2a
 8002a3c:	f7ff ffbc 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(x1>>8);
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff ffc6 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(x1&0xff);
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff ffc0 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(x2>>8);
 8002a58:	887b      	ldrh	r3, [r7, #2]
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ffba 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(x2&0xff);
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff ffb4 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8002a70:	202b      	movs	r0, #43	@ 0x2b
 8002a72:	f7ff ffa1 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(y1>>8);
 8002a76:	88bb      	ldrh	r3, [r7, #4]
 8002a78:	0a1b      	lsrs	r3, r3, #8
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ffab 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(y1&0xff);
 8002a82:	88bb      	ldrh	r3, [r7, #4]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ffa5 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(y2>>8);
 8002a8e:	883b      	ldrh	r3, [r7, #0]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff9f 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(y2&0xff);
 8002a9a:	883b      	ldrh	r3, [r7, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff99 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8002aa6:	202c      	movs	r0, #44	@ 0x2c
 8002aa8:	f7ff ff86 	bl	80029b8 <LCD_WR_REG>
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd90      	pop	{r4, r7, pc}

08002ab4 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8002ace:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <lcd_Clear+0x70>)
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	4b13      	ldr	r3, [pc, #76]	@ (8002b24 <lcd_Clear+0x70>)
 8002ad8:	885b      	ldrh	r3, [r3, #2]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f7ff ff9b 	bl	8002a1c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	81fb      	strh	r3, [r7, #14]
 8002aea:	e011      	b.n	8002b10 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	81bb      	strh	r3, [r7, #12]
 8002af0:	e006      	b.n	8002b00 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff6f 	bl	80029d8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8002afa:	89bb      	ldrh	r3, [r7, #12]
 8002afc:	3301      	adds	r3, #1
 8002afe:	81bb      	strh	r3, [r7, #12]
 8002b00:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <lcd_Clear+0x70>)
 8002b02:	885b      	ldrh	r3, [r3, #2]
 8002b04:	89ba      	ldrh	r2, [r7, #12]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d3f3      	bcc.n	8002af2 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8002b0a:	89fb      	ldrh	r3, [r7, #14]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	81fb      	strh	r3, [r7, #14]
 8002b10:	4b04      	ldr	r3, [pc, #16]	@ (8002b24 <lcd_Clear+0x70>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	89fa      	ldrh	r2, [r7, #14]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d3e8      	bcc.n	8002aec <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8002b1a:	bf00      	nop
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	2000046c 	.word	0x2000046c

08002b28 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4604      	mov	r4, r0
 8002b30:	4608      	mov	r0, r1
 8002b32:	4611      	mov	r1, r2
 8002b34:	461a      	mov	r2, r3
 8002b36:	4623      	mov	r3, r4
 8002b38:	80fb      	strh	r3, [r7, #6]
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	80bb      	strh	r3, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	807b      	strh	r3, [r7, #2]
 8002b42:	4613      	mov	r3, r2
 8002b44:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8002b46:	887b      	ldrh	r3, [r7, #2]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	883b      	ldrh	r3, [r7, #0]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	88b9      	ldrh	r1, [r7, #4]
 8002b54:	88f8      	ldrh	r0, [r7, #6]
 8002b56:	f7ff ff61 	bl	8002a1c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8002b5a:	88bb      	ldrh	r3, [r7, #4]
 8002b5c:	81fb      	strh	r3, [r7, #14]
 8002b5e:	e010      	b.n	8002b82 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	81bb      	strh	r3, [r7, #12]
 8002b64:	e006      	b.n	8002b74 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8002b66:	8c3b      	ldrh	r3, [r7, #32]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff35 	bl	80029d8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8002b6e:	89bb      	ldrh	r3, [r7, #12]
 8002b70:	3301      	adds	r3, #1
 8002b72:	81bb      	strh	r3, [r7, #12]
 8002b74:	89ba      	ldrh	r2, [r7, #12]
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d3f4      	bcc.n	8002b66 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8002b7c:	89fb      	ldrh	r3, [r7, #14]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	81fb      	strh	r3, [r7, #14]
 8002b82:	89fa      	ldrh	r2, [r7, #14]
 8002b84:	883b      	ldrh	r3, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d3ea      	bcc.n	8002b60 <lcd_Fill+0x38>
		}
	}
}
 8002b8a:	bf00      	nop
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd90      	pop	{r4, r7, pc}

08002b94 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	80bb      	strh	r3, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8002ba6:	88bb      	ldrh	r3, [r7, #4]
 8002ba8:	88fa      	ldrh	r2, [r7, #6]
 8002baa:	88b9      	ldrh	r1, [r7, #4]
 8002bac:	88f8      	ldrh	r0, [r7, #6]
 8002bae:	f7ff ff35 	bl	8002a1c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff0f 	bl	80029d8 <LCD_WR_DATA>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <lcd_DrawLine>:

void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8002bc2:	b590      	push	{r4, r7, lr}
 8002bc4:	b08d      	sub	sp, #52	@ 0x34
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4604      	mov	r4, r0
 8002bca:	4608      	mov	r0, r1
 8002bcc:	4611      	mov	r1, r2
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4623      	mov	r3, r4
 8002bd2:	80fb      	strh	r3, [r7, #6]
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	80bb      	strh	r3, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002be4:	2300      	movs	r3, #0
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8002be8:	887a      	ldrh	r2, [r7, #2]
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8002bf0:	883a      	ldrh	r2, [r7, #0]
 8002bf2:	88bb      	ldrh	r3, [r7, #4]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8002bfc:	88bb      	ldrh	r3, [r7, #4]
 8002bfe:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	dd02      	ble.n	8002c0c <lcd_DrawLine+0x4a>
 8002c06:	2301      	movs	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	e00b      	b.n	8002c24 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <lcd_DrawLine+0x56>
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e005      	b.n	8002c24 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8002c18:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	425b      	negs	r3, r3
 8002c22:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	dd02      	ble.n	8002c30 <lcd_DrawLine+0x6e>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	e00b      	b.n	8002c48 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d102      	bne.n	8002c3c <lcd_DrawLine+0x7a>
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	e005      	b.n	8002c48 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8002c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	425b      	negs	r3, r3
 8002c46:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8002c48:	6a3a      	ldr	r2, [r7, #32]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	dd02      	ble.n	8002c56 <lcd_DrawLine+0x94>
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	e001      	b.n	8002c5a <lcd_DrawLine+0x98>
	else distance=delta_y;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002c5e:	e02b      	b.n	8002cb8 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	b291      	uxth	r1, r2
 8002c68:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff91 	bl	8002b94 <lcd_DrawPoint>
		xerr+=delta_x;
 8002c72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	4413      	add	r3, r2
 8002c78:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y;
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	4413      	add	r3, r2
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 8002c82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	dd07      	ble.n	8002c9a <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8002c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	4413      	add	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8002c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	dd07      	ble.n	8002cb2 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4413      	add	r3, r2
 8002cb0:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8002cb2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002cb8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	dacf      	bge.n	8002c60 <lcd_DrawLine+0x9e>
		}
	}
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	3734      	adds	r7, #52	@ 0x34
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd90      	pop	{r4, r7, pc}
	...

08002ccc <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8002ccc:	b590      	push	{r4, r7, lr}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4623      	mov	r3, r4
 8002cdc:	80fb      	strh	r3, [r7, #6]
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80bb      	strh	r3, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	70fb      	strb	r3, [r7, #3]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8002cf2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002cf6:	085b      	lsrs	r3, r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	08db      	lsrs	r3, r3, #3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	bf14      	ite	ne
 8002d0e:	2301      	movne	r3, #1
 8002d10:	2300      	moveq	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	fb12 f303 	smulbb	r3, r2, r3
 8002d22:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	3b20      	subs	r3, #32
 8002d28:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	4413      	add	r3, r2
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29c      	uxth	r4, r3
 8002d38:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	88bb      	ldrh	r3, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	88b9      	ldrh	r1, [r7, #4]
 8002d4a:	88f8      	ldrh	r0, [r7, #6]
 8002d4c:	4622      	mov	r2, r4
 8002d4e:	f7ff fe65 	bl	8002a1c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	827b      	strh	r3, [r7, #18]
 8002d56:	e07a      	b.n	8002e4e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8002d58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d028      	beq.n	8002db2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8002d60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d64:	2b10      	cmp	r3, #16
 8002d66:	d108      	bne.n	8002d7a <lcd_ShowChar+0xae>
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	8a7b      	ldrh	r3, [r7, #18]
 8002d6c:	493c      	ldr	r1, [pc, #240]	@ (8002e60 <lcd_ShowChar+0x194>)
 8002d6e:	0112      	lsls	r2, r2, #4
 8002d70:	440a      	add	r2, r1
 8002d72:	4413      	add	r3, r2
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	75fb      	strb	r3, [r7, #23]
 8002d78:	e01b      	b.n	8002db2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8002d7a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d7e:	2b18      	cmp	r3, #24
 8002d80:	d10b      	bne.n	8002d9a <lcd_ShowChar+0xce>
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	8a79      	ldrh	r1, [r7, #18]
 8002d86:	4837      	ldr	r0, [pc, #220]	@ (8002e64 <lcd_ShowChar+0x198>)
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	4403      	add	r3, r0
 8002d92:	440b      	add	r3, r1
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	75fb      	strb	r3, [r7, #23]
 8002d98:	e00b      	b.n	8002db2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8002d9a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d15a      	bne.n	8002e58 <lcd_ShowChar+0x18c>
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	8a7b      	ldrh	r3, [r7, #18]
 8002da6:	4930      	ldr	r1, [pc, #192]	@ (8002e68 <lcd_ShowChar+0x19c>)
 8002da8:	0192      	lsls	r2, r2, #6
 8002daa:	440a      	add	r2, r1
 8002dac:	4413      	add	r3, r2
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8002db2:	2300      	movs	r3, #0
 8002db4:	75bb      	strb	r3, [r7, #22]
 8002db6:	e044      	b.n	8002e42 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8002db8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d120      	bne.n	8002e02 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8002dc0:	7dfa      	ldrb	r2, [r7, #23]
 8002dc2:	7dbb      	ldrb	r3, [r7, #22]
 8002dc4:	fa42 f303 	asr.w	r3, r2, r3
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <lcd_ShowChar+0x10e>
 8002dd0:	883b      	ldrh	r3, [r7, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fe00 	bl	80029d8 <LCD_WR_DATA>
 8002dd8:	e003      	b.n	8002de2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8002dda:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fdfb 	bl	80029d8 <LCD_WR_DATA>
				m++;
 8002de2:	7d7b      	ldrb	r3, [r7, #21]
 8002de4:	3301      	adds	r3, #1
 8002de6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8002de8:	7d7b      	ldrb	r3, [r7, #21]
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	fbb3 f1f2 	udiv	r1, r3, r2
 8002df0:	fb01 f202 	mul.w	r2, r1, r2
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d11f      	bne.n	8002e3c <lcd_ShowChar+0x170>
				{
					m=0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	757b      	strb	r3, [r7, #21]
					break;
 8002e00:	e022      	b.n	8002e48 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8002e02:	7dfa      	ldrb	r2, [r7, #23]
 8002e04:	7dbb      	ldrb	r3, [r7, #22]
 8002e06:	fa42 f303 	asr.w	r3, r2, r3
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <lcd_ShowChar+0x152>
 8002e12:	883a      	ldrh	r2, [r7, #0]
 8002e14:	88b9      	ldrh	r1, [r7, #4]
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff febb 	bl	8002b94 <lcd_DrawPoint>
				x++;
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	3301      	adds	r3, #1
 8002e22:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002e24:	88fa      	ldrh	r2, [r7, #6]
 8002e26:	8a3b      	ldrh	r3, [r7, #16]
 8002e28:	1ad2      	subs	r2, r2, r3
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d105      	bne.n	8002e3c <lcd_ShowChar+0x170>
				{
					x=x0;
 8002e30:	8a3b      	ldrh	r3, [r7, #16]
 8002e32:	80fb      	strh	r3, [r7, #6]
					y++;
 8002e34:	88bb      	ldrh	r3, [r7, #4]
 8002e36:	3301      	adds	r3, #1
 8002e38:	80bb      	strh	r3, [r7, #4]
					break;
 8002e3a:	e005      	b.n	8002e48 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002e3c:	7dbb      	ldrb	r3, [r7, #22]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	75bb      	strb	r3, [r7, #22]
 8002e42:	7dbb      	ldrb	r3, [r7, #22]
 8002e44:	2b07      	cmp	r3, #7
 8002e46:	d9b7      	bls.n	8002db8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002e48:	8a7b      	ldrh	r3, [r7, #18]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	827b      	strh	r3, [r7, #18]
 8002e4e:	8a7a      	ldrh	r2, [r7, #18]
 8002e50:	89bb      	ldrh	r3, [r7, #12]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d380      	bcc.n	8002d58 <lcd_ShowChar+0x8c>
 8002e56:	e000      	b.n	8002e5a <lcd_ShowChar+0x18e>
		else return;
 8002e58:	bf00      	nop
				}
			}
		}
	}
}
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd90      	pop	{r4, r7, pc}
 8002e60:	0800cdd8 	.word	0x0800cdd8
 8002e64:	0800d3c8 	.word	0x0800d3c8
 8002e68:	0800e598 	.word	0x0800e598

08002e6c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	460a      	mov	r2, r1
 8002e76:	71fb      	strb	r3, [r7, #7]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8002e80:	e004      	b.n	8002e8c <mypow+0x20>
 8002e82:	79fa      	ldrb	r2, [r7, #7]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	79bb      	ldrb	r3, [r7, #6]
 8002e8e:	1e5a      	subs	r2, r3, #1
 8002e90:	71ba      	strb	r2, [r7, #6]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f5      	bne.n	8002e82 <mypow+0x16>
	return result;
 8002e96:	68fb      	ldr	r3, [r7, #12]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b089      	sub	sp, #36	@ 0x24
 8002ea8:	af04      	add	r7, sp, #16
 8002eaa:	4604      	mov	r4, r0
 8002eac:	4608      	mov	r0, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	80fb      	strh	r3, [r7, #6]
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	80bb      	strh	r3, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	807b      	strh	r3, [r7, #2]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8002ec6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	73fb      	strb	r3, [r7, #15]
 8002ed2:	e059      	b.n	8002f88 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8002ed4:	887c      	ldrh	r4, [r7, #2]
 8002ed6:	787a      	ldrb	r2, [r7, #1]
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	200a      	movs	r0, #10
 8002ee6:	f7ff ffc1 	bl	8002e6c <mypow>
 8002eea:	4603      	mov	r3, r0
 8002eec:	fbb4 f1f3 	udiv	r1, r4, r3
 8002ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8002f9c <lcd_ShowIntNum+0xf8>)
 8002ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ef6:	08da      	lsrs	r2, r3, #3
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	1aca      	subs	r2, r1, r3
 8002f02:	4613      	mov	r3, r2
 8002f04:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8002f06:	7bbb      	ldrb	r3, [r7, #14]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d121      	bne.n	8002f50 <lcd_ShowIntNum+0xac>
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	787b      	ldrb	r3, [r7, #1]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	429a      	cmp	r2, r3
 8002f14:	da1c      	bge.n	8002f50 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8002f16:	7b3b      	ldrb	r3, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d117      	bne.n	8002f4c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	7b7b      	ldrb	r3, [r7, #13]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	fb12 f303 	smulbb	r3, r2, r3
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	b298      	uxth	r0, r3
 8002f30:	8c3a      	ldrh	r2, [r7, #32]
 8002f32:	88b9      	ldrh	r1, [r7, #4]
 8002f34:	2300      	movs	r3, #0
 8002f36:	9302      	str	r3, [sp, #8]
 8002f38:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	4613      	mov	r3, r2
 8002f44:	2220      	movs	r2, #32
 8002f46:	f7ff fec1 	bl	8002ccc <lcd_ShowChar>
				continue;
 8002f4a:	e01a      	b.n	8002f82 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	7b7b      	ldrb	r3, [r7, #13]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	fb12 f303 	smulbb	r3, r2, r3
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	4413      	add	r3, r2
 8002f62:	b298      	uxth	r0, r3
 8002f64:	7b3b      	ldrb	r3, [r7, #12]
 8002f66:	3330      	adds	r3, #48	@ 0x30
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	8c3c      	ldrh	r4, [r7, #32]
 8002f6c:	88b9      	ldrh	r1, [r7, #4]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	9302      	str	r3, [sp, #8]
 8002f72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	4623      	mov	r3, r4
 8002f7e:	f7ff fea5 	bl	8002ccc <lcd_ShowChar>
	for(t=0;t<len;t++)
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	3301      	adds	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	787b      	ldrb	r3, [r7, #1]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d3a1      	bcc.n	8002ed4 <lcd_ShowIntNum+0x30>
	}
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd90      	pop	{r4, r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	cccccccd 	.word	0xcccccccd

08002fa0 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8002fa0:	b590      	push	{r4, r7, lr}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4604      	mov	r4, r0
 8002fa8:	4608      	mov	r0, r1
 8002faa:	4611      	mov	r1, r2
 8002fac:	461a      	mov	r2, r3
 8002fae:	4623      	mov	r3, r4
 8002fb0:	80fb      	strh	r3, [r7, #6]
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	80bb      	strh	r3, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	807b      	strh	r3, [r7, #2]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	887b      	ldrh	r3, [r7, #2]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29c      	uxth	r4, r3
 8002fce:	88ba      	ldrh	r2, [r7, #4]
 8002fd0:	883b      	ldrh	r3, [r7, #0]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	88b9      	ldrh	r1, [r7, #4]
 8002fdc:	88f8      	ldrh	r0, [r7, #6]
 8002fde:	4622      	mov	r2, r4
 8002fe0:	f7ff fd1c 	bl	8002a1c <lcd_AddressSet>
	for(i=0;i<length;i++)
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	82fb      	strh	r3, [r7, #22]
 8002fe8:	e027      	b.n	800303a <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8002fea:	2300      	movs	r3, #0
 8002fec:	82bb      	strh	r3, [r7, #20]
 8002fee:	e01d      	b.n	800302c <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ff6:	4413      	add	r3, r2
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	3301      	adds	r3, #1
 8003002:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003004:	4413      	add	r3, r2
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	b21a      	sxth	r2, r3
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	b21b      	sxth	r3, r3
 8003014:	4313      	orrs	r3, r2
 8003016:	b21b      	sxth	r3, r3
 8003018:	b29b      	uxth	r3, r3
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fcdc 	bl	80029d8 <LCD_WR_DATA>
			k++;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	3301      	adds	r3, #1
 8003024:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8003026:	8abb      	ldrh	r3, [r7, #20]
 8003028:	3301      	adds	r3, #1
 800302a:	82bb      	strh	r3, [r7, #20]
 800302c:	8aba      	ldrh	r2, [r7, #20]
 800302e:	883b      	ldrh	r3, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d3dd      	bcc.n	8002ff0 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8003034:	8afb      	ldrh	r3, [r7, #22]
 8003036:	3301      	adds	r3, #1
 8003038:	82fb      	strh	r3, [r7, #22]
 800303a:	8afa      	ldrh	r2, [r7, #22]
 800303c:	887b      	ldrh	r3, [r7, #2]
 800303e:	429a      	cmp	r2, r3
 8003040:	d3d3      	bcc.n	8002fea <lcd_ShowPicture+0x4a>
		}
	}
}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	bd90      	pop	{r4, r7, pc}

0800304c <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8003066:	4b0a      	ldr	r3, [pc, #40]	@ (8003090 <lcd_SetDir+0x44>)
 8003068:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800306c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800306e:	4b08      	ldr	r3, [pc, #32]	@ (8003090 <lcd_SetDir+0x44>)
 8003070:	22f0      	movs	r2, #240	@ 0xf0
 8003072:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8003074:	e006      	b.n	8003084 <lcd_SetDir+0x38>
		lcddev.width=240;
 8003076:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <lcd_SetDir+0x44>)
 8003078:	22f0      	movs	r2, #240	@ 0xf0
 800307a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800307c:	4b04      	ldr	r3, [pc, #16]	@ (8003090 <lcd_SetDir+0x44>)
 800307e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003082:	805a      	strh	r2, [r3, #2]
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	2000046c 	.word	0x2000046c

08003094 <lcd_init>:


void lcd_init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8003098:	2200      	movs	r2, #0
 800309a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800309e:	48aa      	ldr	r0, [pc, #680]	@ (8003348 <lcd_init+0x2b4>)
 80030a0:	f003 fc6c 	bl	800697c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80030a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80030a8:	f002 fba0 	bl	80057ec <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80030ac:	2201      	movs	r2, #1
 80030ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030b2:	48a5      	ldr	r0, [pc, #660]	@ (8003348 <lcd_init+0x2b4>)
 80030b4:	f003 fc62 	bl	800697c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80030b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80030bc:	f002 fb96 	bl	80057ec <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80030c0:	2000      	movs	r0, #0
 80030c2:	f7ff ffc3 	bl	800304c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80030c6:	20d3      	movs	r0, #211	@ 0xd3
 80030c8:	f7ff fc76 	bl	80029b8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80030cc:	f7ff fc94 	bl	80029f8 <LCD_RD_DATA>
 80030d0:	4603      	mov	r3, r0
 80030d2:	461a      	mov	r2, r3
 80030d4:	4b9d      	ldr	r3, [pc, #628]	@ (800334c <lcd_init+0x2b8>)
 80030d6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80030d8:	f7ff fc8e 	bl	80029f8 <LCD_RD_DATA>
 80030dc:	4603      	mov	r3, r0
 80030de:	461a      	mov	r2, r3
 80030e0:	4b9a      	ldr	r3, [pc, #616]	@ (800334c <lcd_init+0x2b8>)
 80030e2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80030e4:	f7ff fc88 	bl	80029f8 <LCD_RD_DATA>
 80030e8:	4603      	mov	r3, r0
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b97      	ldr	r3, [pc, #604]	@ (800334c <lcd_init+0x2b8>)
 80030ee:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80030f0:	4b96      	ldr	r3, [pc, #600]	@ (800334c <lcd_init+0x2b8>)
 80030f2:	889b      	ldrh	r3, [r3, #4]
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	4b94      	ldr	r3, [pc, #592]	@ (800334c <lcd_init+0x2b8>)
 80030fa:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80030fc:	f7ff fc7c 	bl	80029f8 <LCD_RD_DATA>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	4b91      	ldr	r3, [pc, #580]	@ (800334c <lcd_init+0x2b8>)
 8003106:	889b      	ldrh	r3, [r3, #4]
 8003108:	4313      	orrs	r3, r2
 800310a:	b29a      	uxth	r2, r3
 800310c:	4b8f      	ldr	r3, [pc, #572]	@ (800334c <lcd_init+0x2b8>)
 800310e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8003110:	20cf      	movs	r0, #207	@ 0xcf
 8003112:	f7ff fc51 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003116:	2000      	movs	r0, #0
 8003118:	f7ff fc5e 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800311c:	20c1      	movs	r0, #193	@ 0xc1
 800311e:	f7ff fc5b 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8003122:	2030      	movs	r0, #48	@ 0x30
 8003124:	f7ff fc58 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8003128:	20ed      	movs	r0, #237	@ 0xed
 800312a:	f7ff fc45 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800312e:	2064      	movs	r0, #100	@ 0x64
 8003130:	f7ff fc52 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8003134:	2003      	movs	r0, #3
 8003136:	f7ff fc4f 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800313a:	2012      	movs	r0, #18
 800313c:	f7ff fc4c 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8003140:	2081      	movs	r0, #129	@ 0x81
 8003142:	f7ff fc49 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8003146:	20e8      	movs	r0, #232	@ 0xe8
 8003148:	f7ff fc36 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800314c:	2085      	movs	r0, #133	@ 0x85
 800314e:	f7ff fc43 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8003152:	2010      	movs	r0, #16
 8003154:	f7ff fc40 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8003158:	207a      	movs	r0, #122	@ 0x7a
 800315a:	f7ff fc3d 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800315e:	20cb      	movs	r0, #203	@ 0xcb
 8003160:	f7ff fc2a 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8003164:	2039      	movs	r0, #57	@ 0x39
 8003166:	f7ff fc37 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800316a:	202c      	movs	r0, #44	@ 0x2c
 800316c:	f7ff fc34 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003170:	2000      	movs	r0, #0
 8003172:	f7ff fc31 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8003176:	2034      	movs	r0, #52	@ 0x34
 8003178:	f7ff fc2e 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800317c:	2002      	movs	r0, #2
 800317e:	f7ff fc2b 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8003182:	20f7      	movs	r0, #247	@ 0xf7
 8003184:	f7ff fc18 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8003188:	2020      	movs	r0, #32
 800318a:	f7ff fc25 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800318e:	20ea      	movs	r0, #234	@ 0xea
 8003190:	f7ff fc12 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003194:	2000      	movs	r0, #0
 8003196:	f7ff fc1f 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800319a:	2000      	movs	r0, #0
 800319c:	f7ff fc1c 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80031a0:	20c0      	movs	r0, #192	@ 0xc0
 80031a2:	f7ff fc09 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80031a6:	201b      	movs	r0, #27
 80031a8:	f7ff fc16 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80031ac:	20c1      	movs	r0, #193	@ 0xc1
 80031ae:	f7ff fc03 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80031b2:	2001      	movs	r0, #1
 80031b4:	f7ff fc10 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80031b8:	20c5      	movs	r0, #197	@ 0xc5
 80031ba:	f7ff fbfd 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80031be:	2030      	movs	r0, #48	@ 0x30
 80031c0:	f7ff fc0a 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80031c4:	2030      	movs	r0, #48	@ 0x30
 80031c6:	f7ff fc07 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80031ca:	20c7      	movs	r0, #199	@ 0xc7
 80031cc:	f7ff fbf4 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80031d0:	20b7      	movs	r0, #183	@ 0xb7
 80031d2:	f7ff fc01 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80031d6:	2036      	movs	r0, #54	@ 0x36
 80031d8:	f7ff fbee 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80031dc:	2008      	movs	r0, #8
 80031de:	f7ff fbfb 	bl	80029d8 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80031e2:	203a      	movs	r0, #58	@ 0x3a
 80031e4:	f7ff fbe8 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80031e8:	2055      	movs	r0, #85	@ 0x55
 80031ea:	f7ff fbf5 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80031ee:	20b1      	movs	r0, #177	@ 0xb1
 80031f0:	f7ff fbe2 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80031f4:	2000      	movs	r0, #0
 80031f6:	f7ff fbef 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80031fa:	201a      	movs	r0, #26
 80031fc:	f7ff fbec 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8003200:	20b6      	movs	r0, #182	@ 0xb6
 8003202:	f7ff fbd9 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8003206:	200a      	movs	r0, #10
 8003208:	f7ff fbe6 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800320c:	20a2      	movs	r0, #162	@ 0xa2
 800320e:	f7ff fbe3 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8003212:	20f2      	movs	r0, #242	@ 0xf2
 8003214:	f7ff fbd0 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003218:	2000      	movs	r0, #0
 800321a:	f7ff fbdd 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800321e:	2026      	movs	r0, #38	@ 0x26
 8003220:	f7ff fbca 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8003224:	2001      	movs	r0, #1
 8003226:	f7ff fbd7 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800322a:	20e0      	movs	r0, #224	@ 0xe0
 800322c:	f7ff fbc4 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8003230:	200f      	movs	r0, #15
 8003232:	f7ff fbd1 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8003236:	202a      	movs	r0, #42	@ 0x2a
 8003238:	f7ff fbce 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800323c:	2028      	movs	r0, #40	@ 0x28
 800323e:	f7ff fbcb 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8003242:	2008      	movs	r0, #8
 8003244:	f7ff fbc8 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8003248:	200e      	movs	r0, #14
 800324a:	f7ff fbc5 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800324e:	2008      	movs	r0, #8
 8003250:	f7ff fbc2 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8003254:	2054      	movs	r0, #84	@ 0x54
 8003256:	f7ff fbbf 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800325a:	20a9      	movs	r0, #169	@ 0xa9
 800325c:	f7ff fbbc 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8003260:	2043      	movs	r0, #67	@ 0x43
 8003262:	f7ff fbb9 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8003266:	200a      	movs	r0, #10
 8003268:	f7ff fbb6 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800326c:	200f      	movs	r0, #15
 800326e:	f7ff fbb3 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003272:	2000      	movs	r0, #0
 8003274:	f7ff fbb0 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003278:	2000      	movs	r0, #0
 800327a:	f7ff fbad 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800327e:	2000      	movs	r0, #0
 8003280:	f7ff fbaa 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003284:	2000      	movs	r0, #0
 8003286:	f7ff fba7 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800328a:	20e1      	movs	r0, #225	@ 0xe1
 800328c:	f7ff fb94 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003290:	2000      	movs	r0, #0
 8003292:	f7ff fba1 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8003296:	2015      	movs	r0, #21
 8003298:	f7ff fb9e 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800329c:	2017      	movs	r0, #23
 800329e:	f7ff fb9b 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80032a2:	2007      	movs	r0, #7
 80032a4:	f7ff fb98 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80032a8:	2011      	movs	r0, #17
 80032aa:	f7ff fb95 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80032ae:	2006      	movs	r0, #6
 80032b0:	f7ff fb92 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80032b4:	202b      	movs	r0, #43	@ 0x2b
 80032b6:	f7ff fb8f 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80032ba:	2056      	movs	r0, #86	@ 0x56
 80032bc:	f7ff fb8c 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80032c0:	203c      	movs	r0, #60	@ 0x3c
 80032c2:	f7ff fb89 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80032c6:	2005      	movs	r0, #5
 80032c8:	f7ff fb86 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80032cc:	2010      	movs	r0, #16
 80032ce:	f7ff fb83 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80032d2:	200f      	movs	r0, #15
 80032d4:	f7ff fb80 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80032d8:	203f      	movs	r0, #63	@ 0x3f
 80032da:	f7ff fb7d 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80032de:	203f      	movs	r0, #63	@ 0x3f
 80032e0:	f7ff fb7a 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80032e4:	200f      	movs	r0, #15
 80032e6:	f7ff fb77 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80032ea:	202b      	movs	r0, #43	@ 0x2b
 80032ec:	f7ff fb64 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80032f0:	2000      	movs	r0, #0
 80032f2:	f7ff fb71 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80032f6:	2000      	movs	r0, #0
 80032f8:	f7ff fb6e 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80032fc:	2001      	movs	r0, #1
 80032fe:	f7ff fb6b 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8003302:	203f      	movs	r0, #63	@ 0x3f
 8003304:	f7ff fb68 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8003308:	202a      	movs	r0, #42	@ 0x2a
 800330a:	f7ff fb55 	bl	80029b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800330e:	2000      	movs	r0, #0
 8003310:	f7ff fb62 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003314:	2000      	movs	r0, #0
 8003316:	f7ff fb5f 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800331a:	2000      	movs	r0, #0
 800331c:	f7ff fb5c 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8003320:	20ef      	movs	r0, #239	@ 0xef
 8003322:	f7ff fb59 	bl	80029d8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8003326:	2011      	movs	r0, #17
 8003328:	f7ff fb46 	bl	80029b8 <LCD_WR_REG>
	HAL_Delay(120);
 800332c:	2078      	movs	r0, #120	@ 0x78
 800332e:	f002 fa5d 	bl	80057ec <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8003332:	2029      	movs	r0, #41	@ 0x29
 8003334:	f7ff fb40 	bl	80029b8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8003338:	2201      	movs	r2, #1
 800333a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800333e:	4804      	ldr	r0, [pc, #16]	@ (8003350 <lcd_init+0x2bc>)
 8003340:	f003 fb1c 	bl	800697c <HAL_GPIO_WritePin>
}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40020800 	.word	0x40020800
 800334c:	2000046c 	.word	0x2000046c
 8003350:	40020000 	.word	0x40020000

08003354 <_draw_circle_8>:

void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	b29a      	uxth	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	b29b      	uxth	r3, r3
 800336a:	4413      	add	r3, r2
 800336c:	b298      	uxth	r0, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	b29a      	uxth	r2, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	4413      	add	r3, r2
 8003378:	b29b      	uxth	r3, r3
 800337a:	8b3a      	ldrh	r2, [r7, #24]
 800337c:	4619      	mov	r1, r3
 800337e:	f7ff fc09 	bl	8002b94 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	b29a      	uxth	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	b29b      	uxth	r3, r3
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	b298      	uxth	r0, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	b29a      	uxth	r2, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	4413      	add	r3, r2
 8003398:	b29b      	uxth	r3, r3
 800339a:	8b3a      	ldrh	r2, [r7, #24]
 800339c:	4619      	mov	r1, r3
 800339e:	f7ff fbf9 	bl	8002b94 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	4413      	add	r3, r2
 80033ac:	b298      	uxth	r0, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	8b3a      	ldrh	r2, [r7, #24]
 80033bc:	4619      	mov	r1, r3
 80033be:	f7ff fbe9 	bl	8002b94 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	b298      	uxth	r0, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	b29b      	uxth	r3, r3
 80033da:	8b3a      	ldrh	r2, [r7, #24]
 80033dc:	4619      	mov	r1, r3
 80033de:	f7ff fbd9 	bl	8002b94 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	b298      	uxth	r0, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	4413      	add	r3, r2
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	8b3a      	ldrh	r2, [r7, #24]
 80033fc:	4619      	mov	r1, r3
 80033fe:	f7ff fbc9 	bl	8002b94 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	b29a      	uxth	r2, r3
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	b298      	uxth	r0, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	b29a      	uxth	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	b29b      	uxth	r3, r3
 8003416:	4413      	add	r3, r2
 8003418:	b29b      	uxth	r3, r3
 800341a:	8b3a      	ldrh	r2, [r7, #24]
 800341c:	4619      	mov	r1, r3
 800341e:	f7ff fbb9 	bl	8002b94 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	b29a      	uxth	r2, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	4413      	add	r3, r2
 800342c:	b298      	uxth	r0, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	b29a      	uxth	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	b29b      	uxth	r3, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	b29b      	uxth	r3, r3
 800343a:	8b3a      	ldrh	r2, [r7, #24]
 800343c:	4619      	mov	r1, r3
 800343e:	f7ff fba9 	bl	8002b94 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	b29a      	uxth	r2, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	b298      	uxth	r0, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	b29a      	uxth	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	b29b      	uxth	r3, r3
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	b29b      	uxth	r3, r3
 800345a:	8b3a      	ldrh	r2, [r7, #24]
 800345c:	4619      	mov	r1, r3
 800345e:	f7ff fb99 	bl	8002b94 <lcd_DrawPoint>
}
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b08a      	sub	sp, #40	@ 0x28
 800346e:	af02      	add	r7, sp, #8
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	f1c3 0303 	rsb	r3, r3, #3
 800348a:	613b      	str	r3, [r7, #16]


	if (fill)
 800348c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348e:	2b00      	cmp	r3, #0
 8003490:	d04f      	beq.n	8003532 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8003492:	e029      	b.n	80034e8 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e00a      	b.n	80034b0 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	68b9      	ldr	r1, [r7, #8]
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7ff ff55 	bl	8003354 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	3301      	adds	r3, #1
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	ddf0      	ble.n	800349a <lcd_DrawCircle+0x30>

			if (d < 0) {
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	da06      	bge.n	80034cc <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	009a      	lsls	r2, r3, #2
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4413      	add	r3, r2
 80034c6:	3306      	adds	r3, #6
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	e00a      	b.n	80034e2 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	009a      	lsls	r2, r3, #2
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4413      	add	r3, r2
 80034d8:	330a      	adds	r3, #10
 80034da:	613b      	str	r3, [r7, #16]
				y--;
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	3b01      	subs	r3, #1
 80034e0:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3301      	adds	r3, #1
 80034e6:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	ddd1      	ble.n	8003494 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80034f0:	e023      	b.n	800353a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7ff ff29 	bl	8003354 <_draw_circle_8>
			if (d < 0) {
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	da06      	bge.n	8003516 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	009a      	lsls	r2, r3, #2
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4413      	add	r3, r2
 8003510:	3306      	adds	r3, #6
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	e00a      	b.n	800352c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	009a      	lsls	r2, r3, #2
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4413      	add	r3, r2
 8003522:	330a      	adds	r3, #10
 8003524:	613b      	str	r3, [r7, #16]
				y--;
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	3b01      	subs	r3, #1
 800352a:	61bb      	str	r3, [r7, #24]
			x++;
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	3301      	adds	r3, #1
 8003530:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	429a      	cmp	r2, r3
 8003538:	dddb      	ble.n	80034f2 <lcd_DrawCircle+0x88>
}
 800353a:	bf00      	nop
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8003544:	b590      	push	{r4, r7, lr}
 8003546:	b08b      	sub	sp, #44	@ 0x2c
 8003548:	af04      	add	r7, sp, #16
 800354a:	60ba      	str	r2, [r7, #8]
 800354c:	461a      	mov	r2, r3
 800354e:	4603      	mov	r3, r0
 8003550:	81fb      	strh	r3, [r7, #14]
 8003552:	460b      	mov	r3, r1
 8003554:	81bb      	strh	r3, [r7, #12]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800355a:	89fb      	ldrh	r3, [r7, #14]
 800355c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8003562:	e048      	b.n	80035f6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d145      	bne.n	80035f6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800356a:	89fa      	ldrh	r2, [r7, #14]
 800356c:	4b26      	ldr	r3, [pc, #152]	@ (8003608 <lcd_ShowStr+0xc4>)
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	4619      	mov	r1, r3
 8003572:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	b2db      	uxtb	r3, r3
 800357a:	1acb      	subs	r3, r1, r3
 800357c:	429a      	cmp	r2, r3
 800357e:	dc3f      	bgt.n	8003600 <lcd_ShowStr+0xbc>
 8003580:	89ba      	ldrh	r2, [r7, #12]
 8003582:	4b21      	ldr	r3, [pc, #132]	@ (8003608 <lcd_ShowStr+0xc4>)
 8003584:	885b      	ldrh	r3, [r3, #2]
 8003586:	4619      	mov	r1, r3
 8003588:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800358c:	1acb      	subs	r3, r1, r3
 800358e:	429a      	cmp	r2, r3
 8003590:	dc36      	bgt.n	8003600 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b80      	cmp	r3, #128	@ 0x80
 8003598:	d902      	bls.n	80035a0 <lcd_ShowStr+0x5c>
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
 800359e:	e02a      	b.n	80035f6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b0d      	cmp	r3, #13
 80035a6:	d10b      	bne.n	80035c0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80035a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	89bb      	ldrh	r3, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80035b4:	8abb      	ldrh	r3, [r7, #20]
 80035b6:	81fb      	strh	r3, [r7, #14]
					str++;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	3301      	adds	r3, #1
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	e017      	b.n	80035f0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	781a      	ldrb	r2, [r3, #0]
 80035c4:	88fc      	ldrh	r4, [r7, #6]
 80035c6:	89b9      	ldrh	r1, [r7, #12]
 80035c8:	89f8      	ldrh	r0, [r7, #14]
 80035ca:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80035ce:	9302      	str	r3, [sp, #8]
 80035d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	4623      	mov	r3, r4
 80035dc:	f7ff fb76 	bl	8002ccc <lcd_ShowChar>
					x+=sizey/2;
 80035e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80035e4:	085b      	lsrs	r3, r3, #1
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	89fb      	ldrh	r3, [r7, #14]
 80035ec:	4413      	add	r3, r2
 80035ee:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	3301      	adds	r3, #1
 80035f4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1b2      	bne.n	8003564 <lcd_ShowStr+0x20>
 80035fe:	e000      	b.n	8003602 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8003600:	bf00      	nop
			}
		}
	}
}
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	bd90      	pop	{r4, r7, pc}
 8003608:	2000046c 	.word	0x2000046c

0800360c <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	@ 0x28
 8003610:	af04      	add	r7, sp, #16
 8003612:	60ba      	str	r2, [r7, #8]
 8003614:	461a      	mov	r2, r3
 8003616:	4603      	mov	r3, r0
 8003618:	81fb      	strh	r3, [r7, #14]
 800361a:	460b      	mov	r3, r1
 800361c:	81bb      	strh	r3, [r7, #12]
 800361e:	4613      	mov	r3, r2
 8003620:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8003622:	68b8      	ldr	r0, [r7, #8]
 8003624:	f7fc fdd0 	bl	80001c8 <strlen>
 8003628:	4603      	mov	r3, r0
 800362a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 800362c:	4b0f      	ldr	r3, [pc, #60]	@ (800366c <lcd_StrCenter+0x60>)
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	8afb      	ldrh	r3, [r7, #22]
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	0fda      	lsrs	r2, r3, #31
 800363a:	4413      	add	r3, r2
 800363c:	105b      	asrs	r3, r3, #1
 800363e:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8003640:	89fa      	ldrh	r2, [r7, #14]
 8003642:	8abb      	ldrh	r3, [r7, #20]
 8003644:	4413      	add	r3, r2
 8003646:	b298      	uxth	r0, r3
 8003648:	88fa      	ldrh	r2, [r7, #6]
 800364a:	89b9      	ldrh	r1, [r7, #12]
 800364c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003650:	9302      	str	r3, [sp, #8]
 8003652:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	8c3b      	ldrh	r3, [r7, #32]
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	f7ff ff70 	bl	8003544 <lcd_ShowStr>
}
 8003664:	bf00      	nop
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	2000046c 	.word	0x2000046c

08003670 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8003674:	2201      	movs	r2, #1
 8003676:	2140      	movs	r1, #64	@ 0x40
 8003678:	4802      	ldr	r0, [pc, #8]	@ (8003684 <led7_init+0x14>)
 800367a:	f003 f97f 	bl	800697c <HAL_GPIO_WritePin>
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40021800 	.word	0x40021800

08003688 <led7_Scan>:

void led7_Scan(){
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800368c:	4b3f      	ldr	r3, [pc, #252]	@ (800378c <led7_Scan+0x104>)
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	b29a      	uxth	r2, r3
 8003694:	4b3d      	ldr	r3, [pc, #244]	@ (800378c <led7_Scan+0x104>)
 8003696:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8003698:	4b3d      	ldr	r3, [pc, #244]	@ (8003790 <led7_Scan+0x108>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a3d      	ldr	r2, [pc, #244]	@ (8003794 <led7_Scan+0x10c>)
 800369e:	5cd3      	ldrb	r3, [r2, r3]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	b21a      	sxth	r2, r3
 80036a4:	4b39      	ldr	r3, [pc, #228]	@ (800378c <led7_Scan+0x104>)
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	b21b      	sxth	r3, r3
 80036aa:	4313      	orrs	r3, r2
 80036ac:	b21b      	sxth	r3, r3
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	4b36      	ldr	r3, [pc, #216]	@ (800378c <led7_Scan+0x104>)
 80036b2:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80036b4:	4b36      	ldr	r3, [pc, #216]	@ (8003790 <led7_Scan+0x108>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d847      	bhi.n	800374c <led7_Scan+0xc4>
 80036bc:	a201      	add	r2, pc, #4	@ (adr r2, 80036c4 <led7_Scan+0x3c>)
 80036be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c2:	bf00      	nop
 80036c4:	080036d5 	.word	0x080036d5
 80036c8:	080036f3 	.word	0x080036f3
 80036cc:	08003711 	.word	0x08003711
 80036d0:	0800372f 	.word	0x0800372f
	case 0:
		spi_buffer |= 0x00b0;
 80036d4:	4b2d      	ldr	r3, [pc, #180]	@ (800378c <led7_Scan+0x104>)
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80036dc:	b29a      	uxth	r2, r3
 80036de:	4b2b      	ldr	r3, [pc, #172]	@ (800378c <led7_Scan+0x104>)
 80036e0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80036e2:	4b2a      	ldr	r3, [pc, #168]	@ (800378c <led7_Scan+0x104>)
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	4b27      	ldr	r3, [pc, #156]	@ (800378c <led7_Scan+0x104>)
 80036ee:	801a      	strh	r2, [r3, #0]
		break;
 80036f0:	e02d      	b.n	800374e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80036f2:	4b26      	ldr	r3, [pc, #152]	@ (800378c <led7_Scan+0x104>)
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	4b23      	ldr	r3, [pc, #140]	@ (800378c <led7_Scan+0x104>)
 80036fe:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8003700:	4b22      	ldr	r3, [pc, #136]	@ (800378c <led7_Scan+0x104>)
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	f023 0320 	bic.w	r3, r3, #32
 8003708:	b29a      	uxth	r2, r3
 800370a:	4b20      	ldr	r3, [pc, #128]	@ (800378c <led7_Scan+0x104>)
 800370c:	801a      	strh	r2, [r3, #0]
		break;
 800370e:	e01e      	b.n	800374e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8003710:	4b1e      	ldr	r3, [pc, #120]	@ (800378c <led7_Scan+0x104>)
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8003718:	b29a      	uxth	r2, r3
 800371a:	4b1c      	ldr	r3, [pc, #112]	@ (800378c <led7_Scan+0x104>)
 800371c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800371e:	4b1b      	ldr	r3, [pc, #108]	@ (800378c <led7_Scan+0x104>)
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	f023 0310 	bic.w	r3, r3, #16
 8003726:	b29a      	uxth	r2, r3
 8003728:	4b18      	ldr	r3, [pc, #96]	@ (800378c <led7_Scan+0x104>)
 800372a:	801a      	strh	r2, [r3, #0]
		break;
 800372c:	e00f      	b.n	800374e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800372e:	4b17      	ldr	r3, [pc, #92]	@ (800378c <led7_Scan+0x104>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003736:	b29a      	uxth	r2, r3
 8003738:	4b14      	ldr	r3, [pc, #80]	@ (800378c <led7_Scan+0x104>)
 800373a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 800373c:	4b13      	ldr	r3, [pc, #76]	@ (800378c <led7_Scan+0x104>)
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003744:	b29a      	uxth	r2, r3
 8003746:	4b11      	ldr	r3, [pc, #68]	@ (800378c <led7_Scan+0x104>)
 8003748:	801a      	strh	r2, [r3, #0]
		break;
 800374a:	e000      	b.n	800374e <led7_Scan+0xc6>
	default:
		break;
 800374c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800374e:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <led7_Scan+0x108>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	425a      	negs	r2, r3
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	f002 0203 	and.w	r2, r2, #3
 800375e:	bf58      	it	pl
 8003760:	4253      	negpl	r3, r2
 8003762:	4a0b      	ldr	r2, [pc, #44]	@ (8003790 <led7_Scan+0x108>)
 8003764:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8003766:	2200      	movs	r2, #0
 8003768:	2140      	movs	r1, #64	@ 0x40
 800376a:	480b      	ldr	r0, [pc, #44]	@ (8003798 <led7_Scan+0x110>)
 800376c:	f003 f906 	bl	800697c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8003770:	2301      	movs	r3, #1
 8003772:	2202      	movs	r2, #2
 8003774:	4905      	ldr	r1, [pc, #20]	@ (800378c <led7_Scan+0x104>)
 8003776:	4809      	ldr	r0, [pc, #36]	@ (800379c <led7_Scan+0x114>)
 8003778:	f004 ffa7 	bl	80086ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800377c:	2201      	movs	r2, #1
 800377e:	2140      	movs	r1, #64	@ 0x40
 8003780:	4805      	ldr	r0, [pc, #20]	@ (8003798 <led7_Scan+0x110>)
 8003782:	f003 f8fb 	bl	800697c <HAL_GPIO_WritePin>
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	2000002a 	.word	0x2000002a
 8003790:	20000474 	.word	0x20000474
 8003794:	2000001c 	.word	0x2000001c
 8003798:	40021800 	.word	0x40021800
 800379c:	2000049c 	.word	0x2000049c

080037a0 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	4613      	mov	r3, r2
 80037ac:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	db0e      	blt.n	80037d2 <led7_SetDigit+0x32>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b09      	cmp	r3, #9
 80037b8:	dc0b      	bgt.n	80037d2 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80037ba:	4a09      	ldr	r2, [pc, #36]	@ (80037e0 <led7_SetDigit+0x40>)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	781a      	ldrb	r2, [r3, #0]
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	b2d9      	uxtb	r1, r3
 80037c8:	4a06      	ldr	r2, [pc, #24]	@ (80037e4 <led7_SetDigit+0x44>)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4413      	add	r3, r2
 80037ce:	460a      	mov	r2, r1
 80037d0:	701a      	strb	r2, [r3, #0]
	}
}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000020 	.word	0x20000020
 80037e4:	2000001c 	.word	0x2000001c

080037e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037ec:	f001 ff8c 	bl	8005708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037f0:	f000 f832 	bl	8003858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037f4:	f7fe ff30 	bl	8002658 <MX_GPIO_Init>
  MX_DMA_Init();
 80037f8:	f7fd fd34 	bl	8001264 <MX_DMA_Init>
  MX_SPI1_Init();
 80037fc:	f000 fb80 	bl	8003f00 <MX_SPI1_Init>
  MX_FSMC_Init();
 8003800:	f7fe fe4a 	bl	8002498 <MX_FSMC_Init>
  MX_I2C1_Init();
 8003804:	f7ff f862 	bl	80028cc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8003808:	f001 fe60 	bl	80054cc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800380c:	f000 fce2 	bl	80041d4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8003810:	f7fd fae6 	bl	8000de0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8003814:	f001 fe30 	bl	8005478 <MX_USART1_UART_Init>
  MX_TIM13_Init();
 8003818:	f000 fd28 	bl	800426c <MX_TIM13_Init>
  MX_TIM1_Init();
 800381c:	f000 fc8a 	bl	8004134 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8003820:	f000 f884 	bl	800392c <system_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //scan touch screen
	  touch_Scan();
 8003824:	f001 fcaa 	bl	800517c <touch_Scan>
//	  if(touch_IsTouched() && draw_Status == DRAW){
//            //draw a point at the touch position
//		  lcd_DrawPoint(touch_GetX(), touch_GetY(), RED);
//	  }
//	  // 50ms task
	  if(flag_timer2 == 1){
 8003828:	4b09      	ldr	r3, [pc, #36]	@ (8003850 <main+0x68>)
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d1f9      	bne.n	8003824 <main+0x3c>
		  flag_timer2 = 0;
 8003830:	4b07      	ldr	r3, [pc, #28]	@ (8003850 <main+0x68>)
 8003832:	2200      	movs	r2, #0
 8003834:	801a      	strh	r2, [r3, #0]
//		  touchProcess();
		  test_LedDebug();
 8003836:	f000 f8f1 	bl	8003a1c <test_LedDebug>
//		  led7_SetDigit(isButtonClear(), 0, 0);
		  button_Scan();
 800383a:	f7fd fc9d 	bl	8001178 <button_Scan>
		  fsm_machine_mode(mode);
 800383e:	4b05      	ldr	r3, [pc, #20]	@ (8003854 <main+0x6c>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fd ff52 	bl	80016ec <fsm_machine_mode>
		  test_button();
 8003848:	f000 f90c 	bl	8003a64 <test_button>
	  touch_Scan();
 800384c:	e7ea      	b.n	8003824 <main+0x3c>
 800384e:	bf00      	nop
 8003850:	20000480 	.word	0x20000480
 8003854:	200003bb 	.word	0x200003bb

08003858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b094      	sub	sp, #80	@ 0x50
 800385c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800385e:	f107 0320 	add.w	r3, r7, #32
 8003862:	2230      	movs	r2, #48	@ 0x30
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f007 fefa 	bl	800b660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800386c:	f107 030c 	add.w	r3, r7, #12
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800387c:	2300      	movs	r3, #0
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	4b28      	ldr	r3, [pc, #160]	@ (8003924 <SystemClock_Config+0xcc>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	4a27      	ldr	r2, [pc, #156]	@ (8003924 <SystemClock_Config+0xcc>)
 8003886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800388a:	6413      	str	r3, [r2, #64]	@ 0x40
 800388c:	4b25      	ldr	r3, [pc, #148]	@ (8003924 <SystemClock_Config+0xcc>)
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003898:	2300      	movs	r3, #0
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	4b22      	ldr	r3, [pc, #136]	@ (8003928 <SystemClock_Config+0xd0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a21      	ldr	r2, [pc, #132]	@ (8003928 <SystemClock_Config+0xd0>)
 80038a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003928 <SystemClock_Config+0xd0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038b4:	2302      	movs	r3, #2
 80038b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038b8:	2301      	movs	r3, #1
 80038ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038bc:	2310      	movs	r3, #16
 80038be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038c0:	2302      	movs	r3, #2
 80038c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038c4:	2300      	movs	r3, #0
 80038c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038c8:	2308      	movs	r3, #8
 80038ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80038cc:	23a8      	movs	r3, #168	@ 0xa8
 80038ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038d0:	2302      	movs	r3, #2
 80038d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80038d4:	2304      	movs	r3, #4
 80038d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038d8:	f107 0320 	add.w	r3, r7, #32
 80038dc:	4618      	mov	r0, r3
 80038de:	f004 f9d3 	bl	8007c88 <HAL_RCC_OscConfig>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80038e8:	f000 f914 	bl	8003b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038ec:	230f      	movs	r3, #15
 80038ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038f0:	2302      	movs	r3, #2
 80038f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80038fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80038fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003902:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003904:	f107 030c 	add.w	r3, r7, #12
 8003908:	2105      	movs	r1, #5
 800390a:	4618      	mov	r0, r3
 800390c:	f004 fc34 	bl	8008178 <HAL_RCC_ClockConfig>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003916:	f000 f8fd 	bl	8003b14 <Error_Handler>
  }
}
 800391a:	bf00      	nop
 800391c:	3750      	adds	r7, #80	@ 0x50
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
 8003928:	40007000 	.word	0x40007000

0800392c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af04      	add	r7, sp, #16
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8003932:	2200      	movs	r2, #0
 8003934:	2120      	movs	r1, #32
 8003936:	4832      	ldr	r0, [pc, #200]	@ (8003a00 <system_init+0xd4>)
 8003938:	f003 f820 	bl	800697c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800393c:	2200      	movs	r2, #0
 800393e:	2140      	movs	r1, #64	@ 0x40
 8003940:	482f      	ldr	r0, [pc, #188]	@ (8003a00 <system_init+0xd4>)
 8003942:	f003 f81b 	bl	800697c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8003946:	2200      	movs	r2, #0
 8003948:	2110      	movs	r1, #16
 800394a:	482d      	ldr	r0, [pc, #180]	@ (8003a00 <system_init+0xd4>)
 800394c:	f003 f816 	bl	800697c <HAL_GPIO_WritePin>
	  timer_init();
 8003950:	f000 f982 	bl	8003c58 <timer_init>
	  led7_init();
 8003954:	f7ff fe8c 	bl	8003670 <led7_init>
	  button_init();
 8003958:	f7fd fc02 	bl	8001160 <button_init>
	  lcd_init();
 800395c:	f7ff fb9a 	bl	8003094 <lcd_init>
	  touch_init();
 8003960:	f001 fbfc 	bl	800515c <touch_init>
	  ds3231_init();
 8003964:	f7fd fc9e 	bl	80012a4 <ds3231_init>
	  buzzer_init();
 8003968:	f7fd fc72 	bl	8001250 <buzzer_init>
	  setTimer2(50);
 800396c:	2032      	movs	r0, #50	@ 0x32
 800396e:	f000 f981 	bl	8003c74 <setTimer2>
	  uart_init_esp();
 8003972:	f001 fca3 	bl	80052bc <uart_init_esp>
	  lcd_Clear(BLACK);
 8003976:	2000      	movs	r0, #0
 8003978:	f7ff f89c 	bl	8002ab4 <lcd_Clear>
	  updateTime();
 800397c:	f000 f8aa 	bl	8003ad4 <updateTime>
	  mode = NORMAL_MODE;
 8003980:	4b20      	ldr	r3, [pc, #128]	@ (8003a04 <system_init+0xd8>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
	  setTimer3(50);
 8003986:	2032      	movs	r0, #50	@ 0x32
 8003988:	f000 f990 	bl	8003cac <setTimer3>
	  setTimer4(50);
 800398c:	2032      	movs	r0, #50	@ 0x32
 800398e:	f000 f9a3 	bl	8003cd8 <setTimer4>
	  setTimer5(50);
 8003992:	2032      	movs	r0, #50	@ 0x32
 8003994:	f000 f9b6 	bl	8003d04 <setTimer5>
	  setTimer6(50);
 8003998:	2032      	movs	r0, #50	@ 0x32
 800399a:	f000 f9c9 	bl	8003d30 <setTimer6>
	  setTimerAlarm(50);
 800399e:	2032      	movs	r0, #50	@ 0x32
 80039a0:	f000 f9dc 	bl	8003d5c <setTimerAlarm>
	  ds3231_ReadAlarm();
 80039a4:	f7fd fd80 	bl	80014a8 <ds3231_ReadAlarm>
	  flag_colon = 0;
 80039a8:	4b17      	ldr	r3, [pc, #92]	@ (8003a08 <system_init+0xdc>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
	  lcd_StrCenter(0,2,"NORMAL_MODE",WHITE,BLUE,16,1);
 80039ae:	2301      	movs	r3, #1
 80039b0:	9302      	str	r3, [sp, #8]
 80039b2:	2310      	movs	r3, #16
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	231f      	movs	r3, #31
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039be:	4a13      	ldr	r2, [pc, #76]	@ (8003a0c <system_init+0xe0>)
 80039c0:	2102      	movs	r1, #2
 80039c2:	2000      	movs	r0, #0
 80039c4:	f7ff fe22 	bl	800360c <lcd_StrCenter>
	  lcd_ShowPicture(20, 235, 50, 50, bell_sign);
 80039c8:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <system_init+0xe4>)
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	2332      	movs	r3, #50	@ 0x32
 80039ce:	2232      	movs	r2, #50	@ 0x32
 80039d0:	21eb      	movs	r1, #235	@ 0xeb
 80039d2:	2014      	movs	r0, #20
 80039d4:	f7ff fae4 	bl	8002fa0 <lcd_ShowPicture>
	  lcd_ShowStr(0, 280, "Alarm OFF", WHITE, BLACK, 24, 0);
 80039d8:	2300      	movs	r3, #0
 80039da:	9302      	str	r3, [sp, #8]
 80039dc:	2318      	movs	r3, #24
 80039de:	9301      	str	r3, [sp, #4]
 80039e0:	2300      	movs	r3, #0
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003a14 <system_init+0xe8>)
 80039ea:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80039ee:	2000      	movs	r0, #0
 80039f0:	f7ff fda8 	bl	8003544 <lcd_ShowStr>
//	  lcd_Clear(BLACK);
	  alarm_state = 0;
 80039f4:	4b08      	ldr	r3, [pc, #32]	@ (8003a18 <system_init+0xec>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	200003bb 	.word	0x200003bb
 8003a08:	200003c3 	.word	0x200003c3
 8003a0c:	0800b950 	.word	0x0800b950
 8003a10:	0800ba50 	.word	0x0800ba50
 8003a14:	0800b95c 	.word	0x0800b95c
 8003a18:	200003bc 	.word	0x200003bc

08003a1c <test_LedDebug>:

void test_LedDebug(){
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 8003a20:	4b0d      	ldr	r3, [pc, #52]	@ (8003a58 <test_LedDebug+0x3c>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	4b0d      	ldr	r3, [pc, #52]	@ (8003a5c <test_LedDebug+0x40>)
 8003a28:	fb83 1302 	smull	r1, r3, r3, r2
 8003a2c:	10d9      	asrs	r1, r3, #3
 8003a2e:	17d3      	asrs	r3, r2, #31
 8003a30:	1ac9      	subs	r1, r1, r3
 8003a32:	460b      	mov	r3, r1
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	1ad1      	subs	r1, r2, r3
 8003a3c:	b2ca      	uxtb	r2, r1
 8003a3e:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <test_LedDebug+0x3c>)
 8003a40:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 8003a42:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <test_LedDebug+0x3c>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8003a4a:	2110      	movs	r1, #16
 8003a4c:	4804      	ldr	r0, [pc, #16]	@ (8003a60 <test_LedDebug+0x44>)
 8003a4e:	f002 ffae 	bl	80069ae <HAL_GPIO_TogglePin>
	}
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000478 	.word	0x20000478
 8003a5c:	66666667 	.word	0x66666667
 8003a60:	40021000 	.word	0x40021000

08003a64 <test_button>:
	led7_SetDigit(0, 0, 0);
	led7_SetDigit(5, 1, 0);
	led7_SetDigit(4, 2, 0);
	led7_SetDigit(7, 3, 0);
}
void test_button(){
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
	for(int i = 0; i < 16; i++){
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	607b      	str	r3, [r7, #4]
 8003a6e:	e024      	b.n	8003aba <test_button+0x56>
		if(button_count[i] == 1){
 8003a70:	4a16      	ldr	r2, [pc, #88]	@ (8003acc <test_button+0x68>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d11b      	bne.n	8003ab4 <test_button+0x50>
			led7_SetDigit(i/10, 2, 0);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a14      	ldr	r2, [pc, #80]	@ (8003ad0 <test_button+0x6c>)
 8003a80:	fb82 1203 	smull	r1, r2, r2, r3
 8003a84:	1092      	asrs	r2, r2, #2
 8003a86:	17db      	asrs	r3, r3, #31
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff fe86 	bl	80037a0 <led7_SetDigit>
			led7_SetDigit(i%10, 3, 0);
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad0 <test_button+0x6c>)
 8003a98:	fb83 1302 	smull	r1, r3, r3, r2
 8003a9c:	1099      	asrs	r1, r3, #2
 8003a9e:	17d3      	asrs	r3, r2, #31
 8003aa0:	1ac8      	subs	r0, r1, r3
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4403      	add	r3, r0
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	1ad0      	subs	r0, r2, r3
 8003aac:	2200      	movs	r2, #0
 8003aae:	2103      	movs	r1, #3
 8003ab0:	f7ff fe76 	bl	80037a0 <led7_SetDigit>
	for(int i = 0; i < 16; i++){
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b0f      	cmp	r3, #15
 8003abe:	ddd7      	ble.n	8003a70 <test_button+0xc>
		}
	}
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000384 	.word	0x20000384
 8003ad0:	66666667 	.word	0x66666667

08003ad4 <updateTime>:

void updateTime(){
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 8003ad8:	2117      	movs	r1, #23
 8003ada:	2006      	movs	r0, #6
 8003adc:	f7fd fc26 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 10);
 8003ae0:	210a      	movs	r1, #10
 8003ae2:	2005      	movs	r0, #5
 8003ae4:	f7fd fc22 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 20);
 8003ae8:	2114      	movs	r1, #20
 8003aea:	2004      	movs	r0, #4
 8003aec:	f7fd fc1e 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8003af0:	2106      	movs	r1, #6
 8003af2:	2003      	movs	r0, #3
 8003af4:	f7fd fc1a 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 20);
 8003af8:	2114      	movs	r1, #20
 8003afa:	2002      	movs	r0, #2
 8003afc:	f7fd fc16 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 11);
 8003b00:	210b      	movs	r1, #11
 8003b02:	2001      	movs	r0, #1
 8003b04:	f7fd fc12 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 23);
 8003b08:	2117      	movs	r1, #23
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	f7fd fc0e 	bl	800132c <ds3231_Write>
}
 8003b10:	bf00      	nop
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b18:	b672      	cpsid	i
}
 8003b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b1c:	bf00      	nop
 8003b1e:	e7fd      	b.n	8003b1c <Error_Handler+0x8>

08003b20 <buzzer_start_freq>:
	  4, 8, 4,
	  2, 4,
	  1
};

void buzzer_start_freq(uint32_t freq){
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	if(freq == 0) return;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d030      	beq.n	8003b90 <buzzer_start_freq+0x70>
	uint32_t timer_clock = 84000000; //APB1
 8003b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b98 <buzzer_start_freq+0x78>)
 8003b30:	60fb      	str	r3, [r7, #12]
	uint32_t prescaler = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
	uint32_t period =  (timer_clock/freq) - 1;
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	613b      	str	r3, [r7, #16]

	//Adjust prescaler if the period is too large for 16_bit timer
	while(period > 65535){
 8003b42:	e00c      	b.n	8003b5e <buzzer_start_freq+0x3e>
		prescaler++;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	3301      	adds	r3, #1
 8003b48:	617b      	str	r3, [r7, #20]
		period = (timer_clock / (prescaler + 1)/freq) - 1;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	613b      	str	r3, [r7, #16]
	while(period > 65535){
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b64:	d2ee      	bcs.n	8003b44 <buzzer_start_freq+0x24>

	}

	__HAL_TIM_SET_PRESCALER(&htim13, prescaler);
 8003b66:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <buzzer_start_freq+0x7c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim13, period);
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <buzzer_start_freq+0x7c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b76:	4a09      	ldr	r2, [pc, #36]	@ (8003b9c <buzzer_start_freq+0x7c>)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, period/2);
 8003b7c:	4b07      	ldr	r3, [pc, #28]	@ (8003b9c <buzzer_start_freq+0x7c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	0852      	lsrs	r2, r2, #1
 8003b84:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1); //restart PWM to apply changes
 8003b86:	2100      	movs	r1, #0
 8003b88:	4804      	ldr	r0, [pc, #16]	@ (8003b9c <buzzer_start_freq+0x7c>)
 8003b8a:	f005 fcb5 	bl	80094f8 <HAL_TIM_PWM_Start>
 8003b8e:	e000      	b.n	8003b92 <buzzer_start_freq+0x72>
	if(freq == 0) return;
 8003b90:	bf00      	nop
}
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	0501bd00 	.word	0x0501bd00
 8003b9c:	20000584 	.word	0x20000584

08003ba0 <stop_buzzer>:

void stop_buzzer(){
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	4802      	ldr	r0, [pc, #8]	@ (8003bb0 <stop_buzzer+0x10>)
 8003ba8:	f005 fd6e 	bl	8009688 <HAL_TIM_PWM_Stop>
}
 8003bac:	bf00      	nop
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000584 	.word	0x20000584
 8003bb4:	00000000 	.word	0x00000000

08003bb8 <play_note_in_main>:
	}
}

uint32_t index_note = 0;

void play_note_in_main(int* note, int* dur, int len){
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
	if(flag_timer_alarm == 1){
 8003bc4:	4b22      	ldr	r3, [pc, #136]	@ (8003c50 <play_note_in_main+0x98>)
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d137      	bne.n	8003c3c <play_note_in_main+0x84>
		stop_buzzer();
 8003bcc:	f7ff ffe8 	bl	8003ba0 <stop_buzzer>
		buzzer_start_freq(note[index_note]);
 8003bd0:	4b20      	ldr	r3, [pc, #128]	@ (8003c54 <play_note_in_main+0x9c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff ff9f 	bl	8003b20 <buzzer_start_freq>
		setTimerAlarm((1000/dur[index_note])*1.3);
 8003be2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c54 <play_note_in_main+0x9c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	4413      	add	r3, r2
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003bf2:	fb92 f3f3 	sdiv	r3, r2, r3
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fc fc40 	bl	800047c <__aeabi_i2d>
 8003bfc:	a312      	add	r3, pc, #72	@ (adr r3, 8003c48 <play_note_in_main+0x90>)
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f7fc fca5 	bl	8000550 <__aeabi_dmul>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f7fc ff4f 	bl	8000ab0 <__aeabi_d2uiz>
 8003c12:	4603      	mov	r3, r0
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 f8a0 	bl	8003d5c <setTimerAlarm>
		if(index_note >= len-1){
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	461a      	mov	r2, r3
 8003c22:	4b0c      	ldr	r3, [pc, #48]	@ (8003c54 <play_note_in_main+0x9c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d803      	bhi.n	8003c32 <play_note_in_main+0x7a>
			index_note = 0;
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c54 <play_note_in_main+0x9c>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
		}else
			index_note++;
	}
}
 8003c30:	e004      	b.n	8003c3c <play_note_in_main+0x84>
			index_note++;
 8003c32:	4b08      	ldr	r3, [pc, #32]	@ (8003c54 <play_note_in_main+0x9c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3301      	adds	r3, #1
 8003c38:	4a06      	ldr	r2, [pc, #24]	@ (8003c54 <play_note_in_main+0x9c>)
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	f3af 8000 	nop.w
 8003c48:	cccccccd 	.word	0xcccccccd
 8003c4c:	3ff4cccc 	.word	0x3ff4cccc
 8003c50:	20000496 	.word	0x20000496
 8003c54:	2000047c 	.word	0x2000047c

08003c58 <timer_init>:
uint16_t timer6_counter = 0;

uint16_t flag_timer_alarm = 0;
uint16_t timer_alarm = 0;

void timer_init(){
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003c5c:	4803      	ldr	r0, [pc, #12]	@ (8003c6c <timer_init+0x14>)
 8003c5e:	f005 fb81 	bl	8009364 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8003c62:	4803      	ldr	r0, [pc, #12]	@ (8003c70 <timer_init+0x18>)
 8003c64:	f005 fb16 	bl	8009294 <HAL_TIM_Base_Start>
}
 8003c68:	bf00      	nop
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	2000053c 	.word	0x2000053c
 8003c70:	200004f4 	.word	0x200004f4

08003c74 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8003c7e:	4a08      	ldr	r2, [pc, #32]	@ (8003ca0 <setTimer2+0x2c>)
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8003c84:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <setTimer2+0x2c>)
 8003c86:	881a      	ldrh	r2, [r3, #0]
 8003c88:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <setTimer2+0x30>)
 8003c8a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8003c8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <setTimer2+0x34>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	801a      	strh	r2, [r3, #0]
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000484 	.word	0x20000484
 8003ca4:	20000482 	.word	0x20000482
 8003ca8:	20000480 	.word	0x20000480

08003cac <setTimer3>:

void setTimer3(uint16_t duration){
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	80fb      	strh	r3, [r7, #6]
	timer3_counter = duration;
 8003cb6:	4a06      	ldr	r2, [pc, #24]	@ (8003cd0 <setTimer3+0x24>)
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	8013      	strh	r3, [r2, #0]
	flag_timer3 = 0;
 8003cbc:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <setTimer3+0x28>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	801a      	strh	r2, [r3, #0]
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20000488 	.word	0x20000488
 8003cd4:	20000486 	.word	0x20000486

08003cd8 <setTimer4>:

void setTimer4(uint16_t duration){
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	80fb      	strh	r3, [r7, #6]
	timer4_counter = duration;
 8003ce2:	4a06      	ldr	r2, [pc, #24]	@ (8003cfc <setTimer4+0x24>)
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	8013      	strh	r3, [r2, #0]
	flag_timer4 = 0;
 8003ce8:	4b05      	ldr	r3, [pc, #20]	@ (8003d00 <setTimer4+0x28>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	801a      	strh	r2, [r3, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	2000048c 	.word	0x2000048c
 8003d00:	2000048a 	.word	0x2000048a

08003d04 <setTimer5>:

void setTimer5(uint16_t duration){
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	80fb      	strh	r3, [r7, #6]
	timer5_counter = duration;
 8003d0e:	4a06      	ldr	r2, [pc, #24]	@ (8003d28 <setTimer5+0x24>)
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	8013      	strh	r3, [r2, #0]
	flag_timer5 = 0;
 8003d14:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <setTimer5+0x28>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	801a      	strh	r2, [r3, #0]
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000490 	.word	0x20000490
 8003d2c:	2000048e 	.word	0x2000048e

08003d30 <setTimer6>:

void setTimer6(uint16_t duration){
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	80fb      	strh	r3, [r7, #6]
	timer6_counter = duration;
 8003d3a:	4a06      	ldr	r2, [pc, #24]	@ (8003d54 <setTimer6+0x24>)
 8003d3c:	88fb      	ldrh	r3, [r7, #6]
 8003d3e:	8013      	strh	r3, [r2, #0]
	flag_timer6 = 0;
 8003d40:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <setTimer6+0x28>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	801a      	strh	r2, [r3, #0]
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000494 	.word	0x20000494
 8003d58:	20000492 	.word	0x20000492

08003d5c <setTimerAlarm>:

void setTimerAlarm(uint16_t duration){
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	80fb      	strh	r3, [r7, #6]
	flag_timer_alarm = 0;
 8003d66:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <setTimerAlarm+0x24>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	801a      	strh	r2, [r3, #0]
	timer_alarm = duration;
 8003d6c:	4a05      	ldr	r2, [pc, #20]	@ (8003d84 <setTimerAlarm+0x28>)
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	8013      	strh	r3, [r2, #0]
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000496 	.word	0x20000496
 8003d84:	20000498 	.word	0x20000498

08003d88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d98:	d17a      	bne.n	8003e90 <HAL_TIM_PeriodElapsedCallback+0x108>
		if(timer2_counter > 0){
 8003d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e98 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d010      	beq.n	8003dc4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8003da2:	4b3d      	ldr	r3, [pc, #244]	@ (8003e98 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	4b3b      	ldr	r3, [pc, #236]	@ (8003e98 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003dac:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8003dae:	4b3a      	ldr	r3, [pc, #232]	@ (8003e98 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8003db6:	4b39      	ldr	r3, [pc, #228]	@ (8003e9c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8003dbc:	4b38      	ldr	r3, [pc, #224]	@ (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	4b35      	ldr	r3, [pc, #212]	@ (8003e98 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003dc2:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8003dc4:	4b37      	ldr	r3, [pc, #220]	@ (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00f      	beq.n	8003dec <HAL_TIM_PeriodElapsedCallback+0x64>
			timer3_counter--;
 8003dcc:	4b35      	ldr	r3, [pc, #212]	@ (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	4b33      	ldr	r3, [pc, #204]	@ (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003dd6:	801a      	strh	r2, [r3, #0]
			if(timer3_counter <= 0){
 8003dd8:	4b32      	ldr	r3, [pc, #200]	@ (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d105      	bne.n	8003dec <HAL_TIM_PeriodElapsedCallback+0x64>
				flag_timer3 = 1;
 8003de0:	4b31      	ldr	r3, [pc, #196]	@ (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	801a      	strh	r2, [r3, #0]
				timer3_counter = 0;
 8003de6:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 8003dec:	4b2f      	ldr	r3, [pc, #188]	@ (8003eac <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00f      	beq.n	8003e14 <HAL_TIM_PeriodElapsedCallback+0x8c>
			timer4_counter--;
 8003df4:	4b2d      	ldr	r3, [pc, #180]	@ (8003eac <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8003eac <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003dfe:	801a      	strh	r2, [r3, #0]
			if(timer4_counter <= 0){
 8003e00:	4b2a      	ldr	r3, [pc, #168]	@ (8003eac <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <HAL_TIM_PeriodElapsedCallback+0x8c>
				flag_timer4 = 1;
 8003e08:	4b29      	ldr	r3, [pc, #164]	@ (8003eb0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	801a      	strh	r2, [r3, #0]
				timer4_counter = 0;
 8003e0e:	4b27      	ldr	r3, [pc, #156]	@ (8003eac <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer5_counter > 0){
 8003e14:	4b27      	ldr	r3, [pc, #156]	@ (8003eb4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00f      	beq.n	8003e3c <HAL_TIM_PeriodElapsedCallback+0xb4>
			timer5_counter--;
 8003e1c:	4b25      	ldr	r3, [pc, #148]	@ (8003eb4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	4b23      	ldr	r3, [pc, #140]	@ (8003eb4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003e26:	801a      	strh	r2, [r3, #0]
			if(timer5_counter <= 0){
 8003e28:	4b22      	ldr	r3, [pc, #136]	@ (8003eb4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <HAL_TIM_PeriodElapsedCallback+0xb4>
				flag_timer5 = 1;
 8003e30:	4b21      	ldr	r3, [pc, #132]	@ (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	801a      	strh	r2, [r3, #0]
				timer5_counter = 0;
 8003e36:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer6_counter > 0){
 8003e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ebc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00f      	beq.n	8003e64 <HAL_TIM_PeriodElapsedCallback+0xdc>
			timer6_counter--;
 8003e44:	4b1d      	ldr	r3, [pc, #116]	@ (8003ebc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ebc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003e4e:	801a      	strh	r2, [r3, #0]
			if(timer6_counter <= 0){
 8003e50:	4b1a      	ldr	r3, [pc, #104]	@ (8003ebc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d105      	bne.n	8003e64 <HAL_TIM_PeriodElapsedCallback+0xdc>
				flag_timer6 = 1;
 8003e58:	4b19      	ldr	r3, [pc, #100]	@ (8003ec0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	801a      	strh	r2, [r3, #0]
				timer6_counter = 0;
 8003e5e:	4b17      	ldr	r3, [pc, #92]	@ (8003ebc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer_alarm > 0){
 8003e64:	4b17      	ldr	r3, [pc, #92]	@ (8003ec4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00f      	beq.n	8003e8c <HAL_TIM_PeriodElapsedCallback+0x104>
			timer_alarm--;
 8003e6c:	4b15      	ldr	r3, [pc, #84]	@ (8003ec4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	4b13      	ldr	r3, [pc, #76]	@ (8003ec4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003e76:	801a      	strh	r2, [r3, #0]
			if(timer_alarm <= 0){
 8003e78:	4b12      	ldr	r3, [pc, #72]	@ (8003ec4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <HAL_TIM_PeriodElapsedCallback+0x104>
				flag_timer_alarm = 1;
 8003e80:	4b11      	ldr	r3, [pc, #68]	@ (8003ec8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	801a      	strh	r2, [r3, #0]
				timer_alarm = 0;
 8003e86:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8003e8c:	f7ff fbfc 	bl	8003688 <led7_Scan>
	}
}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20000482 	.word	0x20000482
 8003e9c:	20000480 	.word	0x20000480
 8003ea0:	20000484 	.word	0x20000484
 8003ea4:	20000488 	.word	0x20000488
 8003ea8:	20000486 	.word	0x20000486
 8003eac:	2000048c 	.word	0x2000048c
 8003eb0:	2000048a 	.word	0x2000048a
 8003eb4:	20000490 	.word	0x20000490
 8003eb8:	2000048e 	.word	0x2000048e
 8003ebc:	20000494 	.word	0x20000494
 8003ec0:	20000492 	.word	0x20000492
 8003ec4:	20000498 	.word	0x20000498
 8003ec8:	20000496 	.word	0x20000496

08003ecc <delay_us>:

void delay_us (uint16_t us)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8003ed6:	4b09      	ldr	r3, [pc, #36]	@ (8003efc <delay_us+0x30>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8003ede:	bf00      	nop
 8003ee0:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <delay_us+0x30>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d3f9      	bcc.n	8003ee0 <delay_us+0x14>
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	200004f4 	.word	0x200004f4

08003f00 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003f04:	4b17      	ldr	r3, [pc, #92]	@ (8003f64 <MX_SPI1_Init+0x64>)
 8003f06:	4a18      	ldr	r2, [pc, #96]	@ (8003f68 <MX_SPI1_Init+0x68>)
 8003f08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f0a:	4b16      	ldr	r3, [pc, #88]	@ (8003f64 <MX_SPI1_Init+0x64>)
 8003f0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003f10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f12:	4b14      	ldr	r3, [pc, #80]	@ (8003f64 <MX_SPI1_Init+0x64>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f18:	4b12      	ldr	r3, [pc, #72]	@ (8003f64 <MX_SPI1_Init+0x64>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f1e:	4b11      	ldr	r3, [pc, #68]	@ (8003f64 <MX_SPI1_Init+0x64>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f24:	4b0f      	ldr	r3, [pc, #60]	@ (8003f64 <MX_SPI1_Init+0x64>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f64 <MX_SPI1_Init+0x64>)
 8003f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f32:	4b0c      	ldr	r3, [pc, #48]	@ (8003f64 <MX_SPI1_Init+0x64>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f38:	4b0a      	ldr	r3, [pc, #40]	@ (8003f64 <MX_SPI1_Init+0x64>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f3e:	4b09      	ldr	r3, [pc, #36]	@ (8003f64 <MX_SPI1_Init+0x64>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f44:	4b07      	ldr	r3, [pc, #28]	@ (8003f64 <MX_SPI1_Init+0x64>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003f4a:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <MX_SPI1_Init+0x64>)
 8003f4c:	220a      	movs	r2, #10
 8003f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f50:	4804      	ldr	r0, [pc, #16]	@ (8003f64 <MX_SPI1_Init+0x64>)
 8003f52:	f004 fb31 	bl	80085b8 <HAL_SPI_Init>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003f5c:	f7ff fdda 	bl	8003b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f60:	bf00      	nop
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	2000049c 	.word	0x2000049c
 8003f68:	40013000 	.word	0x40013000

08003f6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	@ 0x28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f74:	f107 0314 	add.w	r3, r7, #20
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
 8003f80:	60da      	str	r2, [r3, #12]
 8003f82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a19      	ldr	r2, [pc, #100]	@ (8003ff0 <HAL_SPI_MspInit+0x84>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d12b      	bne.n	8003fe6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	4b18      	ldr	r3, [pc, #96]	@ (8003ff4 <HAL_SPI_MspInit+0x88>)
 8003f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f96:	4a17      	ldr	r2, [pc, #92]	@ (8003ff4 <HAL_SPI_MspInit+0x88>)
 8003f98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f9e:	4b15      	ldr	r3, [pc, #84]	@ (8003ff4 <HAL_SPI_MspInit+0x88>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	4b11      	ldr	r3, [pc, #68]	@ (8003ff4 <HAL_SPI_MspInit+0x88>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	4a10      	ldr	r2, [pc, #64]	@ (8003ff4 <HAL_SPI_MspInit+0x88>)
 8003fb4:	f043 0302 	orr.w	r3, r3, #2
 8003fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fba:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff4 <HAL_SPI_MspInit+0x88>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003fc6:	2338      	movs	r3, #56	@ 0x38
 8003fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fd6:	2305      	movs	r3, #5
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fda:	f107 0314 	add.w	r3, r7, #20
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4805      	ldr	r0, [pc, #20]	@ (8003ff8 <HAL_SPI_MspInit+0x8c>)
 8003fe2:	f002 fb17 	bl	8006614 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	3728      	adds	r7, #40	@ 0x28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40013000 	.word	0x40013000
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	40020400 	.word	0x40020400

08003ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	607b      	str	r3, [r7, #4]
 8004006:	4b10      	ldr	r3, [pc, #64]	@ (8004048 <HAL_MspInit+0x4c>)
 8004008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400a:	4a0f      	ldr	r2, [pc, #60]	@ (8004048 <HAL_MspInit+0x4c>)
 800400c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004010:	6453      	str	r3, [r2, #68]	@ 0x44
 8004012:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <HAL_MspInit+0x4c>)
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800401a:	607b      	str	r3, [r7, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	603b      	str	r3, [r7, #0]
 8004022:	4b09      	ldr	r3, [pc, #36]	@ (8004048 <HAL_MspInit+0x4c>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	4a08      	ldr	r2, [pc, #32]	@ (8004048 <HAL_MspInit+0x4c>)
 8004028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800402c:	6413      	str	r3, [r2, #64]	@ 0x40
 800402e:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <HAL_MspInit+0x4c>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800

0800404c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004050:	bf00      	nop
 8004052:	e7fd      	b.n	8004050 <NMI_Handler+0x4>

08004054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <HardFault_Handler+0x4>

0800405c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004060:	bf00      	nop
 8004062:	e7fd      	b.n	8004060 <MemManage_Handler+0x4>

08004064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004068:	bf00      	nop
 800406a:	e7fd      	b.n	8004068 <BusFault_Handler+0x4>

0800406c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004070:	bf00      	nop
 8004072:	e7fd      	b.n	8004070 <UsageFault_Handler+0x4>

08004074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004086:	bf00      	nop
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040a2:	f001 fb83 	bl	80057ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80040b0:	4802      	ldr	r0, [pc, #8]	@ (80040bc <TIM2_IRQHandler+0x10>)
 80040b2:	f005 fb59 	bl	8009768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80040b6:	bf00      	nop
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	2000053c 	.word	0x2000053c

080040c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80040c4:	4802      	ldr	r0, [pc, #8]	@ (80040d0 <USART1_IRQHandler+0x10>)
 80040c6:	f006 fa9d 	bl	800a604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000634 	.word	0x20000634

080040d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80040d8:	4802      	ldr	r0, [pc, #8]	@ (80040e4 <USART2_IRQHandler+0x10>)
 80040da:	f006 fa93 	bl	800a604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80040de:	bf00      	nop
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	2000067c 	.word	0x2000067c

080040e8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80040ec:	4802      	ldr	r0, [pc, #8]	@ (80040f8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80040ee:	f005 fb3b 	bl	8009768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80040f2:	bf00      	nop
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000584 	.word	0x20000584

080040fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004100:	4802      	ldr	r0, [pc, #8]	@ (800410c <DMA2_Stream0_IRQHandler+0x10>)
 8004102:	f002 f84b 	bl	800619c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000324 	.word	0x20000324

08004110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004114:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <SystemInit+0x20>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411a:	4a05      	ldr	r2, [pc, #20]	@ (8004130 <SystemInit+0x20>)
 800411c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004120:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	e000ed00 	.word	0xe000ed00

08004134 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800413a:	f107 0308 	add.w	r3, r7, #8
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	605a      	str	r2, [r3, #4]
 8004144:	609a      	str	r2, [r3, #8]
 8004146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004148:	463b      	mov	r3, r7
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004150:	4b1e      	ldr	r3, [pc, #120]	@ (80041cc <MX_TIM1_Init+0x98>)
 8004152:	4a1f      	ldr	r2, [pc, #124]	@ (80041d0 <MX_TIM1_Init+0x9c>)
 8004154:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8004156:	4b1d      	ldr	r3, [pc, #116]	@ (80041cc <MX_TIM1_Init+0x98>)
 8004158:	2253      	movs	r2, #83	@ 0x53
 800415a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800415c:	4b1b      	ldr	r3, [pc, #108]	@ (80041cc <MX_TIM1_Init+0x98>)
 800415e:	2200      	movs	r2, #0
 8004160:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004162:	4b1a      	ldr	r3, [pc, #104]	@ (80041cc <MX_TIM1_Init+0x98>)
 8004164:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004168:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800416a:	4b18      	ldr	r3, [pc, #96]	@ (80041cc <MX_TIM1_Init+0x98>)
 800416c:	2200      	movs	r2, #0
 800416e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004170:	4b16      	ldr	r3, [pc, #88]	@ (80041cc <MX_TIM1_Init+0x98>)
 8004172:	2200      	movs	r2, #0
 8004174:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004176:	4b15      	ldr	r3, [pc, #84]	@ (80041cc <MX_TIM1_Init+0x98>)
 8004178:	2200      	movs	r2, #0
 800417a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800417c:	4813      	ldr	r0, [pc, #76]	@ (80041cc <MX_TIM1_Init+0x98>)
 800417e:	f005 f839 	bl	80091f4 <HAL_TIM_Base_Init>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004188:	f7ff fcc4 	bl	8003b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800418c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004190:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004192:	f107 0308 	add.w	r3, r7, #8
 8004196:	4619      	mov	r1, r3
 8004198:	480c      	ldr	r0, [pc, #48]	@ (80041cc <MX_TIM1_Init+0x98>)
 800419a:	f005 fc97 	bl	8009acc <HAL_TIM_ConfigClockSource>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80041a4:	f7ff fcb6 	bl	8003b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041a8:	2300      	movs	r3, #0
 80041aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041ac:	2300      	movs	r3, #0
 80041ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80041b0:	463b      	mov	r3, r7
 80041b2:	4619      	mov	r1, r3
 80041b4:	4805      	ldr	r0, [pc, #20]	@ (80041cc <MX_TIM1_Init+0x98>)
 80041b6:	f006 f895 	bl	800a2e4 <HAL_TIMEx_MasterConfigSynchronization>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80041c0:	f7ff fca8 	bl	8003b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80041c4:	bf00      	nop
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	200004f4 	.word	0x200004f4
 80041d0:	40010000 	.word	0x40010000

080041d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041da:	f107 0308 	add.w	r3, r7, #8
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	605a      	str	r2, [r3, #4]
 80041e4:	609a      	str	r2, [r3, #8]
 80041e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041e8:	463b      	mov	r3, r7
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004268 <MX_TIM2_Init+0x94>)
 80041f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80041f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80041f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004268 <MX_TIM2_Init+0x94>)
 80041fa:	f240 3247 	movw	r2, #839	@ 0x347
 80041fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004200:	4b19      	ldr	r3, [pc, #100]	@ (8004268 <MX_TIM2_Init+0x94>)
 8004202:	2200      	movs	r2, #0
 8004204:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8004206:	4b18      	ldr	r3, [pc, #96]	@ (8004268 <MX_TIM2_Init+0x94>)
 8004208:	2263      	movs	r2, #99	@ 0x63
 800420a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800420c:	4b16      	ldr	r3, [pc, #88]	@ (8004268 <MX_TIM2_Init+0x94>)
 800420e:	2200      	movs	r2, #0
 8004210:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004212:	4b15      	ldr	r3, [pc, #84]	@ (8004268 <MX_TIM2_Init+0x94>)
 8004214:	2200      	movs	r2, #0
 8004216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004218:	4813      	ldr	r0, [pc, #76]	@ (8004268 <MX_TIM2_Init+0x94>)
 800421a:	f004 ffeb 	bl	80091f4 <HAL_TIM_Base_Init>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004224:	f7ff fc76 	bl	8003b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004228:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800422c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800422e:	f107 0308 	add.w	r3, r7, #8
 8004232:	4619      	mov	r1, r3
 8004234:	480c      	ldr	r0, [pc, #48]	@ (8004268 <MX_TIM2_Init+0x94>)
 8004236:	f005 fc49 	bl	8009acc <HAL_TIM_ConfigClockSource>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004240:	f7ff fc68 	bl	8003b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004244:	2300      	movs	r3, #0
 8004246:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004248:	2300      	movs	r3, #0
 800424a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800424c:	463b      	mov	r3, r7
 800424e:	4619      	mov	r1, r3
 8004250:	4805      	ldr	r0, [pc, #20]	@ (8004268 <MX_TIM2_Init+0x94>)
 8004252:	f006 f847 	bl	800a2e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800425c:	f7ff fc5a 	bl	8003b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004260:	bf00      	nop
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	2000053c 	.word	0x2000053c

0800426c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004272:	1d3b      	adds	r3, r7, #4
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	60da      	str	r2, [r3, #12]
 800427e:	611a      	str	r2, [r3, #16]
 8004280:	615a      	str	r2, [r3, #20]
 8004282:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004284:	4b1e      	ldr	r3, [pc, #120]	@ (8004300 <MX_TIM13_Init+0x94>)
 8004286:	4a1f      	ldr	r2, [pc, #124]	@ (8004304 <MX_TIM13_Init+0x98>)
 8004288:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800428a:	4b1d      	ldr	r3, [pc, #116]	@ (8004300 <MX_TIM13_Init+0x94>)
 800428c:	f240 3247 	movw	r2, #839	@ 0x347
 8004290:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004292:	4b1b      	ldr	r3, [pc, #108]	@ (8004300 <MX_TIM13_Init+0x94>)
 8004294:	2200      	movs	r2, #0
 8004296:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8004298:	4b19      	ldr	r3, [pc, #100]	@ (8004300 <MX_TIM13_Init+0x94>)
 800429a:	2263      	movs	r2, #99	@ 0x63
 800429c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800429e:	4b18      	ldr	r3, [pc, #96]	@ (8004300 <MX_TIM13_Init+0x94>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042a4:	4b16      	ldr	r3, [pc, #88]	@ (8004300 <MX_TIM13_Init+0x94>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80042aa:	4815      	ldr	r0, [pc, #84]	@ (8004300 <MX_TIM13_Init+0x94>)
 80042ac:	f004 ffa2 	bl	80091f4 <HAL_TIM_Base_Init>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80042b6:	f7ff fc2d 	bl	8003b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80042ba:	4811      	ldr	r0, [pc, #68]	@ (8004300 <MX_TIM13_Init+0x94>)
 80042bc:	f005 f8c2 	bl	8009444 <HAL_TIM_PWM_Init>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80042c6:	f7ff fc25 	bl	8003b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042ca:	2360      	movs	r3, #96	@ 0x60
 80042cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	2200      	movs	r2, #0
 80042de:	4619      	mov	r1, r3
 80042e0:	4807      	ldr	r0, [pc, #28]	@ (8004300 <MX_TIM13_Init+0x94>)
 80042e2:	f005 fb31 	bl	8009948 <HAL_TIM_PWM_ConfigChannel>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80042ec:	f7ff fc12 	bl	8003b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80042f0:	4803      	ldr	r0, [pc, #12]	@ (8004300 <MX_TIM13_Init+0x94>)
 80042f2:	f000 f863 	bl	80043bc <HAL_TIM_MspPostInit>

}
 80042f6:	bf00      	nop
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000584 	.word	0x20000584
 8004304:	40001c00 	.word	0x40001c00

08004308 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a26      	ldr	r2, [pc, #152]	@ (80043b0 <HAL_TIM_Base_MspInit+0xa8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10e      	bne.n	8004338 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	4b25      	ldr	r3, [pc, #148]	@ (80043b4 <HAL_TIM_Base_MspInit+0xac>)
 8004320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004322:	4a24      	ldr	r2, [pc, #144]	@ (80043b4 <HAL_TIM_Base_MspInit+0xac>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	6453      	str	r3, [r2, #68]	@ 0x44
 800432a:	4b22      	ldr	r3, [pc, #136]	@ (80043b4 <HAL_TIM_Base_MspInit+0xac>)
 800432c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8004336:	e036      	b.n	80043a6 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004340:	d116      	bne.n	8004370 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	4b1b      	ldr	r3, [pc, #108]	@ (80043b4 <HAL_TIM_Base_MspInit+0xac>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434a:	4a1a      	ldr	r2, [pc, #104]	@ (80043b4 <HAL_TIM_Base_MspInit+0xac>)
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	6413      	str	r3, [r2, #64]	@ 0x40
 8004352:	4b18      	ldr	r3, [pc, #96]	@ (80043b4 <HAL_TIM_Base_MspInit+0xac>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800435e:	2200      	movs	r2, #0
 8004360:	2100      	movs	r1, #0
 8004362:	201c      	movs	r0, #28
 8004364:	f001 fda3 	bl	8005eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004368:	201c      	movs	r0, #28
 800436a:	f001 fdbc 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
}
 800436e:	e01a      	b.n	80043a6 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM13)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a10      	ldr	r2, [pc, #64]	@ (80043b8 <HAL_TIM_Base_MspInit+0xb0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d115      	bne.n	80043a6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	4b0d      	ldr	r3, [pc, #52]	@ (80043b4 <HAL_TIM_Base_MspInit+0xac>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	4a0c      	ldr	r2, [pc, #48]	@ (80043b4 <HAL_TIM_Base_MspInit+0xac>)
 8004384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004388:	6413      	str	r3, [r2, #64]	@ 0x40
 800438a:	4b0a      	ldr	r3, [pc, #40]	@ (80043b4 <HAL_TIM_Base_MspInit+0xac>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004396:	2200      	movs	r2, #0
 8004398:	2100      	movs	r1, #0
 800439a:	202c      	movs	r0, #44	@ 0x2c
 800439c:	f001 fd87 	bl	8005eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80043a0:	202c      	movs	r0, #44	@ 0x2c
 80043a2:	f001 fda0 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
}
 80043a6:	bf00      	nop
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40023800 	.word	0x40023800
 80043b8:	40001c00 	.word	0x40001c00

080043bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c4:	f107 030c 	add.w	r3, r7, #12
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	609a      	str	r2, [r3, #8]
 80043d0:	60da      	str	r2, [r3, #12]
 80043d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a12      	ldr	r2, [pc, #72]	@ (8004424 <HAL_TIM_MspPostInit+0x68>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d11e      	bne.n	800441c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	4b11      	ldr	r3, [pc, #68]	@ (8004428 <HAL_TIM_MspPostInit+0x6c>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e6:	4a10      	ldr	r2, [pc, #64]	@ (8004428 <HAL_TIM_MspPostInit+0x6c>)
 80043e8:	f043 0320 	orr.w	r3, r3, #32
 80043ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004428 <HAL_TIM_MspPostInit+0x6c>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80043fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004400:	2302      	movs	r3, #2
 8004402:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004408:	2300      	movs	r3, #0
 800440a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800440c:	2309      	movs	r3, #9
 800440e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004410:	f107 030c 	add.w	r3, r7, #12
 8004414:	4619      	mov	r1, r3
 8004416:	4805      	ldr	r0, [pc, #20]	@ (800442c <HAL_TIM_MspPostInit+0x70>)
 8004418:	f002 f8fc 	bl	8006614 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800441c:	bf00      	nop
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40001c00 	.word	0x40001c00
 8004428:	40023800 	.word	0x40023800
 800442c:	40021400 	.word	0x40021400

08004430 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 800443e:	2300      	movs	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]
 8004442:	e025      	b.n	8004490 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8004444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004448:	2b00      	cmp	r3, #0
 800444a:	da06      	bge.n	800445a <TP_Write_Byte+0x2a>
 800444c:	2201      	movs	r2, #1
 800444e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004452:	4813      	ldr	r0, [pc, #76]	@ (80044a0 <TP_Write_Byte+0x70>)
 8004454:	f002 fa92 	bl	800697c <HAL_GPIO_WritePin>
 8004458:	e005      	b.n	8004466 <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 800445a:	2200      	movs	r2, #0
 800445c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004460:	480f      	ldr	r0, [pc, #60]	@ (80044a0 <TP_Write_Byte+0x70>)
 8004462:	f002 fa8b 	bl	800697c <HAL_GPIO_WritePin>
		num<<=1;
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800446c:	2200      	movs	r2, #0
 800446e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004472:	480c      	ldr	r0, [pc, #48]	@ (80044a4 <TP_Write_Byte+0x74>)
 8004474:	f002 fa82 	bl	800697c <HAL_GPIO_WritePin>
		delay_us(1);
 8004478:	2001      	movs	r0, #1
 800447a:	f7ff fd27 	bl	8003ecc <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 800447e:	2201      	movs	r2, #1
 8004480:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004484:	4807      	ldr	r0, [pc, #28]	@ (80044a4 <TP_Write_Byte+0x74>)
 8004486:	f002 fa79 	bl	800697c <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	3301      	adds	r3, #1
 800448e:	73fb      	strb	r3, [r7, #15]
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b07      	cmp	r3, #7
 8004494:	d9d6      	bls.n	8004444 <TP_Write_Byte+0x14>
	}
}
 8004496:	bf00      	nop
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40020800 	.word	0x40020800
 80044a4:	40021800 	.word	0x40021800

080044a8 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80044ba:	2200      	movs	r2, #0
 80044bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80044c0:	482f      	ldr	r0, [pc, #188]	@ (8004580 <TP_Read_AD+0xd8>)
 80044c2:	f002 fa5b 	bl	800697c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 80044c6:	2200      	movs	r2, #0
 80044c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044cc:	482d      	ldr	r0, [pc, #180]	@ (8004584 <TP_Read_AD+0xdc>)
 80044ce:	f002 fa55 	bl	800697c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 80044d2:	2200      	movs	r2, #0
 80044d4:	2180      	movs	r1, #128	@ 0x80
 80044d6:	482a      	ldr	r0, [pc, #168]	@ (8004580 <TP_Read_AD+0xd8>)
 80044d8:	f002 fa50 	bl	800697c <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff ffa6 	bl	8004430 <TP_Write_Byte>
	delay_us(6);
 80044e4:	2006      	movs	r0, #6
 80044e6:	f7ff fcf1 	bl	8003ecc <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80044ea:	2200      	movs	r2, #0
 80044ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80044f0:	4823      	ldr	r0, [pc, #140]	@ (8004580 <TP_Read_AD+0xd8>)
 80044f2:	f002 fa43 	bl	800697c <HAL_GPIO_WritePin>
	delay_us(1);
 80044f6:	2001      	movs	r0, #1
 80044f8:	f7ff fce8 	bl	8003ecc <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80044fc:	2201      	movs	r2, #1
 80044fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004502:	481f      	ldr	r0, [pc, #124]	@ (8004580 <TP_Read_AD+0xd8>)
 8004504:	f002 fa3a 	bl	800697c <HAL_GPIO_WritePin>
	delay_us(1);
 8004508:	2001      	movs	r0, #1
 800450a:	f7ff fcdf 	bl	8003ecc <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800450e:	2200      	movs	r2, #0
 8004510:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004514:	481a      	ldr	r0, [pc, #104]	@ (8004580 <TP_Read_AD+0xd8>)
 8004516:	f002 fa31 	bl	800697c <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 800451a:	2300      	movs	r3, #0
 800451c:	73fb      	strb	r3, [r7, #15]
 800451e:	e01f      	b.n	8004560 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8004520:	89bb      	ldrh	r3, [r7, #12]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8004526:	2200      	movs	r2, #0
 8004528:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800452c:	4814      	ldr	r0, [pc, #80]	@ (8004580 <TP_Read_AD+0xd8>)
 800452e:	f002 fa25 	bl	800697c <HAL_GPIO_WritePin>
		delay_us(1);
 8004532:	2001      	movs	r0, #1
 8004534:	f7ff fcca 	bl	8003ecc <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8004538:	2201      	movs	r2, #1
 800453a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800453e:	4810      	ldr	r0, [pc, #64]	@ (8004580 <TP_Read_AD+0xd8>)
 8004540:	f002 fa1c 	bl	800697c <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8004544:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004548:	480e      	ldr	r0, [pc, #56]	@ (8004584 <TP_Read_AD+0xdc>)
 800454a:	f002 f9ff 	bl	800694c <HAL_GPIO_ReadPin>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <TP_Read_AD+0xb2>
 8004554:	89bb      	ldrh	r3, [r7, #12]
 8004556:	3301      	adds	r3, #1
 8004558:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	3301      	adds	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	2b0f      	cmp	r3, #15
 8004564:	d9dc      	bls.n	8004520 <TP_Read_AD+0x78>
	}
	Num>>=4;
 8004566:	89bb      	ldrh	r3, [r7, #12]
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 800456c:	2201      	movs	r2, #1
 800456e:	2180      	movs	r1, #128	@ 0x80
 8004570:	4803      	ldr	r0, [pc, #12]	@ (8004580 <TP_Read_AD+0xd8>)
 8004572:	f002 fa03 	bl	800697c <HAL_GPIO_WritePin>
	return(Num);
 8004576:	89bb      	ldrh	r3, [r7, #12]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40021800 	.word	0x40021800
 8004584:	40020800 	.word	0x40020800

08004588 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b089      	sub	sp, #36	@ 0x24
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8004592:	2300      	movs	r3, #0
 8004594:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8004596:	2300      	movs	r3, #0
 8004598:	83fb      	strh	r3, [r7, #30]
 800459a:	e00e      	b.n	80045ba <TP_Read_XOY+0x32>
 800459c:	8bfc      	ldrh	r4, [r7, #30]
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff ff81 	bl	80044a8 <TP_Read_AD>
 80045a6:	4603      	mov	r3, r0
 80045a8:	461a      	mov	r2, r3
 80045aa:	0063      	lsls	r3, r4, #1
 80045ac:	3320      	adds	r3, #32
 80045ae:	443b      	add	r3, r7
 80045b0:	f823 2c14 	strh.w	r2, [r3, #-20]
 80045b4:	8bfb      	ldrh	r3, [r7, #30]
 80045b6:	3301      	adds	r3, #1
 80045b8:	83fb      	strh	r3, [r7, #30]
 80045ba:	8bfb      	ldrh	r3, [r7, #30]
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d9ed      	bls.n	800459c <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 80045c0:	2300      	movs	r3, #0
 80045c2:	83fb      	strh	r3, [r7, #30]
 80045c4:	e035      	b.n	8004632 <TP_Read_XOY+0xaa>
	{
		for(j=i+1;j<READ_TIMES;j++)
 80045c6:	8bfb      	ldrh	r3, [r7, #30]
 80045c8:	3301      	adds	r3, #1
 80045ca:	83bb      	strh	r3, [r7, #28]
 80045cc:	e02b      	b.n	8004626 <TP_Read_XOY+0x9e>
		{
			if(buf[i]>buf[j])
 80045ce:	8bfb      	ldrh	r3, [r7, #30]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	3320      	adds	r3, #32
 80045d4:	443b      	add	r3, r7
 80045d6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80045da:	8bbb      	ldrh	r3, [r7, #28]
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	3320      	adds	r3, #32
 80045e0:	443b      	add	r3, r7
 80045e2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d91a      	bls.n	8004620 <TP_Read_XOY+0x98>
			{
				temp=buf[i];
 80045ea:	8bfb      	ldrh	r3, [r7, #30]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	3320      	adds	r3, #32
 80045f0:	443b      	add	r3, r7
 80045f2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80045f6:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 80045f8:	8bbb      	ldrh	r3, [r7, #28]
 80045fa:	8bfa      	ldrh	r2, [r7, #30]
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	3320      	adds	r3, #32
 8004600:	443b      	add	r3, r7
 8004602:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8004606:	0053      	lsls	r3, r2, #1
 8004608:	3320      	adds	r3, #32
 800460a:	443b      	add	r3, r7
 800460c:	460a      	mov	r2, r1
 800460e:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8004612:	8bbb      	ldrh	r3, [r7, #28]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	3320      	adds	r3, #32
 8004618:	443b      	add	r3, r7
 800461a:	8b3a      	ldrh	r2, [r7, #24]
 800461c:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8004620:	8bbb      	ldrh	r3, [r7, #28]
 8004622:	3301      	adds	r3, #1
 8004624:	83bb      	strh	r3, [r7, #28]
 8004626:	8bbb      	ldrh	r3, [r7, #28]
 8004628:	2b04      	cmp	r3, #4
 800462a:	d9d0      	bls.n	80045ce <TP_Read_XOY+0x46>
	for(i=0;i<READ_TIMES-1; i++)
 800462c:	8bfb      	ldrh	r3, [r7, #30]
 800462e:	3301      	adds	r3, #1
 8004630:	83fb      	strh	r3, [r7, #30]
 8004632:	8bfb      	ldrh	r3, [r7, #30]
 8004634:	2b03      	cmp	r3, #3
 8004636:	d9c6      	bls.n	80045c6 <TP_Read_XOY+0x3e>
			}
		}
	}
	sum=0;
 8004638:	2300      	movs	r3, #0
 800463a:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 800463c:	2301      	movs	r3, #1
 800463e:	83fb      	strh	r3, [r7, #30]
 8004640:	e00b      	b.n	800465a <TP_Read_XOY+0xd2>
 8004642:	8bfb      	ldrh	r3, [r7, #30]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	3320      	adds	r3, #32
 8004648:	443b      	add	r3, r7
 800464a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800464e:	8b7b      	ldrh	r3, [r7, #26]
 8004650:	4413      	add	r3, r2
 8004652:	837b      	strh	r3, [r7, #26]
 8004654:	8bfb      	ldrh	r3, [r7, #30]
 8004656:	3301      	adds	r3, #1
 8004658:	83fb      	strh	r3, [r7, #30]
 800465a:	8bfb      	ldrh	r3, [r7, #30]
 800465c:	2b03      	cmp	r3, #3
 800465e:	d9f0      	bls.n	8004642 <TP_Read_XOY+0xba>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8004660:	8b7b      	ldrh	r3, [r7, #26]
 8004662:	4a05      	ldr	r2, [pc, #20]	@ (8004678 <TP_Read_XOY+0xf0>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	833b      	strh	r3, [r7, #24]
	return temp;
 800466c:	8b3b      	ldrh	r3, [r7, #24]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3724      	adds	r7, #36	@ 0x24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd90      	pop	{r4, r7, pc}
 8004676:	bf00      	nop
 8004678:	aaaaaaab 	.word	0xaaaaaaab

0800467c <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8004686:	4b0c      	ldr	r3, [pc, #48]	@ (80046b8 <TP_Read_XY+0x3c>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff ff7c 	bl	8004588 <TP_Read_XOY>
 8004690:	4603      	mov	r3, r0
 8004692:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8004694:	4b09      	ldr	r3, [pc, #36]	@ (80046bc <TP_Read_XY+0x40>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff75 	bl	8004588 <TP_Read_XOY>
 800469e:	4603      	mov	r3, r0
 80046a0:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	89fa      	ldrh	r2, [r7, #14]
 80046a6:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	89ba      	ldrh	r2, [r7, #12]
 80046ac:	801a      	strh	r2, [r3, #0]
	return 1;
 80046ae:	2301      	movs	r3, #1
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20000254 	.word	0x20000254
 80046bc:	20000255 	.word	0x20000255

080046c0 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 80046ca:	f107 0212 	add.w	r2, r7, #18
 80046ce:	f107 0314 	add.w	r3, r7, #20
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ffd1 	bl	800467c <TP_Read_XY>
 80046da:	4603      	mov	r3, r0
 80046dc:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 80046de:	7dfb      	ldrb	r3, [r7, #23]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <TP_Read_XY2+0x28>
 80046e4:	2300      	movs	r3, #0
 80046e6:	e049      	b.n	800477c <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 80046e8:	f107 020e 	add.w	r2, r7, #14
 80046ec:	f107 0310 	add.w	r3, r7, #16
 80046f0:	4611      	mov	r1, r2
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff ffc2 	bl	800467c <TP_Read_XY>
 80046f8:	4603      	mov	r3, r0
 80046fa:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <TP_Read_XY2+0x46>
 8004702:	2300      	movs	r3, #0
 8004704:	e03a      	b.n	800477c <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8004706:	8a3a      	ldrh	r2, [r7, #16]
 8004708:	8abb      	ldrh	r3, [r7, #20]
 800470a:	429a      	cmp	r2, r3
 800470c:	d804      	bhi.n	8004718 <TP_Read_XY2+0x58>
 800470e:	8a3b      	ldrh	r3, [r7, #16]
 8004710:	3363      	adds	r3, #99	@ 0x63
 8004712:	8aba      	ldrh	r2, [r7, #20]
 8004714:	4293      	cmp	r3, r2
 8004716:	da08      	bge.n	800472a <TP_Read_XY2+0x6a>
 8004718:	8aba      	ldrh	r2, [r7, #20]
 800471a:	8a3b      	ldrh	r3, [r7, #16]
 800471c:	429a      	cmp	r2, r3
 800471e:	d82c      	bhi.n	800477a <TP_Read_XY2+0xba>
 8004720:	8abb      	ldrh	r3, [r7, #20]
 8004722:	3363      	adds	r3, #99	@ 0x63
 8004724:	8a3a      	ldrh	r2, [r7, #16]
 8004726:	4293      	cmp	r3, r2
 8004728:	db27      	blt.n	800477a <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 800472a:	89fa      	ldrh	r2, [r7, #14]
 800472c:	8a7b      	ldrh	r3, [r7, #18]
 800472e:	429a      	cmp	r2, r3
 8004730:	d804      	bhi.n	800473c <TP_Read_XY2+0x7c>
 8004732:	89fb      	ldrh	r3, [r7, #14]
 8004734:	3363      	adds	r3, #99	@ 0x63
 8004736:	8a7a      	ldrh	r2, [r7, #18]
 8004738:	4293      	cmp	r3, r2
 800473a:	da08      	bge.n	800474e <TP_Read_XY2+0x8e>
 800473c:	8a7a      	ldrh	r2, [r7, #18]
 800473e:	89fb      	ldrh	r3, [r7, #14]
 8004740:	429a      	cmp	r2, r3
 8004742:	d81a      	bhi.n	800477a <TP_Read_XY2+0xba>
 8004744:	8a7b      	ldrh	r3, [r7, #18]
 8004746:	3363      	adds	r3, #99	@ 0x63
 8004748:	89fa      	ldrh	r2, [r7, #14]
 800474a:	4293      	cmp	r3, r2
 800474c:	db15      	blt.n	800477a <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 800474e:	8abb      	ldrh	r3, [r7, #20]
 8004750:	461a      	mov	r2, r3
 8004752:	8a3b      	ldrh	r3, [r7, #16]
 8004754:	4413      	add	r3, r2
 8004756:	0fda      	lsrs	r2, r3, #31
 8004758:	4413      	add	r3, r2
 800475a:	105b      	asrs	r3, r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8004762:	8a7b      	ldrh	r3, [r7, #18]
 8004764:	461a      	mov	r2, r3
 8004766:	89fb      	ldrh	r3, [r7, #14]
 8004768:	4413      	add	r3, r2
 800476a:	0fda      	lsrs	r2, r3, #31
 800476c:	4413      	add	r3, r2
 800476e:	105b      	asrs	r3, r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	801a      	strh	r2, [r3, #0]
		return 1;
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <TP_Read_XY2+0xbc>
	}else return 0;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b085      	sub	sp, #20
 8004788:	af02      	add	r7, sp, #8
 800478a:	4603      	mov	r3, r0
 800478c:	80fb      	strh	r3, [r7, #6]
 800478e:	460b      	mov	r3, r1
 8004790:	80bb      	strh	r3, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	3b0c      	subs	r3, #12
 800479a:	b298      	uxth	r0, r3
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	330d      	adds	r3, #13
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	88bc      	ldrh	r4, [r7, #4]
 80047a4:	88b9      	ldrh	r1, [r7, #4]
 80047a6:	887b      	ldrh	r3, [r7, #2]
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	4623      	mov	r3, r4
 80047ac:	f7fe fa09 	bl	8002bc2 <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 80047b0:	88bb      	ldrh	r3, [r7, #4]
 80047b2:	3b0c      	subs	r3, #12
 80047b4:	b299      	uxth	r1, r3
 80047b6:	88bb      	ldrh	r3, [r7, #4]
 80047b8:	330d      	adds	r3, #13
 80047ba:	b29c      	uxth	r4, r3
 80047bc:	88fa      	ldrh	r2, [r7, #6]
 80047be:	88f8      	ldrh	r0, [r7, #6]
 80047c0:	887b      	ldrh	r3, [r7, #2]
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	4623      	mov	r3, r4
 80047c6:	f7fe f9fc 	bl	8002bc2 <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 80047ca:	88fb      	ldrh	r3, [r7, #6]
 80047cc:	3301      	adds	r3, #1
 80047ce:	b298      	uxth	r0, r3
 80047d0:	88bb      	ldrh	r3, [r7, #4]
 80047d2:	3301      	adds	r3, #1
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	887a      	ldrh	r2, [r7, #2]
 80047d8:	4619      	mov	r1, r3
 80047da:	f7fe f9db 	bl	8002b94 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b298      	uxth	r0, r3
 80047e4:	88bb      	ldrh	r3, [r7, #4]
 80047e6:	3301      	adds	r3, #1
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	887a      	ldrh	r2, [r7, #2]
 80047ec:	4619      	mov	r1, r3
 80047ee:	f7fe f9d1 	bl	8002b94 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	3301      	adds	r3, #1
 80047f6:	b298      	uxth	r0, r3
 80047f8:	88bb      	ldrh	r3, [r7, #4]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	887a      	ldrh	r2, [r7, #2]
 8004800:	4619      	mov	r1, r3
 8004802:	f7fe f9c7 	bl	8002b94 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	3b01      	subs	r3, #1
 800480a:	b298      	uxth	r0, r3
 800480c:	88bb      	ldrh	r3, [r7, #4]
 800480e:	3b01      	subs	r3, #1
 8004810:	b29b      	uxth	r3, r3
 8004812:	887a      	ldrh	r2, [r7, #2]
 8004814:	4619      	mov	r1, r3
 8004816:	f7fe f9bd 	bl	8002b94 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 800481a:	88f8      	ldrh	r0, [r7, #6]
 800481c:	88b9      	ldrh	r1, [r7, #4]
 800481e:	887a      	ldrh	r2, [r7, #2]
 8004820:	2300      	movs	r3, #0
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	2306      	movs	r3, #6
 8004826:	f7fe fe20 	bl	800346a <lcd_DrawCircle>
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	bd90      	pop	{r4, r7, pc}
	...

08004834 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 800483e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004842:	4843      	ldr	r0, [pc, #268]	@ (8004950 <TP_Scan+0x11c>)
 8004844:	f002 f882 	bl	800694c <HAL_GPIO_ReadPin>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d157      	bne.n	80048fe <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 800484e:	79fb      	ldrb	r3, [r7, #7]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d004      	beq.n	800485e <TP_Scan+0x2a>
 8004854:	493f      	ldr	r1, [pc, #252]	@ (8004954 <TP_Scan+0x120>)
 8004856:	4840      	ldr	r0, [pc, #256]	@ (8004958 <TP_Scan+0x124>)
 8004858:	f7ff ff32 	bl	80046c0 <TP_Read_XY2>
 800485c:	e03c      	b.n	80048d8 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 800485e:	493d      	ldr	r1, [pc, #244]	@ (8004954 <TP_Scan+0x120>)
 8004860:	483d      	ldr	r0, [pc, #244]	@ (8004958 <TP_Scan+0x124>)
 8004862:	f7ff ff2d 	bl	80046c0 <TP_Read_XY2>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d035      	beq.n	80048d8 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 800486c:	4b3b      	ldr	r3, [pc, #236]	@ (800495c <TP_Scan+0x128>)
 800486e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004872:	4b3a      	ldr	r3, [pc, #232]	@ (800495c <TP_Scan+0x128>)
 8004874:	899b      	ldrh	r3, [r3, #12]
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800487e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004882:	4b36      	ldr	r3, [pc, #216]	@ (800495c <TP_Scan+0x128>)
 8004884:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8004888:	ee07 3a90 	vmov	s15, r3
 800488c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004898:	ee17 3a90 	vmov	r3, s15
 800489c:	b29a      	uxth	r2, r3
 800489e:	4b2f      	ldr	r3, [pc, #188]	@ (800495c <TP_Scan+0x128>)
 80048a0:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 80048a2:	4b2e      	ldr	r3, [pc, #184]	@ (800495c <TP_Scan+0x128>)
 80048a4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80048a8:	4b2c      	ldr	r3, [pc, #176]	@ (800495c <TP_Scan+0x128>)
 80048aa:	8adb      	ldrh	r3, [r3, #22]
 80048ac:	ee07 3a90 	vmov	s15, r3
 80048b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048b8:	4b28      	ldr	r3, [pc, #160]	@ (800495c <TP_Scan+0x128>)
 80048ba:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ce:	ee17 3a90 	vmov	r3, s15
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	4b21      	ldr	r3, [pc, #132]	@ (800495c <TP_Scan+0x128>)
 80048d6:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 80048d8:	4b20      	ldr	r3, [pc, #128]	@ (800495c <TP_Scan+0x128>)
 80048da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048de:	b25b      	sxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	db2a      	blt.n	800493a <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 80048e4:	4b1d      	ldr	r3, [pc, #116]	@ (800495c <TP_Scan+0x128>)
 80048e6:	22c0      	movs	r2, #192	@ 0xc0
 80048e8:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 80048ec:	4b1b      	ldr	r3, [pc, #108]	@ (800495c <TP_Scan+0x128>)
 80048ee:	899a      	ldrh	r2, [r3, #12]
 80048f0:	4b1a      	ldr	r3, [pc, #104]	@ (800495c <TP_Scan+0x128>)
 80048f2:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 80048f4:	4b19      	ldr	r3, [pc, #100]	@ (800495c <TP_Scan+0x128>)
 80048f6:	8ada      	ldrh	r2, [r3, #22]
 80048f8:	4b18      	ldr	r3, [pc, #96]	@ (800495c <TP_Scan+0x128>)
 80048fa:	83da      	strh	r2, [r3, #30]
 80048fc:	e01d      	b.n	800493a <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 80048fe:	4b17      	ldr	r3, [pc, #92]	@ (800495c <TP_Scan+0x128>)
 8004900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004904:	b25b      	sxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	da09      	bge.n	800491e <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 800490a:	4b14      	ldr	r3, [pc, #80]	@ (800495c <TP_Scan+0x128>)
 800490c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004910:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004914:	b2da      	uxtb	r2, r3
 8004916:	4b11      	ldr	r3, [pc, #68]	@ (800495c <TP_Scan+0x128>)
 8004918:	f883 2020 	strb.w	r2, [r3, #32]
 800491c:	e00d      	b.n	800493a <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 800491e:	4b0f      	ldr	r3, [pc, #60]	@ (800495c <TP_Scan+0x128>)
 8004920:	2200      	movs	r2, #0
 8004922:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8004924:	4b0d      	ldr	r3, [pc, #52]	@ (800495c <TP_Scan+0x128>)
 8004926:	2200      	movs	r2, #0
 8004928:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 800492a:	4b0c      	ldr	r3, [pc, #48]	@ (800495c <TP_Scan+0x128>)
 800492c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004930:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8004932:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <TP_Scan+0x128>)
 8004934:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004938:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 800493a:	4b08      	ldr	r3, [pc, #32]	@ (800495c <TP_Scan+0x128>)
 800493c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004940:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004944:	b2db      	uxtb	r3, r3
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40020800 	.word	0x40020800
 8004954:	20000236 	.word	0x20000236
 8004958:	2000022c 	.word	0x2000022c
 800495c:	20000220 	.word	0x20000220

08004960 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8004964:	220e      	movs	r2, #14
 8004966:	4905      	ldr	r1, [pc, #20]	@ (800497c <TP_Save_Adjdata+0x1c>)
 8004968:	2000      	movs	r0, #0
 800496a:	f7fc fbd9 	bl	8001120 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 800496e:	2160      	movs	r1, #96	@ 0x60
 8004970:	200e      	movs	r0, #14
 8004972:	f7fc fb75 	bl	8001060 <at24c_WriteOneByte>
}
 8004976:	bf00      	nop
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000244 	.word	0x20000244

08004980 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 800498a:	200e      	movs	r0, #14
 800498c:	f7fc fb4c 	bl	8001028 <at24c_ReadOneByte>
 8004990:	4603      	mov	r3, r0
 8004992:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	2b60      	cmp	r3, #96	@ 0x60
 8004998:	d106      	bne.n	80049a8 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 800499a:	220e      	movs	r2, #14
 800499c:	4905      	ldr	r1, [pc, #20]	@ (80049b4 <TP_Get_Adjdata+0x34>)
 800499e:	2000      	movs	r0, #0
 80049a0:	f7fc fb9f 	bl	80010e2 <at24c_Read>
		return 1;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <TP_Get_Adjdata+0x2a>
	}
	return 0;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000244 	.word	0x20000244

080049b8 <touch_Adjust>:


void touch_Adjust(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08e      	sub	sp, #56	@ 0x38
 80049bc:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 80049be:	2300      	movs	r3, #0
 80049c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 80049ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004b48 <touch_Adjust+0x190>)
 80049cc:	881a      	ldrh	r2, [r3, #0]
 80049ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004b48 <touch_Adjust+0x190>)
 80049d0:	885b      	ldrh	r3, [r3, #2]
 80049d2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80049d6:	9100      	str	r1, [sp, #0]
 80049d8:	2100      	movs	r1, #0
 80049da:	2000      	movs	r0, #0
 80049dc:	f7fe f8a4 	bl	8002b28 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 80049e0:	2300      	movs	r3, #0
 80049e2:	9302      	str	r3, [sp, #8]
 80049e4:	2310      	movs	r3, #16
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80049f2:	4a56      	ldr	r2, [pc, #344]	@ (8004b4c <touch_Adjust+0x194>)
 80049f4:	2128      	movs	r1, #40	@ 0x28
 80049f6:	2005      	movs	r0, #5
 80049f8:	f7fe fda4 	bl	8003544 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 80049fc:	2300      	movs	r3, #0
 80049fe:	9302      	str	r3, [sp, #8]
 8004a00:	2310      	movs	r3, #16
 8004a02:	9301      	str	r3, [sp, #4]
 8004a04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004a0e:	4a50      	ldr	r2, [pc, #320]	@ (8004b50 <touch_Adjust+0x198>)
 8004a10:	2141      	movs	r1, #65	@ 0x41
 8004a12:	2005      	movs	r0, #5
 8004a14:	f7fe fd96 	bl	8003544 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8004a18:	2300      	movs	r3, #0
 8004a1a:	9302      	str	r3, [sp, #8]
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004a2a:	4a4a      	ldr	r2, [pc, #296]	@ (8004b54 <touch_Adjust+0x19c>)
 8004a2c:	215a      	movs	r1, #90	@ 0x5a
 8004a2e:	2005      	movs	r0, #5
 8004a30:	f7fe fd88 	bl	8003544 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 8004a34:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004a38:	2114      	movs	r1, #20
 8004a3a:	2014      	movs	r0, #20
 8004a3c:	f7ff fea2 	bl	8004784 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8004a40:	4b45      	ldr	r3, [pc, #276]	@ (8004b58 <touch_Adjust+0x1a0>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8004a48:	4b43      	ldr	r3, [pc, #268]	@ (8004b58 <touch_Adjust+0x1a0>)
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	625a      	str	r2, [r3, #36]	@ 0x24
	while(1)
	{
		HAL_Delay(50);
 8004a50:	2032      	movs	r0, #50	@ 0x32
 8004a52:	f000 fecb 	bl	80057ec <HAL_Delay>
		tp_dev.scan(1);
 8004a56:	4b40      	ldr	r3, [pc, #256]	@ (8004b58 <touch_Adjust+0x1a0>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2001      	movs	r0, #1
 8004a5c:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8004a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b58 <touch_Adjust+0x1a0>)
 8004a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a64:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a68:	2b40      	cmp	r3, #64	@ 0x40
 8004a6a:	d1f1      	bne.n	8004a50 <touch_Adjust+0x98>
		{
			tp_dev.sta&=~(1<<6);
 8004a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b58 <touch_Adjust+0x1a0>)
 8004a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	4b37      	ldr	r3, [pc, #220]	@ (8004b58 <touch_Adjust+0x1a0>)
 8004a7a:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8004a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a82:	4a35      	ldr	r2, [pc, #212]	@ (8004b58 <touch_Adjust+0x1a0>)
 8004a84:	8992      	ldrh	r2, [r2, #12]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	3328      	adds	r3, #40	@ 0x28
 8004a8a:	443b      	add	r3, r7
 8004a8c:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8004a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a94:	4a30      	ldr	r2, [pc, #192]	@ (8004b58 <touch_Adjust+0x1a0>)
 8004a96:	8ad2      	ldrh	r2, [r2, #22]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	3328      	adds	r3, #40	@ 0x28
 8004a9c:	443b      	add	r3, r7
 8004a9e:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8004aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			switch(cnt)
 8004aac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d8cc      	bhi.n	8004a50 <touch_Adjust+0x98>
 8004ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8004abc <touch_Adjust+0x104>)
 8004ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abc:	08004acd 	.word	0x08004acd
 8004ac0:	08004aef 	.word	0x08004aef
 8004ac4:	08004b19 	.word	0x08004b19
 8004ac8:	08004b5d 	.word	0x08004b5d
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 8004acc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ad0:	2114      	movs	r1, #20
 8004ad2:	2014      	movs	r0, #20
 8004ad4:	f7ff fe56 	bl	8004784 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b48 <touch_Adjust+0x190>)
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	3b14      	subs	r3, #20
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004ae4:	2114      	movs	r1, #20
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff fe4c 	bl	8004784 <TP_Drow_Touch_Point>
					break;
 8004aec:	e319      	b.n	8005122 <touch_Adjust+0x76a>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 8004aee:	4b16      	ldr	r3, [pc, #88]	@ (8004b48 <touch_Adjust+0x190>)
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	3b14      	subs	r3, #20
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004afa:	2114      	movs	r1, #20
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fe41 	bl	8004784 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 8004b02:	4b11      	ldr	r3, [pc, #68]	@ (8004b48 <touch_Adjust+0x190>)
 8004b04:	885b      	ldrh	r3, [r3, #2]
 8004b06:	3b14      	subs	r3, #20
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004b0e:	4619      	mov	r1, r3
 8004b10:	2014      	movs	r0, #20
 8004b12:	f7ff fe37 	bl	8004784 <TP_Drow_Touch_Point>
					break;
 8004b16:	e304      	b.n	8005122 <touch_Adjust+0x76a>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8004b18:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <touch_Adjust+0x190>)
 8004b1a:	885b      	ldrh	r3, [r3, #2]
 8004b1c:	3b14      	subs	r3, #20
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b24:	4619      	mov	r1, r3
 8004b26:	2014      	movs	r0, #20
 8004b28:	f7ff fe2c 	bl	8004784 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8004b2c:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <touch_Adjust+0x190>)
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	3b14      	subs	r3, #20
 8004b32:	b298      	uxth	r0, r3
 8004b34:	4b04      	ldr	r3, [pc, #16]	@ (8004b48 <touch_Adjust+0x190>)
 8004b36:	885b      	ldrh	r3, [r3, #2]
 8004b38:	3b14      	subs	r3, #20
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004b40:	4619      	mov	r1, r3
 8004b42:	f7ff fe1f 	bl	8004784 <TP_Drow_Touch_Point>
					break;
 8004b46:	e2ec      	b.n	8005122 <touch_Adjust+0x76a>
 8004b48:	2000046c 	.word	0x2000046c
 8004b4c:	0800b970 	.word	0x0800b970
 8004b50:	0800b98c 	.word	0x0800b98c
 8004b54:	0800b9a4 	.word	0x0800b9a4
 8004b58:	20000220 	.word	0x20000220
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8004b5c:	883b      	ldrh	r3, [r7, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	88bb      	ldrh	r3, [r7, #4]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bfb8      	it	lt
 8004b68:	425b      	neglt	r3, r3
 8004b6a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 8004b6c:	887b      	ldrh	r3, [r7, #2]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	88fb      	ldrh	r3, [r7, #6]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bfb8      	it	lt
 8004b78:	425b      	neglt	r3, r3
 8004b7a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	fb03 f303 	mul.w	r3, r3, r3
 8004b82:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	fb03 f303 	mul.w	r3, r3, r3
 8004b8a:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8004b8c:	6a3a      	ldr	r2, [r7, #32]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4413      	add	r3, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fb fc62 	bl	800045c <__aeabi_ui2d>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	ec43 2b10 	vmov	d0, r2, r3
 8004ba0:	f006 fd90 	bl	800b6c4 <sqrt>
 8004ba4:	ec53 2b10 	vmov	r2, r3, d0
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4619      	mov	r1, r3
 8004bac:	f7fb ff80 	bl	8000ab0 <__aeabi_d2uiz>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 8004bb4:	893b      	ldrh	r3, [r7, #8]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	89bb      	ldrh	r3, [r7, #12]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	bfb8      	it	lt
 8004bc0:	425b      	neglt	r3, r3
 8004bc2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 8004bc4:	897b      	ldrh	r3, [r7, #10]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	89fb      	ldrh	r3, [r7, #14]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bfb8      	it	lt
 8004bd0:	425b      	neglt	r3, r3
 8004bd2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	fb03 f303 	mul.w	r3, r3, r3
 8004bda:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	fb03 f303 	mul.w	r3, r3, r3
 8004be2:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8004be4:	6a3a      	ldr	r2, [r7, #32]
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	4413      	add	r3, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fb fc36 	bl	800045c <__aeabi_ui2d>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	ec43 2b10 	vmov	d0, r2, r3
 8004bf8:	f006 fd64 	bl	800b6c4 <sqrt>
 8004bfc:	ec53 2b10 	vmov	r2, r3, d0
 8004c00:	4610      	mov	r0, r2
 8004c02:	4619      	mov	r1, r3
 8004c04:	f7fb ff54 	bl	8000ab0 <__aeabi_d2uiz>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8004c0c:	8b7b      	ldrh	r3, [r7, #26]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c16:	8b3b      	ldrh	r3, [r7, #24]
 8004c18:	ee07 3a90 	vmov	s15, r3
 8004c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c24:	ee16 0a90 	vmov	r0, s13
 8004c28:	f7fb fc3a 	bl	80004a0 <__aeabi_f2d>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 8004c34:	a384      	add	r3, pc, #528	@ (adr r3, 8004e48 <touch_Adjust+0x490>)
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c3e:	f7fb fef9 	bl	8000a34 <__aeabi_dcmplt>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10f      	bne.n	8004c68 <touch_Adjust+0x2b0>
 8004c48:	a381      	add	r3, pc, #516	@ (adr r3, 8004e50 <touch_Adjust+0x498>)
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c52:	f7fb ff0d 	bl	8000a70 <__aeabi_dcmpgt>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d105      	bne.n	8004c68 <touch_Adjust+0x2b0>
 8004c5c:	8b7b      	ldrh	r3, [r7, #26]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <touch_Adjust+0x2b0>
 8004c62:	8b3b      	ldrh	r3, [r7, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d136      	bne.n	8004cd6 <touch_Adjust+0x31e>
					{
						cnt=0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8004c6e:	4b7a      	ldr	r3, [pc, #488]	@ (8004e58 <touch_Adjust+0x4a0>)
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	3b14      	subs	r3, #20
 8004c74:	b298      	uxth	r0, r3
 8004c76:	4b78      	ldr	r3, [pc, #480]	@ (8004e58 <touch_Adjust+0x4a0>)
 8004c78:	885b      	ldrh	r3, [r3, #2]
 8004c7a:	3b14      	subs	r3, #20
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c82:	4619      	mov	r1, r3
 8004c84:	f7ff fd7e 	bl	8004784 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8004c88:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004c8c:	2114      	movs	r1, #20
 8004c8e:	2014      	movs	r0, #20
 8004c90:	f7ff fd78 	bl	8004784 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8004c94:	2300      	movs	r3, #0
 8004c96:	9302      	str	r3, [sp, #8]
 8004c98:	2310      	movs	r3, #16
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004ca6:	4a6d      	ldr	r2, [pc, #436]	@ (8004e5c <touch_Adjust+0x4a4>)
 8004ca8:	2128      	movs	r1, #40	@ 0x28
 8004caa:	2005      	movs	r0, #5
 8004cac:	f7fe fc4a 	bl	8003544 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	9302      	str	r3, [sp, #8]
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004cc2:	4a67      	ldr	r2, [pc, #412]	@ (8004e60 <touch_Adjust+0x4a8>)
 8004cc4:	213c      	movs	r1, #60	@ 0x3c
 8004cc6:	2005      	movs	r0, #5
 8004cc8:	f7fe fc3c 	bl	8003544 <lcd_ShowStr>
						HAL_Delay(1000);
 8004ccc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004cd0:	f000 fd8c 	bl	80057ec <HAL_Delay>
 						continue;
 8004cd4:	e225      	b.n	8005122 <touch_Adjust+0x76a>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8004cd6:	883b      	ldrh	r3, [r7, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	893b      	ldrh	r3, [r7, #8]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bfb8      	it	lt
 8004ce2:	425b      	neglt	r3, r3
 8004ce4:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8004ce6:	887b      	ldrh	r3, [r7, #2]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	897b      	ldrh	r3, [r7, #10]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bfb8      	it	lt
 8004cf2:	425b      	neglt	r3, r3
 8004cf4:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	fb03 f303 	mul.w	r3, r3, r3
 8004cfc:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	fb03 f303 	mul.w	r3, r3, r3
 8004d04:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8004d06:	6a3a      	ldr	r2, [r7, #32]
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fb fba5 	bl	800045c <__aeabi_ui2d>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	ec43 2b10 	vmov	d0, r2, r3
 8004d1a:	f006 fcd3 	bl	800b6c4 <sqrt>
 8004d1e:	ec53 2b10 	vmov	r2, r3, d0
 8004d22:	4610      	mov	r0, r2
 8004d24:	4619      	mov	r1, r3
 8004d26:	f7fb fec3 	bl	8000ab0 <__aeabi_d2uiz>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8004d2e:	88bb      	ldrh	r3, [r7, #4]
 8004d30:	461a      	mov	r2, r3
 8004d32:	89bb      	ldrh	r3, [r7, #12]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bfb8      	it	lt
 8004d3a:	425b      	neglt	r3, r3
 8004d3c:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	461a      	mov	r2, r3
 8004d42:	89fb      	ldrh	r3, [r7, #14]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	bfb8      	it	lt
 8004d4a:	425b      	neglt	r3, r3
 8004d4c:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	fb03 f303 	mul.w	r3, r3, r3
 8004d54:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	fb03 f303 	mul.w	r3, r3, r3
 8004d5c:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8004d5e:	6a3a      	ldr	r2, [r7, #32]
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	4413      	add	r3, r2
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fb fb79 	bl	800045c <__aeabi_ui2d>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	ec43 2b10 	vmov	d0, r2, r3
 8004d72:	f006 fca7 	bl	800b6c4 <sqrt>
 8004d76:	ec53 2b10 	vmov	r2, r3, d0
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	f7fb fe97 	bl	8000ab0 <__aeabi_d2uiz>
 8004d82:	4603      	mov	r3, r0
 8004d84:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8004d86:	8b7b      	ldrh	r3, [r7, #26]
 8004d88:	ee07 3a90 	vmov	s15, r3
 8004d8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d90:	8b3b      	ldrh	r3, [r7, #24]
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d9e:	ee16 0a90 	vmov	r0, s13
 8004da2:	f7fb fb7d 	bl	80004a0 <__aeabi_f2d>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8004dae:	a326      	add	r3, pc, #152	@ (adr r3, 8004e48 <touch_Adjust+0x490>)
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004db8:	f7fb fe3c 	bl	8000a34 <__aeabi_dcmplt>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <touch_Adjust+0x41e>
 8004dc2:	a323      	add	r3, pc, #140	@ (adr r3, 8004e50 <touch_Adjust+0x498>)
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004dcc:	f7fb fe50 	bl	8000a70 <__aeabi_dcmpgt>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d046      	beq.n	8004e64 <touch_Adjust+0x4ac>
					{
						cnt=0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8004ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8004e58 <touch_Adjust+0x4a0>)
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	3b14      	subs	r3, #20
 8004de2:	b298      	uxth	r0, r3
 8004de4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e58 <touch_Adjust+0x4a0>)
 8004de6:	885b      	ldrh	r3, [r3, #2]
 8004de8:	3b14      	subs	r3, #20
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004df0:	4619      	mov	r1, r3
 8004df2:	f7ff fcc7 	bl	8004784 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8004df6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004dfa:	2114      	movs	r1, #20
 8004dfc:	2014      	movs	r0, #20
 8004dfe:	f7ff fcc1 	bl	8004784 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8004e02:	2300      	movs	r3, #0
 8004e04:	9302      	str	r3, [sp, #8]
 8004e06:	2310      	movs	r3, #16
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004e14:	4a11      	ldr	r2, [pc, #68]	@ (8004e5c <touch_Adjust+0x4a4>)
 8004e16:	2128      	movs	r1, #40	@ 0x28
 8004e18:	2005      	movs	r0, #5
 8004e1a:	f7fe fb93 	bl	8003544 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9302      	str	r3, [sp, #8]
 8004e22:	2310      	movs	r3, #16
 8004e24:	9301      	str	r3, [sp, #4]
 8004e26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004e30:	4a0b      	ldr	r2, [pc, #44]	@ (8004e60 <touch_Adjust+0x4a8>)
 8004e32:	213c      	movs	r1, #60	@ 0x3c
 8004e34:	2005      	movs	r0, #5
 8004e36:	f7fe fb85 	bl	8003544 <lcd_ShowStr>
						HAL_Delay(1000);
 8004e3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e3e:	f000 fcd5 	bl	80057ec <HAL_Delay>
						continue;
 8004e42:	e16e      	b.n	8005122 <touch_Adjust+0x76a>
 8004e44:	f3af 8000 	nop.w
 8004e48:	66666666 	.word	0x66666666
 8004e4c:	3fee6666 	.word	0x3fee6666
 8004e50:	cccccccd 	.word	0xcccccccd
 8004e54:	3ff0cccc 	.word	0x3ff0cccc
 8004e58:	2000046c 	.word	0x2000046c
 8004e5c:	0800b9b8 	.word	0x0800b9b8
 8004e60:	0800b9d8 	.word	0x0800b9d8
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8004e64:	88bb      	ldrh	r3, [r7, #4]
 8004e66:	461a      	mov	r2, r3
 8004e68:	893b      	ldrh	r3, [r7, #8]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bfb8      	it	lt
 8004e70:	425b      	neglt	r3, r3
 8004e72:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8004e74:	88fb      	ldrh	r3, [r7, #6]
 8004e76:	461a      	mov	r2, r3
 8004e78:	897b      	ldrh	r3, [r7, #10]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bfb8      	it	lt
 8004e80:	425b      	neglt	r3, r3
 8004e82:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	fb03 f303 	mul.w	r3, r3, r3
 8004e8a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	fb03 f303 	mul.w	r3, r3, r3
 8004e92:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8004e94:	6a3a      	ldr	r2, [r7, #32]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	4413      	add	r3, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fb fade 	bl	800045c <__aeabi_ui2d>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	ec43 2b10 	vmov	d0, r2, r3
 8004ea8:	f006 fc0c 	bl	800b6c4 <sqrt>
 8004eac:	ec53 2b10 	vmov	r2, r3, d0
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	f7fb fdfc 	bl	8000ab0 <__aeabi_d2uiz>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8004ebc:	883b      	ldrh	r3, [r7, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	89bb      	ldrh	r3, [r7, #12]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bfb8      	it	lt
 8004ec8:	425b      	neglt	r3, r3
 8004eca:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8004ecc:	887b      	ldrh	r3, [r7, #2]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	89fb      	ldrh	r3, [r7, #14]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bfb8      	it	lt
 8004ed8:	425b      	neglt	r3, r3
 8004eda:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	fb03 f303 	mul.w	r3, r3, r3
 8004ee2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	fb03 f303 	mul.w	r3, r3, r3
 8004eea:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8004eec:	6a3a      	ldr	r2, [r7, #32]
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fb fab2 	bl	800045c <__aeabi_ui2d>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	ec43 2b10 	vmov	d0, r2, r3
 8004f00:	f006 fbe0 	bl	800b6c4 <sqrt>
 8004f04:	ec53 2b10 	vmov	r2, r3, d0
 8004f08:	4610      	mov	r0, r2
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	f7fb fdd0 	bl	8000ab0 <__aeabi_d2uiz>
 8004f10:	4603      	mov	r3, r0
 8004f12:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8004f14:	8b7b      	ldrh	r3, [r7, #26]
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f1e:	8b3b      	ldrh	r3, [r7, #24]
 8004f20:	ee07 3a90 	vmov	s15, r3
 8004f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f2c:	ee16 0a90 	vmov	r0, s13
 8004f30:	f7fb fab6 	bl	80004a0 <__aeabi_f2d>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8004f3c:	a383      	add	r3, pc, #524	@ (adr r3, 800514c <touch_Adjust+0x794>)
 8004f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f46:	f7fb fd75 	bl	8000a34 <__aeabi_dcmplt>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d109      	bne.n	8004f64 <touch_Adjust+0x5ac>
 8004f50:	a380      	add	r3, pc, #512	@ (adr r3, 8005154 <touch_Adjust+0x79c>)
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f5a:	f7fb fd89 	bl	8000a70 <__aeabi_dcmpgt>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d036      	beq.n	8004fd2 <touch_Adjust+0x61a>
					{
						cnt=0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8004f6a:	4b71      	ldr	r3, [pc, #452]	@ (8005130 <touch_Adjust+0x778>)
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	3b14      	subs	r3, #20
 8004f70:	b298      	uxth	r0, r3
 8004f72:	4b6f      	ldr	r3, [pc, #444]	@ (8005130 <touch_Adjust+0x778>)
 8004f74:	885b      	ldrh	r3, [r3, #2]
 8004f76:	3b14      	subs	r3, #20
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f7e:	4619      	mov	r1, r3
 8004f80:	f7ff fc00 	bl	8004784 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8004f84:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004f88:	2114      	movs	r1, #20
 8004f8a:	2014      	movs	r0, #20
 8004f8c:	f7ff fbfa 	bl	8004784 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8004f90:	2300      	movs	r3, #0
 8004f92:	9302      	str	r3, [sp, #8]
 8004f94:	2310      	movs	r3, #16
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004fa2:	4a64      	ldr	r2, [pc, #400]	@ (8005134 <touch_Adjust+0x77c>)
 8004fa4:	2128      	movs	r1, #40	@ 0x28
 8004fa6:	2005      	movs	r0, #5
 8004fa8:	f7fe facc 	bl	8003544 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8004fac:	2300      	movs	r3, #0
 8004fae:	9302      	str	r3, [sp, #8]
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	9301      	str	r3, [sp, #4]
 8004fb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004fbe:	4a5e      	ldr	r2, [pc, #376]	@ (8005138 <touch_Adjust+0x780>)
 8004fc0:	213c      	movs	r1, #60	@ 0x3c
 8004fc2:	2005      	movs	r0, #5
 8004fc4:	f7fe fabe 	bl	8003544 <lcd_ShowStr>

						HAL_Delay(1000);
 8004fc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004fcc:	f000 fc0e 	bl	80057ec <HAL_Delay>
 							continue;
 8004fd0:	e0a7      	b.n	8005122 <touch_Adjust+0x76a>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8004fd2:	4b57      	ldr	r3, [pc, #348]	@ (8005130 <touch_Adjust+0x778>)
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	3b28      	subs	r3, #40	@ 0x28
 8004fd8:	ee07 3a90 	vmov	s15, r3
 8004fdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fe0:	88bb      	ldrh	r3, [r7, #4]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	883b      	ldrh	r3, [r7, #0]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	ee07 3a90 	vmov	s15, r3
 8004fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ff4:	4b51      	ldr	r3, [pc, #324]	@ (800513c <touch_Adjust+0x784>)
 8004ff6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8004ffa:	4b4d      	ldr	r3, [pc, #308]	@ (8005130 <touch_Adjust+0x778>)
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005006:	4b4d      	ldr	r3, [pc, #308]	@ (800513c <touch_Adjust+0x784>)
 8005008:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800500c:	88bb      	ldrh	r3, [r7, #4]
 800500e:	461a      	mov	r2, r3
 8005010:	883b      	ldrh	r3, [r7, #0]
 8005012:	4413      	add	r3, r2
 8005014:	ee07 3a90 	vmov	s15, r3
 8005018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800501c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005020:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005024:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005028:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800502c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005030:	ee17 3a90 	vmov	r3, s15
 8005034:	b21a      	sxth	r2, r3
 8005036:	4b41      	ldr	r3, [pc, #260]	@ (800513c <touch_Adjust+0x784>)
 8005038:	859a      	strh	r2, [r3, #44]	@ 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 800503a:	4b3d      	ldr	r3, [pc, #244]	@ (8005130 <touch_Adjust+0x778>)
 800503c:	885b      	ldrh	r3, [r3, #2]
 800503e:	3b28      	subs	r3, #40	@ 0x28
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005048:	897b      	ldrh	r3, [r7, #10]
 800504a:	461a      	mov	r2, r3
 800504c:	887b      	ldrh	r3, [r7, #2]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	ee07 3a90 	vmov	s15, r3
 8005054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800505c:	4b37      	ldr	r3, [pc, #220]	@ (800513c <touch_Adjust+0x784>)
 800505e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 8005062:	4b33      	ldr	r3, [pc, #204]	@ (8005130 <touch_Adjust+0x778>)
 8005064:	885b      	ldrh	r3, [r3, #2]
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800506e:	4b33      	ldr	r3, [pc, #204]	@ (800513c <touch_Adjust+0x784>)
 8005070:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8005074:	897b      	ldrh	r3, [r7, #10]
 8005076:	461a      	mov	r2, r3
 8005078:	887b      	ldrh	r3, [r7, #2]
 800507a:	4413      	add	r3, r2
 800507c:	ee07 3a90 	vmov	s15, r3
 8005080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005088:	ee37 7a67 	vsub.f32	s14, s14, s15
 800508c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005090:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005098:	ee17 3a90 	vmov	r3, s15
 800509c:	b21a      	sxth	r2, r3
 800509e:	4b27      	ldr	r3, [pc, #156]	@ (800513c <touch_Adjust+0x784>)
 80050a0:	85da      	strh	r2, [r3, #46]	@ 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80050a2:	4b23      	ldr	r3, [pc, #140]	@ (8005130 <touch_Adjust+0x778>)
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	3b14      	subs	r3, #20
 80050a8:	b298      	uxth	r0, r3
 80050aa:	4b21      	ldr	r3, [pc, #132]	@ (8005130 <touch_Adjust+0x778>)
 80050ac:	885b      	ldrh	r3, [r3, #2]
 80050ae:	3b14      	subs	r3, #20
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050b6:	4619      	mov	r1, r3
 80050b8:	f7ff fb64 	bl	8004784 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 80050bc:	2300      	movs	r3, #0
 80050be:	9302      	str	r3, [sp, #8]
 80050c0:	2310      	movs	r3, #16
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80050ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005140 <touch_Adjust+0x788>)
 80050d0:	2128      	movs	r1, #40	@ 0x28
 80050d2:	2005      	movs	r0, #5
 80050d4:	f7fe fa36 	bl	8003544 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 80050d8:	2300      	movs	r3, #0
 80050da:	9302      	str	r3, [sp, #8]
 80050dc:	2310      	movs	r3, #16
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80050ea:	4a16      	ldr	r2, [pc, #88]	@ (8005144 <touch_Adjust+0x78c>)
 80050ec:	213c      	movs	r1, #60	@ 0x3c
 80050ee:	2005      	movs	r0, #5
 80050f0:	f7fe fa28 	bl	8003544 <lcd_ShowStr>
					HAL_Delay(1000);
 80050f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80050f8:	f000 fb78 	bl	80057ec <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 80050fc:	2300      	movs	r3, #0
 80050fe:	9302      	str	r3, [sp, #8]
 8005100:	2310      	movs	r3, #16
 8005102:	9301      	str	r3, [sp, #4]
 8005104:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800510e:	4a0e      	ldr	r2, [pc, #56]	@ (8005148 <touch_Adjust+0x790>)
 8005110:	2128      	movs	r1, #40	@ 0x28
 8005112:	2005      	movs	r0, #5
 8005114:	f7fe fa16 	bl	8003544 <lcd_ShowStr>
					TP_Save_Adjdata();
 8005118:	f7ff fc22 	bl	8004960 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 800511c:	f7ff fc30 	bl	8004980 <TP_Get_Adjdata>
					return;
 8005120:	e000      	b.n	8005124 <touch_Adjust+0x76c>
		HAL_Delay(50);
 8005122:	e495      	b.n	8004a50 <touch_Adjust+0x98>
			}
		}
 	}
}
 8005124:	3728      	adds	r7, #40	@ 0x28
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	f3af 8000 	nop.w
 8005130:	2000046c 	.word	0x2000046c
 8005134:	0800b9b8 	.word	0x0800b9b8
 8005138:	0800b9d8 	.word	0x0800b9d8
 800513c:	20000220 	.word	0x20000220
 8005140:	0800b9f8 	.word	0x0800b9f8
 8005144:	0800ba18 	.word	0x0800ba18
 8005148:	0800ba38 	.word	0x0800ba38
 800514c:	66666666 	.word	0x66666666
 8005150:	3fee6666 	.word	0x3fee6666
 8005154:	cccccccd 	.word	0xcccccccd
 8005158:	3ff0cccc 	.word	0x3ff0cccc

0800515c <touch_init>:

void touch_init(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8005160:	4904      	ldr	r1, [pc, #16]	@ (8005174 <touch_init+0x18>)
 8005162:	4805      	ldr	r0, [pc, #20]	@ (8005178 <touch_init+0x1c>)
 8005164:	f7ff fa8a 	bl	800467c <TP_Read_XY>
	at24c_init();
 8005168:	f7fb ff58 	bl	800101c <at24c_init>
	TP_Get_Adjdata();
 800516c:	f7ff fc08 	bl	8004980 <TP_Get_Adjdata>
}
 8005170:	bf00      	nop
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20000236 	.word	0x20000236
 8005178:	2000022c 	.word	0x2000022c

0800517c <touch_Scan>:

void touch_Scan(){
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8005180:	4b02      	ldr	r3, [pc, #8]	@ (800518c <touch_Scan+0x10>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2000      	movs	r0, #0
 8005186:	4798      	blx	r3
}
 8005188:	bf00      	nop
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20000220 	.word	0x20000220

08005190 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 8005194:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005198:	4805      	ldr	r0, [pc, #20]	@ (80051b0 <touch_IsTouched+0x20>)
 800519a:	f001 fbd7 	bl	800694c <HAL_GPIO_ReadPin>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	bf0c      	ite	eq
 80051a4:	2301      	moveq	r3, #1
 80051a6:	2300      	movne	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40020800 	.word	0x40020800

080051b4 <touch_GetX>:

uint16_t touch_GetX(){
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 80051b8:	4b03      	ldr	r3, [pc, #12]	@ (80051c8 <touch_GetX+0x14>)
 80051ba:	899b      	ldrh	r3, [r3, #12]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	20000220 	.word	0x20000220

080051cc <touch_GetY>:

uint16_t touch_GetY(){
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 80051d0:	4b03      	ldr	r3, [pc, #12]	@ (80051e0 <touch_GetY+0x14>)
 80051d2:	8adb      	ldrh	r3, [r3, #22]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	20000220 	.word	0x20000220

080051e4 <getDayOfWeek>:
//
//void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
//	HAL_UART_Transmit(&huart1, bytes, size, 10);
//}

int getDayOfWeek(int day, int month, int year) {
 80051e4:	b480      	push	{r7}
 80051e6:	b089      	sub	sp, #36	@ 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
    // Zeller's Congruence algorithm to find the day of the week
    if (month < 3) {
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	dc05      	bgt.n	8005202 <getDayOfWeek+0x1e>
        month += 12;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	330c      	adds	r3, #12
 80051fa:	60bb      	str	r3, [r7, #8]
        year -= 1;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3b01      	subs	r3, #1
 8005200:	607b      	str	r3, [r7, #4]
    }

    int K = year % 100;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a2a      	ldr	r2, [pc, #168]	@ (80052b0 <getDayOfWeek+0xcc>)
 8005206:	fb82 1203 	smull	r1, r2, r2, r3
 800520a:	1151      	asrs	r1, r2, #5
 800520c:	17da      	asrs	r2, r3, #31
 800520e:	1a8a      	subs	r2, r1, r2
 8005210:	2164      	movs	r1, #100	@ 0x64
 8005212:	fb01 f202 	mul.w	r2, r1, r2
 8005216:	1a9b      	subs	r3, r3, r2
 8005218:	61fb      	str	r3, [r7, #28]
    int J = year / 100;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a24      	ldr	r2, [pc, #144]	@ (80052b0 <getDayOfWeek+0xcc>)
 800521e:	fb82 1203 	smull	r1, r2, r2, r3
 8005222:	1152      	asrs	r2, r2, #5
 8005224:	17db      	asrs	r3, r3, #31
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	61bb      	str	r3, [r7, #24]
    int f = day + ((13 * (month + 1)) / 5) + K + (K / 4) + (J / 4) - (2 * J);
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	4613      	mov	r3, r2
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	4a1e      	ldr	r2, [pc, #120]	@ (80052b4 <getDayOfWeek+0xd0>)
 800523a:	fb82 1203 	smull	r1, r2, r2, r3
 800523e:	1052      	asrs	r2, r2, #1
 8005240:	17db      	asrs	r3, r3, #31
 8005242:	1ad2      	subs	r2, r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	441a      	add	r2, r3
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	441a      	add	r2, r3
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	da00      	bge.n	8005254 <getDayOfWeek+0x70>
 8005252:	3303      	adds	r3, #3
 8005254:	109b      	asrs	r3, r3, #2
 8005256:	441a      	add	r2, r3
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	da00      	bge.n	8005260 <getDayOfWeek+0x7c>
 800525e:	3303      	adds	r3, #3
 8005260:	109b      	asrs	r3, r3, #2
 8005262:	441a      	add	r2, r3
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	617b      	str	r3, [r7, #20]
    int dayOfWeek = ((f % 7) + 7) % 7 + 1;  // Ensure dayOfWeek is non-negative
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4b12      	ldr	r3, [pc, #72]	@ (80052b8 <getDayOfWeek+0xd4>)
 8005270:	fb83 1302 	smull	r1, r3, r3, r2
 8005274:	4413      	add	r3, r2
 8005276:	1099      	asrs	r1, r3, #2
 8005278:	17d3      	asrs	r3, r2, #31
 800527a:	1ac9      	subs	r1, r1, r3
 800527c:	460b      	mov	r3, r1
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	1a5b      	subs	r3, r3, r1
 8005282:	1ad1      	subs	r1, r2, r3
 8005284:	1dca      	adds	r2, r1, #7
 8005286:	4b0c      	ldr	r3, [pc, #48]	@ (80052b8 <getDayOfWeek+0xd4>)
 8005288:	fb83 1302 	smull	r1, r3, r3, r2
 800528c:	4413      	add	r3, r2
 800528e:	1099      	asrs	r1, r3, #2
 8005290:	17d3      	asrs	r3, r2, #31
 8005292:	1ac9      	subs	r1, r1, r3
 8005294:	460b      	mov	r3, r1
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	1a5b      	subs	r3, r3, r1
 800529a:	1ad1      	subs	r1, r2, r3
 800529c:	1c4b      	adds	r3, r1, #1
 800529e:	613b      	str	r3, [r7, #16]

    // Mapping dayOfWeek to the name of the day
    return dayOfWeek;
 80052a0:	693b      	ldr	r3, [r7, #16]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3724      	adds	r7, #36	@ 0x24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	51eb851f 	.word	0x51eb851f
 80052b4:	66666667 	.word	0x66666667
 80052b8:	92492493 	.word	0x92492493

080052bc <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 80052c0:	2201      	movs	r2, #1
 80052c2:	4906      	ldr	r1, [pc, #24]	@ (80052dc <uart_init_esp+0x20>)
 80052c4:	4806      	ldr	r0, [pc, #24]	@ (80052e0 <uart_init_esp+0x24>)
 80052c6:	f005 f978 	bl	800a5ba <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 80052ca:	2201      	movs	r2, #1
 80052cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80052d0:	4804      	ldr	r0, [pc, #16]	@ (80052e4 <uart_init_esp+0x28>)
 80052d2:	f001 fb53 	bl	800697c <HAL_GPIO_WritePin>
}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000630 	.word	0x20000630
 80052e0:	2000067c 	.word	0x2000067c
 80052e4:	40021400 	.word	0x40021400

080052e8 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 80052f4:	887a      	ldrh	r2, [r7, #2]
 80052f6:	230a      	movs	r3, #10
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4803      	ldr	r0, [pc, #12]	@ (8005308 <uart_EspSendBytes+0x20>)
 80052fc:	f005 f8d2 	bl	800a4a4 <HAL_UART_Transmit>
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	2000067c 	.word	0x2000067c

0800530c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800530c:	b590      	push	{r4, r7, lr}
 800530e:	b089      	sub	sp, #36	@ 0x24
 8005310:	af04      	add	r7, sp, #16
 8005312:	6078      	str	r0, [r7, #4]
//
//		// turn on the receive interrupt
//		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
//	}

	if(huart->Instance == USART2){
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a50      	ldr	r2, [pc, #320]	@ (800545c <HAL_UART_RxCpltCallback+0x150>)
 800531a:	4293      	cmp	r3, r2
 800531c:	f040 809a 	bne.w	8005454 <HAL_UART_RxCpltCallback+0x148>
//		if(receive_buffer2 == 'O') check_esp = 1;
//		else if(receive_buffer2 == 'a') light_status = 0;
//		else if(receive_buffer2 == 'A') light_status = 1;
		if(receive_buffer2 == 'O'){
 8005320:	4b4f      	ldr	r3, [pc, #316]	@ (8005460 <HAL_UART_RxCpltCallback+0x154>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b4f      	cmp	r3, #79	@ 0x4f
 8005326:	d10a      	bne.n	800533e <HAL_UART_RxCpltCallback+0x32>
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8005328:	2110      	movs	r1, #16
 800532a:	484e      	ldr	r0, [pc, #312]	@ (8005464 <HAL_UART_RxCpltCallback+0x158>)
 800532c:	f001 fb3f 	bl	80069ae <HAL_GPIO_TogglePin>
//			lcd_ShowIntNum(10, 200, receive_buffer2, 10, WHITE, BLACK, 24);
			flag_receive_time = 1 - flag_receive_time;
 8005330:	4b4d      	ldr	r3, [pc, #308]	@ (8005468 <HAL_UART_RxCpltCallback+0x15c>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	f1c3 0301 	rsb	r3, r3, #1
 8005338:	b2da      	uxtb	r2, r3
 800533a:	4b4b      	ldr	r3, [pc, #300]	@ (8005468 <HAL_UART_RxCpltCallback+0x15c>)
 800533c:	701a      	strb	r2, [r3, #0]
		}
		if(flag_receive_time == 1){
 800533e:	4b4a      	ldr	r3, [pc, #296]	@ (8005468 <HAL_UART_RxCpltCallback+0x15c>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b01      	cmp	r3, #1
 8005344:	f040 8081 	bne.w	800544a <HAL_UART_RxCpltCallback+0x13e>
			if(receive_buffer2 == 'K'){
 8005348:	4b45      	ldr	r3, [pc, #276]	@ (8005460 <HAL_UART_RxCpltCallback+0x154>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b4b      	cmp	r3, #75	@ 0x4b
 800534e:	d16d      	bne.n	800542c <HAL_UART_RxCpltCallback+0x120>
				flag_receive_time = 1 - flag_receive_time;
 8005350:	4b45      	ldr	r3, [pc, #276]	@ (8005468 <HAL_UART_RxCpltCallback+0x15c>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f1c3 0301 	rsb	r3, r3, #1
 8005358:	b2da      	uxtb	r2, r3
 800535a:	4b43      	ldr	r3, [pc, #268]	@ (8005468 <HAL_UART_RxCpltCallback+0x15c>)
 800535c:	701a      	strb	r2, [r3, #0]
				id = 0;
 800535e:	4b43      	ldr	r3, [pc, #268]	@ (800546c <HAL_UART_RxCpltCallback+0x160>)
 8005360:	2200      	movs	r2, #0
 8005362:	801a      	strh	r2, [r3, #0]
//				lcd_ShowStr(0, 200, msg_time, WHITE, BLACK, 24, 0);
//				lcd_ShowChar(0, 270, msg_time[9], WHITE, BLACK, 24, 1);
				uint8_t _sec = msg_time[18] - '0' + (msg_time[17] - '0')*10;
 8005364:	4b42      	ldr	r3, [pc, #264]	@ (8005470 <HAL_UART_RxCpltCallback+0x164>)
 8005366:	7c9a      	ldrb	r2, [r3, #18]
 8005368:	4b41      	ldr	r3, [pc, #260]	@ (8005470 <HAL_UART_RxCpltCallback+0x164>)
 800536a:	7c5b      	ldrb	r3, [r3, #17]
 800536c:	4619      	mov	r1, r3
 800536e:	0089      	lsls	r1, r1, #2
 8005370:	440b      	add	r3, r1
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	b2db      	uxtb	r3, r3
 8005376:	4413      	add	r3, r2
 8005378:	b2db      	uxtb	r3, r3
 800537a:	3b10      	subs	r3, #16
 800537c:	73fb      	strb	r3, [r7, #15]
				uint8_t _min = msg_time[15] - '0' + (msg_time[14] - '0')*10;
 800537e:	4b3c      	ldr	r3, [pc, #240]	@ (8005470 <HAL_UART_RxCpltCallback+0x164>)
 8005380:	7bda      	ldrb	r2, [r3, #15]
 8005382:	4b3b      	ldr	r3, [pc, #236]	@ (8005470 <HAL_UART_RxCpltCallback+0x164>)
 8005384:	7b9b      	ldrb	r3, [r3, #14]
 8005386:	4619      	mov	r1, r3
 8005388:	0089      	lsls	r1, r1, #2
 800538a:	440b      	add	r3, r1
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	b2db      	uxtb	r3, r3
 8005390:	4413      	add	r3, r2
 8005392:	b2db      	uxtb	r3, r3
 8005394:	3b10      	subs	r3, #16
 8005396:	73bb      	strb	r3, [r7, #14]
				uint8_t _hours = msg_time[12] - '0' + (msg_time[11] - '0')*10;
 8005398:	4b35      	ldr	r3, [pc, #212]	@ (8005470 <HAL_UART_RxCpltCallback+0x164>)
 800539a:	7b1a      	ldrb	r2, [r3, #12]
 800539c:	4b34      	ldr	r3, [pc, #208]	@ (8005470 <HAL_UART_RxCpltCallback+0x164>)
 800539e:	7adb      	ldrb	r3, [r3, #11]
 80053a0:	4619      	mov	r1, r3
 80053a2:	0089      	lsls	r1, r1, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	4413      	add	r3, r2
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	3b10      	subs	r3, #16
 80053b0:	737b      	strb	r3, [r7, #13]
				uint8_t _month = msg_time[6] - '0' + (msg_time[5] - '0')*10;
 80053b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005470 <HAL_UART_RxCpltCallback+0x164>)
 80053b4:	799a      	ldrb	r2, [r3, #6]
 80053b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005470 <HAL_UART_RxCpltCallback+0x164>)
 80053b8:	795b      	ldrb	r3, [r3, #5]
 80053ba:	4619      	mov	r1, r3
 80053bc:	0089      	lsls	r1, r1, #2
 80053be:	440b      	add	r3, r1
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	4413      	add	r3, r2
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	3b10      	subs	r3, #16
 80053ca:	733b      	strb	r3, [r7, #12]
				uint8_t _year = msg_time[3] - '0' + (msg_time[2] - '0')*10;
 80053cc:	4b28      	ldr	r3, [pc, #160]	@ (8005470 <HAL_UART_RxCpltCallback+0x164>)
 80053ce:	78da      	ldrb	r2, [r3, #3]
 80053d0:	4b27      	ldr	r3, [pc, #156]	@ (8005470 <HAL_UART_RxCpltCallback+0x164>)
 80053d2:	789b      	ldrb	r3, [r3, #2]
 80053d4:	4619      	mov	r1, r3
 80053d6:	0089      	lsls	r1, r1, #2
 80053d8:	440b      	add	r3, r1
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	4413      	add	r3, r2
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	3b10      	subs	r3, #16
 80053e4:	72fb      	strb	r3, [r7, #11]
				uint8_t _date = msg_time[9] - '0' + (msg_time[8] - '0')*10;
 80053e6:	4b22      	ldr	r3, [pc, #136]	@ (8005470 <HAL_UART_RxCpltCallback+0x164>)
 80053e8:	7a5a      	ldrb	r2, [r3, #9]
 80053ea:	4b21      	ldr	r3, [pc, #132]	@ (8005470 <HAL_UART_RxCpltCallback+0x164>)
 80053ec:	7a1b      	ldrb	r3, [r3, #8]
 80053ee:	4619      	mov	r1, r3
 80053f0:	0089      	lsls	r1, r1, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	4413      	add	r3, r2
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	3b10      	subs	r3, #16
 80053fe:	72bb      	strb	r3, [r7, #10]

				uint8_t _day = getDayOfWeek(_date, _month, _year);
 8005400:	7abb      	ldrb	r3, [r7, #10]
 8005402:	7b39      	ldrb	r1, [r7, #12]
 8005404:	7afa      	ldrb	r2, [r7, #11]
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff feec 	bl	80051e4 <getDayOfWeek>
 800540c:	4603      	mov	r3, r0
 800540e:	727b      	strb	r3, [r7, #9]

//				lcd_ShowIntNum(0, 220, _hours, 2, WHITE, BLACK, 24);
				update_Time(_day, _date, _month, _year, _sec, _min, _hours);
 8005410:	7afc      	ldrb	r4, [r7, #11]
 8005412:	7b3a      	ldrb	r2, [r7, #12]
 8005414:	7ab9      	ldrb	r1, [r7, #10]
 8005416:	7a78      	ldrb	r0, [r7, #9]
 8005418:	7b7b      	ldrb	r3, [r7, #13]
 800541a:	9302      	str	r3, [sp, #8]
 800541c:	7bbb      	ldrb	r3, [r7, #14]
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	4623      	mov	r3, r4
 8005426:	f7fc f807 	bl	8001438 <update_Time>
 800542a:	e00e      	b.n	800544a <HAL_UART_RxCpltCallback+0x13e>
//					lcd_ShowStr(0, 200, "Null 0", WHITE, BLACK, 24, 0);
//				if(msg[1] == '\0')
//					lcd_ShowStr(0, 250, "Null 1", WHITE, BLACK, 24, 0);4

			}else{
				if(receive_buffer2 != 'O'){
 800542c:	4b0c      	ldr	r3, [pc, #48]	@ (8005460 <HAL_UART_RxCpltCallback+0x154>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b4f      	cmp	r3, #79	@ 0x4f
 8005432:	d00a      	beq.n	800544a <HAL_UART_RxCpltCallback+0x13e>
					msg_time[id++] = receive_buffer2;
 8005434:	4b0d      	ldr	r3, [pc, #52]	@ (800546c <HAL_UART_RxCpltCallback+0x160>)
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	b291      	uxth	r1, r2
 800543c:	4a0b      	ldr	r2, [pc, #44]	@ (800546c <HAL_UART_RxCpltCallback+0x160>)
 800543e:	8011      	strh	r1, [r2, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	4b07      	ldr	r3, [pc, #28]	@ (8005460 <HAL_UART_RxCpltCallback+0x154>)
 8005444:	7819      	ldrb	r1, [r3, #0]
 8005446:	4b0a      	ldr	r3, [pc, #40]	@ (8005470 <HAL_UART_RxCpltCallback+0x164>)
 8005448:	5499      	strb	r1, [r3, r2]
				}
			}
		}
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 800544a:	2201      	movs	r2, #1
 800544c:	4904      	ldr	r1, [pc, #16]	@ (8005460 <HAL_UART_RxCpltCallback+0x154>)
 800544e:	4809      	ldr	r0, [pc, #36]	@ (8005474 <HAL_UART_RxCpltCallback+0x168>)
 8005450:	f005 f8b3 	bl	800a5ba <HAL_UART_Receive_IT>
	}
}
 8005454:	bf00      	nop
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	bd90      	pop	{r4, r7, pc}
 800545c:	40004400 	.word	0x40004400
 8005460:	20000630 	.word	0x20000630
 8005464:	40021000 	.word	0x40021000
 8005468:	20000631 	.word	0x20000631
 800546c:	20000632 	.word	0x20000632
 8005470:	200005cc 	.word	0x200005cc
 8005474:	2000067c 	.word	0x2000067c

08005478 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800547c:	4b11      	ldr	r3, [pc, #68]	@ (80054c4 <MX_USART1_UART_Init+0x4c>)
 800547e:	4a12      	ldr	r2, [pc, #72]	@ (80054c8 <MX_USART1_UART_Init+0x50>)
 8005480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005482:	4b10      	ldr	r3, [pc, #64]	@ (80054c4 <MX_USART1_UART_Init+0x4c>)
 8005484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800548a:	4b0e      	ldr	r3, [pc, #56]	@ (80054c4 <MX_USART1_UART_Init+0x4c>)
 800548c:	2200      	movs	r2, #0
 800548e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005490:	4b0c      	ldr	r3, [pc, #48]	@ (80054c4 <MX_USART1_UART_Init+0x4c>)
 8005492:	2200      	movs	r2, #0
 8005494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005496:	4b0b      	ldr	r3, [pc, #44]	@ (80054c4 <MX_USART1_UART_Init+0x4c>)
 8005498:	2200      	movs	r2, #0
 800549a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800549c:	4b09      	ldr	r3, [pc, #36]	@ (80054c4 <MX_USART1_UART_Init+0x4c>)
 800549e:	220c      	movs	r2, #12
 80054a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054a2:	4b08      	ldr	r3, [pc, #32]	@ (80054c4 <MX_USART1_UART_Init+0x4c>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054a8:	4b06      	ldr	r3, [pc, #24]	@ (80054c4 <MX_USART1_UART_Init+0x4c>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80054ae:	4805      	ldr	r0, [pc, #20]	@ (80054c4 <MX_USART1_UART_Init+0x4c>)
 80054b0:	f004 ffa8 	bl	800a404 <HAL_UART_Init>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80054ba:	f7fe fb2b 	bl	8003b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80054be:	bf00      	nop
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000634 	.word	0x20000634
 80054c8:	40011000 	.word	0x40011000

080054cc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80054d0:	4b11      	ldr	r3, [pc, #68]	@ (8005518 <MX_USART2_UART_Init+0x4c>)
 80054d2:	4a12      	ldr	r2, [pc, #72]	@ (800551c <MX_USART2_UART_Init+0x50>)
 80054d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80054d6:	4b10      	ldr	r3, [pc, #64]	@ (8005518 <MX_USART2_UART_Init+0x4c>)
 80054d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80054dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80054de:	4b0e      	ldr	r3, [pc, #56]	@ (8005518 <MX_USART2_UART_Init+0x4c>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80054e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005518 <MX_USART2_UART_Init+0x4c>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80054ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005518 <MX_USART2_UART_Init+0x4c>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80054f0:	4b09      	ldr	r3, [pc, #36]	@ (8005518 <MX_USART2_UART_Init+0x4c>)
 80054f2:	220c      	movs	r2, #12
 80054f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054f6:	4b08      	ldr	r3, [pc, #32]	@ (8005518 <MX_USART2_UART_Init+0x4c>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80054fc:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <MX_USART2_UART_Init+0x4c>)
 80054fe:	2200      	movs	r2, #0
 8005500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005502:	4805      	ldr	r0, [pc, #20]	@ (8005518 <MX_USART2_UART_Init+0x4c>)
 8005504:	f004 ff7e 	bl	800a404 <HAL_UART_Init>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800550e:	f7fe fb01 	bl	8003b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005512:	bf00      	nop
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	2000067c 	.word	0x2000067c
 800551c:	40004400 	.word	0x40004400

08005520 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08c      	sub	sp, #48	@ 0x30
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005528:	f107 031c 	add.w	r3, r7, #28
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	605a      	str	r2, [r3, #4]
 8005532:	609a      	str	r2, [r3, #8]
 8005534:	60da      	str	r2, [r3, #12]
 8005536:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a3a      	ldr	r2, [pc, #232]	@ (8005628 <HAL_UART_MspInit+0x108>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d135      	bne.n	80055ae <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	4b39      	ldr	r3, [pc, #228]	@ (800562c <HAL_UART_MspInit+0x10c>)
 8005548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554a:	4a38      	ldr	r2, [pc, #224]	@ (800562c <HAL_UART_MspInit+0x10c>)
 800554c:	f043 0310 	orr.w	r3, r3, #16
 8005550:	6453      	str	r3, [r2, #68]	@ 0x44
 8005552:	4b36      	ldr	r3, [pc, #216]	@ (800562c <HAL_UART_MspInit+0x10c>)
 8005554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005556:	f003 0310 	and.w	r3, r3, #16
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	4b32      	ldr	r3, [pc, #200]	@ (800562c <HAL_UART_MspInit+0x10c>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005566:	4a31      	ldr	r2, [pc, #196]	@ (800562c <HAL_UART_MspInit+0x10c>)
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	6313      	str	r3, [r2, #48]	@ 0x30
 800556e:	4b2f      	ldr	r3, [pc, #188]	@ (800562c <HAL_UART_MspInit+0x10c>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800557a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800557e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005580:	2302      	movs	r3, #2
 8005582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005584:	2300      	movs	r3, #0
 8005586:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005588:	2303      	movs	r3, #3
 800558a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800558c:	2307      	movs	r3, #7
 800558e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005590:	f107 031c 	add.w	r3, r7, #28
 8005594:	4619      	mov	r1, r3
 8005596:	4826      	ldr	r0, [pc, #152]	@ (8005630 <HAL_UART_MspInit+0x110>)
 8005598:	f001 f83c 	bl	8006614 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800559c:	2200      	movs	r2, #0
 800559e:	2100      	movs	r1, #0
 80055a0:	2025      	movs	r0, #37	@ 0x25
 80055a2:	f000 fc84 	bl	8005eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80055a6:	2025      	movs	r0, #37	@ 0x25
 80055a8:	f000 fc9d 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80055ac:	e038      	b.n	8005620 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a20      	ldr	r2, [pc, #128]	@ (8005634 <HAL_UART_MspInit+0x114>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d133      	bne.n	8005620 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	4b1b      	ldr	r3, [pc, #108]	@ (800562c <HAL_UART_MspInit+0x10c>)
 80055be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c0:	4a1a      	ldr	r2, [pc, #104]	@ (800562c <HAL_UART_MspInit+0x10c>)
 80055c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80055c8:	4b18      	ldr	r3, [pc, #96]	@ (800562c <HAL_UART_MspInit+0x10c>)
 80055ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	4b14      	ldr	r3, [pc, #80]	@ (800562c <HAL_UART_MspInit+0x10c>)
 80055da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055dc:	4a13      	ldr	r2, [pc, #76]	@ (800562c <HAL_UART_MspInit+0x10c>)
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80055e4:	4b11      	ldr	r3, [pc, #68]	@ (800562c <HAL_UART_MspInit+0x10c>)
 80055e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80055f0:	230c      	movs	r3, #12
 80055f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f4:	2302      	movs	r3, #2
 80055f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055fc:	2303      	movs	r3, #3
 80055fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005600:	2307      	movs	r3, #7
 8005602:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005604:	f107 031c 	add.w	r3, r7, #28
 8005608:	4619      	mov	r1, r3
 800560a:	4809      	ldr	r0, [pc, #36]	@ (8005630 <HAL_UART_MspInit+0x110>)
 800560c:	f001 f802 	bl	8006614 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005610:	2200      	movs	r2, #0
 8005612:	2100      	movs	r1, #0
 8005614:	2026      	movs	r0, #38	@ 0x26
 8005616:	f000 fc4a 	bl	8005eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800561a:	2026      	movs	r0, #38	@ 0x26
 800561c:	f000 fc63 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
}
 8005620:	bf00      	nop
 8005622:	3730      	adds	r7, #48	@ 0x30
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40011000 	.word	0x40011000
 800562c:	40023800 	.word	0x40023800
 8005630:	40020000 	.word	0x40020000
 8005634:	40004400 	.word	0x40004400

08005638 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	4603      	mov	r3, r0
 8005640:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	b2db      	uxtb	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	0092      	lsls	r2, r2, #2
 800564c:	4413      	add	r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	b2da      	uxtb	r2, r3
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	b2db      	uxtb	r3, r3
 800565a:	4413      	add	r3, r2
 800565c:	b2db      	uxtb	r3, r3
}
 800565e:	4618      	mov	r0, r3
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	4a0d      	ldr	r2, [pc, #52]	@ (80056b0 <DEC2BCD+0x44>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	08db      	lsrs	r3, r3, #3
 8005680:	b2db      	uxtb	r3, r3
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	b258      	sxtb	r0, r3
 8005686:	79fa      	ldrb	r2, [r7, #7]
 8005688:	4b09      	ldr	r3, [pc, #36]	@ (80056b0 <DEC2BCD+0x44>)
 800568a:	fba3 1302 	umull	r1, r3, r3, r2
 800568e:	08d9      	lsrs	r1, r3, #3
 8005690:	460b      	mov	r3, r1
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	b2db      	uxtb	r3, r3
 800569c:	b25b      	sxtb	r3, r3
 800569e:	4303      	orrs	r3, r0
 80056a0:	b25b      	sxtb	r3, r3
 80056a2:	b2db      	uxtb	r3, r3
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	cccccccd 	.word	0xcccccccd

080056b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80056b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80056ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80056b8:	480d      	ldr	r0, [pc, #52]	@ (80056f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80056ba:	490e      	ldr	r1, [pc, #56]	@ (80056f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80056bc:	4a0e      	ldr	r2, [pc, #56]	@ (80056f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80056be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056c0:	e002      	b.n	80056c8 <LoopCopyDataInit>

080056c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056c6:	3304      	adds	r3, #4

080056c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056cc:	d3f9      	bcc.n	80056c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056ce:	4a0b      	ldr	r2, [pc, #44]	@ (80056fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80056d0:	4c0b      	ldr	r4, [pc, #44]	@ (8005700 <LoopFillZerobss+0x26>)
  movs r3, #0
 80056d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056d4:	e001      	b.n	80056da <LoopFillZerobss>

080056d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056d8:	3204      	adds	r2, #4

080056da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056dc:	d3fb      	bcc.n	80056d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80056de:	f7fe fd17 	bl	8004110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056e2:	f005 ffcb 	bl	800b67c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056e6:	f7fe f87f 	bl	80037e8 <main>
  bx  lr    
 80056ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80056ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80056f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056f4:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 80056f8:	0800fd88 	.word	0x0800fd88
  ldr r2, =_sbss
 80056fc:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8005700:	20000800 	.word	0x20000800

08005704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005704:	e7fe      	b.n	8005704 <ADC_IRQHandler>
	...

08005708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800570c:	4b0e      	ldr	r3, [pc, #56]	@ (8005748 <HAL_Init+0x40>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a0d      	ldr	r2, [pc, #52]	@ (8005748 <HAL_Init+0x40>)
 8005712:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005716:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005718:	4b0b      	ldr	r3, [pc, #44]	@ (8005748 <HAL_Init+0x40>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a0a      	ldr	r2, [pc, #40]	@ (8005748 <HAL_Init+0x40>)
 800571e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005722:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005724:	4b08      	ldr	r3, [pc, #32]	@ (8005748 <HAL_Init+0x40>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a07      	ldr	r2, [pc, #28]	@ (8005748 <HAL_Init+0x40>)
 800572a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800572e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005730:	2003      	movs	r0, #3
 8005732:	f000 fbb1 	bl	8005e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005736:	200f      	movs	r0, #15
 8005738:	f000 f808 	bl	800574c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800573c:	f7fe fc5e 	bl	8003ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	40023c00 	.word	0x40023c00

0800574c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005754:	4b12      	ldr	r3, [pc, #72]	@ (80057a0 <HAL_InitTick+0x54>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	4b12      	ldr	r3, [pc, #72]	@ (80057a4 <HAL_InitTick+0x58>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	4619      	mov	r1, r3
 800575e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005762:	fbb3 f3f1 	udiv	r3, r3, r1
 8005766:	fbb2 f3f3 	udiv	r3, r2, r3
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fbc9 	bl	8005f02 <HAL_SYSTICK_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e00e      	b.n	8005798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b0f      	cmp	r3, #15
 800577e:	d80a      	bhi.n	8005796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005780:	2200      	movs	r2, #0
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	f04f 30ff 	mov.w	r0, #4294967295
 8005788:	f000 fb91 	bl	8005eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800578c:	4a06      	ldr	r2, [pc, #24]	@ (80057a8 <HAL_InitTick+0x5c>)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	e000      	b.n	8005798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
}
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	2000021c 	.word	0x2000021c
 80057a4:	2000025c 	.word	0x2000025c
 80057a8:	20000258 	.word	0x20000258

080057ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057b0:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <HAL_IncTick+0x20>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	4b06      	ldr	r3, [pc, #24]	@ (80057d0 <HAL_IncTick+0x24>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4413      	add	r3, r2
 80057bc:	4a04      	ldr	r2, [pc, #16]	@ (80057d0 <HAL_IncTick+0x24>)
 80057be:	6013      	str	r3, [r2, #0]
}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	2000025c 	.word	0x2000025c
 80057d0:	200006c4 	.word	0x200006c4

080057d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  return uwTick;
 80057d8:	4b03      	ldr	r3, [pc, #12]	@ (80057e8 <HAL_GetTick+0x14>)
 80057da:	681b      	ldr	r3, [r3, #0]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	200006c4 	.word	0x200006c4

080057ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057f4:	f7ff ffee 	bl	80057d4 <HAL_GetTick>
 80057f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005804:	d005      	beq.n	8005812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005806:	4b0a      	ldr	r3, [pc, #40]	@ (8005830 <HAL_Delay+0x44>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005812:	bf00      	nop
 8005814:	f7ff ffde 	bl	80057d4 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	429a      	cmp	r2, r3
 8005822:	d8f7      	bhi.n	8005814 <HAL_Delay+0x28>
  {
  }
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	2000025c 	.word	0x2000025c

08005834 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e033      	b.n	80058b2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d109      	bne.n	8005866 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fb fb4e 	bl	8000ef4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	2b00      	cmp	r3, #0
 8005870:	d118      	bne.n	80058a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005876:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800587a:	f023 0302 	bic.w	r3, r3, #2
 800587e:	f043 0202 	orr.w	r2, r3, #2
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f93a 	bl	8005b00 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	f023 0303 	bic.w	r3, r3, #3
 800589a:	f043 0201 	orr.w	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80058a2:	e001      	b.n	80058a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_ADC_ConfigChannel+0x1c>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e105      	b.n	8005ae4 <HAL_ADC_ConfigChannel+0x228>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b09      	cmp	r3, #9
 80058e6:	d925      	bls.n	8005934 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68d9      	ldr	r1, [r3, #12]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	4613      	mov	r3, r2
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	4413      	add	r3, r2
 80058fc:	3b1e      	subs	r3, #30
 80058fe:	2207      	movs	r2, #7
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	43da      	mvns	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	400a      	ands	r2, r1
 800590c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68d9      	ldr	r1, [r3, #12]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	4618      	mov	r0, r3
 8005920:	4603      	mov	r3, r0
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	4403      	add	r3, r0
 8005926:	3b1e      	subs	r3, #30
 8005928:	409a      	lsls	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	60da      	str	r2, [r3, #12]
 8005932:	e022      	b.n	800597a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6919      	ldr	r1, [r3, #16]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	461a      	mov	r2, r3
 8005942:	4613      	mov	r3, r2
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	4413      	add	r3, r2
 8005948:	2207      	movs	r2, #7
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	43da      	mvns	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	400a      	ands	r2, r1
 8005956:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6919      	ldr	r1, [r3, #16]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	4618      	mov	r0, r3
 800596a:	4603      	mov	r3, r0
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	4403      	add	r3, r0
 8005970:	409a      	lsls	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b06      	cmp	r3, #6
 8005980:	d824      	bhi.n	80059cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	3b05      	subs	r3, #5
 8005994:	221f      	movs	r2, #31
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	43da      	mvns	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	400a      	ands	r2, r1
 80059a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	4618      	mov	r0, r3
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	3b05      	subs	r3, #5
 80059be:	fa00 f203 	lsl.w	r2, r0, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80059ca:	e04c      	b.n	8005a66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b0c      	cmp	r3, #12
 80059d2:	d824      	bhi.n	8005a1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	4613      	mov	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	3b23      	subs	r3, #35	@ 0x23
 80059e6:	221f      	movs	r2, #31
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	43da      	mvns	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	400a      	ands	r2, r1
 80059f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	4618      	mov	r0, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3b23      	subs	r3, #35	@ 0x23
 8005a10:	fa00 f203 	lsl.w	r2, r0, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a1c:	e023      	b.n	8005a66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3b41      	subs	r3, #65	@ 0x41
 8005a30:	221f      	movs	r2, #31
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	43da      	mvns	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	400a      	ands	r2, r1
 8005a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	3b41      	subs	r3, #65	@ 0x41
 8005a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a66:	4b22      	ldr	r3, [pc, #136]	@ (8005af0 <HAL_ADC_ConfigChannel+0x234>)
 8005a68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a21      	ldr	r2, [pc, #132]	@ (8005af4 <HAL_ADC_ConfigChannel+0x238>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d109      	bne.n	8005a88 <HAL_ADC_ConfigChannel+0x1cc>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b12      	cmp	r3, #18
 8005a7a:	d105      	bne.n	8005a88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a19      	ldr	r2, [pc, #100]	@ (8005af4 <HAL_ADC_ConfigChannel+0x238>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d123      	bne.n	8005ada <HAL_ADC_ConfigChannel+0x21e>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b10      	cmp	r3, #16
 8005a98:	d003      	beq.n	8005aa2 <HAL_ADC_ConfigChannel+0x1e6>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b11      	cmp	r3, #17
 8005aa0:	d11b      	bne.n	8005ada <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b10      	cmp	r3, #16
 8005ab4:	d111      	bne.n	8005ada <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ab6:	4b10      	ldr	r3, [pc, #64]	@ (8005af8 <HAL_ADC_ConfigChannel+0x23c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a10      	ldr	r2, [pc, #64]	@ (8005afc <HAL_ADC_ConfigChannel+0x240>)
 8005abc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac0:	0c9a      	lsrs	r2, r3, #18
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005acc:	e002      	b.n	8005ad4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1f9      	bne.n	8005ace <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	40012300 	.word	0x40012300
 8005af4:	40012000 	.word	0x40012000
 8005af8:	2000021c 	.word	0x2000021c
 8005afc:	431bde83 	.word	0x431bde83

08005b00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b08:	4b79      	ldr	r3, [pc, #484]	@ (8005cf0 <ADC_Init+0x1f0>)
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	431a      	orrs	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6859      	ldr	r1, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	021a      	lsls	r2, r3, #8
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005b58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6859      	ldr	r1, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6899      	ldr	r1, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b92:	4a58      	ldr	r2, [pc, #352]	@ (8005cf4 <ADC_Init+0x1f4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d022      	beq.n	8005bde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ba6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6899      	ldr	r1, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6899      	ldr	r1, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	609a      	str	r2, [r3, #8]
 8005bdc:	e00f      	b.n	8005bfe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005bec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005bfc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0202 	bic.w	r2, r2, #2
 8005c0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6899      	ldr	r1, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	7e1b      	ldrb	r3, [r3, #24]
 8005c18:	005a      	lsls	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01b      	beq.n	8005c64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c3a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005c4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6859      	ldr	r1, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c56:	3b01      	subs	r3, #1
 8005c58:	035a      	lsls	r2, r3, #13
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
 8005c62:	e007      	b.n	8005c74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c72:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	051a      	lsls	r2, r3, #20
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005ca8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6899      	ldr	r1, [r3, #8]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005cb6:	025a      	lsls	r2, r3, #9
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6899      	ldr	r1, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	029a      	lsls	r2, r3, #10
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	609a      	str	r2, [r3, #8]
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	40012300 	.word	0x40012300
 8005cf4:	0f000001 	.word	0x0f000001

08005cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d08:	4b0c      	ldr	r3, [pc, #48]	@ (8005d3c <__NVIC_SetPriorityGrouping+0x44>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d14:	4013      	ands	r3, r2
 8005d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d2a:	4a04      	ldr	r2, [pc, #16]	@ (8005d3c <__NVIC_SetPriorityGrouping+0x44>)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	60d3      	str	r3, [r2, #12]
}
 8005d30:	bf00      	nop
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	e000ed00 	.word	0xe000ed00

08005d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d44:	4b04      	ldr	r3, [pc, #16]	@ (8005d58 <__NVIC_GetPriorityGrouping+0x18>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	0a1b      	lsrs	r3, r3, #8
 8005d4a:	f003 0307 	and.w	r3, r3, #7
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	e000ed00 	.word	0xe000ed00

08005d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	db0b      	blt.n	8005d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	f003 021f 	and.w	r2, r3, #31
 8005d74:	4907      	ldr	r1, [pc, #28]	@ (8005d94 <__NVIC_EnableIRQ+0x38>)
 8005d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	e000e100 	.word	0xe000e100

08005d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	6039      	str	r1, [r7, #0]
 8005da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	db0a      	blt.n	8005dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	490c      	ldr	r1, [pc, #48]	@ (8005de4 <__NVIC_SetPriority+0x4c>)
 8005db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db6:	0112      	lsls	r2, r2, #4
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	440b      	add	r3, r1
 8005dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dc0:	e00a      	b.n	8005dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	4908      	ldr	r1, [pc, #32]	@ (8005de8 <__NVIC_SetPriority+0x50>)
 8005dc8:	79fb      	ldrb	r3, [r7, #7]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	3b04      	subs	r3, #4
 8005dd0:	0112      	lsls	r2, r2, #4
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	761a      	strb	r2, [r3, #24]
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	e000e100 	.word	0xe000e100
 8005de8:	e000ed00 	.word	0xe000ed00

08005dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b089      	sub	sp, #36	@ 0x24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f1c3 0307 	rsb	r3, r3, #7
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	bf28      	it	cs
 8005e0a:	2304      	movcs	r3, #4
 8005e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	3304      	adds	r3, #4
 8005e12:	2b06      	cmp	r3, #6
 8005e14:	d902      	bls.n	8005e1c <NVIC_EncodePriority+0x30>
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	3b03      	subs	r3, #3
 8005e1a:	e000      	b.n	8005e1e <NVIC_EncodePriority+0x32>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e20:	f04f 32ff 	mov.w	r2, #4294967295
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2a:	43da      	mvns	r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	401a      	ands	r2, r3
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e34:	f04f 31ff 	mov.w	r1, #4294967295
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3e:	43d9      	mvns	r1, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e44:	4313      	orrs	r3, r2
         );
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3724      	adds	r7, #36	@ 0x24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e64:	d301      	bcc.n	8005e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e66:	2301      	movs	r3, #1
 8005e68:	e00f      	b.n	8005e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e94 <SysTick_Config+0x40>)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e72:	210f      	movs	r1, #15
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	f7ff ff8e 	bl	8005d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e7c:	4b05      	ldr	r3, [pc, #20]	@ (8005e94 <SysTick_Config+0x40>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e82:	4b04      	ldr	r3, [pc, #16]	@ (8005e94 <SysTick_Config+0x40>)
 8005e84:	2207      	movs	r2, #7
 8005e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	e000e010 	.word	0xe000e010

08005e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff ff29 	bl	8005cf8 <__NVIC_SetPriorityGrouping>
}
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b086      	sub	sp, #24
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	607a      	str	r2, [r7, #4]
 8005eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ec0:	f7ff ff3e 	bl	8005d40 <__NVIC_GetPriorityGrouping>
 8005ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	6978      	ldr	r0, [r7, #20]
 8005ecc:	f7ff ff8e 	bl	8005dec <NVIC_EncodePriority>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff ff5d 	bl	8005d98 <__NVIC_SetPriority>
}
 8005ede:	bf00      	nop
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b082      	sub	sp, #8
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	4603      	mov	r3, r0
 8005eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff ff31 	bl	8005d5c <__NVIC_EnableIRQ>
}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff ffa2 	bl	8005e54 <SysTick_Config>
 8005f10:	4603      	mov	r3, r0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005f28:	f7ff fc54 	bl	80057d4 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e099      	b.n	800606c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0201 	bic.w	r2, r2, #1
 8005f56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f58:	e00f      	b.n	8005f7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f5a:	f7ff fc3b 	bl	80057d4 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b05      	cmp	r3, #5
 8005f66:	d908      	bls.n	8005f7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2203      	movs	r2, #3
 8005f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e078      	b.n	800606c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e8      	bne.n	8005f5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4b38      	ldr	r3, [pc, #224]	@ (8006074 <HAL_DMA_Init+0x158>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d107      	bne.n	8005fe4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f023 0307 	bic.w	r3, r3, #7
 8005ffa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	2b04      	cmp	r3, #4
 800600c:	d117      	bne.n	800603e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00e      	beq.n	800603e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fa7b 	bl	800651c <DMA_CheckFifoParam>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d008      	beq.n	800603e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2240      	movs	r2, #64	@ 0x40
 8006030:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800603a:	2301      	movs	r3, #1
 800603c:	e016      	b.n	800606c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa32 	bl	80064b0 <DMA_CalcBaseAndBitshift>
 800604c:	4603      	mov	r3, r0
 800604e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006054:	223f      	movs	r2, #63	@ 0x3f
 8006056:	409a      	lsls	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	f010803f 	.word	0xf010803f

08006078 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006084:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006086:	f7ff fba5 	bl	80057d4 <HAL_GetTick>
 800608a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d008      	beq.n	80060aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2280      	movs	r2, #128	@ 0x80
 800609c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e052      	b.n	8006150 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0216 	bic.w	r2, r2, #22
 80060b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695a      	ldr	r2, [r3, #20]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <HAL_DMA_Abort+0x62>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0208 	bic.w	r2, r2, #8
 80060e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060fa:	e013      	b.n	8006124 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060fc:	f7ff fb6a 	bl	80057d4 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b05      	cmp	r3, #5
 8006108:	d90c      	bls.n	8006124 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2220      	movs	r2, #32
 800610e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2203      	movs	r2, #3
 8006114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e015      	b.n	8006150 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e4      	bne.n	80060fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006136:	223f      	movs	r2, #63	@ 0x3f
 8006138:	409a      	lsls	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d004      	beq.n	8006176 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2280      	movs	r2, #128	@ 0x80
 8006170:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e00c      	b.n	8006190 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2205      	movs	r2, #5
 800617a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0201 	bic.w	r2, r2, #1
 800618c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80061a8:	4b8e      	ldr	r3, [pc, #568]	@ (80063e4 <HAL_DMA_IRQHandler+0x248>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a8e      	ldr	r2, [pc, #568]	@ (80063e8 <HAL_DMA_IRQHandler+0x24c>)
 80061ae:	fba2 2303 	umull	r2, r3, r2, r3
 80061b2:	0a9b      	lsrs	r3, r3, #10
 80061b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061c6:	2208      	movs	r2, #8
 80061c8:	409a      	lsls	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4013      	ands	r3, r2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d01a      	beq.n	8006208 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d013      	beq.n	8006208 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0204 	bic.w	r2, r2, #4
 80061ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f4:	2208      	movs	r2, #8
 80061f6:	409a      	lsls	r2, r3
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006200:	f043 0201 	orr.w	r2, r3, #1
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800620c:	2201      	movs	r2, #1
 800620e:	409a      	lsls	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4013      	ands	r3, r2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d012      	beq.n	800623e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00b      	beq.n	800623e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800622a:	2201      	movs	r2, #1
 800622c:	409a      	lsls	r2, r3
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006236:	f043 0202 	orr.w	r2, r3, #2
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006242:	2204      	movs	r2, #4
 8006244:	409a      	lsls	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4013      	ands	r3, r2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d012      	beq.n	8006274 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006260:	2204      	movs	r2, #4
 8006262:	409a      	lsls	r2, r3
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626c:	f043 0204 	orr.w	r2, r3, #4
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006278:	2210      	movs	r2, #16
 800627a:	409a      	lsls	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4013      	ands	r3, r2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d043      	beq.n	800630c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d03c      	beq.n	800630c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006296:	2210      	movs	r2, #16
 8006298:	409a      	lsls	r2, r3
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d018      	beq.n	80062de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d108      	bne.n	80062cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d024      	beq.n	800630c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	4798      	blx	r3
 80062ca:	e01f      	b.n	800630c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d01b      	beq.n	800630c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	4798      	blx	r3
 80062dc:	e016      	b.n	800630c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d107      	bne.n	80062fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0208 	bic.w	r2, r2, #8
 80062fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006310:	2220      	movs	r2, #32
 8006312:	409a      	lsls	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4013      	ands	r3, r2
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 808f 	beq.w	800643c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 8087 	beq.w	800643c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006332:	2220      	movs	r2, #32
 8006334:	409a      	lsls	r2, r3
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b05      	cmp	r3, #5
 8006344:	d136      	bne.n	80063b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0216 	bic.w	r2, r2, #22
 8006354:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695a      	ldr	r2, [r3, #20]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006364:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <HAL_DMA_IRQHandler+0x1da>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0208 	bic.w	r2, r2, #8
 8006384:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800638a:	223f      	movs	r2, #63	@ 0x3f
 800638c:	409a      	lsls	r2, r3
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d07e      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
        }
        return;
 80063b2:	e079      	b.n	80064a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d01d      	beq.n	80063fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10d      	bne.n	80063ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d031      	beq.n	800643c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
 80063e0:	e02c      	b.n	800643c <HAL_DMA_IRQHandler+0x2a0>
 80063e2:	bf00      	nop
 80063e4:	2000021c 	.word	0x2000021c
 80063e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d023      	beq.n	800643c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	4798      	blx	r3
 80063fc:	e01e      	b.n	800643c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10f      	bne.n	800642c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 0210 	bic.w	r2, r2, #16
 800641a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006440:	2b00      	cmp	r3, #0
 8006442:	d032      	beq.n	80064aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d022      	beq.n	8006496 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2205      	movs	r2, #5
 8006454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0201 	bic.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	3301      	adds	r3, #1
 800646c:	60bb      	str	r3, [r7, #8]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	429a      	cmp	r2, r3
 8006472:	d307      	bcc.n	8006484 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f2      	bne.n	8006468 <HAL_DMA_IRQHandler+0x2cc>
 8006482:	e000      	b.n	8006486 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006484:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d005      	beq.n	80064aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	4798      	blx	r3
 80064a6:	e000      	b.n	80064aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80064a8:	bf00      	nop
    }
  }
}
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	3b10      	subs	r3, #16
 80064c0:	4a14      	ldr	r2, [pc, #80]	@ (8006514 <DMA_CalcBaseAndBitshift+0x64>)
 80064c2:	fba2 2303 	umull	r2, r3, r2, r3
 80064c6:	091b      	lsrs	r3, r3, #4
 80064c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80064ca:	4a13      	ldr	r2, [pc, #76]	@ (8006518 <DMA_CalcBaseAndBitshift+0x68>)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4413      	add	r3, r2
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d909      	bls.n	80064f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80064e6:	f023 0303 	bic.w	r3, r3, #3
 80064ea:	1d1a      	adds	r2, r3, #4
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80064f0:	e007      	b.n	8006502 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80064fa:	f023 0303 	bic.w	r3, r3, #3
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006506:	4618      	mov	r0, r3
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	aaaaaaab 	.word	0xaaaaaaab
 8006518:	0800fd70 	.word	0x0800fd70

0800651c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800652c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d11f      	bne.n	8006576 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b03      	cmp	r3, #3
 800653a:	d856      	bhi.n	80065ea <DMA_CheckFifoParam+0xce>
 800653c:	a201      	add	r2, pc, #4	@ (adr r2, 8006544 <DMA_CheckFifoParam+0x28>)
 800653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006542:	bf00      	nop
 8006544:	08006555 	.word	0x08006555
 8006548:	08006567 	.word	0x08006567
 800654c:	08006555 	.word	0x08006555
 8006550:	080065eb 	.word	0x080065eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006558:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d046      	beq.n	80065ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006564:	e043      	b.n	80065ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800656e:	d140      	bne.n	80065f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006574:	e03d      	b.n	80065f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800657e:	d121      	bne.n	80065c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b03      	cmp	r3, #3
 8006584:	d837      	bhi.n	80065f6 <DMA_CheckFifoParam+0xda>
 8006586:	a201      	add	r2, pc, #4	@ (adr r2, 800658c <DMA_CheckFifoParam+0x70>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	0800659d 	.word	0x0800659d
 8006590:	080065a3 	.word	0x080065a3
 8006594:	0800659d 	.word	0x0800659d
 8006598:	080065b5 	.word	0x080065b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	73fb      	strb	r3, [r7, #15]
      break;
 80065a0:	e030      	b.n	8006604 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d025      	beq.n	80065fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065b2:	e022      	b.n	80065fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80065bc:	d11f      	bne.n	80065fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80065c2:	e01c      	b.n	80065fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d903      	bls.n	80065d2 <DMA_CheckFifoParam+0xb6>
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d003      	beq.n	80065d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80065d0:	e018      	b.n	8006604 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	73fb      	strb	r3, [r7, #15]
      break;
 80065d6:	e015      	b.n	8006604 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00e      	beq.n	8006602 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	73fb      	strb	r3, [r7, #15]
      break;
 80065e8:	e00b      	b.n	8006602 <DMA_CheckFifoParam+0xe6>
      break;
 80065ea:	bf00      	nop
 80065ec:	e00a      	b.n	8006604 <DMA_CheckFifoParam+0xe8>
      break;
 80065ee:	bf00      	nop
 80065f0:	e008      	b.n	8006604 <DMA_CheckFifoParam+0xe8>
      break;
 80065f2:	bf00      	nop
 80065f4:	e006      	b.n	8006604 <DMA_CheckFifoParam+0xe8>
      break;
 80065f6:	bf00      	nop
 80065f8:	e004      	b.n	8006604 <DMA_CheckFifoParam+0xe8>
      break;
 80065fa:	bf00      	nop
 80065fc:	e002      	b.n	8006604 <DMA_CheckFifoParam+0xe8>
      break;   
 80065fe:	bf00      	nop
 8006600:	e000      	b.n	8006604 <DMA_CheckFifoParam+0xe8>
      break;
 8006602:	bf00      	nop
    }
  } 
  
  return status; 
 8006604:	7bfb      	ldrb	r3, [r7, #15]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop

08006614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006614:	b480      	push	{r7}
 8006616:	b089      	sub	sp, #36	@ 0x24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006622:	2300      	movs	r3, #0
 8006624:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006626:	2300      	movs	r3, #0
 8006628:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800662a:	2300      	movs	r3, #0
 800662c:	61fb      	str	r3, [r7, #28]
 800662e:	e16b      	b.n	8006908 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006630:	2201      	movs	r2, #1
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	fa02 f303 	lsl.w	r3, r2, r3
 8006638:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	4013      	ands	r3, r2
 8006642:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	429a      	cmp	r2, r3
 800664a:	f040 815a 	bne.w	8006902 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	2b01      	cmp	r3, #1
 8006658:	d005      	beq.n	8006666 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006662:	2b02      	cmp	r3, #2
 8006664:	d130      	bne.n	80066c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	2203      	movs	r2, #3
 8006672:	fa02 f303 	lsl.w	r3, r2, r3
 8006676:	43db      	mvns	r3, r3
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	4013      	ands	r3, r2
 800667c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	fa02 f303 	lsl.w	r3, r2, r3
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	4313      	orrs	r3, r2
 800668e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800669c:	2201      	movs	r2, #1
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	43db      	mvns	r3, r3
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	4013      	ands	r3, r2
 80066aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	091b      	lsrs	r3, r3, #4
 80066b2:	f003 0201 	and.w	r2, r3, #1
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	4313      	orrs	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	2b03      	cmp	r3, #3
 80066d2:	d017      	beq.n	8006704 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	2203      	movs	r2, #3
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	43db      	mvns	r3, r3
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	4013      	ands	r3, r2
 80066ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	fa02 f303 	lsl.w	r3, r2, r3
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f003 0303 	and.w	r3, r3, #3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d123      	bne.n	8006758 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	08da      	lsrs	r2, r3, #3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3208      	adds	r2, #8
 8006718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800671c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	220f      	movs	r2, #15
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	43db      	mvns	r3, r3
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	4013      	ands	r3, r2
 8006732:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	691a      	ldr	r2, [r3, #16]
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	4313      	orrs	r3, r2
 8006748:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	08da      	lsrs	r2, r3, #3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	3208      	adds	r2, #8
 8006752:	69b9      	ldr	r1, [r7, #24]
 8006754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	2203      	movs	r2, #3
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	43db      	mvns	r3, r3
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	4013      	ands	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f003 0203 	and.w	r2, r3, #3
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	fa02 f303 	lsl.w	r3, r2, r3
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	4313      	orrs	r3, r2
 8006784:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 80b4 	beq.w	8006902 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	4b60      	ldr	r3, [pc, #384]	@ (8006920 <HAL_GPIO_Init+0x30c>)
 80067a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a2:	4a5f      	ldr	r2, [pc, #380]	@ (8006920 <HAL_GPIO_Init+0x30c>)
 80067a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80067aa:	4b5d      	ldr	r3, [pc, #372]	@ (8006920 <HAL_GPIO_Init+0x30c>)
 80067ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067b6:	4a5b      	ldr	r2, [pc, #364]	@ (8006924 <HAL_GPIO_Init+0x310>)
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	089b      	lsrs	r3, r3, #2
 80067bc:	3302      	adds	r3, #2
 80067be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	220f      	movs	r2, #15
 80067ce:	fa02 f303 	lsl.w	r3, r2, r3
 80067d2:	43db      	mvns	r3, r3
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	4013      	ands	r3, r2
 80067d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a52      	ldr	r2, [pc, #328]	@ (8006928 <HAL_GPIO_Init+0x314>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d02b      	beq.n	800683a <HAL_GPIO_Init+0x226>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a51      	ldr	r2, [pc, #324]	@ (800692c <HAL_GPIO_Init+0x318>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d025      	beq.n	8006836 <HAL_GPIO_Init+0x222>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a50      	ldr	r2, [pc, #320]	@ (8006930 <HAL_GPIO_Init+0x31c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d01f      	beq.n	8006832 <HAL_GPIO_Init+0x21e>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a4f      	ldr	r2, [pc, #316]	@ (8006934 <HAL_GPIO_Init+0x320>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d019      	beq.n	800682e <HAL_GPIO_Init+0x21a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a4e      	ldr	r2, [pc, #312]	@ (8006938 <HAL_GPIO_Init+0x324>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d013      	beq.n	800682a <HAL_GPIO_Init+0x216>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a4d      	ldr	r2, [pc, #308]	@ (800693c <HAL_GPIO_Init+0x328>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00d      	beq.n	8006826 <HAL_GPIO_Init+0x212>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a4c      	ldr	r2, [pc, #304]	@ (8006940 <HAL_GPIO_Init+0x32c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d007      	beq.n	8006822 <HAL_GPIO_Init+0x20e>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a4b      	ldr	r2, [pc, #300]	@ (8006944 <HAL_GPIO_Init+0x330>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d101      	bne.n	800681e <HAL_GPIO_Init+0x20a>
 800681a:	2307      	movs	r3, #7
 800681c:	e00e      	b.n	800683c <HAL_GPIO_Init+0x228>
 800681e:	2308      	movs	r3, #8
 8006820:	e00c      	b.n	800683c <HAL_GPIO_Init+0x228>
 8006822:	2306      	movs	r3, #6
 8006824:	e00a      	b.n	800683c <HAL_GPIO_Init+0x228>
 8006826:	2305      	movs	r3, #5
 8006828:	e008      	b.n	800683c <HAL_GPIO_Init+0x228>
 800682a:	2304      	movs	r3, #4
 800682c:	e006      	b.n	800683c <HAL_GPIO_Init+0x228>
 800682e:	2303      	movs	r3, #3
 8006830:	e004      	b.n	800683c <HAL_GPIO_Init+0x228>
 8006832:	2302      	movs	r3, #2
 8006834:	e002      	b.n	800683c <HAL_GPIO_Init+0x228>
 8006836:	2301      	movs	r3, #1
 8006838:	e000      	b.n	800683c <HAL_GPIO_Init+0x228>
 800683a:	2300      	movs	r3, #0
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	f002 0203 	and.w	r2, r2, #3
 8006842:	0092      	lsls	r2, r2, #2
 8006844:	4093      	lsls	r3, r2
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	4313      	orrs	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800684c:	4935      	ldr	r1, [pc, #212]	@ (8006924 <HAL_GPIO_Init+0x310>)
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	089b      	lsrs	r3, r3, #2
 8006852:	3302      	adds	r3, #2
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800685a:	4b3b      	ldr	r3, [pc, #236]	@ (8006948 <HAL_GPIO_Init+0x334>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	43db      	mvns	r3, r3
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	4013      	ands	r3, r2
 8006868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	4313      	orrs	r3, r2
 800687c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800687e:	4a32      	ldr	r2, [pc, #200]	@ (8006948 <HAL_GPIO_Init+0x334>)
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006884:	4b30      	ldr	r3, [pc, #192]	@ (8006948 <HAL_GPIO_Init+0x334>)
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	43db      	mvns	r3, r3
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	4013      	ands	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068a8:	4a27      	ldr	r2, [pc, #156]	@ (8006948 <HAL_GPIO_Init+0x334>)
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80068ae:	4b26      	ldr	r3, [pc, #152]	@ (8006948 <HAL_GPIO_Init+0x334>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	43db      	mvns	r3, r3
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	4013      	ands	r3, r2
 80068bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80068d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006948 <HAL_GPIO_Init+0x334>)
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80068d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006948 <HAL_GPIO_Init+0x334>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	43db      	mvns	r3, r3
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	4013      	ands	r3, r2
 80068e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80068fc:	4a12      	ldr	r2, [pc, #72]	@ (8006948 <HAL_GPIO_Init+0x334>)
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	3301      	adds	r3, #1
 8006906:	61fb      	str	r3, [r7, #28]
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	2b0f      	cmp	r3, #15
 800690c:	f67f ae90 	bls.w	8006630 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	3724      	adds	r7, #36	@ 0x24
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	40023800 	.word	0x40023800
 8006924:	40013800 	.word	0x40013800
 8006928:	40020000 	.word	0x40020000
 800692c:	40020400 	.word	0x40020400
 8006930:	40020800 	.word	0x40020800
 8006934:	40020c00 	.word	0x40020c00
 8006938:	40021000 	.word	0x40021000
 800693c:	40021400 	.word	0x40021400
 8006940:	40021800 	.word	0x40021800
 8006944:	40021c00 	.word	0x40021c00
 8006948:	40013c00 	.word	0x40013c00

0800694c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691a      	ldr	r2, [r3, #16]
 800695c:	887b      	ldrh	r3, [r7, #2]
 800695e:	4013      	ands	r3, r2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006964:	2301      	movs	r3, #1
 8006966:	73fb      	strb	r3, [r7, #15]
 8006968:	e001      	b.n	800696e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800696a:	2300      	movs	r3, #0
 800696c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800696e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	807b      	strh	r3, [r7, #2]
 8006988:	4613      	mov	r3, r2
 800698a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800698c:	787b      	ldrb	r3, [r7, #1]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006992:	887a      	ldrh	r2, [r7, #2]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006998:	e003      	b.n	80069a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800699a:	887b      	ldrh	r3, [r7, #2]
 800699c:	041a      	lsls	r2, r3, #16
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	619a      	str	r2, [r3, #24]
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b085      	sub	sp, #20
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	460b      	mov	r3, r1
 80069b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80069c0:	887a      	ldrh	r2, [r7, #2]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4013      	ands	r3, r2
 80069c6:	041a      	lsls	r2, r3, #16
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	43d9      	mvns	r1, r3
 80069cc:	887b      	ldrh	r3, [r7, #2]
 80069ce:	400b      	ands	r3, r1
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	619a      	str	r2, [r3, #24]
}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
	...

080069e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e12b      	b.n	8006c4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fb ff8c 	bl	8002928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2224      	movs	r2, #36	@ 0x24
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0201 	bic.w	r2, r2, #1
 8006a26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006a48:	f001 fd8e 	bl	8008568 <HAL_RCC_GetPCLK1Freq>
 8006a4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	4a81      	ldr	r2, [pc, #516]	@ (8006c58 <HAL_I2C_Init+0x274>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d807      	bhi.n	8006a68 <HAL_I2C_Init+0x84>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4a80      	ldr	r2, [pc, #512]	@ (8006c5c <HAL_I2C_Init+0x278>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	bf94      	ite	ls
 8006a60:	2301      	movls	r3, #1
 8006a62:	2300      	movhi	r3, #0
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	e006      	b.n	8006a76 <HAL_I2C_Init+0x92>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4a7d      	ldr	r2, [pc, #500]	@ (8006c60 <HAL_I2C_Init+0x27c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	bf94      	ite	ls
 8006a70:	2301      	movls	r3, #1
 8006a72:	2300      	movhi	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e0e7      	b.n	8006c4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4a78      	ldr	r2, [pc, #480]	@ (8006c64 <HAL_I2C_Init+0x280>)
 8006a82:	fba2 2303 	umull	r2, r3, r2, r3
 8006a86:	0c9b      	lsrs	r3, r3, #18
 8006a88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	4a6a      	ldr	r2, [pc, #424]	@ (8006c58 <HAL_I2C_Init+0x274>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d802      	bhi.n	8006ab8 <HAL_I2C_Init+0xd4>
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	e009      	b.n	8006acc <HAL_I2C_Init+0xe8>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006abe:	fb02 f303 	mul.w	r3, r2, r3
 8006ac2:	4a69      	ldr	r2, [pc, #420]	@ (8006c68 <HAL_I2C_Init+0x284>)
 8006ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac8:	099b      	lsrs	r3, r3, #6
 8006aca:	3301      	adds	r3, #1
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6812      	ldr	r2, [r2, #0]
 8006ad0:	430b      	orrs	r3, r1
 8006ad2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006ade:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	495c      	ldr	r1, [pc, #368]	@ (8006c58 <HAL_I2C_Init+0x274>)
 8006ae8:	428b      	cmp	r3, r1
 8006aea:	d819      	bhi.n	8006b20 <HAL_I2C_Init+0x13c>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	1e59      	subs	r1, r3, #1
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006afa:	1c59      	adds	r1, r3, #1
 8006afc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006b00:	400b      	ands	r3, r1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00a      	beq.n	8006b1c <HAL_I2C_Init+0x138>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	1e59      	subs	r1, r3, #1
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b14:	3301      	adds	r3, #1
 8006b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b1a:	e051      	b.n	8006bc0 <HAL_I2C_Init+0x1dc>
 8006b1c:	2304      	movs	r3, #4
 8006b1e:	e04f      	b.n	8006bc0 <HAL_I2C_Init+0x1dc>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d111      	bne.n	8006b4c <HAL_I2C_Init+0x168>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	1e58      	subs	r0, r3, #1
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6859      	ldr	r1, [r3, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	440b      	add	r3, r1
 8006b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	bf0c      	ite	eq
 8006b44:	2301      	moveq	r3, #1
 8006b46:	2300      	movne	r3, #0
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	e012      	b.n	8006b72 <HAL_I2C_Init+0x18e>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	1e58      	subs	r0, r3, #1
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6859      	ldr	r1, [r3, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	0099      	lsls	r1, r3, #2
 8006b5c:	440b      	add	r3, r1
 8006b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b62:	3301      	adds	r3, #1
 8006b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	bf0c      	ite	eq
 8006b6c:	2301      	moveq	r3, #1
 8006b6e:	2300      	movne	r3, #0
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_I2C_Init+0x196>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e022      	b.n	8006bc0 <HAL_I2C_Init+0x1dc>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10e      	bne.n	8006ba0 <HAL_I2C_Init+0x1bc>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1e58      	subs	r0, r3, #1
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6859      	ldr	r1, [r3, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	440b      	add	r3, r1
 8006b90:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b94:	3301      	adds	r3, #1
 8006b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b9e:	e00f      	b.n	8006bc0 <HAL_I2C_Init+0x1dc>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	1e58      	subs	r0, r3, #1
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6859      	ldr	r1, [r3, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	0099      	lsls	r1, r3, #2
 8006bb0:	440b      	add	r3, r1
 8006bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bc0:	6879      	ldr	r1, [r7, #4]
 8006bc2:	6809      	ldr	r1, [r1, #0]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69da      	ldr	r2, [r3, #28]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006bee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6911      	ldr	r1, [r2, #16]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	68d2      	ldr	r2, [r2, #12]
 8006bfa:	4311      	orrs	r1, r2
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6812      	ldr	r2, [r2, #0]
 8006c00:	430b      	orrs	r3, r1
 8006c02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	695a      	ldr	r2, [r3, #20]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0201 	orr.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	000186a0 	.word	0x000186a0
 8006c5c:	001e847f 	.word	0x001e847f
 8006c60:	003d08ff 	.word	0x003d08ff
 8006c64:	431bde83 	.word	0x431bde83
 8006c68:	10624dd3 	.word	0x10624dd3

08006c6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af02      	add	r7, sp, #8
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	4608      	mov	r0, r1
 8006c76:	4611      	mov	r1, r2
 8006c78:	461a      	mov	r2, r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	817b      	strh	r3, [r7, #10]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	813b      	strh	r3, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c86:	f7fe fda5 	bl	80057d4 <HAL_GetTick>
 8006c8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b20      	cmp	r3, #32
 8006c96:	f040 80d9 	bne.w	8006e4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	2319      	movs	r3, #25
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	496d      	ldr	r1, [pc, #436]	@ (8006e58 <HAL_I2C_Mem_Write+0x1ec>)
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 fdb9 	bl	800781c <I2C_WaitOnFlagUntilTimeout>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e0cc      	b.n	8006e4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d101      	bne.n	8006cc2 <HAL_I2C_Mem_Write+0x56>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	e0c5      	b.n	8006e4e <HAL_I2C_Mem_Write+0x1e2>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d007      	beq.n	8006ce8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f042 0201 	orr.w	r2, r2, #1
 8006ce6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2221      	movs	r2, #33	@ 0x21
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2240      	movs	r2, #64	@ 0x40
 8006d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a3a      	ldr	r2, [r7, #32]
 8006d12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4a4d      	ldr	r2, [pc, #308]	@ (8006e5c <HAL_I2C_Mem_Write+0x1f0>)
 8006d28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d2a:	88f8      	ldrh	r0, [r7, #6]
 8006d2c:	893a      	ldrh	r2, [r7, #8]
 8006d2e:	8979      	ldrh	r1, [r7, #10]
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	4603      	mov	r3, r0
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 fbf0 	bl	8007520 <I2C_RequestMemoryWrite>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d052      	beq.n	8006dec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e081      	b.n	8006e4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 fe7e 	bl	8007a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00d      	beq.n	8006d76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d107      	bne.n	8006d72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e06b      	b.n	8006e4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7a:	781a      	ldrb	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d11b      	bne.n	8006dec <HAL_I2C_Mem_Write+0x180>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d017      	beq.n	8006dec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc0:	781a      	ldrb	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1aa      	bne.n	8006d4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 fe71 	bl	8007ae0 <I2C_WaitOnBTFFlagUntilTimeout>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00d      	beq.n	8006e20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e08:	2b04      	cmp	r3, #4
 8006e0a:	d107      	bne.n	8006e1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e016      	b.n	8006e4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	e000      	b.n	8006e4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006e4c:	2302      	movs	r3, #2
  }
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	00100002 	.word	0x00100002
 8006e5c:	ffff0000 	.word	0xffff0000

08006e60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08c      	sub	sp, #48	@ 0x30
 8006e64:	af02      	add	r7, sp, #8
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	4608      	mov	r0, r1
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4603      	mov	r3, r0
 8006e70:	817b      	strh	r3, [r7, #10]
 8006e72:	460b      	mov	r3, r1
 8006e74:	813b      	strh	r3, [r7, #8]
 8006e76:	4613      	mov	r3, r2
 8006e78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e7a:	f7fe fcab 	bl	80057d4 <HAL_GetTick>
 8006e7e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	f040 8214 	bne.w	80072b6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	2319      	movs	r3, #25
 8006e94:	2201      	movs	r2, #1
 8006e96:	497b      	ldr	r1, [pc, #492]	@ (8007084 <HAL_I2C_Mem_Read+0x224>)
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 fcbf 	bl	800781c <I2C_WaitOnFlagUntilTimeout>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e207      	b.n	80072b8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d101      	bne.n	8006eb6 <HAL_I2C_Mem_Read+0x56>
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	e200      	b.n	80072b8 <HAL_I2C_Mem_Read+0x458>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d007      	beq.n	8006edc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0201 	orr.w	r2, r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006eea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2222      	movs	r2, #34	@ 0x22
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2240      	movs	r2, #64	@ 0x40
 8006ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4a5b      	ldr	r2, [pc, #364]	@ (8007088 <HAL_I2C_Mem_Read+0x228>)
 8006f1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f1e:	88f8      	ldrh	r0, [r7, #6]
 8006f20:	893a      	ldrh	r2, [r7, #8]
 8006f22:	8979      	ldrh	r1, [r7, #10]
 8006f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f26:	9301      	str	r3, [sp, #4]
 8006f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 fb8c 	bl	800764c <I2C_RequestMemoryRead>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e1bc      	b.n	80072b8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d113      	bne.n	8006f6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f46:	2300      	movs	r3, #0
 8006f48:	623b      	str	r3, [r7, #32]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	623b      	str	r3, [r7, #32]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	623b      	str	r3, [r7, #32]
 8006f5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	e190      	b.n	8007290 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d11b      	bne.n	8006fae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f86:	2300      	movs	r3, #0
 8006f88:	61fb      	str	r3, [r7, #28]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	61fb      	str	r3, [r7, #28]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	61fb      	str	r3, [r7, #28]
 8006f9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	e170      	b.n	8007290 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d11b      	bne.n	8006fee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61bb      	str	r3, [r7, #24]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	61bb      	str	r3, [r7, #24]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	e150      	b.n	8007290 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fee:	2300      	movs	r3, #0
 8006ff0:	617b      	str	r3, [r7, #20]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	617b      	str	r3, [r7, #20]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007004:	e144      	b.n	8007290 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800700a:	2b03      	cmp	r3, #3
 800700c:	f200 80f1 	bhi.w	80071f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007014:	2b01      	cmp	r3, #1
 8007016:	d123      	bne.n	8007060 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800701a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 fda7 	bl	8007b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e145      	b.n	80072b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691a      	ldr	r2, [r3, #16]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007048:	3b01      	subs	r3, #1
 800704a:	b29a      	uxth	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007054:	b29b      	uxth	r3, r3
 8007056:	3b01      	subs	r3, #1
 8007058:	b29a      	uxth	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800705e:	e117      	b.n	8007290 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007064:	2b02      	cmp	r3, #2
 8007066:	d14e      	bne.n	8007106 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706e:	2200      	movs	r2, #0
 8007070:	4906      	ldr	r1, [pc, #24]	@ (800708c <HAL_I2C_Mem_Read+0x22c>)
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 fbd2 	bl	800781c <I2C_WaitOnFlagUntilTimeout>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d008      	beq.n	8007090 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e11a      	b.n	80072b8 <HAL_I2C_Mem_Read+0x458>
 8007082:	bf00      	nop
 8007084:	00100002 	.word	0x00100002
 8007088:	ffff0000 	.word	0xffff0000
 800708c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800709e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	3b01      	subs	r3, #1
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691a      	ldr	r2, [r3, #16]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b29a      	uxth	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007104:	e0c4      	b.n	8007290 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710c:	2200      	movs	r2, #0
 800710e:	496c      	ldr	r1, [pc, #432]	@ (80072c0 <HAL_I2C_Mem_Read+0x460>)
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fb83 	bl	800781c <I2C_WaitOnFlagUntilTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e0cb      	b.n	80072b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800712e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691a      	ldr	r2, [r3, #16]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800714c:	3b01      	subs	r3, #1
 800714e:	b29a      	uxth	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007158:	b29b      	uxth	r3, r3
 800715a:	3b01      	subs	r3, #1
 800715c:	b29a      	uxth	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007168:	2200      	movs	r2, #0
 800716a:	4955      	ldr	r1, [pc, #340]	@ (80072c0 <HAL_I2C_Mem_Read+0x460>)
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 fb55 	bl	800781c <I2C_WaitOnFlagUntilTimeout>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e09d      	b.n	80072b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800718a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	691a      	ldr	r2, [r3, #16]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a8:	3b01      	subs	r3, #1
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	3b01      	subs	r3, #1
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c8:	b2d2      	uxtb	r2, r2
 80071ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071da:	3b01      	subs	r3, #1
 80071dc:	b29a      	uxth	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	3b01      	subs	r3, #1
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80071f0:	e04e      	b.n	8007290 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 fcba 	bl	8007b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e058      	b.n	80072b8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691a      	ldr	r2, [r3, #16]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007210:	b2d2      	uxtb	r2, r2
 8007212:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007222:	3b01      	subs	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800722e:	b29b      	uxth	r3, r3
 8007230:	3b01      	subs	r3, #1
 8007232:	b29a      	uxth	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	f003 0304 	and.w	r3, r3, #4
 8007242:	2b04      	cmp	r3, #4
 8007244:	d124      	bne.n	8007290 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800724a:	2b03      	cmp	r3, #3
 800724c:	d107      	bne.n	800725e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800725c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	691a      	ldr	r2, [r3, #16]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007268:	b2d2      	uxtb	r2, r2
 800726a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800727a:	3b01      	subs	r3, #1
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007286:	b29b      	uxth	r3, r3
 8007288:	3b01      	subs	r3, #1
 800728a:	b29a      	uxth	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007294:	2b00      	cmp	r3, #0
 8007296:	f47f aeb6 	bne.w	8007006 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2220      	movs	r2, #32
 800729e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	e000      	b.n	80072b8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80072b6:	2302      	movs	r3, #2
  }
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3728      	adds	r7, #40	@ 0x28
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	00010004 	.word	0x00010004

080072c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08a      	sub	sp, #40	@ 0x28
 80072c8:	af02      	add	r7, sp, #8
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	607a      	str	r2, [r7, #4]
 80072ce:	603b      	str	r3, [r7, #0]
 80072d0:	460b      	mov	r3, r1
 80072d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80072d4:	f7fe fa7e 	bl	80057d4 <HAL_GetTick>
 80072d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	f040 8111 	bne.w	800750e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	2319      	movs	r3, #25
 80072f2:	2201      	movs	r2, #1
 80072f4:	4988      	ldr	r1, [pc, #544]	@ (8007518 <HAL_I2C_IsDeviceReady+0x254>)
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 fa90 	bl	800781c <I2C_WaitOnFlagUntilTimeout>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007302:	2302      	movs	r3, #2
 8007304:	e104      	b.n	8007510 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <HAL_I2C_IsDeviceReady+0x50>
 8007310:	2302      	movs	r3, #2
 8007312:	e0fd      	b.n	8007510 <HAL_I2C_IsDeviceReady+0x24c>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b01      	cmp	r3, #1
 8007328:	d007      	beq.n	800733a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f042 0201 	orr.w	r2, r2, #1
 8007338:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007348:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2224      	movs	r2, #36	@ 0x24
 800734e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4a70      	ldr	r2, [pc, #448]	@ (800751c <HAL_I2C_IsDeviceReady+0x258>)
 800735c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800736c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2200      	movs	r2, #0
 8007376:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 fa4e 	bl	800781c <I2C_WaitOnFlagUntilTimeout>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00d      	beq.n	80073a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007390:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007394:	d103      	bne.n	800739e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800739c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e0b6      	b.n	8007510 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80073a2:	897b      	ldrh	r3, [r7, #10]
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	461a      	mov	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80073b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80073b2:	f7fe fa0f 	bl	80057d4 <HAL_GetTick>
 80073b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	bf0c      	ite	eq
 80073c6:	2301      	moveq	r3, #1
 80073c8:	2300      	movne	r3, #0
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073dc:	bf0c      	ite	eq
 80073de:	2301      	moveq	r3, #1
 80073e0:	2300      	movne	r3, #0
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80073e6:	e025      	b.n	8007434 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80073e8:	f7fe f9f4 	bl	80057d4 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d302      	bcc.n	80073fe <HAL_I2C_IsDeviceReady+0x13a>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d103      	bne.n	8007406 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	22a0      	movs	r2, #160	@ 0xa0
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	2b02      	cmp	r3, #2
 8007412:	bf0c      	ite	eq
 8007414:	2301      	moveq	r3, #1
 8007416:	2300      	movne	r3, #0
 8007418:	b2db      	uxtb	r3, r3
 800741a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800742a:	bf0c      	ite	eq
 800742c:	2301      	moveq	r3, #1
 800742e:	2300      	movne	r3, #0
 8007430:	b2db      	uxtb	r3, r3
 8007432:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2ba0      	cmp	r3, #160	@ 0xa0
 800743e:	d005      	beq.n	800744c <HAL_I2C_IsDeviceReady+0x188>
 8007440:	7dfb      	ldrb	r3, [r7, #23]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d102      	bne.n	800744c <HAL_I2C_IsDeviceReady+0x188>
 8007446:	7dbb      	ldrb	r3, [r7, #22]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d0cd      	beq.n	80073e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2220      	movs	r2, #32
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b02      	cmp	r3, #2
 8007460:	d129      	bne.n	80074b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007470:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007472:	2300      	movs	r3, #0
 8007474:	613b      	str	r3, [r7, #16]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	2319      	movs	r3, #25
 800748e:	2201      	movs	r2, #1
 8007490:	4921      	ldr	r1, [pc, #132]	@ (8007518 <HAL_I2C_IsDeviceReady+0x254>)
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 f9c2 	bl	800781c <I2C_WaitOnFlagUntilTimeout>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e036      	b.n	8007510 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e02c      	b.n	8007510 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80074ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	2319      	movs	r3, #25
 80074d6:	2201      	movs	r2, #1
 80074d8:	490f      	ldr	r1, [pc, #60]	@ (8007518 <HAL_I2C_IsDeviceReady+0x254>)
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 f99e 	bl	800781c <I2C_WaitOnFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e012      	b.n	8007510 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	3301      	adds	r3, #1
 80074ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	f4ff af32 	bcc.w	800735e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e000      	b.n	8007510 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800750e:	2302      	movs	r3, #2
  }
}
 8007510:	4618      	mov	r0, r3
 8007512:	3720      	adds	r7, #32
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	00100002 	.word	0x00100002
 800751c:	ffff0000 	.word	0xffff0000

08007520 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af02      	add	r7, sp, #8
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	4608      	mov	r0, r1
 800752a:	4611      	mov	r1, r2
 800752c:	461a      	mov	r2, r3
 800752e:	4603      	mov	r3, r0
 8007530:	817b      	strh	r3, [r7, #10]
 8007532:	460b      	mov	r3, r1
 8007534:	813b      	strh	r3, [r7, #8]
 8007536:	4613      	mov	r3, r2
 8007538:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007548:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	2200      	movs	r2, #0
 8007552:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 f960 	bl	800781c <I2C_WaitOnFlagUntilTimeout>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00d      	beq.n	800757e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800756c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007570:	d103      	bne.n	800757a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007578:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e05f      	b.n	800763e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800757e:	897b      	ldrh	r3, [r7, #10]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	461a      	mov	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800758c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	6a3a      	ldr	r2, [r7, #32]
 8007592:	492d      	ldr	r1, [pc, #180]	@ (8007648 <I2C_RequestMemoryWrite+0x128>)
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 f9bb 	bl	8007910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e04c      	b.n	800763e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075bc:	6a39      	ldr	r1, [r7, #32]
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 fa46 	bl	8007a50 <I2C_WaitOnTXEFlagUntilTimeout>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00d      	beq.n	80075e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	d107      	bne.n	80075e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e02b      	b.n	800763e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075e6:	88fb      	ldrh	r3, [r7, #6]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d105      	bne.n	80075f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075ec:	893b      	ldrh	r3, [r7, #8]
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	611a      	str	r2, [r3, #16]
 80075f6:	e021      	b.n	800763c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80075f8:	893b      	ldrh	r3, [r7, #8]
 80075fa:	0a1b      	lsrs	r3, r3, #8
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007608:	6a39      	ldr	r1, [r7, #32]
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 fa20 	bl	8007a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00d      	beq.n	8007632 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761a:	2b04      	cmp	r3, #4
 800761c:	d107      	bne.n	800762e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800762c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e005      	b.n	800763e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007632:	893b      	ldrh	r3, [r7, #8]
 8007634:	b2da      	uxtb	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	00010002 	.word	0x00010002

0800764c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af02      	add	r7, sp, #8
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	4608      	mov	r0, r1
 8007656:	4611      	mov	r1, r2
 8007658:	461a      	mov	r2, r3
 800765a:	4603      	mov	r3, r0
 800765c:	817b      	strh	r3, [r7, #10]
 800765e:	460b      	mov	r3, r1
 8007660:	813b      	strh	r3, [r7, #8]
 8007662:	4613      	mov	r3, r2
 8007664:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007674:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007684:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	2200      	movs	r2, #0
 800768e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 f8c2 	bl	800781c <I2C_WaitOnFlagUntilTimeout>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00d      	beq.n	80076ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076ac:	d103      	bne.n	80076b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e0aa      	b.n	8007810 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076ba:	897b      	ldrh	r3, [r7, #10]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	461a      	mov	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80076c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	6a3a      	ldr	r2, [r7, #32]
 80076ce:	4952      	ldr	r1, [pc, #328]	@ (8007818 <I2C_RequestMemoryRead+0x1cc>)
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 f91d 	bl	8007910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e097      	b.n	8007810 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076e0:	2300      	movs	r3, #0
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f8:	6a39      	ldr	r1, [r7, #32]
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 f9a8 	bl	8007a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00d      	beq.n	8007722 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800770a:	2b04      	cmp	r3, #4
 800770c:	d107      	bne.n	800771e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800771c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e076      	b.n	8007810 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007722:	88fb      	ldrh	r3, [r7, #6]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d105      	bne.n	8007734 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007728:	893b      	ldrh	r3, [r7, #8]
 800772a:	b2da      	uxtb	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	611a      	str	r2, [r3, #16]
 8007732:	e021      	b.n	8007778 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007734:	893b      	ldrh	r3, [r7, #8]
 8007736:	0a1b      	lsrs	r3, r3, #8
 8007738:	b29b      	uxth	r3, r3
 800773a:	b2da      	uxtb	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007744:	6a39      	ldr	r1, [r7, #32]
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 f982 	bl	8007a50 <I2C_WaitOnTXEFlagUntilTimeout>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00d      	beq.n	800776e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007756:	2b04      	cmp	r3, #4
 8007758:	d107      	bne.n	800776a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007768:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e050      	b.n	8007810 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800776e:	893b      	ldrh	r3, [r7, #8]
 8007770:	b2da      	uxtb	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800777a:	6a39      	ldr	r1, [r7, #32]
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 f967 	bl	8007a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00d      	beq.n	80077a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778c:	2b04      	cmp	r3, #4
 800778e:	d107      	bne.n	80077a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800779e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e035      	b.n	8007810 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f82b 	bl	800781c <I2C_WaitOnFlagUntilTimeout>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00d      	beq.n	80077e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077da:	d103      	bne.n	80077e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e013      	b.n	8007810 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077e8:	897b      	ldrh	r3, [r7, #10]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	f043 0301 	orr.w	r3, r3, #1
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fa:	6a3a      	ldr	r2, [r7, #32]
 80077fc:	4906      	ldr	r1, [pc, #24]	@ (8007818 <I2C_RequestMemoryRead+0x1cc>)
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f000 f886 	bl	8007910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e000      	b.n	8007810 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3718      	adds	r7, #24
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	00010002 	.word	0x00010002

0800781c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	4613      	mov	r3, r2
 800782a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800782c:	e048      	b.n	80078c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007834:	d044      	beq.n	80078c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007836:	f7fd ffcd 	bl	80057d4 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	429a      	cmp	r2, r3
 8007844:	d302      	bcc.n	800784c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d139      	bne.n	80078c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	0c1b      	lsrs	r3, r3, #16
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b01      	cmp	r3, #1
 8007854:	d10d      	bne.n	8007872 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	43da      	mvns	r2, r3
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	4013      	ands	r3, r2
 8007862:	b29b      	uxth	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	bf0c      	ite	eq
 8007868:	2301      	moveq	r3, #1
 800786a:	2300      	movne	r3, #0
 800786c:	b2db      	uxtb	r3, r3
 800786e:	461a      	mov	r2, r3
 8007870:	e00c      	b.n	800788c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	43da      	mvns	r2, r3
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	4013      	ands	r3, r2
 800787e:	b29b      	uxth	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	bf0c      	ite	eq
 8007884:	2301      	moveq	r3, #1
 8007886:	2300      	movne	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	461a      	mov	r2, r3
 800788c:	79fb      	ldrb	r3, [r7, #7]
 800788e:	429a      	cmp	r2, r3
 8007890:	d116      	bne.n	80078c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ac:	f043 0220 	orr.w	r2, r3, #32
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e023      	b.n	8007908 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	0c1b      	lsrs	r3, r3, #16
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d10d      	bne.n	80078e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	43da      	mvns	r2, r3
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	4013      	ands	r3, r2
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	bf0c      	ite	eq
 80078dc:	2301      	moveq	r3, #1
 80078de:	2300      	movne	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	461a      	mov	r2, r3
 80078e4:	e00c      	b.n	8007900 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	43da      	mvns	r2, r3
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	4013      	ands	r3, r2
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	bf0c      	ite	eq
 80078f8:	2301      	moveq	r3, #1
 80078fa:	2300      	movne	r3, #0
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	461a      	mov	r2, r3
 8007900:	79fb      	ldrb	r3, [r7, #7]
 8007902:	429a      	cmp	r2, r3
 8007904:	d093      	beq.n	800782e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800791e:	e071      	b.n	8007a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800792a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800792e:	d123      	bne.n	8007978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800793e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007948:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2220      	movs	r2, #32
 8007954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007964:	f043 0204 	orr.w	r2, r3, #4
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e067      	b.n	8007a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797e:	d041      	beq.n	8007a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007980:	f7fd ff28 	bl	80057d4 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	429a      	cmp	r2, r3
 800798e:	d302      	bcc.n	8007996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d136      	bne.n	8007a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	0c1b      	lsrs	r3, r3, #16
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b01      	cmp	r3, #1
 800799e:	d10c      	bne.n	80079ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	43da      	mvns	r2, r3
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	4013      	ands	r3, r2
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bf14      	ite	ne
 80079b2:	2301      	movne	r3, #1
 80079b4:	2300      	moveq	r3, #0
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	e00b      	b.n	80079d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	43da      	mvns	r2, r3
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	4013      	ands	r3, r2
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	bf14      	ite	ne
 80079cc:	2301      	movne	r3, #1
 80079ce:	2300      	moveq	r3, #0
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d016      	beq.n	8007a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2220      	movs	r2, #32
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f0:	f043 0220 	orr.w	r2, r3, #32
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e021      	b.n	8007a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	0c1b      	lsrs	r3, r3, #16
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d10c      	bne.n	8007a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	43da      	mvns	r2, r3
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	bf14      	ite	ne
 8007a20:	2301      	movne	r3, #1
 8007a22:	2300      	moveq	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	e00b      	b.n	8007a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	43da      	mvns	r2, r3
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	4013      	ands	r3, r2
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	bf14      	ite	ne
 8007a3a:	2301      	movne	r3, #1
 8007a3c:	2300      	moveq	r3, #0
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f47f af6d 	bne.w	8007920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a5c:	e034      	b.n	8007ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 f8e3 	bl	8007c2a <I2C_IsAcknowledgeFailed>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e034      	b.n	8007ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a74:	d028      	beq.n	8007ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a76:	f7fd fead 	bl	80057d4 <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d302      	bcc.n	8007a8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d11d      	bne.n	8007ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a96:	2b80      	cmp	r3, #128	@ 0x80
 8007a98:	d016      	beq.n	8007ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab4:	f043 0220 	orr.w	r2, r3, #32
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e007      	b.n	8007ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ad2:	2b80      	cmp	r3, #128	@ 0x80
 8007ad4:	d1c3      	bne.n	8007a5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007aec:	e034      	b.n	8007b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 f89b 	bl	8007c2a <I2C_IsAcknowledgeFailed>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e034      	b.n	8007b68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b04:	d028      	beq.n	8007b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b06:	f7fd fe65 	bl	80057d4 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d302      	bcc.n	8007b1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d11d      	bne.n	8007b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	f003 0304 	and.w	r3, r3, #4
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d016      	beq.n	8007b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2220      	movs	r2, #32
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b44:	f043 0220 	orr.w	r2, r3, #32
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e007      	b.n	8007b68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	f003 0304 	and.w	r3, r3, #4
 8007b62:	2b04      	cmp	r3, #4
 8007b64:	d1c3      	bne.n	8007aee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b7c:	e049      	b.n	8007c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	f003 0310 	and.w	r3, r3, #16
 8007b88:	2b10      	cmp	r3, #16
 8007b8a:	d119      	bne.n	8007bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f06f 0210 	mvn.w	r2, #16
 8007b94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e030      	b.n	8007c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bc0:	f7fd fe08 	bl	80057d4 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d302      	bcc.n	8007bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d11d      	bne.n	8007c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be0:	2b40      	cmp	r3, #64	@ 0x40
 8007be2:	d016      	beq.n	8007c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2220      	movs	r2, #32
 8007bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfe:	f043 0220 	orr.w	r2, r3, #32
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e007      	b.n	8007c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1c:	2b40      	cmp	r3, #64	@ 0x40
 8007c1e:	d1ae      	bne.n	8007b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c40:	d11b      	bne.n	8007c7a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c4a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2220      	movs	r2, #32
 8007c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c66:	f043 0204 	orr.w	r2, r3, #4
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e267      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d075      	beq.n	8007d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ca6:	4b88      	ldr	r3, [pc, #544]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 030c 	and.w	r3, r3, #12
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d00c      	beq.n	8007ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cb2:	4b85      	ldr	r3, [pc, #532]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	d112      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cbe:	4b82      	ldr	r3, [pc, #520]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cca:	d10b      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ccc:	4b7e      	ldr	r3, [pc, #504]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d05b      	beq.n	8007d90 <HAL_RCC_OscConfig+0x108>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d157      	bne.n	8007d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e242      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cec:	d106      	bne.n	8007cfc <HAL_RCC_OscConfig+0x74>
 8007cee:	4b76      	ldr	r3, [pc, #472]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a75      	ldr	r2, [pc, #468]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	e01d      	b.n	8007d38 <HAL_RCC_OscConfig+0xb0>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d04:	d10c      	bne.n	8007d20 <HAL_RCC_OscConfig+0x98>
 8007d06:	4b70      	ldr	r3, [pc, #448]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a6f      	ldr	r2, [pc, #444]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	4b6d      	ldr	r3, [pc, #436]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a6c      	ldr	r2, [pc, #432]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	e00b      	b.n	8007d38 <HAL_RCC_OscConfig+0xb0>
 8007d20:	4b69      	ldr	r3, [pc, #420]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a68      	ldr	r2, [pc, #416]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	4b66      	ldr	r3, [pc, #408]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a65      	ldr	r2, [pc, #404]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d013      	beq.n	8007d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d40:	f7fd fd48 	bl	80057d4 <HAL_GetTick>
 8007d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d46:	e008      	b.n	8007d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d48:	f7fd fd44 	bl	80057d4 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b64      	cmp	r3, #100	@ 0x64
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e207      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0f0      	beq.n	8007d48 <HAL_RCC_OscConfig+0xc0>
 8007d66:	e014      	b.n	8007d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d68:	f7fd fd34 	bl	80057d4 <HAL_GetTick>
 8007d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d6e:	e008      	b.n	8007d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d70:	f7fd fd30 	bl	80057d4 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	2b64      	cmp	r3, #100	@ 0x64
 8007d7c:	d901      	bls.n	8007d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e1f3      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d82:	4b51      	ldr	r3, [pc, #324]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1f0      	bne.n	8007d70 <HAL_RCC_OscConfig+0xe8>
 8007d8e:	e000      	b.n	8007d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d063      	beq.n	8007e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f003 030c 	and.w	r3, r3, #12
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00b      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007daa:	4b47      	ldr	r3, [pc, #284]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d11c      	bne.n	8007df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007db6:	4b44      	ldr	r3, [pc, #272]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d116      	bne.n	8007df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dc2:	4b41      	ldr	r3, [pc, #260]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d005      	beq.n	8007dda <HAL_RCC_OscConfig+0x152>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d001      	beq.n	8007dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e1c7      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dda:	4b3b      	ldr	r3, [pc, #236]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	00db      	lsls	r3, r3, #3
 8007de8:	4937      	ldr	r1, [pc, #220]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dee:	e03a      	b.n	8007e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d020      	beq.n	8007e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007df8:	4b34      	ldr	r3, [pc, #208]	@ (8007ecc <HAL_RCC_OscConfig+0x244>)
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dfe:	f7fd fce9 	bl	80057d4 <HAL_GetTick>
 8007e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e04:	e008      	b.n	8007e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e06:	f7fd fce5 	bl	80057d4 <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d901      	bls.n	8007e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e1a8      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e18:	4b2b      	ldr	r3, [pc, #172]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d0f0      	beq.n	8007e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e24:	4b28      	ldr	r3, [pc, #160]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	00db      	lsls	r3, r3, #3
 8007e32:	4925      	ldr	r1, [pc, #148]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	600b      	str	r3, [r1, #0]
 8007e38:	e015      	b.n	8007e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e3a:	4b24      	ldr	r3, [pc, #144]	@ (8007ecc <HAL_RCC_OscConfig+0x244>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e40:	f7fd fcc8 	bl	80057d4 <HAL_GetTick>
 8007e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e46:	e008      	b.n	8007e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e48:	f7fd fcc4 	bl	80057d4 <HAL_GetTick>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d901      	bls.n	8007e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e187      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0302 	and.w	r3, r3, #2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1f0      	bne.n	8007e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0308 	and.w	r3, r3, #8
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d036      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d016      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e7a:	4b15      	ldr	r3, [pc, #84]	@ (8007ed0 <HAL_RCC_OscConfig+0x248>)
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e80:	f7fd fca8 	bl	80057d4 <HAL_GetTick>
 8007e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e86:	e008      	b.n	8007e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e88:	f7fd fca4 	bl	80057d4 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e167      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec8 <HAL_RCC_OscConfig+0x240>)
 8007e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0f0      	beq.n	8007e88 <HAL_RCC_OscConfig+0x200>
 8007ea6:	e01b      	b.n	8007ee0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ea8:	4b09      	ldr	r3, [pc, #36]	@ (8007ed0 <HAL_RCC_OscConfig+0x248>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eae:	f7fd fc91 	bl	80057d4 <HAL_GetTick>
 8007eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007eb4:	e00e      	b.n	8007ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007eb6:	f7fd fc8d 	bl	80057d4 <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d907      	bls.n	8007ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e150      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
 8007ec8:	40023800 	.word	0x40023800
 8007ecc:	42470000 	.word	0x42470000
 8007ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ed4:	4b88      	ldr	r3, [pc, #544]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1ea      	bne.n	8007eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 8097 	beq.w	800801c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ef2:	4b81      	ldr	r3, [pc, #516]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10f      	bne.n	8007f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007efe:	2300      	movs	r3, #0
 8007f00:	60bb      	str	r3, [r7, #8]
 8007f02:	4b7d      	ldr	r3, [pc, #500]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f06:	4a7c      	ldr	r2, [pc, #496]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f0e:	4b7a      	ldr	r3, [pc, #488]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f16:	60bb      	str	r3, [r7, #8]
 8007f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f1e:	4b77      	ldr	r3, [pc, #476]	@ (80080fc <HAL_RCC_OscConfig+0x474>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d118      	bne.n	8007f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f2a:	4b74      	ldr	r3, [pc, #464]	@ (80080fc <HAL_RCC_OscConfig+0x474>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a73      	ldr	r2, [pc, #460]	@ (80080fc <HAL_RCC_OscConfig+0x474>)
 8007f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f36:	f7fd fc4d 	bl	80057d4 <HAL_GetTick>
 8007f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f3c:	e008      	b.n	8007f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f3e:	f7fd fc49 	bl	80057d4 <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d901      	bls.n	8007f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e10c      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f50:	4b6a      	ldr	r3, [pc, #424]	@ (80080fc <HAL_RCC_OscConfig+0x474>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0f0      	beq.n	8007f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d106      	bne.n	8007f72 <HAL_RCC_OscConfig+0x2ea>
 8007f64:	4b64      	ldr	r3, [pc, #400]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f68:	4a63      	ldr	r2, [pc, #396]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007f6a:	f043 0301 	orr.w	r3, r3, #1
 8007f6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f70:	e01c      	b.n	8007fac <HAL_RCC_OscConfig+0x324>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	2b05      	cmp	r3, #5
 8007f78:	d10c      	bne.n	8007f94 <HAL_RCC_OscConfig+0x30c>
 8007f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f7e:	4a5e      	ldr	r2, [pc, #376]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007f80:	f043 0304 	orr.w	r3, r3, #4
 8007f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f86:	4b5c      	ldr	r3, [pc, #368]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007f8c:	f043 0301 	orr.w	r3, r3, #1
 8007f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f92:	e00b      	b.n	8007fac <HAL_RCC_OscConfig+0x324>
 8007f94:	4b58      	ldr	r3, [pc, #352]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f98:	4a57      	ldr	r2, [pc, #348]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007f9a:	f023 0301 	bic.w	r3, r3, #1
 8007f9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fa0:	4b55      	ldr	r3, [pc, #340]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa4:	4a54      	ldr	r2, [pc, #336]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007fa6:	f023 0304 	bic.w	r3, r3, #4
 8007faa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d015      	beq.n	8007fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fb4:	f7fd fc0e 	bl	80057d4 <HAL_GetTick>
 8007fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fba:	e00a      	b.n	8007fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fbc:	f7fd fc0a 	bl	80057d4 <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d901      	bls.n	8007fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e0cb      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fd2:	4b49      	ldr	r3, [pc, #292]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0ee      	beq.n	8007fbc <HAL_RCC_OscConfig+0x334>
 8007fde:	e014      	b.n	800800a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fe0:	f7fd fbf8 	bl	80057d4 <HAL_GetTick>
 8007fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fe6:	e00a      	b.n	8007ffe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fe8:	f7fd fbf4 	bl	80057d4 <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d901      	bls.n	8007ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e0b5      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8008000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1ee      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800800a:	7dfb      	ldrb	r3, [r7, #23]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d105      	bne.n	800801c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008010:	4b39      	ldr	r3, [pc, #228]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8008012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008014:	4a38      	ldr	r2, [pc, #224]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8008016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800801a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 80a1 	beq.w	8008168 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008026:	4b34      	ldr	r3, [pc, #208]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 030c 	and.w	r3, r3, #12
 800802e:	2b08      	cmp	r3, #8
 8008030:	d05c      	beq.n	80080ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	2b02      	cmp	r3, #2
 8008038:	d141      	bne.n	80080be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800803a:	4b31      	ldr	r3, [pc, #196]	@ (8008100 <HAL_RCC_OscConfig+0x478>)
 800803c:	2200      	movs	r2, #0
 800803e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008040:	f7fd fbc8 	bl	80057d4 <HAL_GetTick>
 8008044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008046:	e008      	b.n	800805a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008048:	f7fd fbc4 	bl	80057d4 <HAL_GetTick>
 800804c:	4602      	mov	r2, r0
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	2b02      	cmp	r3, #2
 8008054:	d901      	bls.n	800805a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e087      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800805a:	4b27      	ldr	r3, [pc, #156]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1f0      	bne.n	8008048 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	69da      	ldr	r2, [r3, #28]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	431a      	orrs	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008074:	019b      	lsls	r3, r3, #6
 8008076:	431a      	orrs	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807c:	085b      	lsrs	r3, r3, #1
 800807e:	3b01      	subs	r3, #1
 8008080:	041b      	lsls	r3, r3, #16
 8008082:	431a      	orrs	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008088:	061b      	lsls	r3, r3, #24
 800808a:	491b      	ldr	r1, [pc, #108]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 800808c:	4313      	orrs	r3, r2
 800808e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008090:	4b1b      	ldr	r3, [pc, #108]	@ (8008100 <HAL_RCC_OscConfig+0x478>)
 8008092:	2201      	movs	r2, #1
 8008094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008096:	f7fd fb9d 	bl	80057d4 <HAL_GetTick>
 800809a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800809c:	e008      	b.n	80080b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800809e:	f7fd fb99 	bl	80057d4 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d901      	bls.n	80080b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e05c      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080b0:	4b11      	ldr	r3, [pc, #68]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d0f0      	beq.n	800809e <HAL_RCC_OscConfig+0x416>
 80080bc:	e054      	b.n	8008168 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080be:	4b10      	ldr	r3, [pc, #64]	@ (8008100 <HAL_RCC_OscConfig+0x478>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080c4:	f7fd fb86 	bl	80057d4 <HAL_GetTick>
 80080c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080ca:	e008      	b.n	80080de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080cc:	f7fd fb82 	bl	80057d4 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d901      	bls.n	80080de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e045      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080de:	4b06      	ldr	r3, [pc, #24]	@ (80080f8 <HAL_RCC_OscConfig+0x470>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1f0      	bne.n	80080cc <HAL_RCC_OscConfig+0x444>
 80080ea:	e03d      	b.n	8008168 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d107      	bne.n	8008104 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e038      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
 80080f8:	40023800 	.word	0x40023800
 80080fc:	40007000 	.word	0x40007000
 8008100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008104:	4b1b      	ldr	r3, [pc, #108]	@ (8008174 <HAL_RCC_OscConfig+0x4ec>)
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d028      	beq.n	8008164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800811c:	429a      	cmp	r2, r3
 800811e:	d121      	bne.n	8008164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800812a:	429a      	cmp	r2, r3
 800812c:	d11a      	bne.n	8008164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008134:	4013      	ands	r3, r2
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800813a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800813c:	4293      	cmp	r3, r2
 800813e:	d111      	bne.n	8008164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814a:	085b      	lsrs	r3, r3, #1
 800814c:	3b01      	subs	r3, #1
 800814e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008150:	429a      	cmp	r2, r3
 8008152:	d107      	bne.n	8008164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008160:	429a      	cmp	r2, r3
 8008162:	d001      	beq.n	8008168 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e000      	b.n	800816a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3718      	adds	r7, #24
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	40023800 	.word	0x40023800

08008178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e0cc      	b.n	8008326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800818c:	4b68      	ldr	r3, [pc, #416]	@ (8008330 <HAL_RCC_ClockConfig+0x1b8>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0307 	and.w	r3, r3, #7
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	429a      	cmp	r2, r3
 8008198:	d90c      	bls.n	80081b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800819a:	4b65      	ldr	r3, [pc, #404]	@ (8008330 <HAL_RCC_ClockConfig+0x1b8>)
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081a2:	4b63      	ldr	r3, [pc, #396]	@ (8008330 <HAL_RCC_ClockConfig+0x1b8>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0307 	and.w	r3, r3, #7
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d001      	beq.n	80081b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e0b8      	b.n	8008326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d020      	beq.n	8008202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d005      	beq.n	80081d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081cc:	4b59      	ldr	r3, [pc, #356]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	4a58      	ldr	r2, [pc, #352]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 80081d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80081d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0308 	and.w	r3, r3, #8
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081e4:	4b53      	ldr	r3, [pc, #332]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	4a52      	ldr	r2, [pc, #328]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 80081ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80081ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081f0:	4b50      	ldr	r3, [pc, #320]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	494d      	ldr	r1, [pc, #308]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	d044      	beq.n	8008298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d107      	bne.n	8008226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008216:	4b47      	ldr	r3, [pc, #284]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d119      	bne.n	8008256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e07f      	b.n	8008326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	2b02      	cmp	r3, #2
 800822c:	d003      	beq.n	8008236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008232:	2b03      	cmp	r3, #3
 8008234:	d107      	bne.n	8008246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008236:	4b3f      	ldr	r3, [pc, #252]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d109      	bne.n	8008256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e06f      	b.n	8008326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008246:	4b3b      	ldr	r3, [pc, #236]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0302 	and.w	r3, r3, #2
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e067      	b.n	8008326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008256:	4b37      	ldr	r3, [pc, #220]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f023 0203 	bic.w	r2, r3, #3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	4934      	ldr	r1, [pc, #208]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 8008264:	4313      	orrs	r3, r2
 8008266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008268:	f7fd fab4 	bl	80057d4 <HAL_GetTick>
 800826c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800826e:	e00a      	b.n	8008286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008270:	f7fd fab0 	bl	80057d4 <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800827e:	4293      	cmp	r3, r2
 8008280:	d901      	bls.n	8008286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e04f      	b.n	8008326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008286:	4b2b      	ldr	r3, [pc, #172]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f003 020c 	and.w	r2, r3, #12
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	429a      	cmp	r2, r3
 8008296:	d1eb      	bne.n	8008270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008298:	4b25      	ldr	r3, [pc, #148]	@ (8008330 <HAL_RCC_ClockConfig+0x1b8>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0307 	and.w	r3, r3, #7
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d20c      	bcs.n	80082c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082a6:	4b22      	ldr	r3, [pc, #136]	@ (8008330 <HAL_RCC_ClockConfig+0x1b8>)
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	b2d2      	uxtb	r2, r2
 80082ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ae:	4b20      	ldr	r3, [pc, #128]	@ (8008330 <HAL_RCC_ClockConfig+0x1b8>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d001      	beq.n	80082c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e032      	b.n	8008326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0304 	and.w	r3, r3, #4
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d008      	beq.n	80082de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082cc:	4b19      	ldr	r3, [pc, #100]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	4916      	ldr	r1, [pc, #88]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0308 	and.w	r3, r3, #8
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d009      	beq.n	80082fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082ea:	4b12      	ldr	r3, [pc, #72]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	00db      	lsls	r3, r3, #3
 80082f8:	490e      	ldr	r1, [pc, #56]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80082fe:	f000 f821 	bl	8008344 <HAL_RCC_GetSysClockFreq>
 8008302:	4602      	mov	r2, r0
 8008304:	4b0b      	ldr	r3, [pc, #44]	@ (8008334 <HAL_RCC_ClockConfig+0x1bc>)
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	091b      	lsrs	r3, r3, #4
 800830a:	f003 030f 	and.w	r3, r3, #15
 800830e:	490a      	ldr	r1, [pc, #40]	@ (8008338 <HAL_RCC_ClockConfig+0x1c0>)
 8008310:	5ccb      	ldrb	r3, [r1, r3]
 8008312:	fa22 f303 	lsr.w	r3, r2, r3
 8008316:	4a09      	ldr	r2, [pc, #36]	@ (800833c <HAL_RCC_ClockConfig+0x1c4>)
 8008318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800831a:	4b09      	ldr	r3, [pc, #36]	@ (8008340 <HAL_RCC_ClockConfig+0x1c8>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4618      	mov	r0, r3
 8008320:	f7fd fa14 	bl	800574c <HAL_InitTick>

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	40023c00 	.word	0x40023c00
 8008334:	40023800 	.word	0x40023800
 8008338:	0800fd58 	.word	0x0800fd58
 800833c:	2000021c 	.word	0x2000021c
 8008340:	20000258 	.word	0x20000258

08008344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008348:	b094      	sub	sp, #80	@ 0x50
 800834a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800834c:	2300      	movs	r3, #0
 800834e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008350:	2300      	movs	r3, #0
 8008352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008354:	2300      	movs	r3, #0
 8008356:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800835c:	4b79      	ldr	r3, [pc, #484]	@ (8008544 <HAL_RCC_GetSysClockFreq+0x200>)
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f003 030c 	and.w	r3, r3, #12
 8008364:	2b08      	cmp	r3, #8
 8008366:	d00d      	beq.n	8008384 <HAL_RCC_GetSysClockFreq+0x40>
 8008368:	2b08      	cmp	r3, #8
 800836a:	f200 80e1 	bhi.w	8008530 <HAL_RCC_GetSysClockFreq+0x1ec>
 800836e:	2b00      	cmp	r3, #0
 8008370:	d002      	beq.n	8008378 <HAL_RCC_GetSysClockFreq+0x34>
 8008372:	2b04      	cmp	r3, #4
 8008374:	d003      	beq.n	800837e <HAL_RCC_GetSysClockFreq+0x3a>
 8008376:	e0db      	b.n	8008530 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008378:	4b73      	ldr	r3, [pc, #460]	@ (8008548 <HAL_RCC_GetSysClockFreq+0x204>)
 800837a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800837c:	e0db      	b.n	8008536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800837e:	4b73      	ldr	r3, [pc, #460]	@ (800854c <HAL_RCC_GetSysClockFreq+0x208>)
 8008380:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008382:	e0d8      	b.n	8008536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008384:	4b6f      	ldr	r3, [pc, #444]	@ (8008544 <HAL_RCC_GetSysClockFreq+0x200>)
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800838c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800838e:	4b6d      	ldr	r3, [pc, #436]	@ (8008544 <HAL_RCC_GetSysClockFreq+0x200>)
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d063      	beq.n	8008462 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800839a:	4b6a      	ldr	r3, [pc, #424]	@ (8008544 <HAL_RCC_GetSysClockFreq+0x200>)
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	099b      	lsrs	r3, r3, #6
 80083a0:	2200      	movs	r2, #0
 80083a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80083a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80083ae:	2300      	movs	r3, #0
 80083b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80083b6:	4622      	mov	r2, r4
 80083b8:	462b      	mov	r3, r5
 80083ba:	f04f 0000 	mov.w	r0, #0
 80083be:	f04f 0100 	mov.w	r1, #0
 80083c2:	0159      	lsls	r1, r3, #5
 80083c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083c8:	0150      	lsls	r0, r2, #5
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	4621      	mov	r1, r4
 80083d0:	1a51      	subs	r1, r2, r1
 80083d2:	6139      	str	r1, [r7, #16]
 80083d4:	4629      	mov	r1, r5
 80083d6:	eb63 0301 	sbc.w	r3, r3, r1
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	f04f 0200 	mov.w	r2, #0
 80083e0:	f04f 0300 	mov.w	r3, #0
 80083e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083e8:	4659      	mov	r1, fp
 80083ea:	018b      	lsls	r3, r1, #6
 80083ec:	4651      	mov	r1, sl
 80083ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80083f2:	4651      	mov	r1, sl
 80083f4:	018a      	lsls	r2, r1, #6
 80083f6:	4651      	mov	r1, sl
 80083f8:	ebb2 0801 	subs.w	r8, r2, r1
 80083fc:	4659      	mov	r1, fp
 80083fe:	eb63 0901 	sbc.w	r9, r3, r1
 8008402:	f04f 0200 	mov.w	r2, #0
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800840e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008416:	4690      	mov	r8, r2
 8008418:	4699      	mov	r9, r3
 800841a:	4623      	mov	r3, r4
 800841c:	eb18 0303 	adds.w	r3, r8, r3
 8008420:	60bb      	str	r3, [r7, #8]
 8008422:	462b      	mov	r3, r5
 8008424:	eb49 0303 	adc.w	r3, r9, r3
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	f04f 0200 	mov.w	r2, #0
 800842e:	f04f 0300 	mov.w	r3, #0
 8008432:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008436:	4629      	mov	r1, r5
 8008438:	024b      	lsls	r3, r1, #9
 800843a:	4621      	mov	r1, r4
 800843c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008440:	4621      	mov	r1, r4
 8008442:	024a      	lsls	r2, r1, #9
 8008444:	4610      	mov	r0, r2
 8008446:	4619      	mov	r1, r3
 8008448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800844a:	2200      	movs	r2, #0
 800844c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800844e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008450:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008454:	f7f8 fb4c 	bl	8000af0 <__aeabi_uldivmod>
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	4613      	mov	r3, r2
 800845e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008460:	e058      	b.n	8008514 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008462:	4b38      	ldr	r3, [pc, #224]	@ (8008544 <HAL_RCC_GetSysClockFreq+0x200>)
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	099b      	lsrs	r3, r3, #6
 8008468:	2200      	movs	r2, #0
 800846a:	4618      	mov	r0, r3
 800846c:	4611      	mov	r1, r2
 800846e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008472:	623b      	str	r3, [r7, #32]
 8008474:	2300      	movs	r3, #0
 8008476:	627b      	str	r3, [r7, #36]	@ 0x24
 8008478:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800847c:	4642      	mov	r2, r8
 800847e:	464b      	mov	r3, r9
 8008480:	f04f 0000 	mov.w	r0, #0
 8008484:	f04f 0100 	mov.w	r1, #0
 8008488:	0159      	lsls	r1, r3, #5
 800848a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800848e:	0150      	lsls	r0, r2, #5
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4641      	mov	r1, r8
 8008496:	ebb2 0a01 	subs.w	sl, r2, r1
 800849a:	4649      	mov	r1, r9
 800849c:	eb63 0b01 	sbc.w	fp, r3, r1
 80084a0:	f04f 0200 	mov.w	r2, #0
 80084a4:	f04f 0300 	mov.w	r3, #0
 80084a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80084ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80084b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80084b4:	ebb2 040a 	subs.w	r4, r2, sl
 80084b8:	eb63 050b 	sbc.w	r5, r3, fp
 80084bc:	f04f 0200 	mov.w	r2, #0
 80084c0:	f04f 0300 	mov.w	r3, #0
 80084c4:	00eb      	lsls	r3, r5, #3
 80084c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084ca:	00e2      	lsls	r2, r4, #3
 80084cc:	4614      	mov	r4, r2
 80084ce:	461d      	mov	r5, r3
 80084d0:	4643      	mov	r3, r8
 80084d2:	18e3      	adds	r3, r4, r3
 80084d4:	603b      	str	r3, [r7, #0]
 80084d6:	464b      	mov	r3, r9
 80084d8:	eb45 0303 	adc.w	r3, r5, r3
 80084dc:	607b      	str	r3, [r7, #4]
 80084de:	f04f 0200 	mov.w	r2, #0
 80084e2:	f04f 0300 	mov.w	r3, #0
 80084e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084ea:	4629      	mov	r1, r5
 80084ec:	028b      	lsls	r3, r1, #10
 80084ee:	4621      	mov	r1, r4
 80084f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80084f4:	4621      	mov	r1, r4
 80084f6:	028a      	lsls	r2, r1, #10
 80084f8:	4610      	mov	r0, r2
 80084fa:	4619      	mov	r1, r3
 80084fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084fe:	2200      	movs	r2, #0
 8008500:	61bb      	str	r3, [r7, #24]
 8008502:	61fa      	str	r2, [r7, #28]
 8008504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008508:	f7f8 faf2 	bl	8000af0 <__aeabi_uldivmod>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4613      	mov	r3, r2
 8008512:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008514:	4b0b      	ldr	r3, [pc, #44]	@ (8008544 <HAL_RCC_GetSysClockFreq+0x200>)
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	0c1b      	lsrs	r3, r3, #16
 800851a:	f003 0303 	and.w	r3, r3, #3
 800851e:	3301      	adds	r3, #1
 8008520:	005b      	lsls	r3, r3, #1
 8008522:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008524:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008528:	fbb2 f3f3 	udiv	r3, r2, r3
 800852c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800852e:	e002      	b.n	8008536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008530:	4b05      	ldr	r3, [pc, #20]	@ (8008548 <HAL_RCC_GetSysClockFreq+0x204>)
 8008532:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008538:	4618      	mov	r0, r3
 800853a:	3750      	adds	r7, #80	@ 0x50
 800853c:	46bd      	mov	sp, r7
 800853e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008542:	bf00      	nop
 8008544:	40023800 	.word	0x40023800
 8008548:	00f42400 	.word	0x00f42400
 800854c:	007a1200 	.word	0x007a1200

08008550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008550:	b480      	push	{r7}
 8008552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008554:	4b03      	ldr	r3, [pc, #12]	@ (8008564 <HAL_RCC_GetHCLKFreq+0x14>)
 8008556:	681b      	ldr	r3, [r3, #0]
}
 8008558:	4618      	mov	r0, r3
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	2000021c 	.word	0x2000021c

08008568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800856c:	f7ff fff0 	bl	8008550 <HAL_RCC_GetHCLKFreq>
 8008570:	4602      	mov	r2, r0
 8008572:	4b05      	ldr	r3, [pc, #20]	@ (8008588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	0a9b      	lsrs	r3, r3, #10
 8008578:	f003 0307 	and.w	r3, r3, #7
 800857c:	4903      	ldr	r1, [pc, #12]	@ (800858c <HAL_RCC_GetPCLK1Freq+0x24>)
 800857e:	5ccb      	ldrb	r3, [r1, r3]
 8008580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008584:	4618      	mov	r0, r3
 8008586:	bd80      	pop	{r7, pc}
 8008588:	40023800 	.word	0x40023800
 800858c:	0800fd68 	.word	0x0800fd68

08008590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008594:	f7ff ffdc 	bl	8008550 <HAL_RCC_GetHCLKFreq>
 8008598:	4602      	mov	r2, r0
 800859a:	4b05      	ldr	r3, [pc, #20]	@ (80085b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	0b5b      	lsrs	r3, r3, #13
 80085a0:	f003 0307 	and.w	r3, r3, #7
 80085a4:	4903      	ldr	r1, [pc, #12]	@ (80085b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085a6:	5ccb      	ldrb	r3, [r1, r3]
 80085a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	40023800 	.word	0x40023800
 80085b4:	0800fd68 	.word	0x0800fd68

080085b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e07b      	b.n	80086c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d108      	bne.n	80085e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085da:	d009      	beq.n	80085f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	61da      	str	r2, [r3, #28]
 80085e2:	e005      	b.n	80085f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d106      	bne.n	8008610 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7fb fcae 	bl	8003f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2202      	movs	r2, #2
 8008614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008626:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008638:	431a      	orrs	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	431a      	orrs	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	431a      	orrs	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008660:	431a      	orrs	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800866a:	431a      	orrs	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008674:	ea42 0103 	orr.w	r1, r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	0c1b      	lsrs	r3, r3, #16
 800868e:	f003 0104 	and.w	r1, r3, #4
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008696:	f003 0210 	and.w	r2, r3, #16
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69da      	ldr	r2, [r3, #28]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80086b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b088      	sub	sp, #32
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	60f8      	str	r0, [r7, #12]
 80086d2:	60b9      	str	r1, [r7, #8]
 80086d4:	603b      	str	r3, [r7, #0]
 80086d6:	4613      	mov	r3, r2
 80086d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <HAL_SPI_Transmit+0x22>
 80086e8:	2302      	movs	r3, #2
 80086ea:	e12d      	b.n	8008948 <HAL_SPI_Transmit+0x27e>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086f4:	f7fd f86e 	bl	80057d4 <HAL_GetTick>
 80086f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80086fa:	88fb      	ldrh	r3, [r7, #6]
 80086fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b01      	cmp	r3, #1
 8008708:	d002      	beq.n	8008710 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800870a:	2302      	movs	r3, #2
 800870c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800870e:	e116      	b.n	800893e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d002      	beq.n	800871c <HAL_SPI_Transmit+0x52>
 8008716:	88fb      	ldrh	r3, [r7, #6]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d102      	bne.n	8008722 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008720:	e10d      	b.n	800893e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2203      	movs	r2, #3
 8008726:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	88fa      	ldrh	r2, [r7, #6]
 800873a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	88fa      	ldrh	r2, [r7, #6]
 8008740:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008768:	d10f      	bne.n	800878a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008778:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008788:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008794:	2b40      	cmp	r3, #64	@ 0x40
 8008796:	d007      	beq.n	80087a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087b0:	d14f      	bne.n	8008852 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <HAL_SPI_Transmit+0xf6>
 80087ba:	8afb      	ldrh	r3, [r7, #22]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d142      	bne.n	8008846 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c4:	881a      	ldrh	r2, [r3, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d0:	1c9a      	adds	r2, r3, #2
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087da:	b29b      	uxth	r3, r3
 80087dc:	3b01      	subs	r3, #1
 80087de:	b29a      	uxth	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80087e4:	e02f      	b.n	8008846 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f003 0302 	and.w	r3, r3, #2
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d112      	bne.n	800881a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f8:	881a      	ldrh	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008804:	1c9a      	adds	r2, r3, #2
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800880e:	b29b      	uxth	r3, r3
 8008810:	3b01      	subs	r3, #1
 8008812:	b29a      	uxth	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008818:	e015      	b.n	8008846 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800881a:	f7fc ffdb 	bl	80057d4 <HAL_GetTick>
 800881e:	4602      	mov	r2, r0
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	429a      	cmp	r2, r3
 8008828:	d803      	bhi.n	8008832 <HAL_SPI_Transmit+0x168>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008830:	d102      	bne.n	8008838 <HAL_SPI_Transmit+0x16e>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d106      	bne.n	8008846 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008844:	e07b      	b.n	800893e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800884a:	b29b      	uxth	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1ca      	bne.n	80087e6 <HAL_SPI_Transmit+0x11c>
 8008850:	e050      	b.n	80088f4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d002      	beq.n	8008860 <HAL_SPI_Transmit+0x196>
 800885a:	8afb      	ldrh	r3, [r7, #22]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d144      	bne.n	80088ea <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	330c      	adds	r3, #12
 800886a:	7812      	ldrb	r2, [r2, #0]
 800886c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800887c:	b29b      	uxth	r3, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	b29a      	uxth	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008886:	e030      	b.n	80088ea <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f003 0302 	and.w	r3, r3, #2
 8008892:	2b02      	cmp	r3, #2
 8008894:	d113      	bne.n	80088be <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	330c      	adds	r3, #12
 80088a0:	7812      	ldrb	r2, [r2, #0]
 80088a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	3b01      	subs	r3, #1
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80088bc:	e015      	b.n	80088ea <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088be:	f7fc ff89 	bl	80057d4 <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d803      	bhi.n	80088d6 <HAL_SPI_Transmit+0x20c>
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d4:	d102      	bne.n	80088dc <HAL_SPI_Transmit+0x212>
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d106      	bne.n	80088ea <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80088e8:	e029      	b.n	800893e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1c9      	bne.n	8008888 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088f4:	69ba      	ldr	r2, [r7, #24]
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 fbdf 	bl	80090bc <SPI_EndRxTxTransaction>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2220      	movs	r2, #32
 8008908:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10a      	bne.n	8008928 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008912:	2300      	movs	r3, #0
 8008914:	613b      	str	r3, [r7, #16]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	613b      	str	r3, [r7, #16]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	613b      	str	r3, [r7, #16]
 8008926:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	77fb      	strb	r3, [r7, #31]
 8008934:	e003      	b.n	800893e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008946:	7ffb      	ldrb	r3, [r7, #31]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3720      	adds	r7, #32
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b088      	sub	sp, #32
 8008954:	af02      	add	r7, sp, #8
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	4613      	mov	r3, r2
 800895e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b01      	cmp	r3, #1
 800896e:	d002      	beq.n	8008976 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8008970:	2302      	movs	r3, #2
 8008972:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008974:	e0fb      	b.n	8008b6e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800897e:	d112      	bne.n	80089a6 <HAL_SPI_Receive+0x56>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10e      	bne.n	80089a6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2204      	movs	r2, #4
 800898c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008990:	88fa      	ldrh	r2, [r7, #6]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	4613      	mov	r3, r2
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	68b9      	ldr	r1, [r7, #8]
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 f8ef 	bl	8008b80 <HAL_SPI_TransmitReceive>
 80089a2:	4603      	mov	r3, r0
 80089a4:	e0e8      	b.n	8008b78 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d101      	bne.n	80089b4 <HAL_SPI_Receive+0x64>
 80089b0:	2302      	movs	r3, #2
 80089b2:	e0e1      	b.n	8008b78 <HAL_SPI_Receive+0x228>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089bc:	f7fc ff0a 	bl	80057d4 <HAL_GetTick>
 80089c0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <HAL_SPI_Receive+0x7e>
 80089c8:	88fb      	ldrh	r3, [r7, #6]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d102      	bne.n	80089d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80089d2:	e0cc      	b.n	8008b6e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2204      	movs	r2, #4
 80089d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	88fa      	ldrh	r2, [r7, #6]
 80089ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	88fa      	ldrh	r2, [r7, #6]
 80089f2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a1a:	d10f      	bne.n	8008a3c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008a3a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a46:	2b40      	cmp	r3, #64	@ 0x40
 8008a48:	d007      	beq.n	8008a5a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d16a      	bne.n	8008b38 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008a62:	e032      	b.n	8008aca <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d115      	bne.n	8008a9e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f103 020c 	add.w	r2, r3, #12
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a7e:	7812      	ldrb	r2, [r2, #0]
 8008a80:	b2d2      	uxtb	r2, r2
 8008a82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a88:	1c5a      	adds	r2, r3, #1
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	3b01      	subs	r3, #1
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008a9c:	e015      	b.n	8008aca <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a9e:	f7fc fe99 	bl	80057d4 <HAL_GetTick>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d803      	bhi.n	8008ab6 <HAL_SPI_Receive+0x166>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab4:	d102      	bne.n	8008abc <HAL_SPI_Receive+0x16c>
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d106      	bne.n	8008aca <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008ac8:	e051      	b.n	8008b6e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1c7      	bne.n	8008a64 <HAL_SPI_Receive+0x114>
 8008ad4:	e035      	b.n	8008b42 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d113      	bne.n	8008b0c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68da      	ldr	r2, [r3, #12]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aee:	b292      	uxth	r2, r2
 8008af0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af6:	1c9a      	adds	r2, r3, #2
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	3b01      	subs	r3, #1
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008b0a:	e015      	b.n	8008b38 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b0c:	f7fc fe62 	bl	80057d4 <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d803      	bhi.n	8008b24 <HAL_SPI_Receive+0x1d4>
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b22:	d102      	bne.n	8008b2a <HAL_SPI_Receive+0x1da>
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d106      	bne.n	8008b38 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008b36:	e01a      	b.n	8008b6e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1c9      	bne.n	8008ad6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 fa52 	bl	8008ff0 <SPI_EndRxTransaction>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2220      	movs	r2, #32
 8008b56:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	75fb      	strb	r3, [r7, #23]
 8008b64:	e003      	b.n	8008b6e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08c      	sub	sp, #48	@ 0x30
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d101      	bne.n	8008ba6 <HAL_SPI_TransmitReceive+0x26>
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	e198      	b.n	8008ed8 <HAL_SPI_TransmitReceive+0x358>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bae:	f7fc fe11 	bl	80057d4 <HAL_GetTick>
 8008bb2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008bc4:	887b      	ldrh	r3, [r7, #2]
 8008bc6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d00f      	beq.n	8008bf0 <HAL_SPI_TransmitReceive+0x70>
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008bd6:	d107      	bne.n	8008be8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d103      	bne.n	8008be8 <HAL_SPI_TransmitReceive+0x68>
 8008be0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	d003      	beq.n	8008bf0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008be8:	2302      	movs	r3, #2
 8008bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008bee:	e16d      	b.n	8008ecc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d005      	beq.n	8008c02 <HAL_SPI_TransmitReceive+0x82>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d002      	beq.n	8008c02 <HAL_SPI_TransmitReceive+0x82>
 8008bfc:	887b      	ldrh	r3, [r7, #2]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d103      	bne.n	8008c0a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008c08:	e160      	b.n	8008ecc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	d003      	beq.n	8008c1e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2205      	movs	r2, #5
 8008c1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	887a      	ldrh	r2, [r7, #2]
 8008c2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	887a      	ldrh	r2, [r7, #2]
 8008c34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	887a      	ldrh	r2, [r7, #2]
 8008c40:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	887a      	ldrh	r2, [r7, #2]
 8008c46:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c5e:	2b40      	cmp	r3, #64	@ 0x40
 8008c60:	d007      	beq.n	8008c72 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c7a:	d17c      	bne.n	8008d76 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <HAL_SPI_TransmitReceive+0x10a>
 8008c84:	8b7b      	ldrh	r3, [r7, #26]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d16a      	bne.n	8008d60 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c8e:	881a      	ldrh	r2, [r3, #0]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c9a:	1c9a      	adds	r2, r3, #2
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cae:	e057      	b.n	8008d60 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d11b      	bne.n	8008cf6 <HAL_SPI_TransmitReceive+0x176>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d016      	beq.n	8008cf6 <HAL_SPI_TransmitReceive+0x176>
 8008cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d113      	bne.n	8008cf6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd2:	881a      	ldrh	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cde:	1c9a      	adds	r2, r3, #2
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	3b01      	subs	r3, #1
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f003 0301 	and.w	r3, r3, #1
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d119      	bne.n	8008d38 <HAL_SPI_TransmitReceive+0x1b8>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d014      	beq.n	8008d38 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68da      	ldr	r2, [r3, #12]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d18:	b292      	uxth	r2, r2
 8008d1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d20:	1c9a      	adds	r2, r3, #2
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d34:	2301      	movs	r3, #1
 8008d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d38:	f7fc fd4c 	bl	80057d4 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d80b      	bhi.n	8008d60 <HAL_SPI_TransmitReceive+0x1e0>
 8008d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4e:	d007      	beq.n	8008d60 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008d5e:	e0b5      	b.n	8008ecc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1a2      	bne.n	8008cb0 <HAL_SPI_TransmitReceive+0x130>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d19d      	bne.n	8008cb0 <HAL_SPI_TransmitReceive+0x130>
 8008d74:	e080      	b.n	8008e78 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <HAL_SPI_TransmitReceive+0x204>
 8008d7e:	8b7b      	ldrh	r3, [r7, #26]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d16f      	bne.n	8008e64 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	330c      	adds	r3, #12
 8008d8e:	7812      	ldrb	r2, [r2, #0]
 8008d90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d96:	1c5a      	adds	r2, r3, #1
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	3b01      	subs	r3, #1
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008daa:	e05b      	b.n	8008e64 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d11c      	bne.n	8008df4 <HAL_SPI_TransmitReceive+0x274>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d017      	beq.n	8008df4 <HAL_SPI_TransmitReceive+0x274>
 8008dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d114      	bne.n	8008df4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	330c      	adds	r3, #12
 8008dd4:	7812      	ldrb	r2, [r2, #0]
 8008dd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ddc:	1c5a      	adds	r2, r3, #1
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	3b01      	subs	r3, #1
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008df0:	2300      	movs	r3, #0
 8008df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d119      	bne.n	8008e36 <HAL_SPI_TransmitReceive+0x2b6>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d014      	beq.n	8008e36 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68da      	ldr	r2, [r3, #12]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e16:	b2d2      	uxtb	r2, r2
 8008e18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e1e:	1c5a      	adds	r2, r3, #1
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e32:	2301      	movs	r3, #1
 8008e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008e36:	f7fc fccd 	bl	80057d4 <HAL_GetTick>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d803      	bhi.n	8008e4e <HAL_SPI_TransmitReceive+0x2ce>
 8008e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4c:	d102      	bne.n	8008e54 <HAL_SPI_TransmitReceive+0x2d4>
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d107      	bne.n	8008e64 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008e54:	2303      	movs	r3, #3
 8008e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008e62:	e033      	b.n	8008ecc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d19e      	bne.n	8008dac <HAL_SPI_TransmitReceive+0x22c>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d199      	bne.n	8008dac <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 f91d 	bl	80090bc <SPI_EndRxTxTransaction>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d006      	beq.n	8008e96 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2220      	movs	r2, #32
 8008e92:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008e94:	e01a      	b.n	8008ecc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10a      	bne.n	8008eb4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	617b      	str	r3, [r7, #20]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	617b      	str	r3, [r7, #20]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	617b      	str	r3, [r7, #20]
 8008eb2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d003      	beq.n	8008ec4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ec2:	e003      	b.n	8008ecc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008ed4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3730      	adds	r7, #48	@ 0x30
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b088      	sub	sp, #32
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	4613      	mov	r3, r2
 8008eee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ef0:	f7fc fc70 	bl	80057d4 <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef8:	1a9b      	subs	r3, r3, r2
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	4413      	add	r3, r2
 8008efe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f00:	f7fc fc68 	bl	80057d4 <HAL_GetTick>
 8008f04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f06:	4b39      	ldr	r3, [pc, #228]	@ (8008fec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	015b      	lsls	r3, r3, #5
 8008f0c:	0d1b      	lsrs	r3, r3, #20
 8008f0e:	69fa      	ldr	r2, [r7, #28]
 8008f10:	fb02 f303 	mul.w	r3, r2, r3
 8008f14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f16:	e054      	b.n	8008fc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1e:	d050      	beq.n	8008fc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f20:	f7fc fc58 	bl	80057d4 <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	69fa      	ldr	r2, [r7, #28]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d902      	bls.n	8008f36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d13d      	bne.n	8008fb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008f44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f4e:	d111      	bne.n	8008f74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f58:	d004      	beq.n	8008f64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f62:	d107      	bne.n	8008f74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f7c:	d10f      	bne.n	8008f9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e017      	b.n	8008fe2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d101      	bne.n	8008fbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	689a      	ldr	r2, [r3, #8]
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	bf0c      	ite	eq
 8008fd2:	2301      	moveq	r3, #1
 8008fd4:	2300      	movne	r3, #0
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	461a      	mov	r2, r3
 8008fda:	79fb      	ldrb	r3, [r7, #7]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d19b      	bne.n	8008f18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3720      	adds	r7, #32
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	2000021c 	.word	0x2000021c

08008ff0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af02      	add	r7, sp, #8
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009004:	d111      	bne.n	800902a <SPI_EndRxTransaction+0x3a>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800900e:	d004      	beq.n	800901a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009018:	d107      	bne.n	800902a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009028:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009032:	d12a      	bne.n	800908a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800903c:	d012      	beq.n	8009064 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	2200      	movs	r2, #0
 8009046:	2180      	movs	r1, #128	@ 0x80
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f7ff ff49 	bl	8008ee0 <SPI_WaitFlagStateUntilTimeout>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d02d      	beq.n	80090b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009058:	f043 0220 	orr.w	r2, r3, #32
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e026      	b.n	80090b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2200      	movs	r2, #0
 800906c:	2101      	movs	r1, #1
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f7ff ff36 	bl	8008ee0 <SPI_WaitFlagStateUntilTimeout>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d01a      	beq.n	80090b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800907e:	f043 0220 	orr.w	r2, r3, #32
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e013      	b.n	80090b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	2200      	movs	r2, #0
 8009092:	2101      	movs	r1, #1
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f7ff ff23 	bl	8008ee0 <SPI_WaitFlagStateUntilTimeout>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d007      	beq.n	80090b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090a4:	f043 0220 	orr.w	r2, r3, #32
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e000      	b.n	80090b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	2201      	movs	r2, #1
 80090d0:	2102      	movs	r1, #2
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f7ff ff04 	bl	8008ee0 <SPI_WaitFlagStateUntilTimeout>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d007      	beq.n	80090ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090e2:	f043 0220 	orr.w	r2, r3, #32
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e032      	b.n	8009154 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80090ee:	4b1b      	ldr	r3, [pc, #108]	@ (800915c <SPI_EndRxTxTransaction+0xa0>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a1b      	ldr	r2, [pc, #108]	@ (8009160 <SPI_EndRxTxTransaction+0xa4>)
 80090f4:	fba2 2303 	umull	r2, r3, r2, r3
 80090f8:	0d5b      	lsrs	r3, r3, #21
 80090fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80090fe:	fb02 f303 	mul.w	r3, r2, r3
 8009102:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800910c:	d112      	bne.n	8009134 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	2200      	movs	r2, #0
 8009116:	2180      	movs	r1, #128	@ 0x80
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7ff fee1 	bl	8008ee0 <SPI_WaitFlagStateUntilTimeout>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d016      	beq.n	8009152 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009128:	f043 0220 	orr.w	r2, r3, #32
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	e00f      	b.n	8009154 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00a      	beq.n	8009150 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	3b01      	subs	r3, #1
 800913e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800914a:	2b80      	cmp	r3, #128	@ 0x80
 800914c:	d0f2      	beq.n	8009134 <SPI_EndRxTxTransaction+0x78>
 800914e:	e000      	b.n	8009152 <SPI_EndRxTxTransaction+0x96>
        break;
 8009150:	bf00      	nop
  }

  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3718      	adds	r7, #24
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	2000021c 	.word	0x2000021c
 8009160:	165e9f81 	.word	0x165e9f81

08009164 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e038      	b.n	80091ec <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f7f9 fa48 	bl	8002624 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	3308      	adds	r3, #8
 800919c:	4619      	mov	r1, r3
 800919e:	4610      	mov	r0, r2
 80091a0:	f002 f986 	bl	800b4b0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6818      	ldr	r0, [r3, #0]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	461a      	mov	r2, r3
 80091ae:	68b9      	ldr	r1, [r7, #8]
 80091b0:	f002 f9e8 	bl	800b584 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6858      	ldr	r0, [r3, #4]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	689a      	ldr	r2, [r3, #8]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c0:	6879      	ldr	r1, [r7, #4]
 80091c2:	f002 fa15 	bl	800b5f0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	6892      	ldr	r2, [r2, #8]
 80091ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	6892      	ldr	r2, [r2, #8]
 80091da:	f041 0101 	orr.w	r1, r1, #1
 80091de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e041      	b.n	800928a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b00      	cmp	r3, #0
 8009210:	d106      	bne.n	8009220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7fb f874 	bl	8004308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2202      	movs	r2, #2
 8009224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3304      	adds	r3, #4
 8009230:	4619      	mov	r1, r3
 8009232:	4610      	mov	r0, r2
 8009234:	f000 fd3a 	bl	8009cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
	...

08009294 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d001      	beq.n	80092ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e046      	b.n	800933a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a23      	ldr	r2, [pc, #140]	@ (8009348 <HAL_TIM_Base_Start+0xb4>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d022      	beq.n	8009304 <HAL_TIM_Base_Start+0x70>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092c6:	d01d      	beq.n	8009304 <HAL_TIM_Base_Start+0x70>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a1f      	ldr	r2, [pc, #124]	@ (800934c <HAL_TIM_Base_Start+0xb8>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d018      	beq.n	8009304 <HAL_TIM_Base_Start+0x70>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a1e      	ldr	r2, [pc, #120]	@ (8009350 <HAL_TIM_Base_Start+0xbc>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d013      	beq.n	8009304 <HAL_TIM_Base_Start+0x70>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a1c      	ldr	r2, [pc, #112]	@ (8009354 <HAL_TIM_Base_Start+0xc0>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d00e      	beq.n	8009304 <HAL_TIM_Base_Start+0x70>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009358 <HAL_TIM_Base_Start+0xc4>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d009      	beq.n	8009304 <HAL_TIM_Base_Start+0x70>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a19      	ldr	r2, [pc, #100]	@ (800935c <HAL_TIM_Base_Start+0xc8>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d004      	beq.n	8009304 <HAL_TIM_Base_Start+0x70>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a18      	ldr	r2, [pc, #96]	@ (8009360 <HAL_TIM_Base_Start+0xcc>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d111      	bne.n	8009328 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f003 0307 	and.w	r3, r3, #7
 800930e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2b06      	cmp	r3, #6
 8009314:	d010      	beq.n	8009338 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f042 0201 	orr.w	r2, r2, #1
 8009324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009326:	e007      	b.n	8009338 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f042 0201 	orr.w	r2, r2, #1
 8009336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	40010000 	.word	0x40010000
 800934c:	40000400 	.word	0x40000400
 8009350:	40000800 	.word	0x40000800
 8009354:	40000c00 	.word	0x40000c00
 8009358:	40010400 	.word	0x40010400
 800935c:	40014000 	.word	0x40014000
 8009360:	40001800 	.word	0x40001800

08009364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b01      	cmp	r3, #1
 8009376:	d001      	beq.n	800937c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	e04e      	b.n	800941a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68da      	ldr	r2, [r3, #12]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f042 0201 	orr.w	r2, r2, #1
 8009392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a23      	ldr	r2, [pc, #140]	@ (8009428 <HAL_TIM_Base_Start_IT+0xc4>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d022      	beq.n	80093e4 <HAL_TIM_Base_Start_IT+0x80>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093a6:	d01d      	beq.n	80093e4 <HAL_TIM_Base_Start_IT+0x80>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a1f      	ldr	r2, [pc, #124]	@ (800942c <HAL_TIM_Base_Start_IT+0xc8>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d018      	beq.n	80093e4 <HAL_TIM_Base_Start_IT+0x80>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a1e      	ldr	r2, [pc, #120]	@ (8009430 <HAL_TIM_Base_Start_IT+0xcc>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d013      	beq.n	80093e4 <HAL_TIM_Base_Start_IT+0x80>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a1c      	ldr	r2, [pc, #112]	@ (8009434 <HAL_TIM_Base_Start_IT+0xd0>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d00e      	beq.n	80093e4 <HAL_TIM_Base_Start_IT+0x80>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a1b      	ldr	r2, [pc, #108]	@ (8009438 <HAL_TIM_Base_Start_IT+0xd4>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d009      	beq.n	80093e4 <HAL_TIM_Base_Start_IT+0x80>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a19      	ldr	r2, [pc, #100]	@ (800943c <HAL_TIM_Base_Start_IT+0xd8>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d004      	beq.n	80093e4 <HAL_TIM_Base_Start_IT+0x80>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a18      	ldr	r2, [pc, #96]	@ (8009440 <HAL_TIM_Base_Start_IT+0xdc>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d111      	bne.n	8009408 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f003 0307 	and.w	r3, r3, #7
 80093ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2b06      	cmp	r3, #6
 80093f4:	d010      	beq.n	8009418 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f042 0201 	orr.w	r2, r2, #1
 8009404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009406:	e007      	b.n	8009418 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f042 0201 	orr.w	r2, r2, #1
 8009416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	40010000 	.word	0x40010000
 800942c:	40000400 	.word	0x40000400
 8009430:	40000800 	.word	0x40000800
 8009434:	40000c00 	.word	0x40000c00
 8009438:	40010400 	.word	0x40010400
 800943c:	40014000 	.word	0x40014000
 8009440:	40001800 	.word	0x40001800

08009444 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e041      	b.n	80094da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b00      	cmp	r3, #0
 8009460:	d106      	bne.n	8009470 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f839 	bl	80094e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2202      	movs	r2, #2
 8009474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	3304      	adds	r3, #4
 8009480:	4619      	mov	r1, r3
 8009482:	4610      	mov	r0, r2
 8009484:	f000 fc12 	bl	8009cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b083      	sub	sp, #12
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80094ea:	bf00      	nop
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
	...

080094f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d109      	bne.n	800951c <HAL_TIM_PWM_Start+0x24>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b01      	cmp	r3, #1
 8009512:	bf14      	ite	ne
 8009514:	2301      	movne	r3, #1
 8009516:	2300      	moveq	r3, #0
 8009518:	b2db      	uxtb	r3, r3
 800951a:	e022      	b.n	8009562 <HAL_TIM_PWM_Start+0x6a>
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2b04      	cmp	r3, #4
 8009520:	d109      	bne.n	8009536 <HAL_TIM_PWM_Start+0x3e>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b01      	cmp	r3, #1
 800952c:	bf14      	ite	ne
 800952e:	2301      	movne	r3, #1
 8009530:	2300      	moveq	r3, #0
 8009532:	b2db      	uxtb	r3, r3
 8009534:	e015      	b.n	8009562 <HAL_TIM_PWM_Start+0x6a>
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b08      	cmp	r3, #8
 800953a:	d109      	bne.n	8009550 <HAL_TIM_PWM_Start+0x58>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009542:	b2db      	uxtb	r3, r3
 8009544:	2b01      	cmp	r3, #1
 8009546:	bf14      	ite	ne
 8009548:	2301      	movne	r3, #1
 800954a:	2300      	moveq	r3, #0
 800954c:	b2db      	uxtb	r3, r3
 800954e:	e008      	b.n	8009562 <HAL_TIM_PWM_Start+0x6a>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b01      	cmp	r3, #1
 800955a:	bf14      	ite	ne
 800955c:	2301      	movne	r3, #1
 800955e:	2300      	moveq	r3, #0
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e07c      	b.n	8009664 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d104      	bne.n	800957a <HAL_TIM_PWM_Start+0x82>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2202      	movs	r2, #2
 8009574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009578:	e013      	b.n	80095a2 <HAL_TIM_PWM_Start+0xaa>
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2b04      	cmp	r3, #4
 800957e:	d104      	bne.n	800958a <HAL_TIM_PWM_Start+0x92>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009588:	e00b      	b.n	80095a2 <HAL_TIM_PWM_Start+0xaa>
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	2b08      	cmp	r3, #8
 800958e:	d104      	bne.n	800959a <HAL_TIM_PWM_Start+0xa2>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2202      	movs	r2, #2
 8009594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009598:	e003      	b.n	80095a2 <HAL_TIM_PWM_Start+0xaa>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2202      	movs	r2, #2
 800959e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2201      	movs	r2, #1
 80095a8:	6839      	ldr	r1, [r7, #0]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 fe74 	bl	800a298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a2d      	ldr	r2, [pc, #180]	@ (800966c <HAL_TIM_PWM_Start+0x174>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d004      	beq.n	80095c4 <HAL_TIM_PWM_Start+0xcc>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a2c      	ldr	r2, [pc, #176]	@ (8009670 <HAL_TIM_PWM_Start+0x178>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d101      	bne.n	80095c8 <HAL_TIM_PWM_Start+0xd0>
 80095c4:	2301      	movs	r3, #1
 80095c6:	e000      	b.n	80095ca <HAL_TIM_PWM_Start+0xd2>
 80095c8:	2300      	movs	r3, #0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d007      	beq.n	80095de <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80095dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a22      	ldr	r2, [pc, #136]	@ (800966c <HAL_TIM_PWM_Start+0x174>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d022      	beq.n	800962e <HAL_TIM_PWM_Start+0x136>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f0:	d01d      	beq.n	800962e <HAL_TIM_PWM_Start+0x136>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a1f      	ldr	r2, [pc, #124]	@ (8009674 <HAL_TIM_PWM_Start+0x17c>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d018      	beq.n	800962e <HAL_TIM_PWM_Start+0x136>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a1d      	ldr	r2, [pc, #116]	@ (8009678 <HAL_TIM_PWM_Start+0x180>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d013      	beq.n	800962e <HAL_TIM_PWM_Start+0x136>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a1c      	ldr	r2, [pc, #112]	@ (800967c <HAL_TIM_PWM_Start+0x184>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d00e      	beq.n	800962e <HAL_TIM_PWM_Start+0x136>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a16      	ldr	r2, [pc, #88]	@ (8009670 <HAL_TIM_PWM_Start+0x178>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d009      	beq.n	800962e <HAL_TIM_PWM_Start+0x136>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a18      	ldr	r2, [pc, #96]	@ (8009680 <HAL_TIM_PWM_Start+0x188>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d004      	beq.n	800962e <HAL_TIM_PWM_Start+0x136>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a16      	ldr	r2, [pc, #88]	@ (8009684 <HAL_TIM_PWM_Start+0x18c>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d111      	bne.n	8009652 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f003 0307 	and.w	r3, r3, #7
 8009638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2b06      	cmp	r3, #6
 800963e:	d010      	beq.n	8009662 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f042 0201 	orr.w	r2, r2, #1
 800964e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009650:	e007      	b.n	8009662 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f042 0201 	orr.w	r2, r2, #1
 8009660:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	40010000 	.word	0x40010000
 8009670:	40010400 	.word	0x40010400
 8009674:	40000400 	.word	0x40000400
 8009678:	40000800 	.word	0x40000800
 800967c:	40000c00 	.word	0x40000c00
 8009680:	40014000 	.word	0x40014000
 8009684:	40001800 	.word	0x40001800

08009688 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2200      	movs	r2, #0
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	4618      	mov	r0, r3
 800969c:	f000 fdfc 	bl	800a298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a2e      	ldr	r2, [pc, #184]	@ (8009760 <HAL_TIM_PWM_Stop+0xd8>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d004      	beq.n	80096b4 <HAL_TIM_PWM_Stop+0x2c>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a2d      	ldr	r2, [pc, #180]	@ (8009764 <HAL_TIM_PWM_Stop+0xdc>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d101      	bne.n	80096b8 <HAL_TIM_PWM_Stop+0x30>
 80096b4:	2301      	movs	r3, #1
 80096b6:	e000      	b.n	80096ba <HAL_TIM_PWM_Stop+0x32>
 80096b8:	2300      	movs	r3, #0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d017      	beq.n	80096ee <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6a1a      	ldr	r2, [r3, #32]
 80096c4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80096c8:	4013      	ands	r3, r2
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10f      	bne.n	80096ee <HAL_TIM_PWM_Stop+0x66>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6a1a      	ldr	r2, [r3, #32]
 80096d4:	f240 4344 	movw	r3, #1092	@ 0x444
 80096d8:	4013      	ands	r3, r2
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d107      	bne.n	80096ee <HAL_TIM_PWM_Stop+0x66>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80096ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6a1a      	ldr	r2, [r3, #32]
 80096f4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80096f8:	4013      	ands	r3, r2
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10f      	bne.n	800971e <HAL_TIM_PWM_Stop+0x96>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6a1a      	ldr	r2, [r3, #32]
 8009704:	f240 4344 	movw	r3, #1092	@ 0x444
 8009708:	4013      	ands	r3, r2
 800970a:	2b00      	cmp	r3, #0
 800970c:	d107      	bne.n	800971e <HAL_TIM_PWM_Stop+0x96>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f022 0201 	bic.w	r2, r2, #1
 800971c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d104      	bne.n	800972e <HAL_TIM_PWM_Stop+0xa6>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800972c:	e013      	b.n	8009756 <HAL_TIM_PWM_Stop+0xce>
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	2b04      	cmp	r3, #4
 8009732:	d104      	bne.n	800973e <HAL_TIM_PWM_Stop+0xb6>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800973c:	e00b      	b.n	8009756 <HAL_TIM_PWM_Stop+0xce>
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b08      	cmp	r3, #8
 8009742:	d104      	bne.n	800974e <HAL_TIM_PWM_Stop+0xc6>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800974c:	e003      	b.n	8009756 <HAL_TIM_PWM_Stop+0xce>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	40010000 	.word	0x40010000
 8009764:	40010400 	.word	0x40010400

08009768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	f003 0302 	and.w	r3, r3, #2
 8009786:	2b00      	cmp	r3, #0
 8009788:	d020      	beq.n	80097cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f003 0302 	and.w	r3, r3, #2
 8009790:	2b00      	cmp	r3, #0
 8009792:	d01b      	beq.n	80097cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f06f 0202 	mvn.w	r2, #2
 800979c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2201      	movs	r2, #1
 80097a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	f003 0303 	and.w	r3, r3, #3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa5b 	bl	8009c6e <HAL_TIM_IC_CaptureCallback>
 80097b8:	e005      	b.n	80097c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fa4d 	bl	8009c5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fa5e 	bl	8009c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f003 0304 	and.w	r3, r3, #4
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d020      	beq.n	8009818 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d01b      	beq.n	8009818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f06f 0204 	mvn.w	r2, #4
 80097e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2202      	movs	r2, #2
 80097ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d003      	beq.n	8009806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fa35 	bl	8009c6e <HAL_TIM_IC_CaptureCallback>
 8009804:	e005      	b.n	8009812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 fa27 	bl	8009c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fa38 	bl	8009c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	f003 0308 	and.w	r3, r3, #8
 800981e:	2b00      	cmp	r3, #0
 8009820:	d020      	beq.n	8009864 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f003 0308 	and.w	r3, r3, #8
 8009828:	2b00      	cmp	r3, #0
 800982a:	d01b      	beq.n	8009864 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f06f 0208 	mvn.w	r2, #8
 8009834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2204      	movs	r2, #4
 800983a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	69db      	ldr	r3, [r3, #28]
 8009842:	f003 0303 	and.w	r3, r3, #3
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fa0f 	bl	8009c6e <HAL_TIM_IC_CaptureCallback>
 8009850:	e005      	b.n	800985e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fa01 	bl	8009c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fa12 	bl	8009c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	f003 0310 	and.w	r3, r3, #16
 800986a:	2b00      	cmp	r3, #0
 800986c:	d020      	beq.n	80098b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f003 0310 	and.w	r3, r3, #16
 8009874:	2b00      	cmp	r3, #0
 8009876:	d01b      	beq.n	80098b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f06f 0210 	mvn.w	r2, #16
 8009880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2208      	movs	r2, #8
 8009886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f9e9 	bl	8009c6e <HAL_TIM_IC_CaptureCallback>
 800989c:	e005      	b.n	80098aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f9db 	bl	8009c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f9ec 	bl	8009c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00c      	beq.n	80098d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d007      	beq.n	80098d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f06f 0201 	mvn.w	r2, #1
 80098cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7fa fa5a 	bl	8003d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00c      	beq.n	80098f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d007      	beq.n	80098f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80098f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fd7c 	bl	800a3f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00c      	beq.n	800991c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009908:	2b00      	cmp	r3, #0
 800990a:	d007      	beq.n	800991c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f9bd 	bl	8009c96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	f003 0320 	and.w	r3, r3, #32
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00c      	beq.n	8009940 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f003 0320 	and.w	r3, r3, #32
 800992c:	2b00      	cmp	r3, #0
 800992e:	d007      	beq.n	8009940 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f06f 0220 	mvn.w	r2, #32
 8009938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fd4e 	bl	800a3dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009940:	bf00      	nop
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800995e:	2b01      	cmp	r3, #1
 8009960:	d101      	bne.n	8009966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009962:	2302      	movs	r3, #2
 8009964:	e0ae      	b.n	8009ac4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b0c      	cmp	r3, #12
 8009972:	f200 809f 	bhi.w	8009ab4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009976:	a201      	add	r2, pc, #4	@ (adr r2, 800997c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997c:	080099b1 	.word	0x080099b1
 8009980:	08009ab5 	.word	0x08009ab5
 8009984:	08009ab5 	.word	0x08009ab5
 8009988:	08009ab5 	.word	0x08009ab5
 800998c:	080099f1 	.word	0x080099f1
 8009990:	08009ab5 	.word	0x08009ab5
 8009994:	08009ab5 	.word	0x08009ab5
 8009998:	08009ab5 	.word	0x08009ab5
 800999c:	08009a33 	.word	0x08009a33
 80099a0:	08009ab5 	.word	0x08009ab5
 80099a4:	08009ab5 	.word	0x08009ab5
 80099a8:	08009ab5 	.word	0x08009ab5
 80099ac:	08009a73 	.word	0x08009a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68b9      	ldr	r1, [r7, #8]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 fa24 	bl	8009e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	699a      	ldr	r2, [r3, #24]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f042 0208 	orr.w	r2, r2, #8
 80099ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	699a      	ldr	r2, [r3, #24]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f022 0204 	bic.w	r2, r2, #4
 80099da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6999      	ldr	r1, [r3, #24]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	691a      	ldr	r2, [r3, #16]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	430a      	orrs	r2, r1
 80099ec:	619a      	str	r2, [r3, #24]
      break;
 80099ee:	e064      	b.n	8009aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68b9      	ldr	r1, [r7, #8]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 fa74 	bl	8009ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	699a      	ldr	r2, [r3, #24]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	699a      	ldr	r2, [r3, #24]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6999      	ldr	r1, [r3, #24]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	021a      	lsls	r2, r3, #8
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	619a      	str	r2, [r3, #24]
      break;
 8009a30:	e043      	b.n	8009aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68b9      	ldr	r1, [r7, #8]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 fac9 	bl	8009fd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	69da      	ldr	r2, [r3, #28]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f042 0208 	orr.w	r2, r2, #8
 8009a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	69da      	ldr	r2, [r3, #28]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f022 0204 	bic.w	r2, r2, #4
 8009a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	69d9      	ldr	r1, [r3, #28]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	691a      	ldr	r2, [r3, #16]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	430a      	orrs	r2, r1
 8009a6e:	61da      	str	r2, [r3, #28]
      break;
 8009a70:	e023      	b.n	8009aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68b9      	ldr	r1, [r7, #8]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 fb1d 	bl	800a0b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	69da      	ldr	r2, [r3, #28]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	69da      	ldr	r2, [r3, #28]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	69d9      	ldr	r1, [r3, #28]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	021a      	lsls	r2, r3, #8
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	61da      	str	r2, [r3, #28]
      break;
 8009ab2:	e002      	b.n	8009aba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d101      	bne.n	8009ae8 <HAL_TIM_ConfigClockSource+0x1c>
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	e0b4      	b.n	8009c52 <HAL_TIM_ConfigClockSource+0x186>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b20:	d03e      	beq.n	8009ba0 <HAL_TIM_ConfigClockSource+0xd4>
 8009b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b26:	f200 8087 	bhi.w	8009c38 <HAL_TIM_ConfigClockSource+0x16c>
 8009b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b2e:	f000 8086 	beq.w	8009c3e <HAL_TIM_ConfigClockSource+0x172>
 8009b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b36:	d87f      	bhi.n	8009c38 <HAL_TIM_ConfigClockSource+0x16c>
 8009b38:	2b70      	cmp	r3, #112	@ 0x70
 8009b3a:	d01a      	beq.n	8009b72 <HAL_TIM_ConfigClockSource+0xa6>
 8009b3c:	2b70      	cmp	r3, #112	@ 0x70
 8009b3e:	d87b      	bhi.n	8009c38 <HAL_TIM_ConfigClockSource+0x16c>
 8009b40:	2b60      	cmp	r3, #96	@ 0x60
 8009b42:	d050      	beq.n	8009be6 <HAL_TIM_ConfigClockSource+0x11a>
 8009b44:	2b60      	cmp	r3, #96	@ 0x60
 8009b46:	d877      	bhi.n	8009c38 <HAL_TIM_ConfigClockSource+0x16c>
 8009b48:	2b50      	cmp	r3, #80	@ 0x50
 8009b4a:	d03c      	beq.n	8009bc6 <HAL_TIM_ConfigClockSource+0xfa>
 8009b4c:	2b50      	cmp	r3, #80	@ 0x50
 8009b4e:	d873      	bhi.n	8009c38 <HAL_TIM_ConfigClockSource+0x16c>
 8009b50:	2b40      	cmp	r3, #64	@ 0x40
 8009b52:	d058      	beq.n	8009c06 <HAL_TIM_ConfigClockSource+0x13a>
 8009b54:	2b40      	cmp	r3, #64	@ 0x40
 8009b56:	d86f      	bhi.n	8009c38 <HAL_TIM_ConfigClockSource+0x16c>
 8009b58:	2b30      	cmp	r3, #48	@ 0x30
 8009b5a:	d064      	beq.n	8009c26 <HAL_TIM_ConfigClockSource+0x15a>
 8009b5c:	2b30      	cmp	r3, #48	@ 0x30
 8009b5e:	d86b      	bhi.n	8009c38 <HAL_TIM_ConfigClockSource+0x16c>
 8009b60:	2b20      	cmp	r3, #32
 8009b62:	d060      	beq.n	8009c26 <HAL_TIM_ConfigClockSource+0x15a>
 8009b64:	2b20      	cmp	r3, #32
 8009b66:	d867      	bhi.n	8009c38 <HAL_TIM_ConfigClockSource+0x16c>
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d05c      	beq.n	8009c26 <HAL_TIM_ConfigClockSource+0x15a>
 8009b6c:	2b10      	cmp	r3, #16
 8009b6e:	d05a      	beq.n	8009c26 <HAL_TIM_ConfigClockSource+0x15a>
 8009b70:	e062      	b.n	8009c38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b82:	f000 fb69 	bl	800a258 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	609a      	str	r2, [r3, #8]
      break;
 8009b9e:	e04f      	b.n	8009c40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009bb0:	f000 fb52 	bl	800a258 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	689a      	ldr	r2, [r3, #8]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009bc2:	609a      	str	r2, [r3, #8]
      break;
 8009bc4:	e03c      	b.n	8009c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	f000 fac6 	bl	800a164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2150      	movs	r1, #80	@ 0x50
 8009bde:	4618      	mov	r0, r3
 8009be0:	f000 fb1f 	bl	800a222 <TIM_ITRx_SetConfig>
      break;
 8009be4:	e02c      	b.n	8009c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	f000 fae5 	bl	800a1c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2160      	movs	r1, #96	@ 0x60
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 fb0f 	bl	800a222 <TIM_ITRx_SetConfig>
      break;
 8009c04:	e01c      	b.n	8009c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c12:	461a      	mov	r2, r3
 8009c14:	f000 faa6 	bl	800a164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2140      	movs	r1, #64	@ 0x40
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 faff 	bl	800a222 <TIM_ITRx_SetConfig>
      break;
 8009c24:	e00c      	b.n	8009c40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4619      	mov	r1, r3
 8009c30:	4610      	mov	r0, r2
 8009c32:	f000 faf6 	bl	800a222 <TIM_ITRx_SetConfig>
      break;
 8009c36:	e003      	b.n	8009c40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c3c:	e000      	b.n	8009c40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b083      	sub	sp, #12
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c62:	bf00      	nop
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b083      	sub	sp, #12
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c76:	bf00      	nop
 8009c78:	370c      	adds	r7, #12
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b083      	sub	sp, #12
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c8a:	bf00      	nop
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c9e:	bf00      	nop
 8009ca0:	370c      	adds	r7, #12
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
	...

08009cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a46      	ldr	r2, [pc, #280]	@ (8009dd8 <TIM_Base_SetConfig+0x12c>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d013      	beq.n	8009cec <TIM_Base_SetConfig+0x40>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cca:	d00f      	beq.n	8009cec <TIM_Base_SetConfig+0x40>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a43      	ldr	r2, [pc, #268]	@ (8009ddc <TIM_Base_SetConfig+0x130>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d00b      	beq.n	8009cec <TIM_Base_SetConfig+0x40>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a42      	ldr	r2, [pc, #264]	@ (8009de0 <TIM_Base_SetConfig+0x134>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d007      	beq.n	8009cec <TIM_Base_SetConfig+0x40>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a41      	ldr	r2, [pc, #260]	@ (8009de4 <TIM_Base_SetConfig+0x138>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d003      	beq.n	8009cec <TIM_Base_SetConfig+0x40>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a40      	ldr	r2, [pc, #256]	@ (8009de8 <TIM_Base_SetConfig+0x13c>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d108      	bne.n	8009cfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a35      	ldr	r2, [pc, #212]	@ (8009dd8 <TIM_Base_SetConfig+0x12c>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d02b      	beq.n	8009d5e <TIM_Base_SetConfig+0xb2>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d0c:	d027      	beq.n	8009d5e <TIM_Base_SetConfig+0xb2>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a32      	ldr	r2, [pc, #200]	@ (8009ddc <TIM_Base_SetConfig+0x130>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d023      	beq.n	8009d5e <TIM_Base_SetConfig+0xb2>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a31      	ldr	r2, [pc, #196]	@ (8009de0 <TIM_Base_SetConfig+0x134>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d01f      	beq.n	8009d5e <TIM_Base_SetConfig+0xb2>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a30      	ldr	r2, [pc, #192]	@ (8009de4 <TIM_Base_SetConfig+0x138>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d01b      	beq.n	8009d5e <TIM_Base_SetConfig+0xb2>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a2f      	ldr	r2, [pc, #188]	@ (8009de8 <TIM_Base_SetConfig+0x13c>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d017      	beq.n	8009d5e <TIM_Base_SetConfig+0xb2>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a2e      	ldr	r2, [pc, #184]	@ (8009dec <TIM_Base_SetConfig+0x140>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d013      	beq.n	8009d5e <TIM_Base_SetConfig+0xb2>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a2d      	ldr	r2, [pc, #180]	@ (8009df0 <TIM_Base_SetConfig+0x144>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d00f      	beq.n	8009d5e <TIM_Base_SetConfig+0xb2>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a2c      	ldr	r2, [pc, #176]	@ (8009df4 <TIM_Base_SetConfig+0x148>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d00b      	beq.n	8009d5e <TIM_Base_SetConfig+0xb2>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a2b      	ldr	r2, [pc, #172]	@ (8009df8 <TIM_Base_SetConfig+0x14c>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d007      	beq.n	8009d5e <TIM_Base_SetConfig+0xb2>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a2a      	ldr	r2, [pc, #168]	@ (8009dfc <TIM_Base_SetConfig+0x150>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d003      	beq.n	8009d5e <TIM_Base_SetConfig+0xb2>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a29      	ldr	r2, [pc, #164]	@ (8009e00 <TIM_Base_SetConfig+0x154>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d108      	bne.n	8009d70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	689a      	ldr	r2, [r3, #8]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a10      	ldr	r2, [pc, #64]	@ (8009dd8 <TIM_Base_SetConfig+0x12c>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d003      	beq.n	8009da4 <TIM_Base_SetConfig+0xf8>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a12      	ldr	r2, [pc, #72]	@ (8009de8 <TIM_Base_SetConfig+0x13c>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d103      	bne.n	8009dac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	691a      	ldr	r2, [r3, #16]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	f003 0301 	and.w	r3, r3, #1
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d105      	bne.n	8009dca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	f023 0201 	bic.w	r2, r3, #1
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	611a      	str	r2, [r3, #16]
  }
}
 8009dca:	bf00      	nop
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	40010000 	.word	0x40010000
 8009ddc:	40000400 	.word	0x40000400
 8009de0:	40000800 	.word	0x40000800
 8009de4:	40000c00 	.word	0x40000c00
 8009de8:	40010400 	.word	0x40010400
 8009dec:	40014000 	.word	0x40014000
 8009df0:	40014400 	.word	0x40014400
 8009df4:	40014800 	.word	0x40014800
 8009df8:	40001800 	.word	0x40001800
 8009dfc:	40001c00 	.word	0x40001c00
 8009e00:	40002000 	.word	0x40002000

08009e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a1b      	ldr	r3, [r3, #32]
 8009e18:	f023 0201 	bic.w	r2, r3, #1
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f023 0303 	bic.w	r3, r3, #3
 8009e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f023 0302 	bic.w	r3, r3, #2
 8009e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a20      	ldr	r2, [pc, #128]	@ (8009edc <TIM_OC1_SetConfig+0xd8>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d003      	beq.n	8009e68 <TIM_OC1_SetConfig+0x64>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a1f      	ldr	r2, [pc, #124]	@ (8009ee0 <TIM_OC1_SetConfig+0xdc>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d10c      	bne.n	8009e82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	f023 0308 	bic.w	r3, r3, #8
 8009e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	697a      	ldr	r2, [r7, #20]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f023 0304 	bic.w	r3, r3, #4
 8009e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a15      	ldr	r2, [pc, #84]	@ (8009edc <TIM_OC1_SetConfig+0xd8>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d003      	beq.n	8009e92 <TIM_OC1_SetConfig+0x8e>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a14      	ldr	r2, [pc, #80]	@ (8009ee0 <TIM_OC1_SetConfig+0xdc>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d111      	bne.n	8009eb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	621a      	str	r2, [r3, #32]
}
 8009ed0:	bf00      	nop
 8009ed2:	371c      	adds	r7, #28
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	40010000 	.word	0x40010000
 8009ee0:	40010400 	.word	0x40010400

08009ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b087      	sub	sp, #28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a1b      	ldr	r3, [r3, #32]
 8009ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a1b      	ldr	r3, [r3, #32]
 8009ef8:	f023 0210 	bic.w	r2, r3, #16
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	021b      	lsls	r3, r3, #8
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f023 0320 	bic.w	r3, r3, #32
 8009f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	011b      	lsls	r3, r3, #4
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4a22      	ldr	r2, [pc, #136]	@ (8009fc8 <TIM_OC2_SetConfig+0xe4>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d003      	beq.n	8009f4c <TIM_OC2_SetConfig+0x68>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a21      	ldr	r2, [pc, #132]	@ (8009fcc <TIM_OC2_SetConfig+0xe8>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d10d      	bne.n	8009f68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	011b      	lsls	r3, r3, #4
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a17      	ldr	r2, [pc, #92]	@ (8009fc8 <TIM_OC2_SetConfig+0xe4>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d003      	beq.n	8009f78 <TIM_OC2_SetConfig+0x94>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a16      	ldr	r2, [pc, #88]	@ (8009fcc <TIM_OC2_SetConfig+0xe8>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d113      	bne.n	8009fa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	685a      	ldr	r2, [r3, #4]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	621a      	str	r2, [r3, #32]
}
 8009fba:	bf00      	nop
 8009fbc:	371c      	adds	r7, #28
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	40010000 	.word	0x40010000
 8009fcc:	40010400 	.word	0x40010400

08009fd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b087      	sub	sp, #28
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	69db      	ldr	r3, [r3, #28]
 8009ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f023 0303 	bic.w	r3, r3, #3
 800a006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	4313      	orrs	r3, r2
 800a010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	021b      	lsls	r3, r3, #8
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	4313      	orrs	r3, r2
 800a024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a21      	ldr	r2, [pc, #132]	@ (800a0b0 <TIM_OC3_SetConfig+0xe0>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d003      	beq.n	800a036 <TIM_OC3_SetConfig+0x66>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a20      	ldr	r2, [pc, #128]	@ (800a0b4 <TIM_OC3_SetConfig+0xe4>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d10d      	bne.n	800a052 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a03c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	021b      	lsls	r3, r3, #8
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	4313      	orrs	r3, r2
 800a048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a16      	ldr	r2, [pc, #88]	@ (800a0b0 <TIM_OC3_SetConfig+0xe0>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d003      	beq.n	800a062 <TIM_OC3_SetConfig+0x92>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a15      	ldr	r2, [pc, #84]	@ (800a0b4 <TIM_OC3_SetConfig+0xe4>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d113      	bne.n	800a08a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	695b      	ldr	r3, [r3, #20]
 800a076:	011b      	lsls	r3, r3, #4
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	011b      	lsls	r3, r3, #4
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	4313      	orrs	r3, r2
 800a088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	621a      	str	r2, [r3, #32]
}
 800a0a4:	bf00      	nop
 800a0a6:	371c      	adds	r7, #28
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	40010000 	.word	0x40010000
 800a0b4:	40010400 	.word	0x40010400

0800a0b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a1b      	ldr	r3, [r3, #32]
 800a0cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	021b      	lsls	r3, r3, #8
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	031b      	lsls	r3, r3, #12
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a12      	ldr	r2, [pc, #72]	@ (800a15c <TIM_OC4_SetConfig+0xa4>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d003      	beq.n	800a120 <TIM_OC4_SetConfig+0x68>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a11      	ldr	r2, [pc, #68]	@ (800a160 <TIM_OC4_SetConfig+0xa8>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d109      	bne.n	800a134 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	019b      	lsls	r3, r3, #6
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	4313      	orrs	r3, r2
 800a132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	621a      	str	r2, [r3, #32]
}
 800a14e:	bf00      	nop
 800a150:	371c      	adds	r7, #28
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	40010000 	.word	0x40010000
 800a160:	40010400 	.word	0x40010400

0800a164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a164:	b480      	push	{r7}
 800a166:	b087      	sub	sp, #28
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6a1b      	ldr	r3, [r3, #32]
 800a174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	f023 0201 	bic.w	r2, r3, #1
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a18e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	011b      	lsls	r3, r3, #4
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	4313      	orrs	r3, r2
 800a198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f023 030a 	bic.w	r3, r3, #10
 800a1a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	621a      	str	r2, [r3, #32]
}
 800a1b6:	bf00      	nop
 800a1b8:	371c      	adds	r7, #28
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b087      	sub	sp, #28
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	60f8      	str	r0, [r7, #12]
 800a1ca:	60b9      	str	r1, [r7, #8]
 800a1cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6a1b      	ldr	r3, [r3, #32]
 800a1d8:	f023 0210 	bic.w	r2, r3, #16
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a1ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	031b      	lsls	r3, r3, #12
 800a1f2:	693a      	ldr	r2, [r7, #16]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a1fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	011b      	lsls	r3, r3, #4
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	4313      	orrs	r3, r2
 800a208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	693a      	ldr	r2, [r7, #16]
 800a20e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	621a      	str	r2, [r3, #32]
}
 800a216:	bf00      	nop
 800a218:	371c      	adds	r7, #28
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a222:	b480      	push	{r7}
 800a224:	b085      	sub	sp, #20
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	4313      	orrs	r3, r2
 800a240:	f043 0307 	orr.w	r3, r3, #7
 800a244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	609a      	str	r2, [r3, #8]
}
 800a24c:	bf00      	nop
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a258:	b480      	push	{r7}
 800a25a:	b087      	sub	sp, #28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
 800a264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	021a      	lsls	r2, r3, #8
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	431a      	orrs	r2, r3
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	4313      	orrs	r3, r2
 800a280:	697a      	ldr	r2, [r7, #20]
 800a282:	4313      	orrs	r3, r2
 800a284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	697a      	ldr	r2, [r7, #20]
 800a28a:	609a      	str	r2, [r3, #8]
}
 800a28c:	bf00      	nop
 800a28e:	371c      	adds	r7, #28
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a298:	b480      	push	{r7}
 800a29a:	b087      	sub	sp, #28
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	f003 031f 	and.w	r3, r3, #31
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6a1a      	ldr	r2, [r3, #32]
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	43db      	mvns	r3, r3
 800a2ba:	401a      	ands	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6a1a      	ldr	r2, [r3, #32]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	f003 031f 	and.w	r3, r3, #31
 800a2ca:	6879      	ldr	r1, [r7, #4]
 800a2cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a2d0:	431a      	orrs	r2, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	621a      	str	r2, [r3, #32]
}
 800a2d6:	bf00      	nop
 800a2d8:	371c      	adds	r7, #28
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
	...

0800a2e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d101      	bne.n	800a2fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	e05a      	b.n	800a3b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2202      	movs	r2, #2
 800a308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a21      	ldr	r2, [pc, #132]	@ (800a3c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d022      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a348:	d01d      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a1d      	ldr	r2, [pc, #116]	@ (800a3c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d018      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a1b      	ldr	r2, [pc, #108]	@ (800a3c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d013      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a1a      	ldr	r2, [pc, #104]	@ (800a3cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d00e      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a18      	ldr	r2, [pc, #96]	@ (800a3d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d009      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a17      	ldr	r2, [pc, #92]	@ (800a3d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d004      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a15      	ldr	r2, [pc, #84]	@ (800a3d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d10c      	bne.n	800a3a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a38c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	4313      	orrs	r3, r2
 800a396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3714      	adds	r7, #20
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	40010000 	.word	0x40010000
 800a3c4:	40000400 	.word	0x40000400
 800a3c8:	40000800 	.word	0x40000800
 800a3cc:	40000c00 	.word	0x40000c00
 800a3d0:	40010400 	.word	0x40010400
 800a3d4:	40014000 	.word	0x40014000
 800a3d8:	40001800 	.word	0x40001800

0800a3dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	e042      	b.n	800a49c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d106      	bne.n	800a430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7fb f878 	bl	8005520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2224      	movs	r2, #36	@ 0x24
 800a434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68da      	ldr	r2, [r3, #12]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 fdbd 	bl	800afc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	691a      	ldr	r2, [r3, #16]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a45c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	695a      	ldr	r2, [r3, #20]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a46c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68da      	ldr	r2, [r3, #12]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a47c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2220      	movs	r2, #32
 800a488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2220      	movs	r2, #32
 800a490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b08a      	sub	sp, #40	@ 0x28
 800a4a8:	af02      	add	r7, sp, #8
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	603b      	str	r3, [r7, #0]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b20      	cmp	r3, #32
 800a4c2:	d175      	bne.n	800a5b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d002      	beq.n	800a4d0 <HAL_UART_Transmit+0x2c>
 800a4ca:	88fb      	ldrh	r3, [r7, #6]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d101      	bne.n	800a4d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e06e      	b.n	800a5b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2221      	movs	r2, #33	@ 0x21
 800a4de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a4e2:	f7fb f977 	bl	80057d4 <HAL_GetTick>
 800a4e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	88fa      	ldrh	r2, [r7, #6]
 800a4ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	88fa      	ldrh	r2, [r7, #6]
 800a4f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4fc:	d108      	bne.n	800a510 <HAL_UART_Transmit+0x6c>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d104      	bne.n	800a510 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a506:	2300      	movs	r3, #0
 800a508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	61bb      	str	r3, [r7, #24]
 800a50e:	e003      	b.n	800a518 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a514:	2300      	movs	r3, #0
 800a516:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a518:	e02e      	b.n	800a578 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	2200      	movs	r2, #0
 800a522:	2180      	movs	r1, #128	@ 0x80
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f000 fb1f 	bl	800ab68 <UART_WaitOnFlagUntilTimeout>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d005      	beq.n	800a53c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2220      	movs	r2, #32
 800a534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a538:	2303      	movs	r3, #3
 800a53a:	e03a      	b.n	800a5b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10b      	bne.n	800a55a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	881b      	ldrh	r3, [r3, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a550:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	3302      	adds	r3, #2
 800a556:	61bb      	str	r3, [r7, #24]
 800a558:	e007      	b.n	800a56a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	781a      	ldrb	r2, [r3, #0]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	3301      	adds	r3, #1
 800a568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a56e:	b29b      	uxth	r3, r3
 800a570:	3b01      	subs	r3, #1
 800a572:	b29a      	uxth	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1cb      	bne.n	800a51a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2200      	movs	r2, #0
 800a58a:	2140      	movs	r1, #64	@ 0x40
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f000 faeb 	bl	800ab68 <UART_WaitOnFlagUntilTimeout>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d005      	beq.n	800a5a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2220      	movs	r2, #32
 800a59c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	e006      	b.n	800a5b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	e000      	b.n	800a5b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a5b0:	2302      	movs	r3, #2
  }
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3720      	adds	r7, #32
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	60f8      	str	r0, [r7, #12]
 800a5c2:	60b9      	str	r1, [r7, #8]
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	2b20      	cmp	r3, #32
 800a5d2:	d112      	bne.n	800a5fa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d002      	beq.n	800a5e0 <HAL_UART_Receive_IT+0x26>
 800a5da:	88fb      	ldrh	r3, [r7, #6]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e00b      	b.n	800a5fc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a5ea:	88fb      	ldrh	r3, [r7, #6]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	68b9      	ldr	r1, [r7, #8]
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f000 fb12 	bl	800ac1a <UART_Start_Receive_IT>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	e000      	b.n	800a5fc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a5fa:	2302      	movs	r3, #2
  }
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b0ba      	sub	sp, #232	@ 0xe8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	695b      	ldr	r3, [r3, #20]
 800a626:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a62a:	2300      	movs	r3, #0
 800a62c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a630:	2300      	movs	r3, #0
 800a632:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a63a:	f003 030f 	and.w	r3, r3, #15
 800a63e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a642:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a646:	2b00      	cmp	r3, #0
 800a648:	d10f      	bne.n	800a66a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a64a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a64e:	f003 0320 	and.w	r3, r3, #32
 800a652:	2b00      	cmp	r3, #0
 800a654:	d009      	beq.n	800a66a <HAL_UART_IRQHandler+0x66>
 800a656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a65a:	f003 0320 	and.w	r3, r3, #32
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fbf2 	bl	800ae4c <UART_Receive_IT>
      return;
 800a668:	e25b      	b.n	800ab22 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a66a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 80de 	beq.w	800a830 <HAL_UART_IRQHandler+0x22c>
 800a674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a678:	f003 0301 	and.w	r3, r3, #1
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d106      	bne.n	800a68e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a684:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 80d1 	beq.w	800a830 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00b      	beq.n	800a6b2 <HAL_UART_IRQHandler+0xae>
 800a69a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a69e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d005      	beq.n	800a6b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6aa:	f043 0201 	orr.w	r2, r3, #1
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6b6:	f003 0304 	and.w	r3, r3, #4
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00b      	beq.n	800a6d6 <HAL_UART_IRQHandler+0xd2>
 800a6be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d005      	beq.n	800a6d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6ce:	f043 0202 	orr.w	r2, r3, #2
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6da:	f003 0302 	and.w	r3, r3, #2
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00b      	beq.n	800a6fa <HAL_UART_IRQHandler+0xf6>
 800a6e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6e6:	f003 0301 	and.w	r3, r3, #1
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d005      	beq.n	800a6fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6f2:	f043 0204 	orr.w	r2, r3, #4
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a6fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6fe:	f003 0308 	and.w	r3, r3, #8
 800a702:	2b00      	cmp	r3, #0
 800a704:	d011      	beq.n	800a72a <HAL_UART_IRQHandler+0x126>
 800a706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a70a:	f003 0320 	and.w	r3, r3, #32
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d105      	bne.n	800a71e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a716:	f003 0301 	and.w	r3, r3, #1
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d005      	beq.n	800a72a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a722:	f043 0208 	orr.w	r2, r3, #8
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f000 81f2 	beq.w	800ab18 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a738:	f003 0320 	and.w	r3, r3, #32
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d008      	beq.n	800a752 <HAL_UART_IRQHandler+0x14e>
 800a740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a744:	f003 0320 	and.w	r3, r3, #32
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d002      	beq.n	800a752 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fb7d 	bl	800ae4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	695b      	ldr	r3, [r3, #20]
 800a758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a75c:	2b40      	cmp	r3, #64	@ 0x40
 800a75e:	bf0c      	ite	eq
 800a760:	2301      	moveq	r3, #1
 800a762:	2300      	movne	r3, #0
 800a764:	b2db      	uxtb	r3, r3
 800a766:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a76e:	f003 0308 	and.w	r3, r3, #8
 800a772:	2b00      	cmp	r3, #0
 800a774:	d103      	bne.n	800a77e <HAL_UART_IRQHandler+0x17a>
 800a776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d04f      	beq.n	800a81e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fa85 	bl	800ac8e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a78e:	2b40      	cmp	r3, #64	@ 0x40
 800a790:	d141      	bne.n	800a816 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	3314      	adds	r3, #20
 800a798:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a7a0:	e853 3f00 	ldrex	r3, [r3]
 800a7a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a7a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a7ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	3314      	adds	r3, #20
 800a7ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a7be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a7c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a7ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a7ce:	e841 2300 	strex	r3, r2, [r1]
 800a7d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a7d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d1d9      	bne.n	800a792 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d013      	beq.n	800a80e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ea:	4a7e      	ldr	r2, [pc, #504]	@ (800a9e4 <HAL_UART_IRQHandler+0x3e0>)
 800a7ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fb fcb0 	bl	8006158 <HAL_DMA_Abort_IT>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d016      	beq.n	800a82c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a808:	4610      	mov	r0, r2
 800a80a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a80c:	e00e      	b.n	800a82c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f994 	bl	800ab3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a814:	e00a      	b.n	800a82c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f990 	bl	800ab3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a81c:	e006      	b.n	800a82c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f98c 	bl	800ab3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a82a:	e175      	b.n	800ab18 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a82c:	bf00      	nop
    return;
 800a82e:	e173      	b.n	800ab18 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a834:	2b01      	cmp	r3, #1
 800a836:	f040 814f 	bne.w	800aad8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a83a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a83e:	f003 0310 	and.w	r3, r3, #16
 800a842:	2b00      	cmp	r3, #0
 800a844:	f000 8148 	beq.w	800aad8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a84c:	f003 0310 	and.w	r3, r3, #16
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 8141 	beq.w	800aad8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a856:	2300      	movs	r3, #0
 800a858:	60bb      	str	r3, [r7, #8]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	60bb      	str	r3, [r7, #8]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	60bb      	str	r3, [r7, #8]
 800a86a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a876:	2b40      	cmp	r3, #64	@ 0x40
 800a878:	f040 80b6 	bne.w	800a9e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a888:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f000 8145 	beq.w	800ab1c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a89a:	429a      	cmp	r2, r3
 800a89c:	f080 813e 	bcs.w	800ab1c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a8a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8ac:	69db      	ldr	r3, [r3, #28]
 800a8ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8b2:	f000 8088 	beq.w	800a9c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	330c      	adds	r3, #12
 800a8bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a8c4:	e853 3f00 	ldrex	r3, [r3]
 800a8c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a8cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a8d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	330c      	adds	r3, #12
 800a8de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a8e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a8e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a8ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a8f2:	e841 2300 	strex	r3, r2, [r1]
 800a8f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a8fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1d9      	bne.n	800a8b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	3314      	adds	r3, #20
 800a908:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a90c:	e853 3f00 	ldrex	r3, [r3]
 800a910:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a912:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a914:	f023 0301 	bic.w	r3, r3, #1
 800a918:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	3314      	adds	r3, #20
 800a922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a926:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a92a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a92e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a932:	e841 2300 	strex	r3, r2, [r1]
 800a936:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a938:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1e1      	bne.n	800a902 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	3314      	adds	r3, #20
 800a944:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a946:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a948:	e853 3f00 	ldrex	r3, [r3]
 800a94c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a94e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a954:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3314      	adds	r3, #20
 800a95e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a962:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a964:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a966:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a968:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a96a:	e841 2300 	strex	r3, r2, [r1]
 800a96e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1e3      	bne.n	800a93e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2220      	movs	r2, #32
 800a97a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	330c      	adds	r3, #12
 800a98a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a98e:	e853 3f00 	ldrex	r3, [r3]
 800a992:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a994:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a996:	f023 0310 	bic.w	r3, r3, #16
 800a99a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	330c      	adds	r3, #12
 800a9a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a9a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a9aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a9ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a9b0:	e841 2300 	strex	r3, r2, [r1]
 800a9b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a9b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1e3      	bne.n	800a984 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fb fb59 	bl	8006078 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f8b7 	bl	800ab50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a9e2:	e09b      	b.n	800ab1c <HAL_UART_IRQHandler+0x518>
 800a9e4:	0800ad55 	.word	0x0800ad55
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 808e 	beq.w	800ab20 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800aa04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 8089 	beq.w	800ab20 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	330c      	adds	r3, #12
 800aa14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa18:	e853 3f00 	ldrex	r3, [r3]
 800aa1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	330c      	adds	r3, #12
 800aa2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800aa32:	647a      	str	r2, [r7, #68]	@ 0x44
 800aa34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa3a:	e841 2300 	strex	r3, r2, [r1]
 800aa3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1e3      	bne.n	800aa0e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	3314      	adds	r3, #20
 800aa4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa50:	e853 3f00 	ldrex	r3, [r3]
 800aa54:	623b      	str	r3, [r7, #32]
   return(result);
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	f023 0301 	bic.w	r3, r3, #1
 800aa5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	3314      	adds	r3, #20
 800aa66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aa6a:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa72:	e841 2300 	strex	r3, r2, [r1]
 800aa76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1e3      	bne.n	800aa46 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2220      	movs	r2, #32
 800aa82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	330c      	adds	r3, #12
 800aa92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	e853 3f00 	ldrex	r3, [r3]
 800aa9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f023 0310 	bic.w	r3, r3, #16
 800aaa2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	330c      	adds	r3, #12
 800aaac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800aab0:	61fa      	str	r2, [r7, #28]
 800aab2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab4:	69b9      	ldr	r1, [r7, #24]
 800aab6:	69fa      	ldr	r2, [r7, #28]
 800aab8:	e841 2300 	strex	r3, r2, [r1]
 800aabc:	617b      	str	r3, [r7, #20]
   return(result);
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1e3      	bne.n	800aa8c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2202      	movs	r2, #2
 800aac8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aaca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aace:	4619      	mov	r1, r3
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 f83d 	bl	800ab50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aad6:	e023      	b.n	800ab20 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aadc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d009      	beq.n	800aaf8 <HAL_UART_IRQHandler+0x4f4>
 800aae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d003      	beq.n	800aaf8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 f943 	bl	800ad7c <UART_Transmit_IT>
    return;
 800aaf6:	e014      	b.n	800ab22 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aaf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aafc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00e      	beq.n	800ab22 <HAL_UART_IRQHandler+0x51e>
 800ab04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d008      	beq.n	800ab22 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f983 	bl	800ae1c <UART_EndTransmit_IT>
    return;
 800ab16:	e004      	b.n	800ab22 <HAL_UART_IRQHandler+0x51e>
    return;
 800ab18:	bf00      	nop
 800ab1a:	e002      	b.n	800ab22 <HAL_UART_IRQHandler+0x51e>
      return;
 800ab1c:	bf00      	nop
 800ab1e:	e000      	b.n	800ab22 <HAL_UART_IRQHandler+0x51e>
      return;
 800ab20:	bf00      	nop
  }
}
 800ab22:	37e8      	adds	r7, #232	@ 0xe8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ab44:	bf00      	nop
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	603b      	str	r3, [r7, #0]
 800ab74:	4613      	mov	r3, r2
 800ab76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab78:	e03b      	b.n	800abf2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab7a:	6a3b      	ldr	r3, [r7, #32]
 800ab7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab80:	d037      	beq.n	800abf2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab82:	f7fa fe27 	bl	80057d4 <HAL_GetTick>
 800ab86:	4602      	mov	r2, r0
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	6a3a      	ldr	r2, [r7, #32]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d302      	bcc.n	800ab98 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e03a      	b.n	800ac12 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	f003 0304 	and.w	r3, r3, #4
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d023      	beq.n	800abf2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	2b80      	cmp	r3, #128	@ 0x80
 800abae:	d020      	beq.n	800abf2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	2b40      	cmp	r3, #64	@ 0x40
 800abb4:	d01d      	beq.n	800abf2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 0308 	and.w	r3, r3, #8
 800abc0:	2b08      	cmp	r3, #8
 800abc2:	d116      	bne.n	800abf2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800abc4:	2300      	movs	r3, #0
 800abc6:	617b      	str	r3, [r7, #20]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	617b      	str	r3, [r7, #20]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	617b      	str	r3, [r7, #20]
 800abd8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f000 f857 	bl	800ac8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2208      	movs	r2, #8
 800abe4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e00f      	b.n	800ac12 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	4013      	ands	r3, r2
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	bf0c      	ite	eq
 800ac02:	2301      	moveq	r3, #1
 800ac04:	2300      	movne	r3, #0
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	461a      	mov	r2, r3
 800ac0a:	79fb      	ldrb	r3, [r7, #7]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d0b4      	beq.n	800ab7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3718      	adds	r7, #24
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b085      	sub	sp, #20
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	60f8      	str	r0, [r7, #12]
 800ac22:	60b9      	str	r1, [r7, #8]
 800ac24:	4613      	mov	r3, r2
 800ac26:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	88fa      	ldrh	r2, [r7, #6]
 800ac32:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	88fa      	ldrh	r2, [r7, #6]
 800ac38:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2222      	movs	r2, #34	@ 0x22
 800ac44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d007      	beq.n	800ac60 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	68da      	ldr	r2, [r3, #12]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac5e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	695a      	ldr	r2, [r3, #20]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f042 0201 	orr.w	r2, r2, #1
 800ac6e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68da      	ldr	r2, [r3, #12]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f042 0220 	orr.w	r2, r2, #32
 800ac7e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr

0800ac8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac8e:	b480      	push	{r7}
 800ac90:	b095      	sub	sp, #84	@ 0x54
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	330c      	adds	r3, #12
 800ac9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aca0:	e853 3f00 	ldrex	r3, [r3]
 800aca4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800acac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	330c      	adds	r3, #12
 800acb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800acb6:	643a      	str	r2, [r7, #64]	@ 0x40
 800acb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acbe:	e841 2300 	strex	r3, r2, [r1]
 800acc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800acc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1e5      	bne.n	800ac96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	3314      	adds	r3, #20
 800acd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd2:	6a3b      	ldr	r3, [r7, #32]
 800acd4:	e853 3f00 	ldrex	r3, [r3]
 800acd8:	61fb      	str	r3, [r7, #28]
   return(result);
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	f023 0301 	bic.w	r3, r3, #1
 800ace0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3314      	adds	r3, #20
 800ace8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800acec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acf2:	e841 2300 	strex	r3, r2, [r1]
 800acf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800acf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1e5      	bne.n	800acca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d119      	bne.n	800ad3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	330c      	adds	r3, #12
 800ad0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	e853 3f00 	ldrex	r3, [r3]
 800ad14:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	f023 0310 	bic.w	r3, r3, #16
 800ad1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	330c      	adds	r3, #12
 800ad24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad26:	61ba      	str	r2, [r7, #24]
 800ad28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2a:	6979      	ldr	r1, [r7, #20]
 800ad2c:	69ba      	ldr	r2, [r7, #24]
 800ad2e:	e841 2300 	strex	r3, r2, [r1]
 800ad32:	613b      	str	r3, [r7, #16]
   return(result);
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1e5      	bne.n	800ad06 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2220      	movs	r2, #32
 800ad3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ad48:	bf00      	nop
 800ad4a:	3754      	adds	r7, #84	@ 0x54
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f7ff fee4 	bl	800ab3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad74:	bf00      	nop
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b21      	cmp	r3, #33	@ 0x21
 800ad8e:	d13e      	bne.n	800ae0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad98:	d114      	bne.n	800adc4 <UART_Transmit_IT+0x48>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d110      	bne.n	800adc4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	881b      	ldrh	r3, [r3, #0]
 800adac:	461a      	mov	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800adb6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a1b      	ldr	r3, [r3, #32]
 800adbc:	1c9a      	adds	r2, r3, #2
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	621a      	str	r2, [r3, #32]
 800adc2:	e008      	b.n	800add6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a1b      	ldr	r3, [r3, #32]
 800adc8:	1c59      	adds	r1, r3, #1
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	6211      	str	r1, [r2, #32]
 800adce:	781a      	ldrb	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800adda:	b29b      	uxth	r3, r3
 800addc:	3b01      	subs	r3, #1
 800adde:	b29b      	uxth	r3, r3
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	4619      	mov	r1, r3
 800ade4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10f      	bne.n	800ae0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68da      	ldr	r2, [r3, #12]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800adf8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	68da      	ldr	r2, [r3, #12]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	e000      	b.n	800ae10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ae0e:	2302      	movs	r3, #2
  }
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68da      	ldr	r2, [r3, #12]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ae32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2220      	movs	r2, #32
 800ae38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff fe73 	bl	800ab28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b08c      	sub	sp, #48	@ 0x30
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	2b22      	cmp	r3, #34	@ 0x22
 800ae5e:	f040 80ae 	bne.w	800afbe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae6a:	d117      	bne.n	800ae9c <UART_Receive_IT+0x50>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	691b      	ldr	r3, [r3, #16]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d113      	bne.n	800ae9c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ae74:	2300      	movs	r3, #0
 800ae76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae94:	1c9a      	adds	r2, r3, #2
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	629a      	str	r2, [r3, #40]	@ 0x28
 800ae9a:	e026      	b.n	800aeea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800aea2:	2300      	movs	r3, #0
 800aea4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aeae:	d007      	beq.n	800aec0 <UART_Receive_IT+0x74>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10a      	bne.n	800aece <UART_Receive_IT+0x82>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d106      	bne.n	800aece <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	b2da      	uxtb	r2, r3
 800aec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeca:	701a      	strb	r2, [r3, #0]
 800aecc:	e008      	b.n	800aee0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aede:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aee4:	1c5a      	adds	r2, r3, #1
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	3b01      	subs	r3, #1
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	4619      	mov	r1, r3
 800aef8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d15d      	bne.n	800afba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68da      	ldr	r2, [r3, #12]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f022 0220 	bic.w	r2, r2, #32
 800af0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68da      	ldr	r2, [r3, #12]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800af1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	695a      	ldr	r2, [r3, #20]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f022 0201 	bic.w	r2, r2, #1
 800af2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2220      	movs	r2, #32
 800af32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af40:	2b01      	cmp	r3, #1
 800af42:	d135      	bne.n	800afb0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	330c      	adds	r3, #12
 800af50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	e853 3f00 	ldrex	r3, [r3]
 800af58:	613b      	str	r3, [r7, #16]
   return(result);
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	f023 0310 	bic.w	r3, r3, #16
 800af60:	627b      	str	r3, [r7, #36]	@ 0x24
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	330c      	adds	r3, #12
 800af68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af6a:	623a      	str	r2, [r7, #32]
 800af6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6e:	69f9      	ldr	r1, [r7, #28]
 800af70:	6a3a      	ldr	r2, [r7, #32]
 800af72:	e841 2300 	strex	r3, r2, [r1]
 800af76:	61bb      	str	r3, [r7, #24]
   return(result);
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1e5      	bne.n	800af4a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f003 0310 	and.w	r3, r3, #16
 800af88:	2b10      	cmp	r3, #16
 800af8a:	d10a      	bne.n	800afa2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af8c:	2300      	movs	r3, #0
 800af8e:	60fb      	str	r3, [r7, #12]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	60fb      	str	r3, [r7, #12]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	60fb      	str	r3, [r7, #12]
 800afa0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7ff fdd1 	bl	800ab50 <HAL_UARTEx_RxEventCallback>
 800afae:	e002      	b.n	800afb6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f7fa f9ab 	bl	800530c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	e002      	b.n	800afc0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	e000      	b.n	800afc0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800afbe:	2302      	movs	r3, #2
  }
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3730      	adds	r7, #48	@ 0x30
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afcc:	b0c0      	sub	sp, #256	@ 0x100
 800afce:	af00      	add	r7, sp, #0
 800afd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800afe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afe4:	68d9      	ldr	r1, [r3, #12]
 800afe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	ea40 0301 	orr.w	r3, r0, r1
 800aff0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aff6:	689a      	ldr	r2, [r3, #8]
 800aff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	431a      	orrs	r2, r3
 800b000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	431a      	orrs	r2, r3
 800b008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b00c:	69db      	ldr	r3, [r3, #28]
 800b00e:	4313      	orrs	r3, r2
 800b010:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b020:	f021 010c 	bic.w	r1, r1, #12
 800b024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b02e:	430b      	orrs	r3, r1
 800b030:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	695b      	ldr	r3, [r3, #20]
 800b03a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b042:	6999      	ldr	r1, [r3, #24]
 800b044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	ea40 0301 	orr.w	r3, r0, r1
 800b04e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	4b8f      	ldr	r3, [pc, #572]	@ (800b294 <UART_SetConfig+0x2cc>)
 800b058:	429a      	cmp	r2, r3
 800b05a:	d005      	beq.n	800b068 <UART_SetConfig+0xa0>
 800b05c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	4b8d      	ldr	r3, [pc, #564]	@ (800b298 <UART_SetConfig+0x2d0>)
 800b064:	429a      	cmp	r2, r3
 800b066:	d104      	bne.n	800b072 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b068:	f7fd fa92 	bl	8008590 <HAL_RCC_GetPCLK2Freq>
 800b06c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b070:	e003      	b.n	800b07a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b072:	f7fd fa79 	bl	8008568 <HAL_RCC_GetPCLK1Freq>
 800b076:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b07a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b07e:	69db      	ldr	r3, [r3, #28]
 800b080:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b084:	f040 810c 	bne.w	800b2a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b08c:	2200      	movs	r2, #0
 800b08e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b092:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b096:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b09a:	4622      	mov	r2, r4
 800b09c:	462b      	mov	r3, r5
 800b09e:	1891      	adds	r1, r2, r2
 800b0a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b0a2:	415b      	adcs	r3, r3
 800b0a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b0a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	eb12 0801 	adds.w	r8, r2, r1
 800b0b0:	4629      	mov	r1, r5
 800b0b2:	eb43 0901 	adc.w	r9, r3, r1
 800b0b6:	f04f 0200 	mov.w	r2, #0
 800b0ba:	f04f 0300 	mov.w	r3, #0
 800b0be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b0c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b0c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b0ca:	4690      	mov	r8, r2
 800b0cc:	4699      	mov	r9, r3
 800b0ce:	4623      	mov	r3, r4
 800b0d0:	eb18 0303 	adds.w	r3, r8, r3
 800b0d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b0d8:	462b      	mov	r3, r5
 800b0da:	eb49 0303 	adc.w	r3, r9, r3
 800b0de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b0e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b0ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b0f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	18db      	adds	r3, r3, r3
 800b0fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	eb42 0303 	adc.w	r3, r2, r3
 800b102:	657b      	str	r3, [r7, #84]	@ 0x54
 800b104:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b108:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b10c:	f7f5 fcf0 	bl	8000af0 <__aeabi_uldivmod>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	4b61      	ldr	r3, [pc, #388]	@ (800b29c <UART_SetConfig+0x2d4>)
 800b116:	fba3 2302 	umull	r2, r3, r3, r2
 800b11a:	095b      	lsrs	r3, r3, #5
 800b11c:	011c      	lsls	r4, r3, #4
 800b11e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b122:	2200      	movs	r2, #0
 800b124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b128:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b12c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b130:	4642      	mov	r2, r8
 800b132:	464b      	mov	r3, r9
 800b134:	1891      	adds	r1, r2, r2
 800b136:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b138:	415b      	adcs	r3, r3
 800b13a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b13c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b140:	4641      	mov	r1, r8
 800b142:	eb12 0a01 	adds.w	sl, r2, r1
 800b146:	4649      	mov	r1, r9
 800b148:	eb43 0b01 	adc.w	fp, r3, r1
 800b14c:	f04f 0200 	mov.w	r2, #0
 800b150:	f04f 0300 	mov.w	r3, #0
 800b154:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b158:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b15c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b160:	4692      	mov	sl, r2
 800b162:	469b      	mov	fp, r3
 800b164:	4643      	mov	r3, r8
 800b166:	eb1a 0303 	adds.w	r3, sl, r3
 800b16a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b16e:	464b      	mov	r3, r9
 800b170:	eb4b 0303 	adc.w	r3, fp, r3
 800b174:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b184:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b188:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b18c:	460b      	mov	r3, r1
 800b18e:	18db      	adds	r3, r3, r3
 800b190:	643b      	str	r3, [r7, #64]	@ 0x40
 800b192:	4613      	mov	r3, r2
 800b194:	eb42 0303 	adc.w	r3, r2, r3
 800b198:	647b      	str	r3, [r7, #68]	@ 0x44
 800b19a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b19e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b1a2:	f7f5 fca5 	bl	8000af0 <__aeabi_uldivmod>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4611      	mov	r1, r2
 800b1ac:	4b3b      	ldr	r3, [pc, #236]	@ (800b29c <UART_SetConfig+0x2d4>)
 800b1ae:	fba3 2301 	umull	r2, r3, r3, r1
 800b1b2:	095b      	lsrs	r3, r3, #5
 800b1b4:	2264      	movs	r2, #100	@ 0x64
 800b1b6:	fb02 f303 	mul.w	r3, r2, r3
 800b1ba:	1acb      	subs	r3, r1, r3
 800b1bc:	00db      	lsls	r3, r3, #3
 800b1be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b1c2:	4b36      	ldr	r3, [pc, #216]	@ (800b29c <UART_SetConfig+0x2d4>)
 800b1c4:	fba3 2302 	umull	r2, r3, r3, r2
 800b1c8:	095b      	lsrs	r3, r3, #5
 800b1ca:	005b      	lsls	r3, r3, #1
 800b1cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b1d0:	441c      	add	r4, r3
 800b1d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b1dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b1e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b1e4:	4642      	mov	r2, r8
 800b1e6:	464b      	mov	r3, r9
 800b1e8:	1891      	adds	r1, r2, r2
 800b1ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b1ec:	415b      	adcs	r3, r3
 800b1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b1f4:	4641      	mov	r1, r8
 800b1f6:	1851      	adds	r1, r2, r1
 800b1f8:	6339      	str	r1, [r7, #48]	@ 0x30
 800b1fa:	4649      	mov	r1, r9
 800b1fc:	414b      	adcs	r3, r1
 800b1fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b200:	f04f 0200 	mov.w	r2, #0
 800b204:	f04f 0300 	mov.w	r3, #0
 800b208:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b20c:	4659      	mov	r1, fp
 800b20e:	00cb      	lsls	r3, r1, #3
 800b210:	4651      	mov	r1, sl
 800b212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b216:	4651      	mov	r1, sl
 800b218:	00ca      	lsls	r2, r1, #3
 800b21a:	4610      	mov	r0, r2
 800b21c:	4619      	mov	r1, r3
 800b21e:	4603      	mov	r3, r0
 800b220:	4642      	mov	r2, r8
 800b222:	189b      	adds	r3, r3, r2
 800b224:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b228:	464b      	mov	r3, r9
 800b22a:	460a      	mov	r2, r1
 800b22c:	eb42 0303 	adc.w	r3, r2, r3
 800b230:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b240:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b244:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b248:	460b      	mov	r3, r1
 800b24a:	18db      	adds	r3, r3, r3
 800b24c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b24e:	4613      	mov	r3, r2
 800b250:	eb42 0303 	adc.w	r3, r2, r3
 800b254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b25a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b25e:	f7f5 fc47 	bl	8000af0 <__aeabi_uldivmod>
 800b262:	4602      	mov	r2, r0
 800b264:	460b      	mov	r3, r1
 800b266:	4b0d      	ldr	r3, [pc, #52]	@ (800b29c <UART_SetConfig+0x2d4>)
 800b268:	fba3 1302 	umull	r1, r3, r3, r2
 800b26c:	095b      	lsrs	r3, r3, #5
 800b26e:	2164      	movs	r1, #100	@ 0x64
 800b270:	fb01 f303 	mul.w	r3, r1, r3
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	00db      	lsls	r3, r3, #3
 800b278:	3332      	adds	r3, #50	@ 0x32
 800b27a:	4a08      	ldr	r2, [pc, #32]	@ (800b29c <UART_SetConfig+0x2d4>)
 800b27c:	fba2 2303 	umull	r2, r3, r2, r3
 800b280:	095b      	lsrs	r3, r3, #5
 800b282:	f003 0207 	and.w	r2, r3, #7
 800b286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4422      	add	r2, r4
 800b28e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b290:	e106      	b.n	800b4a0 <UART_SetConfig+0x4d8>
 800b292:	bf00      	nop
 800b294:	40011000 	.word	0x40011000
 800b298:	40011400 	.word	0x40011400
 800b29c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b2a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b2aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b2ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b2b2:	4642      	mov	r2, r8
 800b2b4:	464b      	mov	r3, r9
 800b2b6:	1891      	adds	r1, r2, r2
 800b2b8:	6239      	str	r1, [r7, #32]
 800b2ba:	415b      	adcs	r3, r3
 800b2bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b2c2:	4641      	mov	r1, r8
 800b2c4:	1854      	adds	r4, r2, r1
 800b2c6:	4649      	mov	r1, r9
 800b2c8:	eb43 0501 	adc.w	r5, r3, r1
 800b2cc:	f04f 0200 	mov.w	r2, #0
 800b2d0:	f04f 0300 	mov.w	r3, #0
 800b2d4:	00eb      	lsls	r3, r5, #3
 800b2d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b2da:	00e2      	lsls	r2, r4, #3
 800b2dc:	4614      	mov	r4, r2
 800b2de:	461d      	mov	r5, r3
 800b2e0:	4643      	mov	r3, r8
 800b2e2:	18e3      	adds	r3, r4, r3
 800b2e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b2e8:	464b      	mov	r3, r9
 800b2ea:	eb45 0303 	adc.w	r3, r5, r3
 800b2ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b2f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b2fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b302:	f04f 0200 	mov.w	r2, #0
 800b306:	f04f 0300 	mov.w	r3, #0
 800b30a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b30e:	4629      	mov	r1, r5
 800b310:	008b      	lsls	r3, r1, #2
 800b312:	4621      	mov	r1, r4
 800b314:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b318:	4621      	mov	r1, r4
 800b31a:	008a      	lsls	r2, r1, #2
 800b31c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b320:	f7f5 fbe6 	bl	8000af0 <__aeabi_uldivmod>
 800b324:	4602      	mov	r2, r0
 800b326:	460b      	mov	r3, r1
 800b328:	4b60      	ldr	r3, [pc, #384]	@ (800b4ac <UART_SetConfig+0x4e4>)
 800b32a:	fba3 2302 	umull	r2, r3, r3, r2
 800b32e:	095b      	lsrs	r3, r3, #5
 800b330:	011c      	lsls	r4, r3, #4
 800b332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b336:	2200      	movs	r2, #0
 800b338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b33c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b340:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b344:	4642      	mov	r2, r8
 800b346:	464b      	mov	r3, r9
 800b348:	1891      	adds	r1, r2, r2
 800b34a:	61b9      	str	r1, [r7, #24]
 800b34c:	415b      	adcs	r3, r3
 800b34e:	61fb      	str	r3, [r7, #28]
 800b350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b354:	4641      	mov	r1, r8
 800b356:	1851      	adds	r1, r2, r1
 800b358:	6139      	str	r1, [r7, #16]
 800b35a:	4649      	mov	r1, r9
 800b35c:	414b      	adcs	r3, r1
 800b35e:	617b      	str	r3, [r7, #20]
 800b360:	f04f 0200 	mov.w	r2, #0
 800b364:	f04f 0300 	mov.w	r3, #0
 800b368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b36c:	4659      	mov	r1, fp
 800b36e:	00cb      	lsls	r3, r1, #3
 800b370:	4651      	mov	r1, sl
 800b372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b376:	4651      	mov	r1, sl
 800b378:	00ca      	lsls	r2, r1, #3
 800b37a:	4610      	mov	r0, r2
 800b37c:	4619      	mov	r1, r3
 800b37e:	4603      	mov	r3, r0
 800b380:	4642      	mov	r2, r8
 800b382:	189b      	adds	r3, r3, r2
 800b384:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b388:	464b      	mov	r3, r9
 800b38a:	460a      	mov	r2, r1
 800b38c:	eb42 0303 	adc.w	r3, r2, r3
 800b390:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b39e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b3a0:	f04f 0200 	mov.w	r2, #0
 800b3a4:	f04f 0300 	mov.w	r3, #0
 800b3a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	008b      	lsls	r3, r1, #2
 800b3b0:	4641      	mov	r1, r8
 800b3b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3b6:	4641      	mov	r1, r8
 800b3b8:	008a      	lsls	r2, r1, #2
 800b3ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b3be:	f7f5 fb97 	bl	8000af0 <__aeabi_uldivmod>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	4611      	mov	r1, r2
 800b3c8:	4b38      	ldr	r3, [pc, #224]	@ (800b4ac <UART_SetConfig+0x4e4>)
 800b3ca:	fba3 2301 	umull	r2, r3, r3, r1
 800b3ce:	095b      	lsrs	r3, r3, #5
 800b3d0:	2264      	movs	r2, #100	@ 0x64
 800b3d2:	fb02 f303 	mul.w	r3, r2, r3
 800b3d6:	1acb      	subs	r3, r1, r3
 800b3d8:	011b      	lsls	r3, r3, #4
 800b3da:	3332      	adds	r3, #50	@ 0x32
 800b3dc:	4a33      	ldr	r2, [pc, #204]	@ (800b4ac <UART_SetConfig+0x4e4>)
 800b3de:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e2:	095b      	lsrs	r3, r3, #5
 800b3e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b3e8:	441c      	add	r4, r3
 800b3ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	673b      	str	r3, [r7, #112]	@ 0x70
 800b3f2:	677a      	str	r2, [r7, #116]	@ 0x74
 800b3f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	464b      	mov	r3, r9
 800b3fc:	1891      	adds	r1, r2, r2
 800b3fe:	60b9      	str	r1, [r7, #8]
 800b400:	415b      	adcs	r3, r3
 800b402:	60fb      	str	r3, [r7, #12]
 800b404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b408:	4641      	mov	r1, r8
 800b40a:	1851      	adds	r1, r2, r1
 800b40c:	6039      	str	r1, [r7, #0]
 800b40e:	4649      	mov	r1, r9
 800b410:	414b      	adcs	r3, r1
 800b412:	607b      	str	r3, [r7, #4]
 800b414:	f04f 0200 	mov.w	r2, #0
 800b418:	f04f 0300 	mov.w	r3, #0
 800b41c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b420:	4659      	mov	r1, fp
 800b422:	00cb      	lsls	r3, r1, #3
 800b424:	4651      	mov	r1, sl
 800b426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b42a:	4651      	mov	r1, sl
 800b42c:	00ca      	lsls	r2, r1, #3
 800b42e:	4610      	mov	r0, r2
 800b430:	4619      	mov	r1, r3
 800b432:	4603      	mov	r3, r0
 800b434:	4642      	mov	r2, r8
 800b436:	189b      	adds	r3, r3, r2
 800b438:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b43a:	464b      	mov	r3, r9
 800b43c:	460a      	mov	r2, r1
 800b43e:	eb42 0303 	adc.w	r3, r2, r3
 800b442:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b44e:	667a      	str	r2, [r7, #100]	@ 0x64
 800b450:	f04f 0200 	mov.w	r2, #0
 800b454:	f04f 0300 	mov.w	r3, #0
 800b458:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b45c:	4649      	mov	r1, r9
 800b45e:	008b      	lsls	r3, r1, #2
 800b460:	4641      	mov	r1, r8
 800b462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b466:	4641      	mov	r1, r8
 800b468:	008a      	lsls	r2, r1, #2
 800b46a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b46e:	f7f5 fb3f 	bl	8000af0 <__aeabi_uldivmod>
 800b472:	4602      	mov	r2, r0
 800b474:	460b      	mov	r3, r1
 800b476:	4b0d      	ldr	r3, [pc, #52]	@ (800b4ac <UART_SetConfig+0x4e4>)
 800b478:	fba3 1302 	umull	r1, r3, r3, r2
 800b47c:	095b      	lsrs	r3, r3, #5
 800b47e:	2164      	movs	r1, #100	@ 0x64
 800b480:	fb01 f303 	mul.w	r3, r1, r3
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	011b      	lsls	r3, r3, #4
 800b488:	3332      	adds	r3, #50	@ 0x32
 800b48a:	4a08      	ldr	r2, [pc, #32]	@ (800b4ac <UART_SetConfig+0x4e4>)
 800b48c:	fba2 2303 	umull	r2, r3, r2, r3
 800b490:	095b      	lsrs	r3, r3, #5
 800b492:	f003 020f 	and.w	r2, r3, #15
 800b496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4422      	add	r2, r4
 800b49e:	609a      	str	r2, [r3, #8]
}
 800b4a0:	bf00      	nop
 800b4a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4ac:	51eb851f 	.word	0x51eb851f

0800b4b0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b087      	sub	sp, #28
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	6812      	ldr	r2, [r2, #0]
 800b4c8:	f023 0101 	bic.w	r1, r3, #1
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	2b08      	cmp	r3, #8
 800b4d8:	d102      	bne.n	800b4e0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b4da:	2340      	movs	r3, #64	@ 0x40
 800b4dc:	617b      	str	r3, [r7, #20]
 800b4de:	e001      	b.n	800b4e4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800b4f0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800b4f6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800b4fc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800b502:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800b508:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800b50e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 800b514:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800b51a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 800b520:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800b526:	4313      	orrs	r3, r2
 800b528:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	699b      	ldr	r3, [r3, #24]
 800b52e:	693a      	ldr	r2, [r7, #16]
 800b530:	4313      	orrs	r3, r2
 800b532:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b538:	693a      	ldr	r2, [r7, #16]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800b53e:	4b10      	ldr	r3, [pc, #64]	@ (800b580 <FSMC_NORSRAM_Init+0xd0>)
 800b540:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b548:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800b550:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	43db      	mvns	r3, r3
 800b560:	ea02 0103 	and.w	r1, r2, r3
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	4319      	orrs	r1, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	371c      	adds	r7, #28
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr
 800b580:	0008fb7f 	.word	0x0008fb7f

0800b584 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	1c5a      	adds	r2, r3, #1
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b59a:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	011b      	lsls	r3, r3, #4
 800b5a8:	431a      	orrs	r2, r3
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	021b      	lsls	r3, r3, #8
 800b5b0:	431a      	orrs	r2, r3
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	041b      	lsls	r3, r3, #16
 800b5b8:	431a      	orrs	r2, r3
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	051b      	lsls	r3, r3, #20
 800b5c2:	431a      	orrs	r2, r3
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	695b      	ldr	r3, [r3, #20]
 800b5c8:	3b02      	subs	r3, #2
 800b5ca:	061b      	lsls	r3, r3, #24
 800b5cc:	431a      	orrs	r2, r3
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	3201      	adds	r2, #1
 800b5d8:	4319      	orrs	r1, r3
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3714      	adds	r7, #20
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr
	...

0800b5f0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
 800b5fc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b604:	d11d      	bne.n	800b642 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b60e:	4b13      	ldr	r3, [pc, #76]	@ (800b65c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800b610:	4013      	ands	r3, r2
 800b612:	68ba      	ldr	r2, [r7, #8]
 800b614:	6811      	ldr	r1, [r2, #0]
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	6852      	ldr	r2, [r2, #4]
 800b61a:	0112      	lsls	r2, r2, #4
 800b61c:	4311      	orrs	r1, r2
 800b61e:	68ba      	ldr	r2, [r7, #8]
 800b620:	6892      	ldr	r2, [r2, #8]
 800b622:	0212      	lsls	r2, r2, #8
 800b624:	4311      	orrs	r1, r2
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	6992      	ldr	r2, [r2, #24]
 800b62a:	4311      	orrs	r1, r2
 800b62c:	68ba      	ldr	r2, [r7, #8]
 800b62e:	68d2      	ldr	r2, [r2, #12]
 800b630:	0412      	lsls	r2, r2, #16
 800b632:	430a      	orrs	r2, r1
 800b634:	ea43 0102 	orr.w	r1, r3, r2
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b640:	e005      	b.n	800b64e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800b64a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3714      	adds	r7, #20
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	cff00000 	.word	0xcff00000

0800b660 <memset>:
 800b660:	4402      	add	r2, r0
 800b662:	4603      	mov	r3, r0
 800b664:	4293      	cmp	r3, r2
 800b666:	d100      	bne.n	800b66a <memset+0xa>
 800b668:	4770      	bx	lr
 800b66a:	f803 1b01 	strb.w	r1, [r3], #1
 800b66e:	e7f9      	b.n	800b664 <memset+0x4>

0800b670 <__errno>:
 800b670:	4b01      	ldr	r3, [pc, #4]	@ (800b678 <__errno+0x8>)
 800b672:	6818      	ldr	r0, [r3, #0]
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	20000260 	.word	0x20000260

0800b67c <__libc_init_array>:
 800b67c:	b570      	push	{r4, r5, r6, lr}
 800b67e:	4d0d      	ldr	r5, [pc, #52]	@ (800b6b4 <__libc_init_array+0x38>)
 800b680:	4c0d      	ldr	r4, [pc, #52]	@ (800b6b8 <__libc_init_array+0x3c>)
 800b682:	1b64      	subs	r4, r4, r5
 800b684:	10a4      	asrs	r4, r4, #2
 800b686:	2600      	movs	r6, #0
 800b688:	42a6      	cmp	r6, r4
 800b68a:	d109      	bne.n	800b6a0 <__libc_init_array+0x24>
 800b68c:	4d0b      	ldr	r5, [pc, #44]	@ (800b6bc <__libc_init_array+0x40>)
 800b68e:	4c0c      	ldr	r4, [pc, #48]	@ (800b6c0 <__libc_init_array+0x44>)
 800b690:	f000 f91e 	bl	800b8d0 <_init>
 800b694:	1b64      	subs	r4, r4, r5
 800b696:	10a4      	asrs	r4, r4, #2
 800b698:	2600      	movs	r6, #0
 800b69a:	42a6      	cmp	r6, r4
 800b69c:	d105      	bne.n	800b6aa <__libc_init_array+0x2e>
 800b69e:	bd70      	pop	{r4, r5, r6, pc}
 800b6a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6a4:	4798      	blx	r3
 800b6a6:	3601      	adds	r6, #1
 800b6a8:	e7ee      	b.n	800b688 <__libc_init_array+0xc>
 800b6aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ae:	4798      	blx	r3
 800b6b0:	3601      	adds	r6, #1
 800b6b2:	e7f2      	b.n	800b69a <__libc_init_array+0x1e>
 800b6b4:	0800fd80 	.word	0x0800fd80
 800b6b8:	0800fd80 	.word	0x0800fd80
 800b6bc:	0800fd80 	.word	0x0800fd80
 800b6c0:	0800fd84 	.word	0x0800fd84

0800b6c4 <sqrt>:
 800b6c4:	b538      	push	{r3, r4, r5, lr}
 800b6c6:	ed2d 8b02 	vpush	{d8}
 800b6ca:	ec55 4b10 	vmov	r4, r5, d0
 800b6ce:	f000 f825 	bl	800b71c <__ieee754_sqrt>
 800b6d2:	4622      	mov	r2, r4
 800b6d4:	462b      	mov	r3, r5
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	4629      	mov	r1, r5
 800b6da:	eeb0 8a40 	vmov.f32	s16, s0
 800b6de:	eef0 8a60 	vmov.f32	s17, s1
 800b6e2:	f7f5 f9cf 	bl	8000a84 <__aeabi_dcmpun>
 800b6e6:	b990      	cbnz	r0, 800b70e <sqrt+0x4a>
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	f7f5 f9a0 	bl	8000a34 <__aeabi_dcmplt>
 800b6f4:	b158      	cbz	r0, 800b70e <sqrt+0x4a>
 800b6f6:	f7ff ffbb 	bl	800b670 <__errno>
 800b6fa:	2321      	movs	r3, #33	@ 0x21
 800b6fc:	6003      	str	r3, [r0, #0]
 800b6fe:	2200      	movs	r2, #0
 800b700:	2300      	movs	r3, #0
 800b702:	4610      	mov	r0, r2
 800b704:	4619      	mov	r1, r3
 800b706:	f7f5 f84d 	bl	80007a4 <__aeabi_ddiv>
 800b70a:	ec41 0b18 	vmov	d8, r0, r1
 800b70e:	eeb0 0a48 	vmov.f32	s0, s16
 800b712:	eef0 0a68 	vmov.f32	s1, s17
 800b716:	ecbd 8b02 	vpop	{d8}
 800b71a:	bd38      	pop	{r3, r4, r5, pc}

0800b71c <__ieee754_sqrt>:
 800b71c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b720:	4a68      	ldr	r2, [pc, #416]	@ (800b8c4 <__ieee754_sqrt+0x1a8>)
 800b722:	ec55 4b10 	vmov	r4, r5, d0
 800b726:	43aa      	bics	r2, r5
 800b728:	462b      	mov	r3, r5
 800b72a:	4621      	mov	r1, r4
 800b72c:	d110      	bne.n	800b750 <__ieee754_sqrt+0x34>
 800b72e:	4622      	mov	r2, r4
 800b730:	4620      	mov	r0, r4
 800b732:	4629      	mov	r1, r5
 800b734:	f7f4 ff0c 	bl	8000550 <__aeabi_dmul>
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	4620      	mov	r0, r4
 800b73e:	4629      	mov	r1, r5
 800b740:	f7f4 fd50 	bl	80001e4 <__adddf3>
 800b744:	4604      	mov	r4, r0
 800b746:	460d      	mov	r5, r1
 800b748:	ec45 4b10 	vmov	d0, r4, r5
 800b74c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b750:	2d00      	cmp	r5, #0
 800b752:	dc0e      	bgt.n	800b772 <__ieee754_sqrt+0x56>
 800b754:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b758:	4322      	orrs	r2, r4
 800b75a:	d0f5      	beq.n	800b748 <__ieee754_sqrt+0x2c>
 800b75c:	b19d      	cbz	r5, 800b786 <__ieee754_sqrt+0x6a>
 800b75e:	4622      	mov	r2, r4
 800b760:	4620      	mov	r0, r4
 800b762:	4629      	mov	r1, r5
 800b764:	f7f4 fd3c 	bl	80001e0 <__aeabi_dsub>
 800b768:	4602      	mov	r2, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	f7f5 f81a 	bl	80007a4 <__aeabi_ddiv>
 800b770:	e7e8      	b.n	800b744 <__ieee754_sqrt+0x28>
 800b772:	152a      	asrs	r2, r5, #20
 800b774:	d115      	bne.n	800b7a2 <__ieee754_sqrt+0x86>
 800b776:	2000      	movs	r0, #0
 800b778:	e009      	b.n	800b78e <__ieee754_sqrt+0x72>
 800b77a:	0acb      	lsrs	r3, r1, #11
 800b77c:	3a15      	subs	r2, #21
 800b77e:	0549      	lsls	r1, r1, #21
 800b780:	2b00      	cmp	r3, #0
 800b782:	d0fa      	beq.n	800b77a <__ieee754_sqrt+0x5e>
 800b784:	e7f7      	b.n	800b776 <__ieee754_sqrt+0x5a>
 800b786:	462a      	mov	r2, r5
 800b788:	e7fa      	b.n	800b780 <__ieee754_sqrt+0x64>
 800b78a:	005b      	lsls	r3, r3, #1
 800b78c:	3001      	adds	r0, #1
 800b78e:	02dc      	lsls	r4, r3, #11
 800b790:	d5fb      	bpl.n	800b78a <__ieee754_sqrt+0x6e>
 800b792:	1e44      	subs	r4, r0, #1
 800b794:	1b12      	subs	r2, r2, r4
 800b796:	f1c0 0420 	rsb	r4, r0, #32
 800b79a:	fa21 f404 	lsr.w	r4, r1, r4
 800b79e:	4323      	orrs	r3, r4
 800b7a0:	4081      	lsls	r1, r0
 800b7a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7a6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b7aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b7ae:	07d2      	lsls	r2, r2, #31
 800b7b0:	bf5c      	itt	pl
 800b7b2:	005b      	lslpl	r3, r3, #1
 800b7b4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b7b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b7bc:	bf58      	it	pl
 800b7be:	0049      	lslpl	r1, r1, #1
 800b7c0:	2600      	movs	r6, #0
 800b7c2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b7c6:	106d      	asrs	r5, r5, #1
 800b7c8:	0049      	lsls	r1, r1, #1
 800b7ca:	2016      	movs	r0, #22
 800b7cc:	4632      	mov	r2, r6
 800b7ce:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b7d2:	1917      	adds	r7, r2, r4
 800b7d4:	429f      	cmp	r7, r3
 800b7d6:	bfde      	ittt	le
 800b7d8:	193a      	addle	r2, r7, r4
 800b7da:	1bdb      	suble	r3, r3, r7
 800b7dc:	1936      	addle	r6, r6, r4
 800b7de:	0fcf      	lsrs	r7, r1, #31
 800b7e0:	3801      	subs	r0, #1
 800b7e2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b7e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b7ea:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b7ee:	d1f0      	bne.n	800b7d2 <__ieee754_sqrt+0xb6>
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	2720      	movs	r7, #32
 800b7f4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	eb00 0e0c 	add.w	lr, r0, ip
 800b7fe:	db02      	blt.n	800b806 <__ieee754_sqrt+0xea>
 800b800:	d113      	bne.n	800b82a <__ieee754_sqrt+0x10e>
 800b802:	458e      	cmp	lr, r1
 800b804:	d811      	bhi.n	800b82a <__ieee754_sqrt+0x10e>
 800b806:	f1be 0f00 	cmp.w	lr, #0
 800b80a:	eb0e 000c 	add.w	r0, lr, ip
 800b80e:	da42      	bge.n	800b896 <__ieee754_sqrt+0x17a>
 800b810:	2800      	cmp	r0, #0
 800b812:	db40      	blt.n	800b896 <__ieee754_sqrt+0x17a>
 800b814:	f102 0801 	add.w	r8, r2, #1
 800b818:	1a9b      	subs	r3, r3, r2
 800b81a:	458e      	cmp	lr, r1
 800b81c:	bf88      	it	hi
 800b81e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b822:	eba1 010e 	sub.w	r1, r1, lr
 800b826:	4464      	add	r4, ip
 800b828:	4642      	mov	r2, r8
 800b82a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b82e:	3f01      	subs	r7, #1
 800b830:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b834:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b838:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b83c:	d1dc      	bne.n	800b7f8 <__ieee754_sqrt+0xdc>
 800b83e:	4319      	orrs	r1, r3
 800b840:	d01b      	beq.n	800b87a <__ieee754_sqrt+0x15e>
 800b842:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b8c8 <__ieee754_sqrt+0x1ac>
 800b846:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b8cc <__ieee754_sqrt+0x1b0>
 800b84a:	e9da 0100 	ldrd	r0, r1, [sl]
 800b84e:	e9db 2300 	ldrd	r2, r3, [fp]
 800b852:	f7f4 fcc5 	bl	80001e0 <__aeabi_dsub>
 800b856:	e9da 8900 	ldrd	r8, r9, [sl]
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	4640      	mov	r0, r8
 800b860:	4649      	mov	r1, r9
 800b862:	f7f5 f8f1 	bl	8000a48 <__aeabi_dcmple>
 800b866:	b140      	cbz	r0, 800b87a <__ieee754_sqrt+0x15e>
 800b868:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b86c:	e9da 0100 	ldrd	r0, r1, [sl]
 800b870:	e9db 2300 	ldrd	r2, r3, [fp]
 800b874:	d111      	bne.n	800b89a <__ieee754_sqrt+0x17e>
 800b876:	3601      	adds	r6, #1
 800b878:	463c      	mov	r4, r7
 800b87a:	1072      	asrs	r2, r6, #1
 800b87c:	0863      	lsrs	r3, r4, #1
 800b87e:	07f1      	lsls	r1, r6, #31
 800b880:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b884:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b888:	bf48      	it	mi
 800b88a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b88e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b892:	4618      	mov	r0, r3
 800b894:	e756      	b.n	800b744 <__ieee754_sqrt+0x28>
 800b896:	4690      	mov	r8, r2
 800b898:	e7be      	b.n	800b818 <__ieee754_sqrt+0xfc>
 800b89a:	f7f4 fca3 	bl	80001e4 <__adddf3>
 800b89e:	e9da 8900 	ldrd	r8, r9, [sl]
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	4640      	mov	r0, r8
 800b8a8:	4649      	mov	r1, r9
 800b8aa:	f7f5 f8c3 	bl	8000a34 <__aeabi_dcmplt>
 800b8ae:	b120      	cbz	r0, 800b8ba <__ieee754_sqrt+0x19e>
 800b8b0:	1ca0      	adds	r0, r4, #2
 800b8b2:	bf08      	it	eq
 800b8b4:	3601      	addeq	r6, #1
 800b8b6:	3402      	adds	r4, #2
 800b8b8:	e7df      	b.n	800b87a <__ieee754_sqrt+0x15e>
 800b8ba:	1c63      	adds	r3, r4, #1
 800b8bc:	f023 0401 	bic.w	r4, r3, #1
 800b8c0:	e7db      	b.n	800b87a <__ieee754_sqrt+0x15e>
 800b8c2:	bf00      	nop
 800b8c4:	7ff00000 	.word	0x7ff00000
 800b8c8:	200002b8 	.word	0x200002b8
 800b8cc:	200002b0 	.word	0x200002b0

0800b8d0 <_init>:
 800b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d2:	bf00      	nop
 800b8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8d6:	bc08      	pop	{r3}
 800b8d8:	469e      	mov	lr, r3
 800b8da:	4770      	bx	lr

0800b8dc <_fini>:
 800b8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8de:	bf00      	nop
 800b8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8e2:	bc08      	pop	{r3}
 800b8e4:	469e      	mov	lr, r3
 800b8e6:	4770      	bx	lr
