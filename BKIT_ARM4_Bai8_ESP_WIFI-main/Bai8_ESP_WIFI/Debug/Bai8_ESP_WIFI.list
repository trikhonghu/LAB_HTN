
Bai8_ESP_WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030ac  0800a554  0800a554  0000b554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d600  0800d600  0000f06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d600  0800d600  0000e600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d608  0800d608  0000f06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d608  0800d608  0000e608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d60c  0800d60c  0000e60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800d610  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f06c  2**0
                  CONTENTS
 10 .bss          00000608  2000006c  2000006c  0000f06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000674  20000674  0000f06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a8e4  00000000  00000000  0000f09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047d6  00000000  00000000  00029980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c8  00000000  00000000  0002e158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000125a  00000000  00000000  0002f920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c78  00000000  00000000  00030b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002216f  00000000  00000000  000577f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0826  00000000  00000000  00079961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015a187  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000675c  00000000  00000000  0015a1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00160928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a53c 	.word	0x0800a53c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800a53c 	.word	0x0800a53c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b96a 	b.w	8000ea8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14e      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	458c      	cmp	ip, r1
 8000bfc:	4686      	mov	lr, r0
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	d962      	bls.n	8000cca <__udivmoddi4+0xde>
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	4091      	lsls	r1, r2
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c14:	4319      	orrs	r1, r3
 8000c16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1e:	fa1f f68c 	uxth.w	r6, ip
 8000c22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c32:	fb04 f106 	mul.w	r1, r4, r6
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c42:	f080 8112 	bcs.w	8000e6a <__udivmoddi4+0x27e>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 810f 	bls.w	8000e6a <__udivmoddi4+0x27e>
 8000c4c:	3c02      	subs	r4, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb00 f606 	mul.w	r6, r0, r6
 8000c66:	429e      	cmp	r6, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x94>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c72:	f080 80fc 	bcs.w	8000e6e <__udivmoddi4+0x282>
 8000c76:	429e      	cmp	r6, r3
 8000c78:	f240 80f9 	bls.w	8000e6e <__udivmoddi4+0x282>
 8000c7c:	4463      	add	r3, ip
 8000c7e:	3802      	subs	r0, #2
 8000c80:	1b9b      	subs	r3, r3, r6
 8000c82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c86:	2100      	movs	r1, #0
 8000c88:	b11d      	cbz	r5, 8000c92 <__udivmoddi4+0xa6>
 8000c8a:	40d3      	lsrs	r3, r2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d905      	bls.n	8000ca6 <__udivmoddi4+0xba>
 8000c9a:	b10d      	cbz	r5, 8000ca0 <__udivmoddi4+0xb4>
 8000c9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e7f5      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000ca6:	fab3 f183 	clz	r1, r3
 8000caa:	2900      	cmp	r1, #0
 8000cac:	d146      	bne.n	8000d3c <__udivmoddi4+0x150>
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xcc>
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	f0c0 80f0 	bcc.w	8000e98 <__udivmoddi4+0x2ac>
 8000cb8:	1a86      	subs	r6, r0, r2
 8000cba:	eb64 0303 	sbc.w	r3, r4, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	d0e6      	beq.n	8000c92 <__udivmoddi4+0xa6>
 8000cc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc8:	e7e3      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	f040 8090 	bne.w	8000df0 <__udivmoddi4+0x204>
 8000cd0:	eba1 040c 	sub.w	r4, r1, ip
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa1f f78c 	uxth.w	r7, ip
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb07 f006 	mul.w	r0, r7, r6
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x11c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x11a>
 8000d00:	4298      	cmp	r0, r3
 8000d02:	f200 80cd 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d06:	4626      	mov	r6, r4
 8000d08:	1a1c      	subs	r4, r3, r0
 8000d0a:	fa1f f38e 	uxth.w	r3, lr
 8000d0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d12:	fb08 4410 	mls	r4, r8, r0, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb00 f707 	mul.w	r7, r0, r7
 8000d1e:	429f      	cmp	r7, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x148>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x146>
 8000d2c:	429f      	cmp	r7, r3
 8000d2e:	f200 80b0 	bhi.w	8000e92 <__udivmoddi4+0x2a6>
 8000d32:	4620      	mov	r0, r4
 8000d34:	1bdb      	subs	r3, r3, r7
 8000d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0x9c>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 f706 	lsr.w	r7, r2, r6
 8000d46:	431f      	orrs	r7, r3
 8000d48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d50:	ea43 030c 	orr.w	r3, r3, ip
 8000d54:	40f4      	lsrs	r4, r6
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d60:	fbb4 fef0 	udiv	lr, r4, r0
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fb00 441e 	mls	r4, r0, lr, r4
 8000d6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d70:	fb0e f90c 	mul.w	r9, lr, ip
 8000d74:	45a1      	cmp	r9, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	d90a      	bls.n	8000d92 <__udivmoddi4+0x1a6>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d82:	f080 8084 	bcs.w	8000e8e <__udivmoddi4+0x2a2>
 8000d86:	45a1      	cmp	r9, r4
 8000d88:	f240 8081 	bls.w	8000e8e <__udivmoddi4+0x2a2>
 8000d8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	eba4 0409 	sub.w	r4, r4, r9
 8000d96:	fa1f f983 	uxth.w	r9, r3
 8000d9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000da2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x1d2>
 8000dae:	193c      	adds	r4, r7, r4
 8000db0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db4:	d267      	bcs.n	8000e86 <__udivmoddi4+0x29a>
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d965      	bls.n	8000e86 <__udivmoddi4+0x29a>
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc6:	eba4 040c 	sub.w	r4, r4, ip
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	46ce      	mov	lr, r9
 8000dce:	469c      	mov	ip, r3
 8000dd0:	d351      	bcc.n	8000e76 <__udivmoddi4+0x28a>
 8000dd2:	d04e      	beq.n	8000e72 <__udivmoddi4+0x286>
 8000dd4:	b155      	cbz	r5, 8000dec <__udivmoddi4+0x200>
 8000dd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dda:	eb64 040c 	sbc.w	r4, r4, ip
 8000dde:	fa04 f606 	lsl.w	r6, r4, r6
 8000de2:	40cb      	lsrs	r3, r1
 8000de4:	431e      	orrs	r6, r3
 8000de6:	40cc      	lsrs	r4, r1
 8000de8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	e750      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000e00:	4094      	lsls	r4, r2
 8000e02:	430c      	orrs	r4, r1
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e0c:	fa1f f78c 	uxth.w	r7, ip
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3110 	mls	r1, r8, r0, r3
 8000e18:	0c23      	lsrs	r3, r4, #16
 8000e1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1e:	fb00 f107 	mul.w	r1, r0, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x24c>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2e:	d22c      	bcs.n	8000e8a <__udivmoddi4+0x29e>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	d92a      	bls.n	8000e8a <__udivmoddi4+0x29e>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e40:	fb08 3311 	mls	r3, r8, r1, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb01 f307 	mul.w	r3, r1, r7
 8000e4c:	42a3      	cmp	r3, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x276>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e58:	d213      	bcs.n	8000e82 <__udivmoddi4+0x296>
 8000e5a:	42a3      	cmp	r3, r4
 8000e5c:	d911      	bls.n	8000e82 <__udivmoddi4+0x296>
 8000e5e:	3902      	subs	r1, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	1ae4      	subs	r4, r4, r3
 8000e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e68:	e739      	b.n	8000cde <__udivmoddi4+0xf2>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	e6f0      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e706      	b.n	8000c80 <__udivmoddi4+0x94>
 8000e72:	45c8      	cmp	r8, r9
 8000e74:	d2ae      	bcs.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7e:	3801      	subs	r0, #1
 8000e80:	e7a8      	b.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e82:	4631      	mov	r1, r6
 8000e84:	e7ed      	b.n	8000e62 <__udivmoddi4+0x276>
 8000e86:	4603      	mov	r3, r0
 8000e88:	e799      	b.n	8000dbe <__udivmoddi4+0x1d2>
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	e7d4      	b.n	8000e38 <__udivmoddi4+0x24c>
 8000e8e:	46d6      	mov	lr, sl
 8000e90:	e77f      	b.n	8000d92 <__udivmoddi4+0x1a6>
 8000e92:	4463      	add	r3, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e74d      	b.n	8000d34 <__udivmoddi4+0x148>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e70f      	b.n	8000cc0 <__udivmoddi4+0xd4>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	e730      	b.n	8000d08 <__udivmoddi4+0x11c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ebe:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000ec0:	4a3d      	ldr	r2, [pc, #244]	@ (8000fb8 <MX_ADC1_Init+0x10c>)
 8000ec2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eca:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ed0:	4b38      	ldr	r3, [pc, #224]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ed6:	4b37      	ldr	r3, [pc, #220]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000edc:	4b35      	ldr	r3, [pc, #212]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee4:	4b33      	ldr	r3, [pc, #204]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eea:	4b32      	ldr	r3, [pc, #200]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000eec:	4a33      	ldr	r2, [pc, #204]	@ (8000fbc <MX_ADC1_Init+0x110>)
 8000eee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000ef8:	2205      	movs	r2, #5
 8000efa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000efc:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f04:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0a:	482a      	ldr	r0, [pc, #168]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000f0c:	f002 fe1e 	bl	8003b4c <HAL_ADC_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f16:	f001 fef1 	bl	8002cfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4822      	ldr	r0, [pc, #136]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000f2c:	f002 ff80 	bl	8003e30 <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f36:	f001 fee1 	bl	8002cfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f3a:	2309      	movs	r3, #9
 8000f3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	4619      	mov	r1, r3
 8000f46:	481b      	ldr	r0, [pc, #108]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000f48:	f002 ff72 	bl	8003e30 <HAL_ADC_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f52:	f001 fed3 	bl	8002cfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f56:	230a      	movs	r3, #10
 8000f58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	4814      	ldr	r0, [pc, #80]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000f64:	f002 ff64 	bl	8003e30 <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f6e:	f001 fec5 	bl	8002cfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f72:	230b      	movs	r3, #11
 8000f74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f76:	2304      	movs	r3, #4
 8000f78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000f80:	f002 ff56 	bl	8003e30 <HAL_ADC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f8a:	f001 feb7 	bl	8002cfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f8e:	230c      	movs	r3, #12
 8000f90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f92:	2305      	movs	r3, #5
 8000f94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f96:	463b      	mov	r3, r7
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4806      	ldr	r0, [pc, #24]	@ (8000fb4 <MX_ADC1_Init+0x108>)
 8000f9c:	f002 ff48 	bl	8003e30 <HAL_ADC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000fa6:	f001 fea9 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000088 	.word	0x20000088
 8000fb8:	40012000 	.word	0x40012000
 8000fbc:	0f000001 	.word	0x0f000001

08000fc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a3c      	ldr	r2, [pc, #240]	@ (80010d0 <HAL_ADC_MspInit+0x110>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d171      	bne.n	80010c6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80010d4 <HAL_ADC_MspInit+0x114>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	4a3a      	ldr	r2, [pc, #232]	@ (80010d4 <HAL_ADC_MspInit+0x114>)
 8000fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff2:	4b38      	ldr	r3, [pc, #224]	@ (80010d4 <HAL_ADC_MspInit+0x114>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b34      	ldr	r3, [pc, #208]	@ (80010d4 <HAL_ADC_MspInit+0x114>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a33      	ldr	r2, [pc, #204]	@ (80010d4 <HAL_ADC_MspInit+0x114>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b31      	ldr	r3, [pc, #196]	@ (80010d4 <HAL_ADC_MspInit+0x114>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	4b2d      	ldr	r3, [pc, #180]	@ (80010d4 <HAL_ADC_MspInit+0x114>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a2c      	ldr	r2, [pc, #176]	@ (80010d4 <HAL_ADC_MspInit+0x114>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b2a      	ldr	r3, [pc, #168]	@ (80010d4 <HAL_ADC_MspInit+0x114>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001036:	2307      	movs	r3, #7
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800103a:	2303      	movs	r3, #3
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	4823      	ldr	r0, [pc, #140]	@ (80010d8 <HAL_ADC_MspInit+0x118>)
 800104a:	f003 fea5 	bl	8004d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800104e:	2303      	movs	r3, #3
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	481e      	ldr	r0, [pc, #120]	@ (80010dc <HAL_ADC_MspInit+0x11c>)
 8001062:	f003 fe99 	bl	8004d98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001066:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <HAL_ADC_MspInit+0x120>)
 8001068:	4a1e      	ldr	r2, [pc, #120]	@ (80010e4 <HAL_ADC_MspInit+0x124>)
 800106a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800106c:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <HAL_ADC_MspInit+0x120>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <HAL_ADC_MspInit+0x120>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001078:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <HAL_ADC_MspInit+0x120>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <HAL_ADC_MspInit+0x120>)
 8001080:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001084:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001086:	4b16      	ldr	r3, [pc, #88]	@ (80010e0 <HAL_ADC_MspInit+0x120>)
 8001088:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800108c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800108e:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <HAL_ADC_MspInit+0x120>)
 8001090:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001094:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001096:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <HAL_ADC_MspInit+0x120>)
 8001098:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800109c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <HAL_ADC_MspInit+0x120>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <HAL_ADC_MspInit+0x120>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010aa:	480d      	ldr	r0, [pc, #52]	@ (80010e0 <HAL_ADC_MspInit+0x120>)
 80010ac:	f003 fa72 	bl	8004594 <HAL_DMA_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80010b6:	f001 fe21 	bl	8002cfc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a08      	ldr	r2, [pc, #32]	@ (80010e0 <HAL_ADC_MspInit+0x120>)
 80010be:	639a      	str	r2, [r3, #56]	@ 0x38
 80010c0:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <HAL_ADC_MspInit+0x120>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	@ 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40012000 	.word	0x40012000
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020400 	.word	0x40020400
 80010e0:	200000d0 	.word	0x200000d0
 80010e4:	40026410 	.word	0x40026410

080010e8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2108      	movs	r1, #8
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <button_init+0x14>)
 80010f2:	f003 ffed 	bl	80050d0 <HAL_GPIO_WritePin>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020c00 	.word	0x40020c00

08001100 <button_Scan>:

void button_Scan(){
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2108      	movs	r1, #8
 800110a:	482f      	ldr	r0, [pc, #188]	@ (80011c8 <button_Scan+0xc8>)
 800110c:	f003 ffe0 	bl	80050d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001110:	2201      	movs	r2, #1
 8001112:	2108      	movs	r1, #8
 8001114:	482c      	ldr	r0, [pc, #176]	@ (80011c8 <button_Scan+0xc8>)
 8001116:	f003 ffdb 	bl	80050d0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800111a:	230a      	movs	r3, #10
 800111c:	2202      	movs	r2, #2
 800111e:	492b      	ldr	r1, [pc, #172]	@ (80011cc <button_Scan+0xcc>)
 8001120:	482b      	ldr	r0, [pc, #172]	@ (80011d0 <button_Scan+0xd0>)
 8001122:	f005 ffc0 	bl	80070a6 <HAL_SPI_Receive>
	  int button_index = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800112a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800112e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	e03f      	b.n	80011b6 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db06      	blt.n	800114a <button_Scan+0x4a>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b03      	cmp	r3, #3
 8001140:	dc03      	bgt.n	800114a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3304      	adds	r3, #4
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	e018      	b.n	800117c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b03      	cmp	r3, #3
 800114e:	dd07      	ble.n	8001160 <button_Scan+0x60>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b07      	cmp	r3, #7
 8001154:	dc04      	bgt.n	8001160 <button_Scan+0x60>
			  button_index = 7 - i;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f1c3 0307 	rsb	r3, r3, #7
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	e00d      	b.n	800117c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b07      	cmp	r3, #7
 8001164:	dd06      	ble.n	8001174 <button_Scan+0x74>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0b      	cmp	r3, #11
 800116a:	dc03      	bgt.n	8001174 <button_Scan+0x74>
			  button_index = i + 4;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3304      	adds	r3, #4
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	e003      	b.n	800117c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f1c3 0317 	rsb	r3, r3, #23
 800117a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800117c:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <button_Scan+0xcc>)
 800117e:	881a      	ldrh	r2, [r3, #0]
 8001180:	897b      	ldrh	r3, [r7, #10]
 8001182:	4013      	ands	r3, r2
 8001184:	b29b      	uxth	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <button_Scan+0x96>
 800118a:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <button_Scan+0xd4>)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2100      	movs	r1, #0
 8001190:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001194:	e009      	b.n	80011aa <button_Scan+0xaa>
		  else button_count[button_index]++;
 8001196:	4a0f      	ldr	r2, [pc, #60]	@ (80011d4 <button_Scan+0xd4>)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800119e:	3301      	adds	r3, #1
 80011a0:	b299      	uxth	r1, r3
 80011a2:	4a0c      	ldr	r2, [pc, #48]	@ (80011d4 <button_Scan+0xd4>)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80011aa:	897b      	ldrh	r3, [r7, #10]
 80011ac:	085b      	lsrs	r3, r3, #1
 80011ae:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3301      	adds	r3, #1
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	ddbc      	ble.n	8001136 <button_Scan+0x36>
	  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40020c00 	.word	0x40020c00
 80011cc:	20000150 	.word	0x20000150
 80011d0:	20000240 	.word	0x20000240
 80011d4:	20000130 	.word	0x20000130

080011d8 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80011dc:	2100      	movs	r1, #0
 80011de:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <buzzer_init+0x10>)
 80011e0:	f006 fcc8 	bl	8007b74 <HAL_TIM_PWM_Start>
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200002e4 	.word	0x200002e4

080011ec <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80011f6:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <buzzer_SetVolume+0x28>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <buzzer_SetVolume+0x28>)
 80011fe:	781a      	ldrb	r2, [r3, #0]
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <buzzer_SetVolume+0x2c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000152 	.word	0x20000152
 8001218:	200002e4 	.word	0x200002e4

0800121c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <MX_DMA_Init+0x3c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a0b      	ldr	r2, [pc, #44]	@ (8001258 <MX_DMA_Init+0x3c>)
 800122c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <MX_DMA_Init+0x3c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2038      	movs	r0, #56	@ 0x38
 8001244:	f003 f96f 	bl	8004526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001248:	2038      	movs	r0, #56	@ 0x38
 800124a:	f003 f988 	bl	800455e <HAL_NVIC_EnableIRQ>

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8001260:	201e      	movs	r0, #30
 8001262:	f002 fb8f 	bl	8003984 <DEC2BCD>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <ds3231_init+0x80>)
 800126c:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 800126e:	2016      	movs	r0, #22
 8001270:	f002 fb88 	bl	8003984 <DEC2BCD>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <ds3231_init+0x80>)
 800127a:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 800127c:	2015      	movs	r0, #21
 800127e:	f002 fb81 	bl	8003984 <DEC2BCD>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <ds3231_init+0x80>)
 8001288:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 800128a:	2006      	movs	r0, #6
 800128c:	f002 fb7a 	bl	8003984 <DEC2BCD>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <ds3231_init+0x80>)
 8001296:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8001298:	200f      	movs	r0, #15
 800129a:	f002 fb73 	bl	8003984 <DEC2BCD>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <ds3231_init+0x80>)
 80012a4:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80012a6:	2009      	movs	r0, #9
 80012a8:	f002 fb6c 	bl	8003984 <DEC2BCD>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <ds3231_init+0x80>)
 80012b2:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80012b4:	2017      	movs	r0, #23
 80012b6:	f002 fb65 	bl	8003984 <DEC2BCD>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <ds3231_init+0x80>)
 80012c0:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 80012c2:	2332      	movs	r3, #50	@ 0x32
 80012c4:	2203      	movs	r2, #3
 80012c6:	21d0      	movs	r1, #208	@ 0xd0
 80012c8:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <ds3231_init+0x84>)
 80012ca:	f004 fba5 	bl	8005a18 <HAL_I2C_IsDeviceReady>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <ds3231_init+0x7c>
		while(1);
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <ds3231_init+0x78>
	};
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000154 	.word	0x20000154
 80012e0:	200001c0 	.word	0x200001c0

080012e4 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af04      	add	r7, sp, #16
 80012ea:	4603      	mov	r3, r0
 80012ec:	460a      	mov	r2, r1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	4613      	mov	r3, r2
 80012f2:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 fb44 	bl	8003984 <DEC2BCD>
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	b29a      	uxth	r2, r3
 8001304:	230a      	movs	r3, #10
 8001306:	9302      	str	r3, [sp, #8]
 8001308:	2301      	movs	r3, #1
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	f107 030f 	add.w	r3, r7, #15
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2301      	movs	r3, #1
 8001314:	21d0      	movs	r1, #208	@ 0xd0
 8001316:	4803      	ldr	r0, [pc, #12]	@ (8001324 <ds3231_Write+0x40>)
 8001318:	f004 f852 	bl	80053c0 <HAL_I2C_Mem_Write>
}
 800131c:	bf00      	nop
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200001c0 	.word	0x200001c0

08001328 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800132e:	230a      	movs	r3, #10
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2307      	movs	r3, #7
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	4b25      	ldr	r3, [pc, #148]	@ (80013cc <ds3231_ReadTime+0xa4>)
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	2200      	movs	r2, #0
 800133e:	21d0      	movs	r1, #208	@ 0xd0
 8001340:	4823      	ldr	r0, [pc, #140]	@ (80013d0 <ds3231_ReadTime+0xa8>)
 8001342:	f004 f937 	bl	80055b4 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <ds3231_ReadTime+0xa4>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f002 fb00 	bl	8003950 <BCD2DEC>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <ds3231_ReadTime+0xac>)
 8001356:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8001358:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <ds3231_ReadTime+0xa4>)
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	4618      	mov	r0, r3
 800135e:	f002 faf7 	bl	8003950 <BCD2DEC>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <ds3231_ReadTime+0xb0>)
 8001368:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800136a:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <ds3231_ReadTime+0xa4>)
 800136c:	789b      	ldrb	r3, [r3, #2]
 800136e:	4618      	mov	r0, r3
 8001370:	f002 faee 	bl	8003950 <BCD2DEC>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <ds3231_ReadTime+0xb4>)
 800137a:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 800137c:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <ds3231_ReadTime+0xa4>)
 800137e:	78db      	ldrb	r3, [r3, #3]
 8001380:	4618      	mov	r0, r3
 8001382:	f002 fae5 	bl	8003950 <BCD2DEC>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <ds3231_ReadTime+0xb8>)
 800138c:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800138e:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <ds3231_ReadTime+0xa4>)
 8001390:	791b      	ldrb	r3, [r3, #4]
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fadc 	bl	8003950 <BCD2DEC>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <ds3231_ReadTime+0xbc>)
 800139e:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <ds3231_ReadTime+0xa4>)
 80013a2:	795b      	ldrb	r3, [r3, #5]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fad3 	bl	8003950 <BCD2DEC>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <ds3231_ReadTime+0xc0>)
 80013b0:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <ds3231_ReadTime+0xa4>)
 80013b4:	799b      	ldrb	r3, [r3, #6]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f002 faca 	bl	8003950 <BCD2DEC>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <ds3231_ReadTime+0xc4>)
 80013c2:	701a      	strb	r2, [r3, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000154 	.word	0x20000154
 80013d0:	200001c0 	.word	0x200001c0
 80013d4:	2000015d 	.word	0x2000015d
 80013d8:	2000015c 	.word	0x2000015c
 80013dc:	2000015b 	.word	0x2000015b
 80013e0:	2000015f 	.word	0x2000015f
 80013e4:	2000015e 	.word	0x2000015e
 80013e8:	20000160 	.word	0x20000160
 80013ec:	20000161 	.word	0x20000161

080013f0 <getWattage>:
 *      Author: Windows
 */

#include "ex.h"

float getWattage(){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	ed2d 8b02 	vpush	{d8}
 80013f6:	af00      	add	r7, sp, #0
	return sensor_GetVoltage() * sensor_GetCurrent();
 80013f8:	f001 fcba 	bl	8002d70 <sensor_GetVoltage>
 80013fc:	eeb0 8a40 	vmov.f32	s16, s0
 8001400:	f001 fcf2 	bl	8002de8 <sensor_GetCurrent>
 8001404:	eef0 7a40 	vmov.f32	s15, s0
 8001408:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 800140c:	eeb0 0a67 	vmov.f32	s0, s15
 8001410:	46bd      	mov	sp, r7
 8001412:	ecbd 8b02 	vpop	{d8}
 8001416:	bd80      	pop	{r7, pc}

08001418 <isLight>:

uint16_t isLight(){
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	if((float)sensor_GetLight()/4095 > 0.5)
 800141c:	f001 fc90 	bl	8002d40 <sensor_GetLight>
 8001420:	4603      	mov	r3, r0
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800142a:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800144c <isLight+0x34>
 800142e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001432:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	dd01      	ble.n	8001444 <isLight+0x2c>
		return 1;
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <isLight+0x2e>
	return 0;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	457ff000 	.word	0x457ff000

08001450 <isHumidity>:

uint16_t isHumidity(){
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	if((float)sensor_GetPotentiometer()/4094 > 0.7)
 8001454:	f001 fc80 	bl	8002d58 <sensor_GetPotentiometer>
 8001458:	4603      	mov	r3, r0
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001462:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001498 <isHumidity+0x48>
 8001466:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800146a:	ee16 0a90 	vmov	r0, s13
 800146e:	f7ff f863 	bl	8000538 <__aeabi_f2d>
 8001472:	a307      	add	r3, pc, #28	@ (adr r3, 8001490 <isHumidity+0x40>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff fb46 	bl	8000b08 <__aeabi_dcmpgt>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <isHumidity+0x36>
		return 1;
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <isHumidity+0x38>
	return 0;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	bd80      	pop	{r7, pc}
 800148c:	f3af 8000 	nop.w
 8001490:	66666666 	.word	0x66666666
 8001494:	3fe66666 	.word	0x3fe66666
 8001498:	457fe000 	.word	0x457fe000

0800149c <fsm_machine>:
uint16_t sent = 0;
uint16_t init_sent = 0;
uint8_t temp[100];
uint32_t val = 0;

void fsm_machine(){
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	switch (mode) {
 80014a0:	4b6e      	ldr	r3, [pc, #440]	@ (800165c <fsm_machine+0x1c0>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	f000 80b7 	beq.w	8001618 <fsm_machine+0x17c>
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	f300 80ce 	bgt.w	800164c <fsm_machine+0x1b0>
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <fsm_machine+0x20>
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	f000 808e 	beq.w	80015d6 <fsm_machine+0x13a>
				sent = 0;
				setTimer3(1000);
			}
			break;
		default:
			break;
 80014ba:	e0c7      	b.n	800164c <fsm_machine+0x1b0>
			buzzer_SetVolume(0);
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fe95 	bl	80011ec <buzzer_SetVolume>
			sent = 0;
 80014c2:	4b67      	ldr	r3, [pc, #412]	@ (8001660 <fsm_machine+0x1c4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	801a      	strh	r2, [r3, #0]
			if(flag_timer4 == 1){
 80014c8:	4b66      	ldr	r3, [pc, #408]	@ (8001664 <fsm_machine+0x1c8>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d171      	bne.n	80015b4 <fsm_machine+0x118>
				val = (int)getWattage();
 80014d0:	f7ff ff8e 	bl	80013f0 <getWattage>
 80014d4:	eef0 7a40 	vmov.f32	s15, s0
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 2a90 	vmov	r2, s15
 80014e0:	4b61      	ldr	r3, [pc, #388]	@ (8001668 <fsm_machine+0x1cc>)
 80014e2:	601a      	str	r2, [r3, #0]
				uart_Rs232SendString("Wattage : ");
 80014e4:	4861      	ldr	r0, [pc, #388]	@ (800166c <fsm_machine+0x1d0>)
 80014e6:	f002 f819 	bl	800351c <uart_Rs232SendString>
				uart_Rs232SendNum(val);
 80014ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001668 <fsm_machine+0x1cc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 f82e 	bl	8003550 <uart_Rs232SendNum>
				uart_Rs232SendString(".");
 80014f4:	485e      	ldr	r0, [pc, #376]	@ (8001670 <fsm_machine+0x1d4>)
 80014f6:	f002 f811 	bl	800351c <uart_Rs232SendString>
				uart_Rs232SendNum((int)(getWattage()*100)%100);
 80014fa:	f7ff ff79 	bl	80013f0 <getWattage>
 80014fe:	eef0 7a40 	vmov.f32	s15, s0
 8001502:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001674 <fsm_machine+0x1d8>
 8001506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150e:	ee17 2a90 	vmov	r2, s15
 8001512:	4b59      	ldr	r3, [pc, #356]	@ (8001678 <fsm_machine+0x1dc>)
 8001514:	fb83 1302 	smull	r1, r3, r3, r2
 8001518:	1159      	asrs	r1, r3, #5
 800151a:	17d3      	asrs	r3, r2, #31
 800151c:	1acb      	subs	r3, r1, r3
 800151e:	2164      	movs	r1, #100	@ 0x64
 8001520:	fb01 f303 	mul.w	r3, r1, r3
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f002 f812 	bl	8003550 <uart_Rs232SendNum>
				uart_Rs232SendString("\n");
 800152c:	4853      	ldr	r0, [pc, #332]	@ (800167c <fsm_machine+0x1e0>)
 800152e:	f001 fff5 	bl	800351c <uart_Rs232SendString>
				uart_Rs232SendString("Light : ");
 8001532:	4853      	ldr	r0, [pc, #332]	@ (8001680 <fsm_machine+0x1e4>)
 8001534:	f001 fff2 	bl	800351c <uart_Rs232SendString>
				if(!isLight()){
 8001538:	f7ff ff6e 	bl	8001418 <isLight>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d103      	bne.n	800154a <fsm_machine+0xae>
					uart_Rs232SendString("Strong\n");
 8001542:	4850      	ldr	r0, [pc, #320]	@ (8001684 <fsm_machine+0x1e8>)
 8001544:	f001 ffea 	bl	800351c <uart_Rs232SendString>
 8001548:	e002      	b.n	8001550 <fsm_machine+0xb4>
					uart_Rs232SendString("Weak\n");
 800154a:	484f      	ldr	r0, [pc, #316]	@ (8001688 <fsm_machine+0x1ec>)
 800154c:	f001 ffe6 	bl	800351c <uart_Rs232SendString>
				uart_Rs232SendString("Humidity :");
 8001550:	484e      	ldr	r0, [pc, #312]	@ (800168c <fsm_machine+0x1f0>)
 8001552:	f001 ffe3 	bl	800351c <uart_Rs232SendString>
				uart_Rs232SendNum((float)((float)sensor_GetPotentiometer()/4094)*100);
 8001556:	f001 fbff 	bl	8002d58 <sensor_GetPotentiometer>
 800155a:	4603      	mov	r3, r0
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001564:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8001690 <fsm_machine+0x1f4>
 8001568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156c:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001674 <fsm_machine+0x1d8>
 8001570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001578:	ee17 0a90 	vmov	r0, s15
 800157c:	f001 ffe8 	bl	8003550 <uart_Rs232SendNum>
				uart_Rs232SendString("%");
 8001580:	4844      	ldr	r0, [pc, #272]	@ (8001694 <fsm_machine+0x1f8>)
 8001582:	f001 ffcb 	bl	800351c <uart_Rs232SendString>
				uart_Rs232SendString("\n");
 8001586:	483d      	ldr	r0, [pc, #244]	@ (800167c <fsm_machine+0x1e0>)
 8001588:	f001 ffc8 	bl	800351c <uart_Rs232SendString>
				uart_Rs232SendString("Temperature : ");
 800158c:	4842      	ldr	r0, [pc, #264]	@ (8001698 <fsm_machine+0x1fc>)
 800158e:	f001 ffc5 	bl	800351c <uart_Rs232SendString>
				uart_Rs232SendNum(sensor_GetTemperature());
 8001592:	f001 fc85 	bl	8002ea0 <sensor_GetTemperature>
 8001596:	eef0 7a40 	vmov.f32	s15, s0
 800159a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800159e:	ee17 0a90 	vmov	r0, s15
 80015a2:	f001 ffd5 	bl	8003550 <uart_Rs232SendNum>
				uart_Rs232SendString("\n\n");
 80015a6:	483d      	ldr	r0, [pc, #244]	@ (800169c <fsm_machine+0x200>)
 80015a8:	f001 ffb8 	bl	800351c <uart_Rs232SendString>
				setTimer4(1000);
 80015ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015b0:	f001 fcd0 	bl	8002f54 <setTimer4>
			if(isHumidity()){
 80015b4:	f7ff ff4c 	bl	8001450 <isHumidity>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d007      	beq.n	80015ce <fsm_machine+0x132>
				mode = 1;
 80015be:	4b27      	ldr	r3, [pc, #156]	@ (800165c <fsm_machine+0x1c0>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	801a      	strh	r2, [r3, #0]
				setTimer3(1000);
 80015c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015c8:	f001 fcae 	bl	8002f28 <setTimer3>
			break;
 80015cc:	e043      	b.n	8001656 <fsm_machine+0x1ba>
				mode = 0;
 80015ce:	4b23      	ldr	r3, [pc, #140]	@ (800165c <fsm_machine+0x1c0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	801a      	strh	r2, [r3, #0]
			break;
 80015d4:	e03f      	b.n	8001656 <fsm_machine+0x1ba>
			buzzer_SetVolume(50);
 80015d6:	2032      	movs	r0, #50	@ 0x32
 80015d8:	f7ff fe08 	bl	80011ec <buzzer_SetVolume>
			if(!isHumidity())
 80015dc:	f7ff ff38 	bl	8001450 <isHumidity>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <fsm_machine+0x150>
				mode = 0;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	@ (800165c <fsm_machine+0x1c0>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	801a      	strh	r2, [r3, #0]
			if(!sent){
 80015ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <fsm_machine+0x1c4>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d105      	bne.n	8001600 <fsm_machine+0x164>
				uart_Rs232SendString("Humidity is higher than 70%\n\n");
 80015f4:	482a      	ldr	r0, [pc, #168]	@ (80016a0 <fsm_machine+0x204>)
 80015f6:	f001 ff91 	bl	800351c <uart_Rs232SendString>
				sent = 1;
 80015fa:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <fsm_machine+0x1c4>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	801a      	strh	r2, [r3, #0]
			if(flag_timer3 == 1){
 8001600:	4b28      	ldr	r3, [pc, #160]	@ (80016a4 <fsm_machine+0x208>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d123      	bne.n	8001650 <fsm_machine+0x1b4>
				mode = 2;
 8001608:	4b14      	ldr	r3, [pc, #80]	@ (800165c <fsm_machine+0x1c0>)
 800160a:	2202      	movs	r2, #2
 800160c:	801a      	strh	r2, [r3, #0]
				setTimer3(1000);
 800160e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001612:	f001 fc89 	bl	8002f28 <setTimer3>
			break;
 8001616:	e01b      	b.n	8001650 <fsm_machine+0x1b4>
			buzzer_SetVolume(0);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fde7 	bl	80011ec <buzzer_SetVolume>
			if(!isHumidity())
 800161e:	f7ff ff17 	bl	8001450 <isHumidity>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <fsm_machine+0x192>
				mode = 0;
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <fsm_machine+0x1c0>)
 800162a:	2200      	movs	r2, #0
 800162c:	801a      	strh	r2, [r3, #0]
			if (flag_timer3 == 1) {
 800162e:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <fsm_machine+0x208>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d10e      	bne.n	8001654 <fsm_machine+0x1b8>
				mode = 1;
 8001636:	4b09      	ldr	r3, [pc, #36]	@ (800165c <fsm_machine+0x1c0>)
 8001638:	2201      	movs	r2, #1
 800163a:	801a      	strh	r2, [r3, #0]
				sent = 0;
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <fsm_machine+0x1c4>)
 800163e:	2200      	movs	r2, #0
 8001640:	801a      	strh	r2, [r3, #0]
				setTimer3(1000);
 8001642:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001646:	f001 fc6f 	bl	8002f28 <setTimer3>
			break;
 800164a:	e003      	b.n	8001654 <fsm_machine+0x1b8>
			break;
 800164c:	bf00      	nop
 800164e:	e002      	b.n	8001656 <fsm_machine+0x1ba>
			break;
 8001650:	bf00      	nop
 8001652:	e000      	b.n	8001656 <fsm_machine+0x1ba>
			break;
 8001654:	bf00      	nop
	}
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000162 	.word	0x20000162
 8001660:	20000164 	.word	0x20000164
 8001664:	20000238 	.word	0x20000238
 8001668:	20000168 	.word	0x20000168
 800166c:	0800a554 	.word	0x0800a554
 8001670:	0800a560 	.word	0x0800a560
 8001674:	42c80000 	.word	0x42c80000
 8001678:	51eb851f 	.word	0x51eb851f
 800167c:	0800a564 	.word	0x0800a564
 8001680:	0800a568 	.word	0x0800a568
 8001684:	0800a574 	.word	0x0800a574
 8001688:	0800a57c 	.word	0x0800a57c
 800168c:	0800a584 	.word	0x0800a584
 8001690:	457fe000 	.word	0x457fe000
 8001694:	0800a590 	.word	0x0800a590
 8001698:	0800a594 	.word	0x0800a594
 800169c:	0800a5a4 	.word	0x0800a5a4
 80016a0:	0800a5a8 	.word	0x0800a5a8
 80016a4:	20000234 	.word	0x20000234

080016a8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	@ 0x38
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80016c2:	463b      	mov	r3, r7
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
 80016d0:	615a      	str	r2, [r3, #20]
 80016d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80016d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001794 <MX_FSMC_Init+0xec>)
 80016d6:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80016da:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80016dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <MX_FSMC_Init+0xec>)
 80016de:	4a2e      	ldr	r2, [pc, #184]	@ (8001798 <MX_FSMC_Init+0xf0>)
 80016e0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80016e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001794 <MX_FSMC_Init+0xec>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80016e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <MX_FSMC_Init+0xec>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80016ee:	4b29      	ldr	r3, [pc, #164]	@ (8001794 <MX_FSMC_Init+0xec>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80016f4:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <MX_FSMC_Init+0xec>)
 80016f6:	2210      	movs	r2, #16
 80016f8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80016fa:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <MX_FSMC_Init+0xec>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001700:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <MX_FSMC_Init+0xec>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001706:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <MX_FSMC_Init+0xec>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800170c:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <MX_FSMC_Init+0xec>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001712:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <MX_FSMC_Init+0xec>)
 8001714:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001718:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800171a:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <MX_FSMC_Init+0xec>)
 800171c:	2200      	movs	r2, #0
 800171e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001720:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <MX_FSMC_Init+0xec>)
 8001722:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001726:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001728:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <MX_FSMC_Init+0xec>)
 800172a:	2200      	movs	r2, #0
 800172c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800172e:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <MX_FSMC_Init+0xec>)
 8001730:	2200      	movs	r2, #0
 8001732:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001734:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <MX_FSMC_Init+0xec>)
 8001736:	2200      	movs	r2, #0
 8001738:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800173a:	230f      	movs	r3, #15
 800173c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800173e:	230f      	movs	r3, #15
 8001740:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001742:	233c      	movs	r3, #60	@ 0x3c
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800174a:	2310      	movs	r3, #16
 800174c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 800174e:	2311      	movs	r3, #17
 8001750:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001752:	2300      	movs	r3, #0
 8001754:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001756:	2308      	movs	r3, #8
 8001758:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800175a:	230f      	movs	r3, #15
 800175c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800175e:	2309      	movs	r3, #9
 8001760:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001766:	2310      	movs	r3, #16
 8001768:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800176a:	2311      	movs	r3, #17
 800176c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001772:	463a      	mov	r2, r7
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	4806      	ldr	r0, [pc, #24]	@ (8001794 <MX_FSMC_Init+0xec>)
 800177c:	f006 f898 	bl	80078b0 <HAL_SRAM_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001786:	f001 fab9 	bl	8002cfc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800178a:	bf00      	nop
 800178c:	3738      	adds	r7, #56	@ 0x38
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000016c 	.word	0x2000016c
 8001798:	a0000104 	.word	0xa0000104

0800179c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80017b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001824 <HAL_FSMC_MspInit+0x88>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d131      	bne.n	800181c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <HAL_FSMC_MspInit+0x88>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <HAL_FSMC_MspInit+0x8c>)
 80017c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017c6:	4a18      	ldr	r2, [pc, #96]	@ (8001828 <HAL_FSMC_MspInit+0x8c>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6393      	str	r3, [r2, #56]	@ 0x38
 80017ce:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <HAL_FSMC_MspInit+0x8c>)
 80017d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80017da:	f64f 7388 	movw	r3, #65416	@ 0xff88
 80017de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80017ec:	230c      	movs	r3, #12
 80017ee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	480d      	ldr	r0, [pc, #52]	@ (800182c <HAL_FSMC_MspInit+0x90>)
 80017f6:	f003 facf 	bl	8004d98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80017fa:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80017fe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800180c:	230c      	movs	r3, #12
 800180e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	4619      	mov	r1, r3
 8001814:	4806      	ldr	r0, [pc, #24]	@ (8001830 <HAL_FSMC_MspInit+0x94>)
 8001816:	f003 fabf 	bl	8004d98 <HAL_GPIO_Init>
 800181a:	e000      	b.n	800181e <HAL_FSMC_MspInit+0x82>
    return;
 800181c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200001bc 	.word	0x200001bc
 8001828:	40023800 	.word	0x40023800
 800182c:	40021000 	.word	0x40021000
 8001830:	40020c00 	.word	0x40020c00

08001834 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800183c:	f7ff ffae 	bl	800179c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08e      	sub	sp, #56	@ 0x38
 800184c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
 8001862:	4b87      	ldr	r3, [pc, #540]	@ (8001a80 <MX_GPIO_Init+0x238>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a86      	ldr	r2, [pc, #536]	@ (8001a80 <MX_GPIO_Init+0x238>)
 8001868:	f043 0310 	orr.w	r3, r3, #16
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b84      	ldr	r3, [pc, #528]	@ (8001a80 <MX_GPIO_Init+0x238>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	623b      	str	r3, [r7, #32]
 8001878:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	4b80      	ldr	r3, [pc, #512]	@ (8001a80 <MX_GPIO_Init+0x238>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a7f      	ldr	r2, [pc, #508]	@ (8001a80 <MX_GPIO_Init+0x238>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a80 <MX_GPIO_Init+0x238>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	61fb      	str	r3, [r7, #28]
 8001894:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	4b79      	ldr	r3, [pc, #484]	@ (8001a80 <MX_GPIO_Init+0x238>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a78      	ldr	r2, [pc, #480]	@ (8001a80 <MX_GPIO_Init+0x238>)
 80018a0:	f043 0320 	orr.w	r3, r3, #32
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b76      	ldr	r3, [pc, #472]	@ (8001a80 <MX_GPIO_Init+0x238>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f003 0320 	and.w	r3, r3, #32
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	4b72      	ldr	r3, [pc, #456]	@ (8001a80 <MX_GPIO_Init+0x238>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a71      	ldr	r2, [pc, #452]	@ (8001a80 <MX_GPIO_Init+0x238>)
 80018bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001a80 <MX_GPIO_Init+0x238>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001a80 <MX_GPIO_Init+0x238>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a6a      	ldr	r2, [pc, #424]	@ (8001a80 <MX_GPIO_Init+0x238>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b68      	ldr	r3, [pc, #416]	@ (8001a80 <MX_GPIO_Init+0x238>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b64      	ldr	r3, [pc, #400]	@ (8001a80 <MX_GPIO_Init+0x238>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a63      	ldr	r2, [pc, #396]	@ (8001a80 <MX_GPIO_Init+0x238>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b61      	ldr	r3, [pc, #388]	@ (8001a80 <MX_GPIO_Init+0x238>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b5d      	ldr	r3, [pc, #372]	@ (8001a80 <MX_GPIO_Init+0x238>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a5c      	ldr	r2, [pc, #368]	@ (8001a80 <MX_GPIO_Init+0x238>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b5a      	ldr	r3, [pc, #360]	@ (8001a80 <MX_GPIO_Init+0x238>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b56      	ldr	r3, [pc, #344]	@ (8001a80 <MX_GPIO_Init+0x238>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a55      	ldr	r2, [pc, #340]	@ (8001a80 <MX_GPIO_Init+0x238>)
 800192c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b53      	ldr	r3, [pc, #332]	@ (8001a80 <MX_GPIO_Init+0x238>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	2170      	movs	r1, #112	@ 0x70
 8001942:	4850      	ldr	r0, [pc, #320]	@ (8001a84 <MX_GPIO_Init+0x23c>)
 8001944:	f003 fbc4 	bl	80050d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800194e:	484e      	ldr	r0, [pc, #312]	@ (8001a88 <MX_GPIO_Init+0x240>)
 8001950:	f003 fbbe 	bl	80050d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800195a:	484c      	ldr	r0, [pc, #304]	@ (8001a8c <MX_GPIO_Init+0x244>)
 800195c:	f003 fbb8 	bl	80050d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	2140      	movs	r1, #64	@ 0x40
 8001964:	484a      	ldr	r0, [pc, #296]	@ (8001a90 <MX_GPIO_Init+0x248>)
 8001966:	f003 fbb3 	bl	80050d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001970:	4848      	ldr	r0, [pc, #288]	@ (8001a94 <MX_GPIO_Init+0x24c>)
 8001972:	f003 fbad 	bl	80050d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	2108      	movs	r1, #8
 800197a:	4847      	ldr	r0, [pc, #284]	@ (8001a98 <MX_GPIO_Init+0x250>)
 800197c:	f003 fba8 	bl	80050d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001980:	2370      	movs	r3, #112	@ 0x70
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001984:	2301      	movs	r3, #1
 8001986:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001994:	4619      	mov	r1, r3
 8001996:	483b      	ldr	r0, [pc, #236]	@ (8001a84 <MX_GPIO_Init+0x23c>)
 8001998:	f003 f9fe 	bl	8004d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800199c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b2:	4619      	mov	r1, r3
 80019b4:	4834      	ldr	r0, [pc, #208]	@ (8001a88 <MX_GPIO_Init+0x240>)
 80019b6:	f003 f9ef 	bl	8004d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 80019ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019cc:	4619      	mov	r1, r3
 80019ce:	482f      	ldr	r0, [pc, #188]	@ (8001a8c <MX_GPIO_Init+0x244>)
 80019d0:	f003 f9e2 	bl	8004d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 80019d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019da:	2301      	movs	r3, #1
 80019dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 80019e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ea:	4619      	mov	r1, r3
 80019ec:	4827      	ldr	r0, [pc, #156]	@ (8001a8c <MX_GPIO_Init+0x244>)
 80019ee:	f003 f9d3 	bl	8004d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80019f2:	23c0      	movs	r3, #192	@ 0xc0
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a02:	4619      	mov	r1, r3
 8001a04:	4823      	ldr	r0, [pc, #140]	@ (8001a94 <MX_GPIO_Init+0x24c>)
 8001a06:	f003 f9c7 	bl	8004d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001a0a:	2330      	movs	r3, #48	@ 0x30
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	481a      	ldr	r0, [pc, #104]	@ (8001a88 <MX_GPIO_Init+0x240>)
 8001a1e:	f003 f9bb 	bl	8004d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001a22:	2340      	movs	r3, #64	@ 0x40
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a36:	4619      	mov	r1, r3
 8001a38:	4815      	ldr	r0, [pc, #84]	@ (8001a90 <MX_GPIO_Init+0x248>)
 8001a3a:	f003 f9ad 	bl	8004d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001a3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a54:	4619      	mov	r1, r3
 8001a56:	480f      	ldr	r0, [pc, #60]	@ (8001a94 <MX_GPIO_Init+0x24c>)
 8001a58:	f003 f99e 	bl	8004d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a60:	2301      	movs	r3, #1
 8001a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a70:	4619      	mov	r1, r3
 8001a72:	4809      	ldr	r0, [pc, #36]	@ (8001a98 <MX_GPIO_Init+0x250>)
 8001a74:	f003 f990 	bl	8004d98 <HAL_GPIO_Init>

}
 8001a78:	bf00      	nop
 8001a7a:	3738      	adds	r7, #56	@ 0x38
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	40021400 	.word	0x40021400
 8001a90:	40021800 	.word	0x40021800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	40020c00 	.word	0x40020c00

08001a9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001aa2:	4a13      	ldr	r2, [pc, #76]	@ (8001af0 <MX_I2C1_Init+0x54>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001aa8:	4a12      	ldr	r2, [pc, #72]	@ (8001af4 <MX_I2C1_Init+0x58>)
 8001aaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001aba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001abe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001acc:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ad8:	4804      	ldr	r0, [pc, #16]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001ada:	f003 fb2d 	bl	8005138 <HAL_I2C_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ae4:	f001 f90a 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200001c0 	.word	0x200001c0
 8001af0:	40005400 	.word	0x40005400
 8001af4:	000186a0 	.word	0x000186a0

08001af8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	@ 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a19      	ldr	r2, [pc, #100]	@ (8001b7c <HAL_I2C_MspInit+0x84>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d12b      	bne.n	8001b72 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b18      	ldr	r3, [pc, #96]	@ (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a17      	ldr	r2, [pc, #92]	@ (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b36:	23c0      	movs	r3, #192	@ 0xc0
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3a:	2312      	movs	r3, #18
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b46:	2304      	movs	r3, #4
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	480c      	ldr	r0, [pc, #48]	@ (8001b84 <HAL_I2C_MspInit+0x8c>)
 8001b52:	f003 f921 	bl	8004d98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	4a08      	ldr	r2, [pc, #32]	@ (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b72:	bf00      	nop
 8001b74:	3728      	adds	r7, #40	@ 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40005400 	.word	0x40005400
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020400 	.word	0x40020400

08001b88 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001b92:	4a04      	ldr	r2, [pc, #16]	@ (8001ba4 <LCD_WR_REG+0x1c>)
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	8013      	strh	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	600ffffe 	.word	0x600ffffe

08001ba8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001bb2:	4a04      	ldr	r2, [pc, #16]	@ (8001bc4 <LCD_WR_DATA+0x1c>)
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	8053      	strh	r3, [r2, #2]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	600ffffe 	.word	0x600ffffe

08001bc8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <LCD_RD_DATA+0x20>)
 8001bd0:	885b      	ldrh	r3, [r3, #2]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	b29b      	uxth	r3, r3
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	600ffffe 	.word	0x600ffffe

08001bec <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	4608      	mov	r0, r1
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	80fb      	strh	r3, [r7, #6]
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80bb      	strh	r3, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	807b      	strh	r3, [r7, #2]
 8001c06:	4613      	mov	r3, r2
 8001c08:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001c0a:	202a      	movs	r0, #42	@ 0x2a
 8001c0c:	f7ff ffbc 	bl	8001b88 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	0a1b      	lsrs	r3, r3, #8
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ffc6 	bl	8001ba8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ffc0 	bl	8001ba8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001c28:	887b      	ldrh	r3, [r7, #2]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ffba 	bl	8001ba8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ffb4 	bl	8001ba8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001c40:	202b      	movs	r0, #43	@ 0x2b
 8001c42:	f7ff ffa1 	bl	8001b88 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001c46:	88bb      	ldrh	r3, [r7, #4]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ffab 	bl	8001ba8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001c52:	88bb      	ldrh	r3, [r7, #4]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ffa5 	bl	8001ba8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001c5e:	883b      	ldrh	r3, [r7, #0]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff9f 	bl	8001ba8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001c6a:	883b      	ldrh	r3, [r7, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff99 	bl	8001ba8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001c76:	202c      	movs	r0, #44	@ 0x2c
 8001c78:	f7ff ff86 	bl	8001b88 <LCD_WR_REG>
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd90      	pop	{r4, r7, pc}

08001c84 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <lcd_Clear+0x60>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <lcd_Clear+0x60>)
 8001c98:	885b      	ldrh	r3, [r3, #2]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff ffa3 	bl	8001bec <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	81fb      	strh	r3, [r7, #14]
 8001caa:	e011      	b.n	8001cd0 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	81bb      	strh	r3, [r7, #12]
 8001cb0:	e006      	b.n	8001cc0 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff77 	bl	8001ba8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001cba:	89bb      	ldrh	r3, [r7, #12]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	81bb      	strh	r3, [r7, #12]
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <lcd_Clear+0x60>)
 8001cc2:	885b      	ldrh	r3, [r3, #2]
 8001cc4:	89ba      	ldrh	r2, [r7, #12]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d3f3      	bcc.n	8001cb2 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001cca:	89fb      	ldrh	r3, [r7, #14]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	81fb      	strh	r3, [r7, #14]
 8001cd0:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <lcd_Clear+0x60>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	89fa      	ldrh	r2, [r7, #14]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d3e8      	bcc.n	8001cac <lcd_Clear+0x28>
		}
	}
}
 8001cda:	bf00      	nop
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000214 	.word	0x20000214

08001ce8 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	80fb      	strh	r3, [r7, #6]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	80bb      	strh	r3, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001cfa:	88bb      	ldrh	r3, [r7, #4]
 8001cfc:	88fa      	ldrh	r2, [r7, #6]
 8001cfe:	88b9      	ldrh	r1, [r7, #4]
 8001d00:	88f8      	ldrh	r0, [r7, #6]
 8001d02:	f7ff ff73 	bl	8001bec <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff4d 	bl	8001ba8 <LCD_WR_DATA>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4604      	mov	r4, r0
 8001d20:	4608      	mov	r0, r1
 8001d22:	4611      	mov	r1, r2
 8001d24:	461a      	mov	r2, r3
 8001d26:	4623      	mov	r3, r4
 8001d28:	80fb      	strh	r3, [r7, #6]
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80bb      	strh	r3, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70fb      	strb	r3, [r7, #3]
 8001d32:	4613      	mov	r3, r2
 8001d34:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001d3e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d42:	085b      	lsrs	r3, r3, #1
 8001d44:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	fb12 f303 	smulbb	r3, r2, r3
 8001d6e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	3b20      	subs	r3, #32
 8001d74:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29c      	uxth	r4, r3
 8001d84:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	88bb      	ldrh	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	88b9      	ldrh	r1, [r7, #4]
 8001d96:	88f8      	ldrh	r0, [r7, #6]
 8001d98:	4622      	mov	r2, r4
 8001d9a:	f7ff ff27 	bl	8001bec <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	827b      	strh	r3, [r7, #18]
 8001da2:	e07a      	b.n	8001e9a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001da4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001da8:	2b0c      	cmp	r3, #12
 8001daa:	d028      	beq.n	8001dfe <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001dac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d108      	bne.n	8001dc6 <lcd_ShowChar+0xae>
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	8a7b      	ldrh	r3, [r7, #18]
 8001db8:	493c      	ldr	r1, [pc, #240]	@ (8001eac <lcd_ShowChar+0x194>)
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	440a      	add	r2, r1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	75fb      	strb	r3, [r7, #23]
 8001dc4:	e01b      	b.n	8001dfe <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001dc6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001dca:	2b18      	cmp	r3, #24
 8001dcc:	d10b      	bne.n	8001de6 <lcd_ShowChar+0xce>
 8001dce:	78fa      	ldrb	r2, [r7, #3]
 8001dd0:	8a79      	ldrh	r1, [r7, #18]
 8001dd2:	4837      	ldr	r0, [pc, #220]	@ (8001eb0 <lcd_ShowChar+0x198>)
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	4403      	add	r3, r0
 8001dde:	440b      	add	r3, r1
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	75fb      	strb	r3, [r7, #23]
 8001de4:	e00b      	b.n	8001dfe <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001de6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	d15a      	bne.n	8001ea4 <lcd_ShowChar+0x18c>
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	8a7b      	ldrh	r3, [r7, #18]
 8001df2:	4930      	ldr	r1, [pc, #192]	@ (8001eb4 <lcd_ShowChar+0x19c>)
 8001df4:	0192      	lsls	r2, r2, #6
 8001df6:	440a      	add	r2, r1
 8001df8:	4413      	add	r3, r2
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	75bb      	strb	r3, [r7, #22]
 8001e02:	e044      	b.n	8001e8e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001e04:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d120      	bne.n	8001e4e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001e0c:	7dfa      	ldrb	r2, [r7, #23]
 8001e0e:	7dbb      	ldrb	r3, [r7, #22]
 8001e10:	fa42 f303 	asr.w	r3, r2, r3
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d004      	beq.n	8001e26 <lcd_ShowChar+0x10e>
 8001e1c:	883b      	ldrh	r3, [r7, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fec2 	bl	8001ba8 <LCD_WR_DATA>
 8001e24:	e003      	b.n	8001e2e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001e26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff febd 	bl	8001ba8 <LCD_WR_DATA>
				m++;
 8001e2e:	7d7b      	ldrb	r3, [r7, #21]
 8001e30:	3301      	adds	r3, #1
 8001e32:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001e34:	7d7b      	ldrb	r3, [r7, #21]
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e3c:	fb01 f202 	mul.w	r2, r1, r2
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d11f      	bne.n	8001e88 <lcd_ShowChar+0x170>
				{
					m=0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	757b      	strb	r3, [r7, #21]
					break;
 8001e4c:	e022      	b.n	8001e94 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001e4e:	7dfa      	ldrb	r2, [r7, #23]
 8001e50:	7dbb      	ldrb	r3, [r7, #22]
 8001e52:	fa42 f303 	asr.w	r3, r2, r3
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <lcd_ShowChar+0x152>
 8001e5e:	883a      	ldrh	r2, [r7, #0]
 8001e60:	88b9      	ldrh	r1, [r7, #4]
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff3f 	bl	8001ce8 <lcd_DrawPoint>
				x++;
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001e70:	88fa      	ldrh	r2, [r7, #6]
 8001e72:	8a3b      	ldrh	r3, [r7, #16]
 8001e74:	1ad2      	subs	r2, r2, r3
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d105      	bne.n	8001e88 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001e7c:	8a3b      	ldrh	r3, [r7, #16]
 8001e7e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001e80:	88bb      	ldrh	r3, [r7, #4]
 8001e82:	3301      	adds	r3, #1
 8001e84:	80bb      	strh	r3, [r7, #4]
					break;
 8001e86:	e005      	b.n	8001e94 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001e88:	7dbb      	ldrb	r3, [r7, #22]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	75bb      	strb	r3, [r7, #22]
 8001e8e:	7dbb      	ldrb	r3, [r7, #22]
 8001e90:	2b07      	cmp	r3, #7
 8001e92:	d9b7      	bls.n	8001e04 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001e94:	8a7b      	ldrh	r3, [r7, #18]
 8001e96:	3301      	adds	r3, #1
 8001e98:	827b      	strh	r3, [r7, #18]
 8001e9a:	8a7a      	ldrh	r2, [r7, #18]
 8001e9c:	89bb      	ldrh	r3, [r7, #12]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d380      	bcc.n	8001da4 <lcd_ShowChar+0x8c>
 8001ea2:	e000      	b.n	8001ea6 <lcd_ShowChar+0x18e>
		else return;
 8001ea4:	bf00      	nop
				}
			}
		}
	}
}
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd90      	pop	{r4, r7, pc}
 8001eac:	0800a62c 	.word	0x0800a62c
 8001eb0:	0800ac1c 	.word	0x0800ac1c
 8001eb4:	0800bdec 	.word	0x0800bdec

08001eb8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	460a      	mov	r2, r1
 8001ec2:	71fb      	strb	r3, [r7, #7]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001ecc:	e004      	b.n	8001ed8 <mypow+0x20>
 8001ece:	79fa      	ldrb	r2, [r7, #7]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	79bb      	ldrb	r3, [r7, #6]
 8001eda:	1e5a      	subs	r2, r3, #1
 8001edc:	71ba      	strb	r2, [r7, #6]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f5      	bne.n	8001ece <mypow+0x16>
	return result;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b089      	sub	sp, #36	@ 0x24
 8001ef4:	af04      	add	r7, sp, #16
 8001ef6:	4604      	mov	r4, r0
 8001ef8:	4608      	mov	r0, r1
 8001efa:	4611      	mov	r1, r2
 8001efc:	461a      	mov	r2, r3
 8001efe:	4623      	mov	r3, r4
 8001f00:	80fb      	strh	r3, [r7, #6]
 8001f02:	4603      	mov	r3, r0
 8001f04:	80bb      	strh	r3, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	807b      	strh	r3, [r7, #2]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001f12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	e059      	b.n	8001fd4 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001f20:	887c      	ldrh	r4, [r7, #2]
 8001f22:	787a      	ldrb	r2, [r7, #1]
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	4619      	mov	r1, r3
 8001f30:	200a      	movs	r0, #10
 8001f32:	f7ff ffc1 	bl	8001eb8 <mypow>
 8001f36:	4603      	mov	r3, r0
 8001f38:	fbb4 f1f3 	udiv	r1, r4, r3
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <lcd_ShowIntNum+0xf8>)
 8001f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	1aca      	subs	r2, r1, r3
 8001f4e:	4613      	mov	r3, r2
 8001f50:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001f52:	7bbb      	ldrb	r3, [r7, #14]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d121      	bne.n	8001f9c <lcd_ShowIntNum+0xac>
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	787b      	ldrb	r3, [r7, #1]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	da1c      	bge.n	8001f9c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001f62:	7b3b      	ldrb	r3, [r7, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d117      	bne.n	8001f98 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	7b7b      	ldrb	r3, [r7, #13]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	fb12 f303 	smulbb	r3, r2, r3
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	4413      	add	r3, r2
 8001f7a:	b298      	uxth	r0, r3
 8001f7c:	8c3a      	ldrh	r2, [r7, #32]
 8001f7e:	88b9      	ldrh	r1, [r7, #4]
 8001f80:	2300      	movs	r3, #0
 8001f82:	9302      	str	r3, [sp, #8]
 8001f84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	2220      	movs	r2, #32
 8001f92:	f7ff fec1 	bl	8001d18 <lcd_ShowChar>
				continue;
 8001f96:	e01a      	b.n	8001fce <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	7b7b      	ldrb	r3, [r7, #13]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	fb12 f303 	smulbb	r3, r2, r3
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	4413      	add	r3, r2
 8001fae:	b298      	uxth	r0, r3
 8001fb0:	7b3b      	ldrb	r3, [r7, #12]
 8001fb2:	3330      	adds	r3, #48	@ 0x30
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	8c3c      	ldrh	r4, [r7, #32]
 8001fb8:	88b9      	ldrh	r1, [r7, #4]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	9302      	str	r3, [sp, #8]
 8001fbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	4623      	mov	r3, r4
 8001fca:	f7ff fea5 	bl	8001d18 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	787b      	ldrb	r3, [r7, #1]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d3a1      	bcc.n	8001f20 <lcd_ShowIntNum+0x30>
	}
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd90      	pop	{r4, r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	cccccccd 	.word	0xcccccccd

08001fec <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b08b      	sub	sp, #44	@ 0x2c
 8001ff0:	af04      	add	r7, sp, #16
 8001ff2:	4604      	mov	r4, r0
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4623      	mov	r3, r4
 8002000:	81fb      	strh	r3, [r7, #14]
 8002002:	4603      	mov	r3, r0
 8002004:	81bb      	strh	r3, [r7, #12]
 8002006:	460b      	mov	r3, r1
 8002008:	71fb      	strb	r3, [r7, #7]
 800200a:	4613      	mov	r3, r2
 800200c:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 800200e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8002016:	edd7 7a02 	vldr	s15, [r7, #8]
 800201a:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80020f4 <lcd_ShowFloatNum+0x108>
 800201e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002026:	ee17 3a90 	vmov	r3, s15
 800202a:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 800202c:	2300      	movs	r3, #0
 800202e:	75fb      	strb	r3, [r7, #23]
 8002030:	e057      	b.n	80020e2 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8002032:	8abc      	ldrh	r4, [r7, #20]
 8002034:	79fa      	ldrb	r2, [r7, #7]
 8002036:	7dfb      	ldrb	r3, [r7, #23]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b2db      	uxtb	r3, r3
 8002040:	4619      	mov	r1, r3
 8002042:	200a      	movs	r0, #10
 8002044:	f7ff ff38 	bl	8001eb8 <mypow>
 8002048:	4603      	mov	r3, r0
 800204a:	fbb4 f1f3 	udiv	r1, r4, r3
 800204e:	4b2a      	ldr	r3, [pc, #168]	@ (80020f8 <lcd_ShowFloatNum+0x10c>)
 8002050:	fba3 2301 	umull	r2, r3, r3, r1
 8002054:	08da      	lsrs	r2, r3, #3
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	1aca      	subs	r2, r1, r3
 8002060:	4613      	mov	r3, r2
 8002062:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8002064:	7dfa      	ldrb	r2, [r7, #23]
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	3b02      	subs	r3, #2
 800206a:	429a      	cmp	r2, r3
 800206c:	d11d      	bne.n	80020aa <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	3b02      	subs	r3, #2
 8002072:	b29a      	uxth	r2, r3
 8002074:	7dbb      	ldrb	r3, [r7, #22]
 8002076:	b29b      	uxth	r3, r3
 8002078:	fb12 f303 	smulbb	r3, r2, r3
 800207c:	b29a      	uxth	r2, r3
 800207e:	89fb      	ldrh	r3, [r7, #14]
 8002080:	4413      	add	r3, r2
 8002082:	b298      	uxth	r0, r3
 8002084:	88ba      	ldrh	r2, [r7, #4]
 8002086:	89b9      	ldrh	r1, [r7, #12]
 8002088:	2300      	movs	r3, #0
 800208a:	9302      	str	r3, [sp, #8]
 800208c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	4613      	mov	r3, r2
 8002098:	222e      	movs	r2, #46	@ 0x2e
 800209a:	f7ff fe3d 	bl	8001d18 <lcd_ShowChar>
			t++;
 800209e:	7dfb      	ldrb	r3, [r7, #23]
 80020a0:	3301      	adds	r3, #1
 80020a2:	75fb      	strb	r3, [r7, #23]
			len+=1;
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	3301      	adds	r3, #1
 80020a8:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	7dbb      	ldrb	r3, [r7, #22]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	fb12 f303 	smulbb	r3, r2, r3
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	89fb      	ldrh	r3, [r7, #14]
 80020ba:	4413      	add	r3, r2
 80020bc:	b298      	uxth	r0, r3
 80020be:	7cfb      	ldrb	r3, [r7, #19]
 80020c0:	3330      	adds	r3, #48	@ 0x30
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	88bc      	ldrh	r4, [r7, #4]
 80020c6:	89b9      	ldrh	r1, [r7, #12]
 80020c8:	2300      	movs	r3, #0
 80020ca:	9302      	str	r3, [sp, #8]
 80020cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	4623      	mov	r3, r4
 80020d8:	f7ff fe1e 	bl	8001d18 <lcd_ShowChar>
	for(t=0;t<len;t++)
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	3301      	adds	r3, #1
 80020e0:	75fb      	strb	r3, [r7, #23]
 80020e2:	7dfa      	ldrb	r2, [r7, #23]
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d3a3      	bcc.n	8002032 <lcd_ShowFloatNum+0x46>
	}
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd90      	pop	{r4, r7, pc}
 80020f4:	42c80000 	.word	0x42c80000
 80020f8:	cccccccd 	.word	0xcccccccd

080020fc <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8002116:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <lcd_SetDir+0x44>)
 8002118:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800211c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800211e:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <lcd_SetDir+0x44>)
 8002120:	22f0      	movs	r2, #240	@ 0xf0
 8002122:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8002124:	e006      	b.n	8002134 <lcd_SetDir+0x38>
		lcddev.width=240;
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <lcd_SetDir+0x44>)
 8002128:	22f0      	movs	r2, #240	@ 0xf0
 800212a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800212c:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <lcd_SetDir+0x44>)
 800212e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002132:	805a      	strh	r2, [r3, #2]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	20000214 	.word	0x20000214

08002144 <lcd_init>:


void lcd_init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8002148:	2200      	movs	r2, #0
 800214a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800214e:	48aa      	ldr	r0, [pc, #680]	@ (80023f8 <lcd_init+0x2b4>)
 8002150:	f002 ffbe 	bl	80050d0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002154:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002158:	f001 fcd4 	bl	8003b04 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 800215c:	2201      	movs	r2, #1
 800215e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002162:	48a5      	ldr	r0, [pc, #660]	@ (80023f8 <lcd_init+0x2b4>)
 8002164:	f002 ffb4 	bl	80050d0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002168:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800216c:	f001 fcca 	bl	8003b04 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8002170:	2000      	movs	r0, #0
 8002172:	f7ff ffc3 	bl	80020fc <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8002176:	20d3      	movs	r0, #211	@ 0xd3
 8002178:	f7ff fd06 	bl	8001b88 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 800217c:	f7ff fd24 	bl	8001bc8 <LCD_RD_DATA>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	4b9d      	ldr	r3, [pc, #628]	@ (80023fc <lcd_init+0x2b8>)
 8002186:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002188:	f7ff fd1e 	bl	8001bc8 <LCD_RD_DATA>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	4b9a      	ldr	r3, [pc, #616]	@ (80023fc <lcd_init+0x2b8>)
 8002192:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002194:	f7ff fd18 	bl	8001bc8 <LCD_RD_DATA>
 8002198:	4603      	mov	r3, r0
 800219a:	461a      	mov	r2, r3
 800219c:	4b97      	ldr	r3, [pc, #604]	@ (80023fc <lcd_init+0x2b8>)
 800219e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80021a0:	4b96      	ldr	r3, [pc, #600]	@ (80023fc <lcd_init+0x2b8>)
 80021a2:	889b      	ldrh	r3, [r3, #4]
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	4b94      	ldr	r3, [pc, #592]	@ (80023fc <lcd_init+0x2b8>)
 80021aa:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80021ac:	f7ff fd0c 	bl	8001bc8 <LCD_RD_DATA>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	4b91      	ldr	r3, [pc, #580]	@ (80023fc <lcd_init+0x2b8>)
 80021b6:	889b      	ldrh	r3, [r3, #4]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	4b8f      	ldr	r3, [pc, #572]	@ (80023fc <lcd_init+0x2b8>)
 80021be:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80021c0:	20cf      	movs	r0, #207	@ 0xcf
 80021c2:	f7ff fce1 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7ff fcee 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80021cc:	20c1      	movs	r0, #193	@ 0xc1
 80021ce:	f7ff fceb 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80021d2:	2030      	movs	r0, #48	@ 0x30
 80021d4:	f7ff fce8 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80021d8:	20ed      	movs	r0, #237	@ 0xed
 80021da:	f7ff fcd5 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80021de:	2064      	movs	r0, #100	@ 0x64
 80021e0:	f7ff fce2 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80021e4:	2003      	movs	r0, #3
 80021e6:	f7ff fcdf 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80021ea:	2012      	movs	r0, #18
 80021ec:	f7ff fcdc 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80021f0:	2081      	movs	r0, #129	@ 0x81
 80021f2:	f7ff fcd9 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80021f6:	20e8      	movs	r0, #232	@ 0xe8
 80021f8:	f7ff fcc6 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80021fc:	2085      	movs	r0, #133	@ 0x85
 80021fe:	f7ff fcd3 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002202:	2010      	movs	r0, #16
 8002204:	f7ff fcd0 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002208:	207a      	movs	r0, #122	@ 0x7a
 800220a:	f7ff fccd 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800220e:	20cb      	movs	r0, #203	@ 0xcb
 8002210:	f7ff fcba 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002214:	2039      	movs	r0, #57	@ 0x39
 8002216:	f7ff fcc7 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800221a:	202c      	movs	r0, #44	@ 0x2c
 800221c:	f7ff fcc4 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002220:	2000      	movs	r0, #0
 8002222:	f7ff fcc1 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002226:	2034      	movs	r0, #52	@ 0x34
 8002228:	f7ff fcbe 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800222c:	2002      	movs	r0, #2
 800222e:	f7ff fcbb 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002232:	20f7      	movs	r0, #247	@ 0xf7
 8002234:	f7ff fca8 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002238:	2020      	movs	r0, #32
 800223a:	f7ff fcb5 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800223e:	20ea      	movs	r0, #234	@ 0xea
 8002240:	f7ff fca2 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff fcaf 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800224a:	2000      	movs	r0, #0
 800224c:	f7ff fcac 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002250:	20c0      	movs	r0, #192	@ 0xc0
 8002252:	f7ff fc99 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002256:	201b      	movs	r0, #27
 8002258:	f7ff fca6 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 800225c:	20c1      	movs	r0, #193	@ 0xc1
 800225e:	f7ff fc93 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002262:	2001      	movs	r0, #1
 8002264:	f7ff fca0 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002268:	20c5      	movs	r0, #197	@ 0xc5
 800226a:	f7ff fc8d 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800226e:	2030      	movs	r0, #48	@ 0x30
 8002270:	f7ff fc9a 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002274:	2030      	movs	r0, #48	@ 0x30
 8002276:	f7ff fc97 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800227a:	20c7      	movs	r0, #199	@ 0xc7
 800227c:	f7ff fc84 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002280:	20b7      	movs	r0, #183	@ 0xb7
 8002282:	f7ff fc91 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002286:	2036      	movs	r0, #54	@ 0x36
 8002288:	f7ff fc7e 	bl	8001b88 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 800228c:	2008      	movs	r0, #8
 800228e:	f7ff fc8b 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8002292:	203a      	movs	r0, #58	@ 0x3a
 8002294:	f7ff fc78 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002298:	2055      	movs	r0, #85	@ 0x55
 800229a:	f7ff fc85 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800229e:	20b1      	movs	r0, #177	@ 0xb1
 80022a0:	f7ff fc72 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff fc7f 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80022aa:	201a      	movs	r0, #26
 80022ac:	f7ff fc7c 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80022b0:	20b6      	movs	r0, #182	@ 0xb6
 80022b2:	f7ff fc69 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80022b6:	200a      	movs	r0, #10
 80022b8:	f7ff fc76 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80022bc:	20a2      	movs	r0, #162	@ 0xa2
 80022be:	f7ff fc73 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80022c2:	20f2      	movs	r0, #242	@ 0xf2
 80022c4:	f7ff fc60 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7ff fc6d 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80022ce:	2026      	movs	r0, #38	@ 0x26
 80022d0:	f7ff fc5a 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80022d4:	2001      	movs	r0, #1
 80022d6:	f7ff fc67 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80022da:	20e0      	movs	r0, #224	@ 0xe0
 80022dc:	f7ff fc54 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80022e0:	200f      	movs	r0, #15
 80022e2:	f7ff fc61 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80022e6:	202a      	movs	r0, #42	@ 0x2a
 80022e8:	f7ff fc5e 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80022ec:	2028      	movs	r0, #40	@ 0x28
 80022ee:	f7ff fc5b 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80022f2:	2008      	movs	r0, #8
 80022f4:	f7ff fc58 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80022f8:	200e      	movs	r0, #14
 80022fa:	f7ff fc55 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80022fe:	2008      	movs	r0, #8
 8002300:	f7ff fc52 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002304:	2054      	movs	r0, #84	@ 0x54
 8002306:	f7ff fc4f 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800230a:	20a9      	movs	r0, #169	@ 0xa9
 800230c:	f7ff fc4c 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002310:	2043      	movs	r0, #67	@ 0x43
 8002312:	f7ff fc49 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002316:	200a      	movs	r0, #10
 8002318:	f7ff fc46 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800231c:	200f      	movs	r0, #15
 800231e:	f7ff fc43 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002322:	2000      	movs	r0, #0
 8002324:	f7ff fc40 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002328:	2000      	movs	r0, #0
 800232a:	f7ff fc3d 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff fc3a 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002334:	2000      	movs	r0, #0
 8002336:	f7ff fc37 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800233a:	20e1      	movs	r0, #225	@ 0xe1
 800233c:	f7ff fc24 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002340:	2000      	movs	r0, #0
 8002342:	f7ff fc31 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002346:	2015      	movs	r0, #21
 8002348:	f7ff fc2e 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800234c:	2017      	movs	r0, #23
 800234e:	f7ff fc2b 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002352:	2007      	movs	r0, #7
 8002354:	f7ff fc28 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002358:	2011      	movs	r0, #17
 800235a:	f7ff fc25 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800235e:	2006      	movs	r0, #6
 8002360:	f7ff fc22 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002364:	202b      	movs	r0, #43	@ 0x2b
 8002366:	f7ff fc1f 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800236a:	2056      	movs	r0, #86	@ 0x56
 800236c:	f7ff fc1c 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002370:	203c      	movs	r0, #60	@ 0x3c
 8002372:	f7ff fc19 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002376:	2005      	movs	r0, #5
 8002378:	f7ff fc16 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800237c:	2010      	movs	r0, #16
 800237e:	f7ff fc13 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002382:	200f      	movs	r0, #15
 8002384:	f7ff fc10 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002388:	203f      	movs	r0, #63	@ 0x3f
 800238a:	f7ff fc0d 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800238e:	203f      	movs	r0, #63	@ 0x3f
 8002390:	f7ff fc0a 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002394:	200f      	movs	r0, #15
 8002396:	f7ff fc07 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800239a:	202b      	movs	r0, #43	@ 0x2b
 800239c:	f7ff fbf4 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7ff fc01 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7ff fbfe 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7ff fbfb 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80023b2:	203f      	movs	r0, #63	@ 0x3f
 80023b4:	f7ff fbf8 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80023b8:	202a      	movs	r0, #42	@ 0x2a
 80023ba:	f7ff fbe5 	bl	8001b88 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80023be:	2000      	movs	r0, #0
 80023c0:	f7ff fbf2 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff fbef 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023ca:	2000      	movs	r0, #0
 80023cc:	f7ff fbec 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80023d0:	20ef      	movs	r0, #239	@ 0xef
 80023d2:	f7ff fbe9 	bl	8001ba8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80023d6:	2011      	movs	r0, #17
 80023d8:	f7ff fbd6 	bl	8001b88 <LCD_WR_REG>
	HAL_Delay(120);
 80023dc:	2078      	movs	r0, #120	@ 0x78
 80023de:	f001 fb91 	bl	8003b04 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80023e2:	2029      	movs	r0, #41	@ 0x29
 80023e4:	f7ff fbd0 	bl	8001b88 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80023e8:	2201      	movs	r2, #1
 80023ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023ee:	4804      	ldr	r0, [pc, #16]	@ (8002400 <lcd_init+0x2bc>)
 80023f0:	f002 fe6e 	bl	80050d0 <HAL_GPIO_WritePin>
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40020800 	.word	0x40020800
 80023fc:	20000214 	.word	0x20000214
 8002400:	40020000 	.word	0x40020000

08002404 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b08b      	sub	sp, #44	@ 0x2c
 8002408:	af04      	add	r7, sp, #16
 800240a:	60ba      	str	r2, [r7, #8]
 800240c:	461a      	mov	r2, r3
 800240e:	4603      	mov	r3, r0
 8002410:	81fb      	strh	r3, [r7, #14]
 8002412:	460b      	mov	r3, r1
 8002414:	81bb      	strh	r3, [r7, #12]
 8002416:	4613      	mov	r3, r2
 8002418:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800241a:	89fb      	ldrh	r3, [r7, #14]
 800241c:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 800241e:	2300      	movs	r3, #0
 8002420:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002422:	e048      	b.n	80024b6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002424:	7dfb      	ldrb	r3, [r7, #23]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d145      	bne.n	80024b6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800242a:	89fa      	ldrh	r2, [r7, #14]
 800242c:	4b26      	ldr	r3, [pc, #152]	@ (80024c8 <lcd_ShowStr+0xc4>)
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	4619      	mov	r1, r3
 8002432:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002436:	085b      	lsrs	r3, r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	1acb      	subs	r3, r1, r3
 800243c:	429a      	cmp	r2, r3
 800243e:	dc3f      	bgt.n	80024c0 <lcd_ShowStr+0xbc>
 8002440:	89ba      	ldrh	r2, [r7, #12]
 8002442:	4b21      	ldr	r3, [pc, #132]	@ (80024c8 <lcd_ShowStr+0xc4>)
 8002444:	885b      	ldrh	r3, [r3, #2]
 8002446:	4619      	mov	r1, r3
 8002448:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800244c:	1acb      	subs	r3, r1, r3
 800244e:	429a      	cmp	r2, r3
 8002450:	dc36      	bgt.n	80024c0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b80      	cmp	r3, #128	@ 0x80
 8002458:	d902      	bls.n	8002460 <lcd_ShowStr+0x5c>
 800245a:	2301      	movs	r3, #1
 800245c:	75fb      	strb	r3, [r7, #23]
 800245e:	e02a      	b.n	80024b6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b0d      	cmp	r3, #13
 8002466:	d10b      	bne.n	8002480 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002468:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800246c:	b29a      	uxth	r2, r3
 800246e:	89bb      	ldrh	r3, [r7, #12]
 8002470:	4413      	add	r3, r2
 8002472:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002474:	8abb      	ldrh	r3, [r7, #20]
 8002476:	81fb      	strh	r3, [r7, #14]
					str++;
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	3301      	adds	r3, #1
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	e017      	b.n	80024b0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	781a      	ldrb	r2, [r3, #0]
 8002484:	88fc      	ldrh	r4, [r7, #6]
 8002486:	89b9      	ldrh	r1, [r7, #12]
 8002488:	89f8      	ldrh	r0, [r7, #14]
 800248a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800248e:	9302      	str	r3, [sp, #8]
 8002490:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	4623      	mov	r3, r4
 800249c:	f7ff fc3c 	bl	8001d18 <lcd_ShowChar>
					x+=sizey/2;
 80024a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	89fb      	ldrh	r3, [r7, #14]
 80024ac:	4413      	add	r3, r2
 80024ae:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	3301      	adds	r3, #1
 80024b4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1b2      	bne.n	8002424 <lcd_ShowStr+0x20>
 80024be:	e000      	b.n	80024c2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80024c0:	bf00      	nop
			}
		}
	}
}
 80024c2:	371c      	adds	r7, #28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd90      	pop	{r4, r7, pc}
 80024c8:	20000214 	.word	0x20000214

080024cc <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80024d0:	2201      	movs	r2, #1
 80024d2:	2140      	movs	r1, #64	@ 0x40
 80024d4:	4802      	ldr	r0, [pc, #8]	@ (80024e0 <led7_init+0x14>)
 80024d6:	f002 fdfb 	bl	80050d0 <HAL_GPIO_WritePin>
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40021800 	.word	0x40021800

080024e4 <led7_Scan>:

void led7_Scan(){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80024e8:	4b3f      	ldr	r3, [pc, #252]	@ (80025e8 <led7_Scan+0x104>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	4b3d      	ldr	r3, [pc, #244]	@ (80025e8 <led7_Scan+0x104>)
 80024f2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80024f4:	4b3d      	ldr	r3, [pc, #244]	@ (80025ec <led7_Scan+0x108>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a3d      	ldr	r2, [pc, #244]	@ (80025f0 <led7_Scan+0x10c>)
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	b21a      	sxth	r2, r3
 8002500:	4b39      	ldr	r3, [pc, #228]	@ (80025e8 <led7_Scan+0x104>)
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	b21b      	sxth	r3, r3
 8002506:	4313      	orrs	r3, r2
 8002508:	b21b      	sxth	r3, r3
 800250a:	b29a      	uxth	r2, r3
 800250c:	4b36      	ldr	r3, [pc, #216]	@ (80025e8 <led7_Scan+0x104>)
 800250e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002510:	4b36      	ldr	r3, [pc, #216]	@ (80025ec <led7_Scan+0x108>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d847      	bhi.n	80025a8 <led7_Scan+0xc4>
 8002518:	a201      	add	r2, pc, #4	@ (adr r2, 8002520 <led7_Scan+0x3c>)
 800251a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251e:	bf00      	nop
 8002520:	08002531 	.word	0x08002531
 8002524:	0800254f 	.word	0x0800254f
 8002528:	0800256d 	.word	0x0800256d
 800252c:	0800258b 	.word	0x0800258b
	case 0:
		spi_buffer |= 0x00b0;
 8002530:	4b2d      	ldr	r3, [pc, #180]	@ (80025e8 <led7_Scan+0x104>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002538:	b29a      	uxth	r2, r3
 800253a:	4b2b      	ldr	r3, [pc, #172]	@ (80025e8 <led7_Scan+0x104>)
 800253c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800253e:	4b2a      	ldr	r3, [pc, #168]	@ (80025e8 <led7_Scan+0x104>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b27      	ldr	r3, [pc, #156]	@ (80025e8 <led7_Scan+0x104>)
 800254a:	801a      	strh	r2, [r3, #0]
		break;
 800254c:	e02d      	b.n	80025aa <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800254e:	4b26      	ldr	r3, [pc, #152]	@ (80025e8 <led7_Scan+0x104>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8002556:	b29a      	uxth	r2, r3
 8002558:	4b23      	ldr	r3, [pc, #140]	@ (80025e8 <led7_Scan+0x104>)
 800255a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800255c:	4b22      	ldr	r3, [pc, #136]	@ (80025e8 <led7_Scan+0x104>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	f023 0320 	bic.w	r3, r3, #32
 8002564:	b29a      	uxth	r2, r3
 8002566:	4b20      	ldr	r3, [pc, #128]	@ (80025e8 <led7_Scan+0x104>)
 8002568:	801a      	strh	r2, [r3, #0]
		break;
 800256a:	e01e      	b.n	80025aa <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800256c:	4b1e      	ldr	r3, [pc, #120]	@ (80025e8 <led7_Scan+0x104>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8002574:	b29a      	uxth	r2, r3
 8002576:	4b1c      	ldr	r3, [pc, #112]	@ (80025e8 <led7_Scan+0x104>)
 8002578:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800257a:	4b1b      	ldr	r3, [pc, #108]	@ (80025e8 <led7_Scan+0x104>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	f023 0310 	bic.w	r3, r3, #16
 8002582:	b29a      	uxth	r2, r3
 8002584:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <led7_Scan+0x104>)
 8002586:	801a      	strh	r2, [r3, #0]
		break;
 8002588:	e00f      	b.n	80025aa <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800258a:	4b17      	ldr	r3, [pc, #92]	@ (80025e8 <led7_Scan+0x104>)
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002592:	b29a      	uxth	r2, r3
 8002594:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <led7_Scan+0x104>)
 8002596:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002598:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <led7_Scan+0x104>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <led7_Scan+0x104>)
 80025a4:	801a      	strh	r2, [r3, #0]
		break;
 80025a6:	e000      	b.n	80025aa <led7_Scan+0xc6>
	default:
		break;
 80025a8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80025aa:	4b10      	ldr	r3, [pc, #64]	@ (80025ec <led7_Scan+0x108>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	425a      	negs	r2, r3
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	f002 0203 	and.w	r2, r2, #3
 80025ba:	bf58      	it	pl
 80025bc:	4253      	negpl	r3, r2
 80025be:	4a0b      	ldr	r2, [pc, #44]	@ (80025ec <led7_Scan+0x108>)
 80025c0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2140      	movs	r1, #64	@ 0x40
 80025c6:	480b      	ldr	r0, [pc, #44]	@ (80025f4 <led7_Scan+0x110>)
 80025c8:	f002 fd82 	bl	80050d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80025cc:	2301      	movs	r3, #1
 80025ce:	2202      	movs	r2, #2
 80025d0:	4905      	ldr	r1, [pc, #20]	@ (80025e8 <led7_Scan+0x104>)
 80025d2:	4809      	ldr	r0, [pc, #36]	@ (80025f8 <led7_Scan+0x114>)
 80025d4:	f004 fc23 	bl	8006e1e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80025d8:	2201      	movs	r2, #1
 80025da:	2140      	movs	r1, #64	@ 0x40
 80025dc:	4805      	ldr	r0, [pc, #20]	@ (80025f4 <led7_Scan+0x110>)
 80025de:	f002 fd77 	bl	80050d0 <HAL_GPIO_WritePin>
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	2000000e 	.word	0x2000000e
 80025ec:	2000021c 	.word	0x2000021c
 80025f0:	20000000 	.word	0x20000000
 80025f4:	40021800 	.word	0x40021800
 80025f8:	20000240 	.word	0x20000240

080025fc <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	4613      	mov	r3, r2
 8002608:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db0e      	blt.n	800262e <led7_SetDigit+0x32>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b09      	cmp	r3, #9
 8002614:	dc0b      	bgt.n	800262e <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8002616:	4a09      	ldr	r2, [pc, #36]	@ (800263c <led7_SetDigit+0x40>)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4413      	add	r3, r2
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	b2d9      	uxtb	r1, r3
 8002624:	4a06      	ldr	r2, [pc, #24]	@ (8002640 <led7_SetDigit+0x44>)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4413      	add	r3, r2
 800262a:	460a      	mov	r2, r1
 800262c:	701a      	strb	r2, [r3, #0]
	}
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000004 	.word	0x20000004
 8002640:	20000000 	.word	0x20000000

08002644 <led7_SetColon>:

void led7_SetColon(uint8_t status){
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d107      	bne.n	8002664 <led7_SetColon+0x20>
 8002654:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <led7_SetColon+0x3c>)
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	f023 0308 	bic.w	r3, r3, #8
 800265c:	b29a      	uxth	r2, r3
 800265e:	4b08      	ldr	r3, [pc, #32]	@ (8002680 <led7_SetColon+0x3c>)
 8002660:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 8002662:	e006      	b.n	8002672 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <led7_SetColon+0x3c>)
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	f043 0308 	orr.w	r3, r3, #8
 800266c:	b29a      	uxth	r2, r3
 800266e:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <led7_SetColon+0x3c>)
 8002670:	801a      	strh	r2, [r3, #0]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	2000000e 	.word	0x2000000e

08002684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002688:	f001 f9ca 	bl	8003a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800268c:	f000 f83c 	bl	8002708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002690:	f7ff f8da 	bl	8001848 <MX_GPIO_Init>
  MX_DMA_Init();
 8002694:	f7fe fdc2 	bl	800121c <MX_DMA_Init>
  MX_SPI1_Init();
 8002698:	f000 fcdc 	bl	8003054 <MX_SPI1_Init>
  MX_FSMC_Init();
 800269c:	f7ff f804 	bl	80016a8 <MX_FSMC_Init>
  MX_I2C1_Init();
 80026a0:	f7ff f9fc 	bl	8001a9c <MX_I2C1_Init>
  MX_TIM13_Init();
 80026a4:	f000 fe68 	bl	8003378 <MX_TIM13_Init>
  MX_TIM2_Init();
 80026a8:	f000 fe1a 	bl	80032e0 <MX_TIM2_Init>
  MX_ADC1_Init();
 80026ac:	f7fe fbfe 	bl	8000eac <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80026b0:	f001 f86e 	bl	8003790 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80026b4:	f001 f896 	bl	80037e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80026b8:	f000 f890 	bl	80027dc <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7ff fae1 	bl	8001c84 <lcd_Clear>
 updateTime();
 80026c2:	f000 f9f9 	bl	8002ab8 <updateTime>
 flag_timer4 = 1;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002700 <main+0x7c>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	801a      	strh	r2, [r3, #0]
	  //light(0,4095)
	  //Potentiometer(0,4095)
	  //voltage (V)
	  //current (mA)
	  //buzzer (0-99)
	  while(!flag_timer2);
 80026cc:	bf00      	nop
 80026ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <main+0x80>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0fb      	beq.n	80026ce <main+0x4a>
	  flag_timer2 = 0;
 80026d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002704 <main+0x80>)
 80026d8:	2200      	movs	r2, #0
 80026da:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 80026dc:	f7fe fd10 	bl	8001100 <button_Scan>
	  test_LedDebug();
 80026e0:	f000 f896 	bl	8002810 <test_LedDebug>
	  test_Adc();
 80026e4:	f000 f8fa 	bl	80028dc <test_Adc>
	  test_Buzzer();
 80026e8:	f000 f9ca 	bl	8002a80 <test_Buzzer>
	  ds3231_ReadTime();
 80026ec:	f7fe fe1c 	bl	8001328 <ds3231_ReadTime>
	  displayTime();
 80026f0:	f000 fa02 	bl	8002af8 <displayTime>
	  fsm_machine();
 80026f4:	f7fe fed2 	bl	800149c <fsm_machine>
	  send_to_esp();
 80026f8:	f000 fab8 	bl	8002c6c <send_to_esp>
	  while(!flag_timer2);
 80026fc:	e7e6      	b.n	80026cc <main+0x48>
 80026fe:	bf00      	nop
 8002700:	20000238 	.word	0x20000238
 8002704:	2000022e 	.word	0x2000022e

08002708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b094      	sub	sp, #80	@ 0x50
 800270c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800270e:	f107 0320 	add.w	r3, r7, #32
 8002712:	2230      	movs	r2, #48	@ 0x30
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f007 fa90 	bl	8009c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800271c:	f107 030c 	add.w	r3, r7, #12
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	4b28      	ldr	r3, [pc, #160]	@ (80027d4 <SystemClock_Config+0xcc>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	4a27      	ldr	r2, [pc, #156]	@ (80027d4 <SystemClock_Config+0xcc>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800273a:	6413      	str	r3, [r2, #64]	@ 0x40
 800273c:	4b25      	ldr	r3, [pc, #148]	@ (80027d4 <SystemClock_Config+0xcc>)
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002748:	2300      	movs	r3, #0
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	4b22      	ldr	r3, [pc, #136]	@ (80027d8 <SystemClock_Config+0xd0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a21      	ldr	r2, [pc, #132]	@ (80027d8 <SystemClock_Config+0xd0>)
 8002752:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b1f      	ldr	r3, [pc, #124]	@ (80027d8 <SystemClock_Config+0xd0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002764:	2302      	movs	r3, #2
 8002766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002768:	2301      	movs	r3, #1
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800276c:	2310      	movs	r3, #16
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002770:	2302      	movs	r3, #2
 8002772:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002774:	2300      	movs	r3, #0
 8002776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002778:	2308      	movs	r3, #8
 800277a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800277c:	23a8      	movs	r3, #168	@ 0xa8
 800277e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002780:	2302      	movs	r3, #2
 8002782:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002784:	2304      	movs	r3, #4
 8002786:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002788:	f107 0320 	add.w	r3, r7, #32
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fe25 	bl	80063dc <HAL_RCC_OscConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002798:	f000 fab0 	bl	8002cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800279c:	230f      	movs	r3, #15
 800279e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027a0:	2302      	movs	r3, #2
 80027a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80027ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027b4:	f107 030c 	add.w	r3, r7, #12
 80027b8:	2105      	movs	r1, #5
 80027ba:	4618      	mov	r0, r3
 80027bc:	f004 f886 	bl	80068cc <HAL_RCC_ClockConfig>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80027c6:	f000 fa99 	bl	8002cfc <Error_Handler>
  }
}
 80027ca:	bf00      	nop
 80027cc:	3750      	adds	r7, #80	@ 0x50
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40007000 	.word	0x40007000

080027dc <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
	  led7_init();
 80027e0:	f7ff fe74 	bl	80024cc <led7_init>
	  timer_init();
 80027e4:	f000 fb7a 	bl	8002edc <timer_init>
	  button_init();
 80027e8:	f7fe fc7e 	bl	80010e8 <button_init>
	  lcd_init();
 80027ec:	f7ff fcaa 	bl	8002144 <lcd_init>
	  sensor_init();
 80027f0:	f000 fa8a 	bl	8002d08 <sensor_init>
	  buzzer_init();
 80027f4:	f7fe fcf0 	bl	80011d8 <buzzer_init>
	  uart_init_rs232();
 80027f8:	f000 fe82 	bl	8003500 <uart_init_rs232>
	  uart_init_esp();
 80027fc:	f000 fefe 	bl	80035fc <uart_init_esp>
	  ds3231_init();
 8002800:	f7fe fd2c 	bl	800125c <ds3231_init>
	  setTimer2(50);
 8002804:	2032      	movs	r0, #50	@ 0x32
 8002806:	f000 fb73 	bl	8002ef0 <setTimer2>
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <test_LedDebug>:

uint8_t count_led_debug = 0;
uint8_t state_clock = 0;

void test_LedDebug(){
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 8002814:	4b15      	ldr	r3, [pc, #84]	@ (800286c <test_LedDebug+0x5c>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	4b15      	ldr	r3, [pc, #84]	@ (8002870 <test_LedDebug+0x60>)
 800281c:	fb83 1302 	smull	r1, r3, r3, r2
 8002820:	10d9      	asrs	r1, r3, #3
 8002822:	17d3      	asrs	r3, r2, #31
 8002824:	1ac9      	subs	r1, r1, r3
 8002826:	460b      	mov	r3, r1
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	1ad1      	subs	r1, r2, r3
 8002830:	b2ca      	uxtb	r2, r1
 8002832:	4b0e      	ldr	r3, [pc, #56]	@ (800286c <test_LedDebug+0x5c>)
 8002834:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 8002836:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <test_LedDebug+0x5c>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d114      	bne.n	8002868 <test_LedDebug+0x58>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800283e:	2110      	movs	r1, #16
 8002840:	480c      	ldr	r0, [pc, #48]	@ (8002874 <test_LedDebug+0x64>)
 8002842:	f002 fc5e 	bl	8005102 <HAL_GPIO_TogglePin>
		if(state_clock ==0){
 8002846:	4b0c      	ldr	r3, [pc, #48]	@ (8002878 <test_LedDebug+0x68>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <test_LedDebug+0x4c>
			led7_SetColon(1);
 800284e:	2001      	movs	r0, #1
 8002850:	f7ff fef8 	bl	8002644 <led7_SetColon>
			state_clock = 1;
 8002854:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <test_LedDebug+0x68>)
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
		}else{
			state_clock = 0;
			led7_SetColon(0);
		}
	}
}
 800285a:	e005      	b.n	8002868 <test_LedDebug+0x58>
			state_clock = 0;
 800285c:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <test_LedDebug+0x68>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
			led7_SetColon(0);
 8002862:	2000      	movs	r0, #0
 8002864:	f7ff feee 	bl	8002644 <led7_SetColon>
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000220 	.word	0x20000220
 8002870:	66666667 	.word	0x66666667
 8002874:	40021000 	.word	0x40021000
 8002878:	20000221 	.word	0x20000221

0800287c <isButtonUp>:

uint8_t isButtonUp()
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
    if (button_count[3] == 1)
 8002880:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <isButtonUp+0x1c>)
 8002882:	88db      	ldrh	r3, [r3, #6]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <isButtonUp+0x10>
        return 1;
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <isButtonUp+0x12>
    else
        return 0;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	20000130 	.word	0x20000130

0800289c <isButtonDown>:

uint8_t isButtonDown()
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
    if (button_count[7] == 1)
 80028a0:	4b05      	ldr	r3, [pc, #20]	@ (80028b8 <isButtonDown+0x1c>)
 80028a2:	89db      	ldrh	r3, [r3, #14]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <isButtonDown+0x10>
        return 1;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <isButtonDown+0x12>
    else
        return 0;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	20000130 	.word	0x20000130

080028bc <isButtonRight>:

uint8_t isButtonRight()
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
    if (button_count[11] == 1)
 80028c0:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <isButtonRight+0x1c>)
 80028c2:	8adb      	ldrh	r3, [r3, #22]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <isButtonRight+0x10>
        return 1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <isButtonRight+0x12>
    else
        return 0;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	20000130 	.word	0x20000130

080028dc <test_Adc>:

uint8_t count_adc = 0;

void test_Adc(){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1)%20;
 80028e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002a58 <test_Adc+0x17c>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	4b5c      	ldr	r3, [pc, #368]	@ (8002a5c <test_Adc+0x180>)
 80028ea:	fb83 1302 	smull	r1, r3, r3, r2
 80028ee:	10d9      	asrs	r1, r3, #3
 80028f0:	17d3      	asrs	r3, r2, #31
 80028f2:	1ac9      	subs	r1, r1, r3
 80028f4:	460b      	mov	r3, r1
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	1ad1      	subs	r1, r2, r3
 80028fe:	b2ca      	uxtb	r2, r1
 8002900:	4b55      	ldr	r3, [pc, #340]	@ (8002a58 <test_Adc+0x17c>)
 8002902:	701a      	strb	r2, [r3, #0]
	if(count_adc == 0){
 8002904:	4b54      	ldr	r3, [pc, #336]	@ (8002a58 <test_Adc+0x17c>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 80a1 	bne.w	8002a50 <test_Adc+0x174>
		sensor_Read();
 800290e:	f000 fa09 	bl	8002d24 <sensor_Read>
		lcd_ShowStr(10, 0, "Wattage:", RED, BLACK, 16, 0);
 8002912:	2300      	movs	r3, #0
 8002914:	9302      	str	r3, [sp, #8]
 8002916:	2310      	movs	r3, #16
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	2300      	movs	r3, #0
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002922:	4a4f      	ldr	r2, [pc, #316]	@ (8002a60 <test_Adc+0x184>)
 8002924:	2100      	movs	r1, #0
 8002926:	200a      	movs	r0, #10
 8002928:	f7ff fd6c 	bl	8002404 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 0,getWattage(), 4, RED, BLACK, 16);
 800292c:	f7fe fd60 	bl	80013f0 <getWattage>
 8002930:	eef0 7a40 	vmov.f32	s15, s0
 8002934:	2310      	movs	r3, #16
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	2300      	movs	r3, #0
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002940:	2204      	movs	r2, #4
 8002942:	eeb0 0a67 	vmov.f32	s0, s15
 8002946:	2100      	movs	r1, #0
 8002948:	2082      	movs	r0, #130	@ 0x82
 800294a:	f7ff fb4f 	bl	8001fec <lcd_ShowFloatNum>
		if(!isLight()){
 800294e:	f7fe fd63 	bl	8001418 <isLight>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d11a      	bne.n	800298e <test_Adc+0xb2>
			lcd_ShowStr(10, 20, "Light:", RED, BLACK, 16, 0);
 8002958:	2300      	movs	r3, #0
 800295a:	9302      	str	r3, [sp, #8]
 800295c:	2310      	movs	r3, #16
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	2300      	movs	r3, #0
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002968:	4a3e      	ldr	r2, [pc, #248]	@ (8002a64 <test_Adc+0x188>)
 800296a:	2114      	movs	r1, #20
 800296c:	200a      	movs	r0, #10
 800296e:	f7ff fd49 	bl	8002404 <lcd_ShowStr>
			lcd_ShowStr(130, 20,"Strong", RED, BLACK, 16, 0);
 8002972:	2300      	movs	r3, #0
 8002974:	9302      	str	r3, [sp, #8]
 8002976:	2310      	movs	r3, #16
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	2300      	movs	r3, #0
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002982:	4a39      	ldr	r2, [pc, #228]	@ (8002a68 <test_Adc+0x18c>)
 8002984:	2114      	movs	r1, #20
 8002986:	2082      	movs	r0, #130	@ 0x82
 8002988:	f7ff fd3c 	bl	8002404 <lcd_ShowStr>
 800298c:	e019      	b.n	80029c2 <test_Adc+0xe6>
		}else{
			lcd_ShowStr(10, 20, "Light:", RED, BLACK, 16, 0);
 800298e:	2300      	movs	r3, #0
 8002990:	9302      	str	r3, [sp, #8]
 8002992:	2310      	movs	r3, #16
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	2300      	movs	r3, #0
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800299e:	4a31      	ldr	r2, [pc, #196]	@ (8002a64 <test_Adc+0x188>)
 80029a0:	2114      	movs	r1, #20
 80029a2:	200a      	movs	r0, #10
 80029a4:	f7ff fd2e 	bl	8002404 <lcd_ShowStr>
			lcd_ShowStr(130, 20,"Weak  ", RED, BLACK, 16, 0);
 80029a8:	2300      	movs	r3, #0
 80029aa:	9302      	str	r3, [sp, #8]
 80029ac:	2310      	movs	r3, #16
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	2300      	movs	r3, #0
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80029b8:	4a2c      	ldr	r2, [pc, #176]	@ (8002a6c <test_Adc+0x190>)
 80029ba:	2114      	movs	r1, #20
 80029bc:	2082      	movs	r0, #130	@ 0x82
 80029be:	f7ff fd21 	bl	8002404 <lcd_ShowStr>
		}
		//lcd_ShowStr(10, 140, "Light:", RED, BLACK, 16, 0);
		//lcd_ShowIntNum(130, 140, sensor_GetLight(), 4, RED, BLACK, 16);
		lcd_ShowStr(10, 40, "Potentiometer:", RED, BLACK, 16, 0);
 80029c2:	2300      	movs	r3, #0
 80029c4:	9302      	str	r3, [sp, #8]
 80029c6:	2310      	movs	r3, #16
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	2300      	movs	r3, #0
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80029d2:	4a27      	ldr	r2, [pc, #156]	@ (8002a70 <test_Adc+0x194>)
 80029d4:	2128      	movs	r1, #40	@ 0x28
 80029d6:	200a      	movs	r0, #10
 80029d8:	f7ff fd14 	bl	8002404 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 40, ((float)sensor_GetPotentiometer()/4095)*100, 4, RED, BLACK, 16);
 80029dc:	f000 f9bc 	bl	8002d58 <sensor_GetPotentiometer>
 80029e0:	4603      	mov	r3, r0
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029ea:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8002a74 <test_Adc+0x198>
 80029ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029f2:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002a78 <test_Adc+0x19c>
 80029f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029fa:	2310      	movs	r3, #16
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	2300      	movs	r3, #0
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002a06:	2204      	movs	r2, #4
 8002a08:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0c:	2128      	movs	r1, #40	@ 0x28
 8002a0e:	2082      	movs	r0, #130	@ 0x82
 8002a10:	f7ff faec 	bl	8001fec <lcd_ShowFloatNum>
		//lcd_ShowIntNum(130, 40, sensor_GetPotentiometer(), 4, RED, BLACK, 16);
		lcd_ShowStr(10, 60, "Temperature:", RED, BLACK, 16, 0);
 8002a14:	2300      	movs	r3, #0
 8002a16:	9302      	str	r3, [sp, #8]
 8002a18:	2310      	movs	r3, #16
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002a24:	4a15      	ldr	r2, [pc, #84]	@ (8002a7c <test_Adc+0x1a0>)
 8002a26:	213c      	movs	r1, #60	@ 0x3c
 8002a28:	200a      	movs	r0, #10
 8002a2a:	f7ff fceb 	bl	8002404 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 60,sensor_GetTemperature(), 4, RED, BLACK, 16);
 8002a2e:	f000 fa37 	bl	8002ea0 <sensor_GetTemperature>
 8002a32:	eef0 7a40 	vmov.f32	s15, s0
 8002a36:	2310      	movs	r3, #16
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002a42:	2204      	movs	r2, #4
 8002a44:	eeb0 0a67 	vmov.f32	s0, s15
 8002a48:	213c      	movs	r1, #60	@ 0x3c
 8002a4a:	2082      	movs	r0, #130	@ 0x82
 8002a4c:	f7ff face 	bl	8001fec <lcd_ShowFloatNum>
	}
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000222 	.word	0x20000222
 8002a5c:	66666667 	.word	0x66666667
 8002a60:	0800a5c8 	.word	0x0800a5c8
 8002a64:	0800a5d4 	.word	0x0800a5d4
 8002a68:	0800a5dc 	.word	0x0800a5dc
 8002a6c:	0800a5e4 	.word	0x0800a5e4
 8002a70:	0800a5ec 	.word	0x0800a5ec
 8002a74:	457ff000 	.word	0x457ff000
 8002a78:	42c80000 	.word	0x42c80000
 8002a7c:	0800a5fc 	.word	0x0800a5fc

08002a80 <test_Buzzer>:

void test_Buzzer(){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
	if(isButtonUp()){
 8002a84:	f7ff fefa 	bl	800287c <isButtonUp>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <test_Buzzer+0x14>
		buzzer_SetVolume(50);
 8002a8e:	2032      	movs	r0, #50	@ 0x32
 8002a90:	f7fe fbac 	bl	80011ec <buzzer_SetVolume>
	}

	if(isButtonDown()){
 8002a94:	f7ff ff02 	bl	800289c <isButtonDown>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <test_Buzzer+0x24>
		buzzer_SetVolume(0);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fe fba4 	bl	80011ec <buzzer_SetVolume>
	}

	if(isButtonRight()){
 8002aa4:	f7ff ff0a 	bl	80028bc <isButtonRight>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <test_Buzzer+0x34>
		buzzer_SetVolume(25);
 8002aae:	2019      	movs	r0, #25
 8002ab0:	f7fe fb9c 	bl	80011ec <buzzer_SetVolume>
	}

}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <updateTime>:

void updateTime(){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 8002abc:	2117      	movs	r1, #23
 8002abe:	2006      	movs	r0, #6
 8002ac0:	f7fe fc10 	bl	80012e4 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 10);
 8002ac4:	210a      	movs	r1, #10
 8002ac6:	2005      	movs	r0, #5
 8002ac8:	f7fe fc0c 	bl	80012e4 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 20);
 8002acc:	2114      	movs	r1, #20
 8002ace:	2004      	movs	r0, #4
 8002ad0:	f7fe fc08 	bl	80012e4 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8002ad4:	2106      	movs	r1, #6
 8002ad6:	2003      	movs	r0, #3
 8002ad8:	f7fe fc04 	bl	80012e4 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 20);
 8002adc:	2114      	movs	r1, #20
 8002ade:	2002      	movs	r0, #2
 8002ae0:	f7fe fc00 	bl	80012e4 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 11);
 8002ae4:	210b      	movs	r1, #11
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f7fe fbfc 	bl	80012e4 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 23);
 8002aec:	2117      	movs	r1, #23
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7fe fbf8 	bl	80012e4 <ds3231_Write>
}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <displayTime>:

void displayTime(){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8002afe:	4b53      	ldr	r3, [pc, #332]	@ (8002c4c <displayTime+0x154>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	2318      	movs	r3, #24
 8002b06:	9302      	str	r3, [sp, #8]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	2302      	movs	r3, #2
 8002b14:	2164      	movs	r1, #100	@ 0x64
 8002b16:	2046      	movs	r0, #70	@ 0x46
 8002b18:	f7ff f9ea 	bl	8001ef0 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8002b1c:	4b4c      	ldr	r3, [pc, #304]	@ (8002c50 <displayTime+0x158>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	2318      	movs	r3, #24
 8002b24:	9302      	str	r3, [sp, #8]
 8002b26:	2300      	movs	r3, #0
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	2302      	movs	r3, #2
 8002b32:	2164      	movs	r1, #100	@ 0x64
 8002b34:	206e      	movs	r0, #110	@ 0x6e
 8002b36:	f7ff f9db 	bl	8001ef0 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8002b3a:	4b46      	ldr	r3, [pc, #280]	@ (8002c54 <displayTime+0x15c>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	2318      	movs	r3, #24
 8002b42:	9302      	str	r3, [sp, #8]
 8002b44:	2300      	movs	r3, #0
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	2302      	movs	r3, #2
 8002b50:	2164      	movs	r1, #100	@ 0x64
 8002b52:	2096      	movs	r0, #150	@ 0x96
 8002b54:	f7ff f9cc 	bl	8001ef0 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8002b58:	4b3f      	ldr	r3, [pc, #252]	@ (8002c58 <displayTime+0x160>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2318      	movs	r3, #24
 8002b60:	9302      	str	r3, [sp, #8]
 8002b62:	2300      	movs	r3, #0
 8002b64:	9301      	str	r3, [sp, #4]
 8002b66:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	2182      	movs	r1, #130	@ 0x82
 8002b70:	2014      	movs	r0, #20
 8002b72:	f7ff f9bd 	bl	8001ef0 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8002b76:	4b39      	ldr	r3, [pc, #228]	@ (8002c5c <displayTime+0x164>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2318      	movs	r3, #24
 8002b7e:	9302      	str	r3, [sp, #8]
 8002b80:	2300      	movs	r3, #0
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	2182      	movs	r1, #130	@ 0x82
 8002b8e:	2046      	movs	r0, #70	@ 0x46
 8002b90:	f7ff f9ae 	bl	8001ef0 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8002b94:	4b32      	ldr	r3, [pc, #200]	@ (8002c60 <displayTime+0x168>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	2318      	movs	r3, #24
 8002b9c:	9302      	str	r3, [sp, #8]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2302      	movs	r3, #2
 8002baa:	2182      	movs	r1, #130	@ 0x82
 8002bac:	206e      	movs	r0, #110	@ 0x6e
 8002bae:	f7ff f99f 	bl	8001ef0 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8002bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8002c64 <displayTime+0x16c>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2318      	movs	r3, #24
 8002bba:	9302      	str	r3, [sp, #8]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	2182      	movs	r1, #130	@ 0x82
 8002bca:	2096      	movs	r0, #150	@ 0x96
 8002bcc:	f7ff f990 	bl	8001ef0 <lcd_ShowIntNum>

	led7_SetDigit(ds3231_hours/10, 0, 0);
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c4c <displayTime+0x154>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4a24      	ldr	r2, [pc, #144]	@ (8002c68 <displayTime+0x170>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	08db      	lsrs	r3, r3, #3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2200      	movs	r2, #0
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fd0a 	bl	80025fc <led7_SetDigit>
	led7_SetDigit(ds3231_hours%10, 1, 0);
 8002be8:	4b18      	ldr	r3, [pc, #96]	@ (8002c4c <displayTime+0x154>)
 8002bea:	781a      	ldrb	r2, [r3, #0]
 8002bec:	4b1e      	ldr	r3, [pc, #120]	@ (8002c68 <displayTime+0x170>)
 8002bee:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf2:	08d9      	lsrs	r1, r3, #3
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2200      	movs	r2, #0
 8002c02:	2101      	movs	r1, #1
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fcf9 	bl	80025fc <led7_SetDigit>
	led7_SetDigit(ds3231_min/10, 2, 0);
 8002c0a:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <displayTime+0x158>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	4a16      	ldr	r2, [pc, #88]	@ (8002c68 <displayTime+0x170>)
 8002c10:	fba2 2303 	umull	r2, r3, r2, r3
 8002c14:	08db      	lsrs	r3, r3, #3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fced 	bl	80025fc <led7_SetDigit>
	led7_SetDigit(ds3231_min%10, 3, 0);
 8002c22:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <displayTime+0x158>)
 8002c24:	781a      	ldrb	r2, [r3, #0]
 8002c26:	4b10      	ldr	r3, [pc, #64]	@ (8002c68 <displayTime+0x170>)
 8002c28:	fba3 1302 	umull	r1, r3, r3, r2
 8002c2c:	08d9      	lsrs	r1, r3, #3
 8002c2e:	460b      	mov	r3, r1
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2103      	movs	r1, #3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fcdc 	bl	80025fc <led7_SetDigit>

}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	2000015b 	.word	0x2000015b
 8002c50:	2000015c 	.word	0x2000015c
 8002c54:	2000015d 	.word	0x2000015d
 8002c58:	2000015f 	.word	0x2000015f
 8002c5c:	2000015e 	.word	0x2000015e
 8002c60:	20000160 	.word	0x20000160
 8002c64:	20000161 	.word	0x20000161
 8002c68:	cccccccd 	.word	0xcccccccd

08002c6c <send_to_esp>:

uint8_t count_esp = 0;

void send_to_esp(){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
	count_esp = (count_esp + 1)%200;
 8002c72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <send_to_esp+0x74>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	4a1a      	ldr	r2, [pc, #104]	@ (8002ce4 <send_to_esp+0x78>)
 8002c7a:	fb82 1203 	smull	r1, r2, r2, r3
 8002c7e:	1191      	asrs	r1, r2, #6
 8002c80:	17da      	asrs	r2, r3, #31
 8002c82:	1a8a      	subs	r2, r1, r2
 8002c84:	21c8      	movs	r1, #200	@ 0xc8
 8002c86:	fb01 f202 	mul.w	r2, r1, r2
 8002c8a:	1a9a      	subs	r2, r3, r2
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	4b14      	ldr	r3, [pc, #80]	@ (8002ce0 <send_to_esp+0x74>)
 8002c90:	701a      	strb	r2, [r3, #0]
	if(count_esp == 0){
 8002c92:	4b13      	ldr	r3, [pc, #76]	@ (8002ce0 <send_to_esp+0x74>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d11d      	bne.n	8002cd6 <send_to_esp+0x6a>
		HAL_GPIO_TogglePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin);
 8002c9a:	2120      	movs	r1, #32
 8002c9c:	4812      	ldr	r0, [pc, #72]	@ (8002ce8 <send_to_esp+0x7c>)
 8002c9e:	f002 fa30 	bl	8005102 <HAL_GPIO_TogglePin>
		uart_ESPSendString("S");
 8002ca2:	4812      	ldr	r0, [pc, #72]	@ (8002cec <send_to_esp+0x80>)
 8002ca4:	f000 fcc0 	bl	8003628 <uart_ESPSendString>
		uart_ESPSendString("T");
 8002ca8:	4811      	ldr	r0, [pc, #68]	@ (8002cf0 <send_to_esp+0x84>)
 8002caa:	f000 fcbd 	bl	8003628 <uart_ESPSendString>
		int temp = (int)(sensor_GetTemperature()*100);
 8002cae:	f000 f8f7 	bl	8002ea0 <sensor_GetTemperature>
 8002cb2:	eef0 7a40 	vmov.f32	s15, s0
 8002cb6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002cf4 <send_to_esp+0x88>
 8002cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cc2:	ee17 3a90 	vmov	r3, s15
 8002cc6:	607b      	str	r3, [r7, #4]
		uart_ESPSendNum(temp);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fcc6 	bl	800365c <uart_ESPSendNum>
		uart_ESPSendString("#");
 8002cd0:	4809      	ldr	r0, [pc, #36]	@ (8002cf8 <send_to_esp+0x8c>)
 8002cd2:	f000 fca9 	bl	8003628 <uart_ESPSendString>
	}

}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000223 	.word	0x20000223
 8002ce4:	51eb851f 	.word	0x51eb851f
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	0800a60c 	.word	0x0800a60c
 8002cf0:	0800a610 	.word	0x0800a610
 8002cf4:	42c80000 	.word	0x42c80000
 8002cf8:	0800a614 	.word	0x0800a614

08002cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d00:	b672      	cpsid	i
}
 8002d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <Error_Handler+0x8>

08002d08 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8002d0c:	2205      	movs	r2, #5
 8002d0e:	4903      	ldr	r1, [pc, #12]	@ (8002d1c <sensor_init+0x14>)
 8002d10:	4803      	ldr	r0, [pc, #12]	@ (8002d20 <sensor_init+0x18>)
 8002d12:	f000 ff5f 	bl	8003bd4 <HAL_ADC_Start_DMA>
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000224 	.word	0x20000224
 8002d20:	20000088 	.word	0x20000088

08002d24 <sensor_Read>:

void sensor_Read(){
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002d28:	2205      	movs	r2, #5
 8002d2a:	4903      	ldr	r1, [pc, #12]	@ (8002d38 <sensor_Read+0x14>)
 8002d2c:	4803      	ldr	r0, [pc, #12]	@ (8002d3c <sensor_Read+0x18>)
 8002d2e:	f000 ff51 	bl	8003bd4 <HAL_ADC_Start_DMA>
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000224 	.word	0x20000224
 8002d3c:	20000088 	.word	0x20000088

08002d40 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002d44:	4b03      	ldr	r3, [pc, #12]	@ (8002d54 <sensor_GetLight+0x14>)
 8002d46:	889b      	ldrh	r3, [r3, #4]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000224 	.word	0x20000224

08002d58 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002d5c:	4b03      	ldr	r3, [pc, #12]	@ (8002d6c <sensor_GetPotentiometer+0x14>)
 8002d5e:	88db      	ldrh	r3, [r3, #6]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000224 	.word	0x20000224

08002d70 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 8002d74:	4b1a      	ldr	r3, [pc, #104]	@ (8002de0 <sensor_GetVoltage+0x70>)
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	ee07 3a90 	vmov	s15, r3
 8002d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d80:	ee17 0a90 	vmov	r0, s15
 8002d84:	f7fd fbd8 	bl	8000538 <__aeabi_f2d>
 8002d88:	a311      	add	r3, pc, #68	@ (adr r3, 8002dd0 <sensor_GetVoltage+0x60>)
 8002d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8e:	f7fd fc2b 	bl	80005e8 <__aeabi_dmul>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <sensor_GetVoltage+0x74>)
 8002da0:	f7fd fc22 	bl	80005e8 <__aeabi_dmul>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	a30a      	add	r3, pc, #40	@ (adr r3, 8002dd8 <sensor_GetVoltage+0x68>)
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	f7fd fd43 	bl	800083c <__aeabi_ddiv>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4610      	mov	r0, r2
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f7fd fead 	bl	8000b1c <__aeabi_d2f>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	ee07 3a90 	vmov	s15, r3
}
 8002dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	66666666 	.word	0x66666666
 8002dd4:	400a6666 	.word	0x400a6666
 8002dd8:	cccccccd 	.word	0xcccccccd
 8002ddc:	40b908ac 	.word	0x40b908ac
 8002de0:	20000224 	.word	0x20000224
 8002de4:	40280000 	.word	0x40280000

08002de8 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 8002dec:	4b28      	ldr	r3, [pc, #160]	@ (8002e90 <sensor_GetCurrent+0xa8>)
 8002dee:	885b      	ldrh	r3, [r3, #2]
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df8:	ee17 0a90 	vmov	r0, s15
 8002dfc:	f7fd fb9c 	bl	8000538 <__aeabi_f2d>
 8002e00:	a31f      	add	r3, pc, #124	@ (adr r3, 8002e80 <sensor_GetCurrent+0x98>)
 8002e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e06:	f7fd fbef 	bl	80005e8 <__aeabi_dmul>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4619      	mov	r1, r3
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	4b1f      	ldr	r3, [pc, #124]	@ (8002e94 <sensor_GetCurrent+0xac>)
 8002e18:	f7fd fbe6 	bl	80005e8 <__aeabi_dmul>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	a318      	add	r3, pc, #96	@ (adr r3, 8002e88 <sensor_GetCurrent+0xa0>)
 8002e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2a:	f7fd fd07 	bl	800083c <__aeabi_ddiv>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4610      	mov	r0, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	4b17      	ldr	r3, [pc, #92]	@ (8002e98 <sensor_GetCurrent+0xb0>)
 8002e3c:	f7fd fa1c 	bl	8000278 <__aeabi_dsub>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <sensor_GetCurrent+0xb4>)
 8002e4e:	f7fd fbcb 	bl	80005e8 <__aeabi_dmul>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e98 <sensor_GetCurrent+0xb0>)
 8002e60:	f7fd fcec 	bl	800083c <__aeabi_ddiv>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f7fd fe56 	bl	8000b1c <__aeabi_d2f>
 8002e70:	4603      	mov	r3, r0
 8002e72:	ee07 3a90 	vmov	s15, r3
}
 8002e76:	eeb0 0a67 	vmov.f32	s0, s15
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	f3af 8000 	nop.w
 8002e80:	66666666 	.word	0x66666666
 8002e84:	400a6666 	.word	0x400a6666
 8002e88:	147ae148 	.word	0x147ae148
 8002e8c:	40a4b2ee 	.word	0x40a4b2ee
 8002e90:	20000224 	.word	0x20000224
 8002e94:	408f4000 	.word	0x408f4000
 8002e98:	40040000 	.word	0x40040000
 8002e9c:	40140000 	.word	0x40140000

08002ea0 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <sensor_GetTemperature+0x30>)
 8002ea6:	891b      	ldrh	r3, [r3, #8]
 8002ea8:	ee07 3a90 	vmov	s15, r3
 8002eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002ed4 <sensor_GetTemperature+0x34>
 8002eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eb8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002ed8 <sensor_GetTemperature+0x38>
 8002ebc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ec0:	eef0 7a66 	vmov.f32	s15, s13
}
 8002ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	20000224 	.word	0x20000224
 8002ed4:	43a50000 	.word	0x43a50000
 8002ed8:	457ff000 	.word	0x457ff000

08002edc <timer_init>:
uint16_t timer4_counter = 0;

uint16_t flag_timer5 = 0;
uint16_t timer5_counter = 0;

void timer_init(){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002ee0:	4802      	ldr	r0, [pc, #8]	@ (8002eec <timer_init+0x10>)
 8002ee2:	f004 fd7d 	bl	80079e0 <HAL_TIM_Base_Start_IT>
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	2000029c 	.word	0x2000029c

08002ef0 <setTimer2>:

void setTimer2(uint16_t duration){
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002efa:	4a08      	ldr	r2, [pc, #32]	@ (8002f1c <setTimer2+0x2c>)
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002f00:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <setTimer2+0x2c>)
 8002f02:	881a      	ldrh	r2, [r3, #0]
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <setTimer2+0x30>)
 8002f06:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002f08:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <setTimer2+0x34>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	801a      	strh	r2, [r3, #0]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000232 	.word	0x20000232
 8002f20:	20000230 	.word	0x20000230
 8002f24:	2000022e 	.word	0x2000022e

08002f28 <setTimer3>:

void setTimer3(uint16_t duration){
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	80fb      	strh	r3, [r7, #6]
	timer3_counter = duration;
 8002f32:	4a06      	ldr	r2, [pc, #24]	@ (8002f4c <setTimer3+0x24>)
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	8013      	strh	r3, [r2, #0]
	flag_timer3 = 0;
 8002f38:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <setTimer3+0x28>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	801a      	strh	r2, [r3, #0]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000236 	.word	0x20000236
 8002f50:	20000234 	.word	0x20000234

08002f54 <setTimer4>:

void setTimer4(uint16_t duration){
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	80fb      	strh	r3, [r7, #6]
	timer4_counter = duration;
 8002f5e:	4a06      	ldr	r2, [pc, #24]	@ (8002f78 <setTimer4+0x24>)
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	8013      	strh	r3, [r2, #0]
	flag_timer4 = 0;
 8002f64:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <setTimer4+0x28>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	801a      	strh	r2, [r3, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	2000023a 	.word	0x2000023a
 8002f7c:	20000238 	.word	0x20000238

08002f80 <HAL_TIM_PeriodElapsedCallback>:
void setTimer5(uint16_t duration){
	timer5_counter = duration;
	flag_timer5 = 0;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f90:	d149      	bne.n	8003026 <HAL_TIM_PeriodElapsedCallback+0xa6>
		if(timer2_counter > 0){
 8002f92:	4b27      	ldr	r3, [pc, #156]	@ (8003030 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d010      	beq.n	8002fbc <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002f9a:	4b25      	ldr	r3, [pc, #148]	@ (8003030 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	4b23      	ldr	r3, [pc, #140]	@ (8003030 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002fa4:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002fa6:	4b22      	ldr	r3, [pc, #136]	@ (8003030 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002fae:	4b21      	ldr	r3, [pc, #132]	@ (8003034 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002fb4:	4b20      	ldr	r3, [pc, #128]	@ (8003038 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002fb6:	881a      	ldrh	r2, [r3, #0]
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003030 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002fba:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer3_counter > 0){
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800303c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00c      	beq.n	8002fde <HAL_TIM_PeriodElapsedCallback+0x5e>
			timer3_counter--;
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800303c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800303c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002fce:	801a      	strh	r2, [r3, #0]
			if(timer3_counter <= 0){
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800303c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_TIM_PeriodElapsedCallback+0x5e>
				flag_timer3 = 1;
 8002fd8:	4b19      	ldr	r3, [pc, #100]	@ (8003040 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer4_counter > 0){
 8002fde:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00c      	beq.n	8003000 <HAL_TIM_PeriodElapsedCallback+0x80>
			timer4_counter--;
 8002fe6:	4b17      	ldr	r3, [pc, #92]	@ (8003044 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	4b15      	ldr	r3, [pc, #84]	@ (8003044 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002ff0:	801a      	strh	r2, [r3, #0]
			if(timer4_counter <= 0){
 8002ff2:	4b14      	ldr	r3, [pc, #80]	@ (8003044 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <HAL_TIM_PeriodElapsedCallback+0x80>
				flag_timer4 = 1;
 8002ffa:	4b13      	ldr	r3, [pc, #76]	@ (8003048 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer5_counter > 0){
 8003000:	4b12      	ldr	r3, [pc, #72]	@ (800304c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00c      	beq.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xa2>
			timer5_counter--;
 8003008:	4b10      	ldr	r3, [pc, #64]	@ (800304c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	4b0e      	ldr	r3, [pc, #56]	@ (800304c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003012:	801a      	strh	r2, [r3, #0]
			if(timer5_counter <= 0){
 8003014:	4b0d      	ldr	r3, [pc, #52]	@ (800304c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d102      	bne.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xa2>
				flag_timer5 = 1;
 800301c:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800301e:	2201      	movs	r2, #1
 8003020:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8003022:	f7ff fa5f 	bl	80024e4 <led7_Scan>
	}
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000230 	.word	0x20000230
 8003034:	2000022e 	.word	0x2000022e
 8003038:	20000232 	.word	0x20000232
 800303c:	20000236 	.word	0x20000236
 8003040:	20000234 	.word	0x20000234
 8003044:	2000023a 	.word	0x2000023a
 8003048:	20000238 	.word	0x20000238
 800304c:	2000023e 	.word	0x2000023e
 8003050:	2000023c 	.word	0x2000023c

08003054 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003058:	4b17      	ldr	r3, [pc, #92]	@ (80030b8 <MX_SPI1_Init+0x64>)
 800305a:	4a18      	ldr	r2, [pc, #96]	@ (80030bc <MX_SPI1_Init+0x68>)
 800305c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800305e:	4b16      	ldr	r3, [pc, #88]	@ (80030b8 <MX_SPI1_Init+0x64>)
 8003060:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003064:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003066:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <MX_SPI1_Init+0x64>)
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800306c:	4b12      	ldr	r3, [pc, #72]	@ (80030b8 <MX_SPI1_Init+0x64>)
 800306e:	2200      	movs	r2, #0
 8003070:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003072:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <MX_SPI1_Init+0x64>)
 8003074:	2200      	movs	r2, #0
 8003076:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003078:	4b0f      	ldr	r3, [pc, #60]	@ (80030b8 <MX_SPI1_Init+0x64>)
 800307a:	2200      	movs	r2, #0
 800307c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800307e:	4b0e      	ldr	r3, [pc, #56]	@ (80030b8 <MX_SPI1_Init+0x64>)
 8003080:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003084:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003086:	4b0c      	ldr	r3, [pc, #48]	@ (80030b8 <MX_SPI1_Init+0x64>)
 8003088:	2200      	movs	r2, #0
 800308a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800308c:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <MX_SPI1_Init+0x64>)
 800308e:	2200      	movs	r2, #0
 8003090:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003092:	4b09      	ldr	r3, [pc, #36]	@ (80030b8 <MX_SPI1_Init+0x64>)
 8003094:	2200      	movs	r2, #0
 8003096:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003098:	4b07      	ldr	r3, [pc, #28]	@ (80030b8 <MX_SPI1_Init+0x64>)
 800309a:	2200      	movs	r2, #0
 800309c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800309e:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <MX_SPI1_Init+0x64>)
 80030a0:	220a      	movs	r2, #10
 80030a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030a4:	4804      	ldr	r0, [pc, #16]	@ (80030b8 <MX_SPI1_Init+0x64>)
 80030a6:	f003 fe31 	bl	8006d0c <HAL_SPI_Init>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80030b0:	f7ff fe24 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000240 	.word	0x20000240
 80030bc:	40013000 	.word	0x40013000

080030c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08a      	sub	sp, #40	@ 0x28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	f107 0314 	add.w	r3, r7, #20
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a19      	ldr	r2, [pc, #100]	@ (8003144 <HAL_SPI_MspInit+0x84>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d12b      	bne.n	800313a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	4b18      	ldr	r3, [pc, #96]	@ (8003148 <HAL_SPI_MspInit+0x88>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	4a17      	ldr	r2, [pc, #92]	@ (8003148 <HAL_SPI_MspInit+0x88>)
 80030ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030f2:	4b15      	ldr	r3, [pc, #84]	@ (8003148 <HAL_SPI_MspInit+0x88>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	4b11      	ldr	r3, [pc, #68]	@ (8003148 <HAL_SPI_MspInit+0x88>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	4a10      	ldr	r2, [pc, #64]	@ (8003148 <HAL_SPI_MspInit+0x88>)
 8003108:	f043 0302 	orr.w	r3, r3, #2
 800310c:	6313      	str	r3, [r2, #48]	@ 0x30
 800310e:	4b0e      	ldr	r3, [pc, #56]	@ (8003148 <HAL_SPI_MspInit+0x88>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800311a:	2338      	movs	r3, #56	@ 0x38
 800311c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311e:	2302      	movs	r3, #2
 8003120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003126:	2303      	movs	r3, #3
 8003128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800312a:	2305      	movs	r3, #5
 800312c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800312e:	f107 0314 	add.w	r3, r7, #20
 8003132:	4619      	mov	r1, r3
 8003134:	4805      	ldr	r0, [pc, #20]	@ (800314c <HAL_SPI_MspInit+0x8c>)
 8003136:	f001 fe2f 	bl	8004d98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800313a:	bf00      	nop
 800313c:	3728      	adds	r7, #40	@ 0x28
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40013000 	.word	0x40013000
 8003148:	40023800 	.word	0x40023800
 800314c:	40020400 	.word	0x40020400

08003150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]
 800315a:	4b10      	ldr	r3, [pc, #64]	@ (800319c <HAL_MspInit+0x4c>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315e:	4a0f      	ldr	r2, [pc, #60]	@ (800319c <HAL_MspInit+0x4c>)
 8003160:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003164:	6453      	str	r3, [r2, #68]	@ 0x44
 8003166:	4b0d      	ldr	r3, [pc, #52]	@ (800319c <HAL_MspInit+0x4c>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	4b09      	ldr	r3, [pc, #36]	@ (800319c <HAL_MspInit+0x4c>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	4a08      	ldr	r2, [pc, #32]	@ (800319c <HAL_MspInit+0x4c>)
 800317c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003180:	6413      	str	r3, [r2, #64]	@ 0x40
 8003182:	4b06      	ldr	r3, [pc, #24]	@ (800319c <HAL_MspInit+0x4c>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800

080031a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <NMI_Handler+0x4>

080031a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ac:	bf00      	nop
 80031ae:	e7fd      	b.n	80031ac <HardFault_Handler+0x4>

080031b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031b4:	bf00      	nop
 80031b6:	e7fd      	b.n	80031b4 <MemManage_Handler+0x4>

080031b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031bc:	bf00      	nop
 80031be:	e7fd      	b.n	80031bc <BusFault_Handler+0x4>

080031c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c4:	bf00      	nop
 80031c6:	e7fd      	b.n	80031c4 <UsageFault_Handler+0x4>

080031c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031f6:	f000 fc65 	bl	8003ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003204:	4802      	ldr	r0, [pc, #8]	@ (8003210 <TIM2_IRQHandler+0x10>)
 8003206:	f004 fd7d 	bl	8007d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	2000029c 	.word	0x2000029c

08003214 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003218:	4802      	ldr	r0, [pc, #8]	@ (8003224 <USART1_IRQHandler+0x10>)
 800321a:	f005 fcc1 	bl	8008ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000498 	.word	0x20000498

08003228 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800322c:	4802      	ldr	r0, [pc, #8]	@ (8003238 <USART2_IRQHandler+0x10>)
 800322e:	f005 fcb7 	bl	8008ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	200004e0 	.word	0x200004e0

0800323c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003240:	4802      	ldr	r0, [pc, #8]	@ (800324c <DMA2_Stream0_IRQHandler+0x10>)
 8003242:	f001 fb3f 	bl	80048c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	200000d0 	.word	0x200000d0

08003250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003258:	4a14      	ldr	r2, [pc, #80]	@ (80032ac <_sbrk+0x5c>)
 800325a:	4b15      	ldr	r3, [pc, #84]	@ (80032b0 <_sbrk+0x60>)
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003264:	4b13      	ldr	r3, [pc, #76]	@ (80032b4 <_sbrk+0x64>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800326c:	4b11      	ldr	r3, [pc, #68]	@ (80032b4 <_sbrk+0x64>)
 800326e:	4a12      	ldr	r2, [pc, #72]	@ (80032b8 <_sbrk+0x68>)
 8003270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003272:	4b10      	ldr	r3, [pc, #64]	@ (80032b4 <_sbrk+0x64>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4413      	add	r3, r2
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	429a      	cmp	r2, r3
 800327e:	d207      	bcs.n	8003290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003280:	f006 fce4 	bl	8009c4c <__errno>
 8003284:	4603      	mov	r3, r0
 8003286:	220c      	movs	r2, #12
 8003288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800328a:	f04f 33ff 	mov.w	r3, #4294967295
 800328e:	e009      	b.n	80032a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003290:	4b08      	ldr	r3, [pc, #32]	@ (80032b4 <_sbrk+0x64>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003296:	4b07      	ldr	r3, [pc, #28]	@ (80032b4 <_sbrk+0x64>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	4a05      	ldr	r2, [pc, #20]	@ (80032b4 <_sbrk+0x64>)
 80032a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032a2:	68fb      	ldr	r3, [r7, #12]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20020000 	.word	0x20020000
 80032b0:	00000400 	.word	0x00000400
 80032b4:	20000298 	.word	0x20000298
 80032b8:	20000678 	.word	0x20000678

080032bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032c0:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <SystemInit+0x20>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c6:	4a05      	ldr	r2, [pc, #20]	@ (80032dc <SystemInit+0x20>)
 80032c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	e000ed00 	.word	0xe000ed00

080032e0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032e6:	f107 0308 	add.w	r3, r7, #8
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	609a      	str	r2, [r3, #8]
 80032f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032f4:	463b      	mov	r3, r7
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003374 <MX_TIM2_Init+0x94>)
 80032fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003302:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003304:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <MX_TIM2_Init+0x94>)
 8003306:	f240 3247 	movw	r2, #839	@ 0x347
 800330a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800330c:	4b19      	ldr	r3, [pc, #100]	@ (8003374 <MX_TIM2_Init+0x94>)
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003312:	4b18      	ldr	r3, [pc, #96]	@ (8003374 <MX_TIM2_Init+0x94>)
 8003314:	2263      	movs	r2, #99	@ 0x63
 8003316:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003318:	4b16      	ldr	r3, [pc, #88]	@ (8003374 <MX_TIM2_Init+0x94>)
 800331a:	2200      	movs	r2, #0
 800331c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800331e:	4b15      	ldr	r3, [pc, #84]	@ (8003374 <MX_TIM2_Init+0x94>)
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003324:	4813      	ldr	r0, [pc, #76]	@ (8003374 <MX_TIM2_Init+0x94>)
 8003326:	f004 fb0b 	bl	8007940 <HAL_TIM_Base_Init>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003330:	f7ff fce4 	bl	8002cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800333a:	f107 0308 	add.w	r3, r7, #8
 800333e:	4619      	mov	r1, r3
 8003340:	480c      	ldr	r0, [pc, #48]	@ (8003374 <MX_TIM2_Init+0x94>)
 8003342:	f004 fe91 	bl	8008068 <HAL_TIM_ConfigClockSource>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800334c:	f7ff fcd6 	bl	8002cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003350:	2300      	movs	r3, #0
 8003352:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003354:	2300      	movs	r3, #0
 8003356:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003358:	463b      	mov	r3, r7
 800335a:	4619      	mov	r1, r3
 800335c:	4805      	ldr	r0, [pc, #20]	@ (8003374 <MX_TIM2_Init+0x94>)
 800335e:	f005 fa8f 	bl	8008880 <HAL_TIMEx_MasterConfigSynchronization>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003368:	f7ff fcc8 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800336c:	bf00      	nop
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	2000029c 	.word	0x2000029c

08003378 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800337e:	1d3b      	adds	r3, r7, #4
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	611a      	str	r2, [r3, #16]
 800338c:	615a      	str	r2, [r3, #20]
 800338e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003390:	4b1e      	ldr	r3, [pc, #120]	@ (800340c <MX_TIM13_Init+0x94>)
 8003392:	4a1f      	ldr	r2, [pc, #124]	@ (8003410 <MX_TIM13_Init+0x98>)
 8003394:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8003396:	4b1d      	ldr	r3, [pc, #116]	@ (800340c <MX_TIM13_Init+0x94>)
 8003398:	f240 3247 	movw	r2, #839	@ 0x347
 800339c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800339e:	4b1b      	ldr	r3, [pc, #108]	@ (800340c <MX_TIM13_Init+0x94>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <MX_TIM13_Init+0x94>)
 80033a6:	2263      	movs	r2, #99	@ 0x63
 80033a8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033aa:	4b18      	ldr	r3, [pc, #96]	@ (800340c <MX_TIM13_Init+0x94>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033b0:	4b16      	ldr	r3, [pc, #88]	@ (800340c <MX_TIM13_Init+0x94>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80033b6:	4815      	ldr	r0, [pc, #84]	@ (800340c <MX_TIM13_Init+0x94>)
 80033b8:	f004 fac2 	bl	8007940 <HAL_TIM_Base_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80033c2:	f7ff fc9b 	bl	8002cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80033c6:	4811      	ldr	r0, [pc, #68]	@ (800340c <MX_TIM13_Init+0x94>)
 80033c8:	f004 fb7a 	bl	8007ac0 <HAL_TIM_PWM_Init>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80033d2:	f7ff fc93 	bl	8002cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033d6:	2360      	movs	r3, #96	@ 0x60
 80033d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033e6:	1d3b      	adds	r3, r7, #4
 80033e8:	2200      	movs	r2, #0
 80033ea:	4619      	mov	r1, r3
 80033ec:	4807      	ldr	r0, [pc, #28]	@ (800340c <MX_TIM13_Init+0x94>)
 80033ee:	f004 fd79 	bl	8007ee4 <HAL_TIM_PWM_ConfigChannel>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80033f8:	f7ff fc80 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80033fc:	4803      	ldr	r0, [pc, #12]	@ (800340c <MX_TIM13_Init+0x94>)
 80033fe:	f000 f845 	bl	800348c <HAL_TIM_MspPostInit>

}
 8003402:	bf00      	nop
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200002e4 	.word	0x200002e4
 8003410:	40001c00 	.word	0x40001c00

08003414 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003424:	d116      	bne.n	8003454 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	4b16      	ldr	r3, [pc, #88]	@ (8003484 <HAL_TIM_Base_MspInit+0x70>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	4a15      	ldr	r2, [pc, #84]	@ (8003484 <HAL_TIM_Base_MspInit+0x70>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	6413      	str	r3, [r2, #64]	@ 0x40
 8003436:	4b13      	ldr	r3, [pc, #76]	@ (8003484 <HAL_TIM_Base_MspInit+0x70>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003442:	2200      	movs	r2, #0
 8003444:	2100      	movs	r1, #0
 8003446:	201c      	movs	r0, #28
 8003448:	f001 f86d 	bl	8004526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800344c:	201c      	movs	r0, #28
 800344e:	f001 f886 	bl	800455e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003452:	e012      	b.n	800347a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a0b      	ldr	r2, [pc, #44]	@ (8003488 <HAL_TIM_Base_MspInit+0x74>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d10d      	bne.n	800347a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	4b08      	ldr	r3, [pc, #32]	@ (8003484 <HAL_TIM_Base_MspInit+0x70>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	4a07      	ldr	r2, [pc, #28]	@ (8003484 <HAL_TIM_Base_MspInit+0x70>)
 8003468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800346c:	6413      	str	r3, [r2, #64]	@ 0x40
 800346e:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <HAL_TIM_Base_MspInit+0x70>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
}
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
 8003488:	40001c00 	.word	0x40001c00

0800348c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003494:	f107 030c 	add.w	r3, r7, #12
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a12      	ldr	r2, [pc, #72]	@ (80034f4 <HAL_TIM_MspPostInit+0x68>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d11e      	bne.n	80034ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <HAL_TIM_MspPostInit+0x6c>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	4a10      	ldr	r2, [pc, #64]	@ (80034f8 <HAL_TIM_MspPostInit+0x6c>)
 80034b8:	f043 0320 	orr.w	r3, r3, #32
 80034bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034be:	4b0e      	ldr	r3, [pc, #56]	@ (80034f8 <HAL_TIM_MspPostInit+0x6c>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80034dc:	2309      	movs	r3, #9
 80034de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034e0:	f107 030c 	add.w	r3, r7, #12
 80034e4:	4619      	mov	r1, r3
 80034e6:	4805      	ldr	r0, [pc, #20]	@ (80034fc <HAL_TIM_MspPostInit+0x70>)
 80034e8:	f001 fc56 	bl	8004d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80034ec:	bf00      	nop
 80034ee:	3720      	adds	r7, #32
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40001c00 	.word	0x40001c00
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40021400 	.word	0x40021400

08003500 <uart_init_rs232>:
uint8_t check_esp = 0;

char data_string[100] = "";
uint8_t data_counter = 0;

void uart_init_rs232(){
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003504:	2201      	movs	r2, #1
 8003506:	4903      	ldr	r1, [pc, #12]	@ (8003514 <uart_init_rs232+0x14>)
 8003508:	4803      	ldr	r0, [pc, #12]	@ (8003518 <uart_init_rs232+0x18>)
 800350a:	f005 fb24 	bl	8008b56 <HAL_UART_Receive_IT>
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	2000032c 	.word	0x2000032c
 8003518:	20000498 	.word	0x20000498

0800351c <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	4907      	ldr	r1, [pc, #28]	@ (8003544 <uart_Rs232SendString+0x28>)
 8003528:	4807      	ldr	r0, [pc, #28]	@ (8003548 <uart_Rs232SendString+0x2c>)
 800352a:	f006 fb67 	bl	8009bfc <siprintf>
 800352e:	4603      	mov	r3, r0
 8003530:	b29a      	uxth	r2, r3
 8003532:	230a      	movs	r3, #10
 8003534:	4904      	ldr	r1, [pc, #16]	@ (8003548 <uart_Rs232SendString+0x2c>)
 8003536:	4805      	ldr	r0, [pc, #20]	@ (800354c <uart_Rs232SendString+0x30>)
 8003538:	f005 fa82 	bl	8008a40 <HAL_UART_Transmit>
}
 800353c:	bf00      	nop
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	0800a618 	.word	0x0800a618
 8003548:	20000330 	.word	0x20000330
 800354c:	20000498 	.word	0x20000498

08003550 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 800355e:	4824      	ldr	r0, [pc, #144]	@ (80035f0 <uart_Rs232SendNum+0xa0>)
 8003560:	f7ff ffdc 	bl	800351c <uart_Rs232SendString>
		return;
 8003564:	e040      	b.n	80035e8 <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 800356a:	230a      	movs	r3, #10
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	e038      	b.n	80035e2 <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	3b01      	subs	r3, #1
 8003574:	4619      	mov	r1, r3
 8003576:	200a      	movs	r0, #10
 8003578:	f7fe fc9e 	bl	8001eb8 <mypow>
 800357c:	4603      	mov	r3, r0
 800357e:	461a      	mov	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4293      	cmp	r3, r2
 8003584:	d315      	bcc.n	80035b2 <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	3b01      	subs	r3, #1
 800358e:	4619      	mov	r1, r3
 8003590:	200a      	movs	r0, #10
 8003592:	f7fe fc91 	bl	8001eb8 <mypow>
 8003596:	4603      	mov	r3, r0
 8003598:	461a      	mov	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	fbb3 f3f2 	udiv	r3, r3, r2
 80035a0:	461a      	mov	r2, r3
 80035a2:	4914      	ldr	r1, [pc, #80]	@ (80035f4 <uart_Rs232SendNum+0xa4>)
 80035a4:	4814      	ldr	r0, [pc, #80]	@ (80035f8 <uart_Rs232SendNum+0xa8>)
 80035a6:	f006 fb29 	bl	8009bfc <siprintf>
            uart_Rs232SendString(msg);
 80035aa:	4813      	ldr	r0, [pc, #76]	@ (80035f8 <uart_Rs232SendNum+0xa8>)
 80035ac:	f7ff ffb6 	bl	800351c <uart_Rs232SendString>
 80035b0:	e005      	b.n	80035be <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 80035b8:	480d      	ldr	r0, [pc, #52]	@ (80035f0 <uart_Rs232SendNum+0xa0>)
 80035ba:	f7ff ffaf 	bl	800351c <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	4619      	mov	r1, r3
 80035c4:	200a      	movs	r0, #10
 80035c6:	f7fe fc77 	bl	8001eb8 <mypow>
 80035ca:	4603      	mov	r3, r0
 80035cc:	461a      	mov	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80035d4:	fb01 f202 	mul.w	r2, r1, r2
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3b01      	subs	r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	dcc3      	bgt.n	8003570 <uart_Rs232SendNum+0x20>
    }
}
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	0800a61c 	.word	0x0800a61c
 80035f4:	0800a620 	.word	0x0800a620
 80035f8:	20000330 	.word	0x20000330

080035fc <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8003600:	2201      	movs	r2, #1
 8003602:	4906      	ldr	r1, [pc, #24]	@ (800361c <uart_init_esp+0x20>)
 8003604:	4806      	ldr	r0, [pc, #24]	@ (8003620 <uart_init_esp+0x24>)
 8003606:	f005 faa6 	bl	8008b56 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 800360a:	2201      	movs	r2, #1
 800360c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003610:	4804      	ldr	r0, [pc, #16]	@ (8003624 <uart_init_esp+0x28>)
 8003612:	f001 fd5d 	bl	80050d0 <HAL_GPIO_WritePin>
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000495 	.word	0x20000495
 8003620:	200004e0 	.word	0x200004e0
 8003624:	40021400 	.word	0x40021400

08003628 <uart_ESPSendString>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart2, bytes, size, 10);
}

void uart_ESPSendString(uint8_t* str){
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4907      	ldr	r1, [pc, #28]	@ (8003650 <uart_ESPSendString+0x28>)
 8003634:	4807      	ldr	r0, [pc, #28]	@ (8003654 <uart_ESPSendString+0x2c>)
 8003636:	f006 fae1 	bl	8009bfc <siprintf>
 800363a:	4603      	mov	r3, r0
 800363c:	b29a      	uxth	r2, r3
 800363e:	230a      	movs	r3, #10
 8003640:	4904      	ldr	r1, [pc, #16]	@ (8003654 <uart_ESPSendString+0x2c>)
 8003642:	4805      	ldr	r0, [pc, #20]	@ (8003658 <uart_ESPSendString+0x30>)
 8003644:	f005 f9fc 	bl	8008a40 <HAL_UART_Transmit>
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	0800a618 	.word	0x0800a618
 8003654:	20000330 	.word	0x20000330
 8003658:	200004e0 	.word	0x200004e0

0800365c <uart_ESPSendNum>:

void uart_ESPSendNum(uint32_t num){
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <uart_ESPSendNum+0x16>
		uart_ESPSendString("0");
 800366a:	4824      	ldr	r0, [pc, #144]	@ (80036fc <uart_ESPSendNum+0xa0>)
 800366c:	f7ff ffdc 	bl	8003628 <uart_ESPSendString>
		return;
 8003670:	e040      	b.n	80036f4 <uart_ESPSendNum+0x98>
	}
    uint8_t num_flag = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_ESPSendString("-");
    for(i = 10; i > 0; i--)
 8003676:	230a      	movs	r3, #10
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	e038      	b.n	80036ee <uart_ESPSendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	3b01      	subs	r3, #1
 8003680:	4619      	mov	r1, r3
 8003682:	200a      	movs	r0, #10
 8003684:	f7fe fc18 	bl	8001eb8 <mypow>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4293      	cmp	r3, r2
 8003690:	d315      	bcc.n	80036be <uart_ESPSendNum+0x62>
        {
            num_flag = 1;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	3b01      	subs	r3, #1
 800369a:	4619      	mov	r1, r3
 800369c:	200a      	movs	r0, #10
 800369e:	f7fe fc0b 	bl	8001eb8 <mypow>
 80036a2:	4603      	mov	r3, r0
 80036a4:	461a      	mov	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80036ac:	461a      	mov	r2, r3
 80036ae:	4914      	ldr	r1, [pc, #80]	@ (8003700 <uart_ESPSendNum+0xa4>)
 80036b0:	4814      	ldr	r0, [pc, #80]	@ (8003704 <uart_ESPSendNum+0xa8>)
 80036b2:	f006 faa3 	bl	8009bfc <siprintf>
            uart_ESPSendString(msg);
 80036b6:	4813      	ldr	r0, [pc, #76]	@ (8003704 <uart_ESPSendNum+0xa8>)
 80036b8:	f7ff ffb6 	bl	8003628 <uart_ESPSendString>
 80036bc:	e005      	b.n	80036ca <uart_ESPSendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <uart_ESPSendNum+0x6e>
            	uart_ESPSendString("0");
 80036c4:	480d      	ldr	r0, [pc, #52]	@ (80036fc <uart_ESPSendNum+0xa0>)
 80036c6:	f7ff ffaf 	bl	8003628 <uart_ESPSendString>
        }
        num %= mypow(10, i-1);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	4619      	mov	r1, r3
 80036d0:	200a      	movs	r0, #10
 80036d2:	f7fe fbf1 	bl	8001eb8 <mypow>
 80036d6:	4603      	mov	r3, r0
 80036d8:	461a      	mov	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80036e0:	fb01 f202 	mul.w	r2, r1, r2
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	dcc3      	bgt.n	800367c <uart_ESPSendNum+0x20>
    }
}
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	0800a61c 	.word	0x0800a61c
 8003700:	0800a620 	.word	0x0800a620
 8003704:	20000330 	.word	0x20000330

08003708 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a16      	ldr	r2, [pc, #88]	@ (8003770 <HAL_UART_RxCpltCallback+0x68>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d11c      	bne.n	8003754 <HAL_UART_RxCpltCallback+0x4c>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800371a:	230a      	movs	r3, #10
 800371c:	2201      	movs	r2, #1
 800371e:	4915      	ldr	r1, [pc, #84]	@ (8003774 <HAL_UART_RxCpltCallback+0x6c>)
 8003720:	4815      	ldr	r0, [pc, #84]	@ (8003778 <HAL_UART_RxCpltCallback+0x70>)
 8003722:	f005 f98d 	bl	8008a40 <HAL_UART_Transmit>

		// turn on the receice interrupt
		rxBuffer[rxHead] = receive_buffer1;
 8003726:	4b15      	ldr	r3, [pc, #84]	@ (800377c <HAL_UART_RxCpltCallback+0x74>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	4b11      	ldr	r3, [pc, #68]	@ (8003774 <HAL_UART_RxCpltCallback+0x6c>)
 800372e:	7819      	ldrb	r1, [r3, #0]
 8003730:	4b13      	ldr	r3, [pc, #76]	@ (8003780 <HAL_UART_RxCpltCallback+0x78>)
 8003732:	5499      	strb	r1, [r3, r2]
		rxHead = (rxHead + 1)%BUFFER_SIZE;
 8003734:	4b11      	ldr	r3, [pc, #68]	@ (800377c <HAL_UART_RxCpltCallback+0x74>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	3301      	adds	r3, #1
 800373a:	425a      	negs	r2, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	bf58      	it	pl
 8003742:	4253      	negpl	r3, r2
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4b0d      	ldr	r3, [pc, #52]	@ (800377c <HAL_UART_RxCpltCallback+0x74>)
 8003748:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800374a:	2201      	movs	r2, #1
 800374c:	4909      	ldr	r1, [pc, #36]	@ (8003774 <HAL_UART_RxCpltCallback+0x6c>)
 800374e:	480a      	ldr	r0, [pc, #40]	@ (8003778 <HAL_UART_RxCpltCallback+0x70>)
 8003750:	f005 fa01 	bl	8008b56 <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART2){
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0a      	ldr	r2, [pc, #40]	@ (8003784 <HAL_UART_RxCpltCallback+0x7c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d104      	bne.n	8003768 <HAL_UART_RxCpltCallback+0x60>
//		if(receive_buffer2 == 'O') check_esp = 1;
//		else if(receive_buffer2 == 'a') light_status = 0;
//		else if(receive_buffer2 == 'A') light_status = 1;
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 800375e:	2201      	movs	r2, #1
 8003760:	4909      	ldr	r1, [pc, #36]	@ (8003788 <HAL_UART_RxCpltCallback+0x80>)
 8003762:	480a      	ldr	r0, [pc, #40]	@ (800378c <HAL_UART_RxCpltCallback+0x84>)
 8003764:	f005 f9f7 	bl	8008b56 <HAL_UART_Receive_IT>
	}
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40011000 	.word	0x40011000
 8003774:	2000032c 	.word	0x2000032c
 8003778:	20000498 	.word	0x20000498
 800377c:	20000494 	.word	0x20000494
 8003780:	20000394 	.word	0x20000394
 8003784:	40004400 	.word	0x40004400
 8003788:	20000495 	.word	0x20000495
 800378c:	200004e0 	.word	0x200004e0

08003790 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003794:	4b11      	ldr	r3, [pc, #68]	@ (80037dc <MX_USART1_UART_Init+0x4c>)
 8003796:	4a12      	ldr	r2, [pc, #72]	@ (80037e0 <MX_USART1_UART_Init+0x50>)
 8003798:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800379a:	4b10      	ldr	r3, [pc, #64]	@ (80037dc <MX_USART1_UART_Init+0x4c>)
 800379c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80037a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037a2:	4b0e      	ldr	r3, [pc, #56]	@ (80037dc <MX_USART1_UART_Init+0x4c>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037a8:	4b0c      	ldr	r3, [pc, #48]	@ (80037dc <MX_USART1_UART_Init+0x4c>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037ae:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <MX_USART1_UART_Init+0x4c>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037b4:	4b09      	ldr	r3, [pc, #36]	@ (80037dc <MX_USART1_UART_Init+0x4c>)
 80037b6:	220c      	movs	r2, #12
 80037b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ba:	4b08      	ldr	r3, [pc, #32]	@ (80037dc <MX_USART1_UART_Init+0x4c>)
 80037bc:	2200      	movs	r2, #0
 80037be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037c0:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <MX_USART1_UART_Init+0x4c>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037c6:	4805      	ldr	r0, [pc, #20]	@ (80037dc <MX_USART1_UART_Init+0x4c>)
 80037c8:	f005 f8ea 	bl	80089a0 <HAL_UART_Init>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80037d2:	f7ff fa93 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000498 	.word	0x20000498
 80037e0:	40011000 	.word	0x40011000

080037e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037e8:	4b11      	ldr	r3, [pc, #68]	@ (8003830 <MX_USART2_UART_Init+0x4c>)
 80037ea:	4a12      	ldr	r2, [pc, #72]	@ (8003834 <MX_USART2_UART_Init+0x50>)
 80037ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80037ee:	4b10      	ldr	r3, [pc, #64]	@ (8003830 <MX_USART2_UART_Init+0x4c>)
 80037f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80037f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003830 <MX_USART2_UART_Init+0x4c>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003830 <MX_USART2_UART_Init+0x4c>)
 80037fe:	2200      	movs	r2, #0
 8003800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003802:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <MX_USART2_UART_Init+0x4c>)
 8003804:	2200      	movs	r2, #0
 8003806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003808:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <MX_USART2_UART_Init+0x4c>)
 800380a:	220c      	movs	r2, #12
 800380c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800380e:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <MX_USART2_UART_Init+0x4c>)
 8003810:	2200      	movs	r2, #0
 8003812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003814:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <MX_USART2_UART_Init+0x4c>)
 8003816:	2200      	movs	r2, #0
 8003818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800381a:	4805      	ldr	r0, [pc, #20]	@ (8003830 <MX_USART2_UART_Init+0x4c>)
 800381c:	f005 f8c0 	bl	80089a0 <HAL_UART_Init>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003826:	f7ff fa69 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	200004e0 	.word	0x200004e0
 8003834:	40004400 	.word	0x40004400

08003838 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08c      	sub	sp, #48	@ 0x30
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	f107 031c 	add.w	r3, r7, #28
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a3a      	ldr	r2, [pc, #232]	@ (8003940 <HAL_UART_MspInit+0x108>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d135      	bne.n	80038c6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	4b39      	ldr	r3, [pc, #228]	@ (8003944 <HAL_UART_MspInit+0x10c>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	4a38      	ldr	r2, [pc, #224]	@ (8003944 <HAL_UART_MspInit+0x10c>)
 8003864:	f043 0310 	orr.w	r3, r3, #16
 8003868:	6453      	str	r3, [r2, #68]	@ 0x44
 800386a:	4b36      	ldr	r3, [pc, #216]	@ (8003944 <HAL_UART_MspInit+0x10c>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	4b32      	ldr	r3, [pc, #200]	@ (8003944 <HAL_UART_MspInit+0x10c>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	4a31      	ldr	r2, [pc, #196]	@ (8003944 <HAL_UART_MspInit+0x10c>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6313      	str	r3, [r2, #48]	@ 0x30
 8003886:	4b2f      	ldr	r3, [pc, #188]	@ (8003944 <HAL_UART_MspInit+0x10c>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003892:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003898:	2302      	movs	r3, #2
 800389a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389c:	2300      	movs	r3, #0
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a0:	2303      	movs	r3, #3
 80038a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038a4:	2307      	movs	r3, #7
 80038a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a8:	f107 031c 	add.w	r3, r7, #28
 80038ac:	4619      	mov	r1, r3
 80038ae:	4826      	ldr	r0, [pc, #152]	@ (8003948 <HAL_UART_MspInit+0x110>)
 80038b0:	f001 fa72 	bl	8004d98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80038b4:	2200      	movs	r2, #0
 80038b6:	2100      	movs	r1, #0
 80038b8:	2025      	movs	r0, #37	@ 0x25
 80038ba:	f000 fe34 	bl	8004526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038be:	2025      	movs	r0, #37	@ 0x25
 80038c0:	f000 fe4d 	bl	800455e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80038c4:	e038      	b.n	8003938 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a20      	ldr	r2, [pc, #128]	@ (800394c <HAL_UART_MspInit+0x114>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d133      	bne.n	8003938 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038d0:	2300      	movs	r3, #0
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003944 <HAL_UART_MspInit+0x10c>)
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003944 <HAL_UART_MspInit+0x10c>)
 80038da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038de:	6413      	str	r3, [r2, #64]	@ 0x40
 80038e0:	4b18      	ldr	r3, [pc, #96]	@ (8003944 <HAL_UART_MspInit+0x10c>)
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	4b14      	ldr	r3, [pc, #80]	@ (8003944 <HAL_UART_MspInit+0x10c>)
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	4a13      	ldr	r2, [pc, #76]	@ (8003944 <HAL_UART_MspInit+0x10c>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80038fc:	4b11      	ldr	r3, [pc, #68]	@ (8003944 <HAL_UART_MspInit+0x10c>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESP12_RX_Pin|ESP12_TX_Pin;
 8003908:	230c      	movs	r3, #12
 800390a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390c:	2302      	movs	r3, #2
 800390e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003910:	2300      	movs	r3, #0
 8003912:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003914:	2303      	movs	r3, #3
 8003916:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003918:	2307      	movs	r3, #7
 800391a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800391c:	f107 031c 	add.w	r3, r7, #28
 8003920:	4619      	mov	r1, r3
 8003922:	4809      	ldr	r0, [pc, #36]	@ (8003948 <HAL_UART_MspInit+0x110>)
 8003924:	f001 fa38 	bl	8004d98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003928:	2200      	movs	r2, #0
 800392a:	2100      	movs	r1, #0
 800392c:	2026      	movs	r0, #38	@ 0x26
 800392e:	f000 fdfa 	bl	8004526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003932:	2026      	movs	r0, #38	@ 0x26
 8003934:	f000 fe13 	bl	800455e <HAL_NVIC_EnableIRQ>
}
 8003938:	bf00      	nop
 800393a:	3730      	adds	r7, #48	@ 0x30
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40011000 	.word	0x40011000
 8003944:	40023800 	.word	0x40023800
 8003948:	40020000 	.word	0x40020000
 800394c:	40004400 	.word	0x40004400

08003950 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	b2db      	uxtb	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	0092      	lsls	r2, r2, #2
 8003964:	4413      	add	r3, r2
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	b2da      	uxtb	r2, r3
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	b2db      	uxtb	r3, r3
 8003972:	4413      	add	r3, r2
 8003974:	b2db      	uxtb	r3, r3
}
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	4a0d      	ldr	r2, [pc, #52]	@ (80039c8 <DEC2BCD+0x44>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	08db      	lsrs	r3, r3, #3
 8003998:	b2db      	uxtb	r3, r3
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	b258      	sxtb	r0, r3
 800399e:	79fa      	ldrb	r2, [r7, #7]
 80039a0:	4b09      	ldr	r3, [pc, #36]	@ (80039c8 <DEC2BCD+0x44>)
 80039a2:	fba3 1302 	umull	r1, r3, r3, r2
 80039a6:	08d9      	lsrs	r1, r3, #3
 80039a8:	460b      	mov	r3, r1
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	b25b      	sxtb	r3, r3
 80039b6:	4303      	orrs	r3, r0
 80039b8:	b25b      	sxtb	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	cccccccd 	.word	0xcccccccd

080039cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80039cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039d0:	480d      	ldr	r0, [pc, #52]	@ (8003a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039d2:	490e      	ldr	r1, [pc, #56]	@ (8003a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039d4:	4a0e      	ldr	r2, [pc, #56]	@ (8003a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039d8:	e002      	b.n	80039e0 <LoopCopyDataInit>

080039da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039de:	3304      	adds	r3, #4

080039e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039e4:	d3f9      	bcc.n	80039da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039e8:	4c0b      	ldr	r4, [pc, #44]	@ (8003a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80039ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039ec:	e001      	b.n	80039f2 <LoopFillZerobss>

080039ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039f0:	3204      	adds	r2, #4

080039f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039f4:	d3fb      	bcc.n	80039ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80039f6:	f7ff fc61 	bl	80032bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039fa:	f006 f92d 	bl	8009c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039fe:	f7fe fe41 	bl	8002684 <main>
  bx  lr    
 8003a02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a0c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003a10:	0800d610 	.word	0x0800d610
  ldr r2, =_sbss
 8003a14:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8003a18:	20000674 	.word	0x20000674

08003a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a1c:	e7fe      	b.n	8003a1c <ADC_IRQHandler>
	...

08003a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a24:	4b0e      	ldr	r3, [pc, #56]	@ (8003a60 <HAL_Init+0x40>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a0d      	ldr	r2, [pc, #52]	@ (8003a60 <HAL_Init+0x40>)
 8003a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a30:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <HAL_Init+0x40>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a0a      	ldr	r2, [pc, #40]	@ (8003a60 <HAL_Init+0x40>)
 8003a36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a3c:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <HAL_Init+0x40>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a07      	ldr	r2, [pc, #28]	@ (8003a60 <HAL_Init+0x40>)
 8003a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a48:	2003      	movs	r0, #3
 8003a4a:	f000 fd61 	bl	8004510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a4e:	200f      	movs	r0, #15
 8003a50:	f000 f808 	bl	8003a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a54:	f7ff fb7c 	bl	8003150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40023c00 	.word	0x40023c00

08003a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a6c:	4b12      	ldr	r3, [pc, #72]	@ (8003ab8 <HAL_InitTick+0x54>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <HAL_InitTick+0x58>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	4619      	mov	r1, r3
 8003a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fd79 	bl	800457a <HAL_SYSTICK_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e00e      	b.n	8003ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b0f      	cmp	r3, #15
 8003a96:	d80a      	bhi.n	8003aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa0:	f000 fd41 	bl	8004526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003aa4:	4a06      	ldr	r2, [pc, #24]	@ (8003ac0 <HAL_InitTick+0x5c>)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000010 	.word	0x20000010
 8003abc:	20000018 	.word	0x20000018
 8003ac0:	20000014 	.word	0x20000014

08003ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ac8:	4b06      	ldr	r3, [pc, #24]	@ (8003ae4 <HAL_IncTick+0x20>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <HAL_IncTick+0x24>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	4a04      	ldr	r2, [pc, #16]	@ (8003ae8 <HAL_IncTick+0x24>)
 8003ad6:	6013      	str	r3, [r2, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20000018 	.word	0x20000018
 8003ae8:	20000528 	.word	0x20000528

08003aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return uwTick;
 8003af0:	4b03      	ldr	r3, [pc, #12]	@ (8003b00 <HAL_GetTick+0x14>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000528 	.word	0x20000528

08003b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b0c:	f7ff ffee 	bl	8003aec <HAL_GetTick>
 8003b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1c:	d005      	beq.n	8003b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b48 <HAL_Delay+0x44>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b2a:	bf00      	nop
 8003b2c:	f7ff ffde 	bl	8003aec <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d8f7      	bhi.n	8003b2c <HAL_Delay+0x28>
  {
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000018 	.word	0x20000018

08003b4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e033      	b.n	8003bca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fd fa28 	bl	8000fc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d118      	bne.n	8003bbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b92:	f023 0302 	bic.w	r3, r3, #2
 8003b96:	f043 0202 	orr.w	r2, r3, #2
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fa68 	bl	8004074 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bae:	f023 0303 	bic.w	r3, r3, #3
 8003bb2:	f043 0201 	orr.w	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bba:	e001      	b.n	8003bc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_ADC_Start_DMA+0x1e>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e0e9      	b.n	8003dc6 <HAL_ADC_Start_DMA+0x1f2>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d018      	beq.n	8003c3a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c18:	4b6d      	ldr	r3, [pc, #436]	@ (8003dd0 <HAL_ADC_Start_DMA+0x1fc>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a6d      	ldr	r2, [pc, #436]	@ (8003dd4 <HAL_ADC_Start_DMA+0x200>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	0c9a      	lsrs	r2, r3, #18
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003c2c:	e002      	b.n	8003c34 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f9      	bne.n	8003c2e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c48:	d107      	bne.n	8003c5a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c58:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	f040 80a1 	bne.w	8003dac <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca8:	d106      	bne.n	8003cb8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cae:	f023 0206 	bic.w	r2, r3, #6
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	645a      	str	r2, [r3, #68]	@ 0x44
 8003cb6:	e002      	b.n	8003cbe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cc6:	4b44      	ldr	r3, [pc, #272]	@ (8003dd8 <HAL_ADC_Start_DMA+0x204>)
 8003cc8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cce:	4a43      	ldr	r2, [pc, #268]	@ (8003ddc <HAL_ADC_Start_DMA+0x208>)
 8003cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd6:	4a42      	ldr	r2, [pc, #264]	@ (8003de0 <HAL_ADC_Start_DMA+0x20c>)
 8003cd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cde:	4a41      	ldr	r2, [pc, #260]	@ (8003de4 <HAL_ADC_Start_DMA+0x210>)
 8003ce0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003cea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003cfa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d0a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	334c      	adds	r3, #76	@ 0x4c
 8003d16:	4619      	mov	r1, r3
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f000 fce8 	bl	80046f0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d12a      	bne.n	8003d82 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a2d      	ldr	r2, [pc, #180]	@ (8003de8 <HAL_ADC_Start_DMA+0x214>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d015      	beq.n	8003d62 <HAL_ADC_Start_DMA+0x18e>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003dec <HAL_ADC_Start_DMA+0x218>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d105      	bne.n	8003d4c <HAL_ADC_Start_DMA+0x178>
 8003d40:	4b25      	ldr	r3, [pc, #148]	@ (8003dd8 <HAL_ADC_Start_DMA+0x204>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a27      	ldr	r2, [pc, #156]	@ (8003df0 <HAL_ADC_Start_DMA+0x21c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d136      	bne.n	8003dc4 <HAL_ADC_Start_DMA+0x1f0>
 8003d56:	4b20      	ldr	r3, [pc, #128]	@ (8003dd8 <HAL_ADC_Start_DMA+0x204>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d130      	bne.n	8003dc4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d129      	bne.n	8003dc4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	e020      	b.n	8003dc4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a18      	ldr	r2, [pc, #96]	@ (8003de8 <HAL_ADC_Start_DMA+0x214>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d11b      	bne.n	8003dc4 <HAL_ADC_Start_DMA+0x1f0>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d114      	bne.n	8003dc4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003da8:	609a      	str	r2, [r3, #8]
 8003daa:	e00b      	b.n	8003dc4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	f043 0210 	orr.w	r2, r3, #16
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbc:	f043 0201 	orr.w	r2, r3, #1
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000010 	.word	0x20000010
 8003dd4:	431bde83 	.word	0x431bde83
 8003dd8:	40012300 	.word	0x40012300
 8003ddc:	0800426d 	.word	0x0800426d
 8003de0:	08004327 	.word	0x08004327
 8003de4:	08004343 	.word	0x08004343
 8003de8:	40012000 	.word	0x40012000
 8003dec:	40012100 	.word	0x40012100
 8003df0:	40012200 	.word	0x40012200

08003df4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x1c>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e105      	b.n	8004058 <HAL_ADC_ConfigChannel+0x228>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b09      	cmp	r3, #9
 8003e5a:	d925      	bls.n	8003ea8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68d9      	ldr	r1, [r3, #12]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4413      	add	r3, r2
 8003e70:	3b1e      	subs	r3, #30
 8003e72:	2207      	movs	r2, #7
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43da      	mvns	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	400a      	ands	r2, r1
 8003e80:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68d9      	ldr	r1, [r3, #12]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	4618      	mov	r0, r3
 8003e94:	4603      	mov	r3, r0
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4403      	add	r3, r0
 8003e9a:	3b1e      	subs	r3, #30
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	e022      	b.n	8003eee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6919      	ldr	r1, [r3, #16]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	4413      	add	r3, r2
 8003ebc:	2207      	movs	r2, #7
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43da      	mvns	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	400a      	ands	r2, r1
 8003eca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6919      	ldr	r1, [r3, #16]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	4618      	mov	r0, r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4403      	add	r3, r0
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b06      	cmp	r3, #6
 8003ef4:	d824      	bhi.n	8003f40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	3b05      	subs	r3, #5
 8003f08:	221f      	movs	r2, #31
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	400a      	ands	r2, r1
 8003f16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	4618      	mov	r0, r3
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	3b05      	subs	r3, #5
 8003f32:	fa00 f203 	lsl.w	r2, r0, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f3e:	e04c      	b.n	8003fda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b0c      	cmp	r3, #12
 8003f46:	d824      	bhi.n	8003f92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	3b23      	subs	r3, #35	@ 0x23
 8003f5a:	221f      	movs	r2, #31
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	43da      	mvns	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	400a      	ands	r2, r1
 8003f68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	4618      	mov	r0, r3
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	3b23      	subs	r3, #35	@ 0x23
 8003f84:	fa00 f203 	lsl.w	r2, r0, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f90:	e023      	b.n	8003fda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3b41      	subs	r3, #65	@ 0x41
 8003fa4:	221f      	movs	r2, #31
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43da      	mvns	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	400a      	ands	r2, r1
 8003fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	3b41      	subs	r3, #65	@ 0x41
 8003fce:	fa00 f203 	lsl.w	r2, r0, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fda:	4b22      	ldr	r3, [pc, #136]	@ (8004064 <HAL_ADC_ConfigChannel+0x234>)
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a21      	ldr	r2, [pc, #132]	@ (8004068 <HAL_ADC_ConfigChannel+0x238>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d109      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x1cc>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b12      	cmp	r3, #18
 8003fee:	d105      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a19      	ldr	r2, [pc, #100]	@ (8004068 <HAL_ADC_ConfigChannel+0x238>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d123      	bne.n	800404e <HAL_ADC_ConfigChannel+0x21e>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b10      	cmp	r3, #16
 800400c:	d003      	beq.n	8004016 <HAL_ADC_ConfigChannel+0x1e6>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b11      	cmp	r3, #17
 8004014:	d11b      	bne.n	800404e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b10      	cmp	r3, #16
 8004028:	d111      	bne.n	800404e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800402a:	4b10      	ldr	r3, [pc, #64]	@ (800406c <HAL_ADC_ConfigChannel+0x23c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a10      	ldr	r2, [pc, #64]	@ (8004070 <HAL_ADC_ConfigChannel+0x240>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	0c9a      	lsrs	r2, r3, #18
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004040:	e002      	b.n	8004048 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	3b01      	subs	r3, #1
 8004046:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f9      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	40012300 	.word	0x40012300
 8004068:	40012000 	.word	0x40012000
 800406c:	20000010 	.word	0x20000010
 8004070:	431bde83 	.word	0x431bde83

08004074 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800407c:	4b79      	ldr	r3, [pc, #484]	@ (8004264 <ADC_Init+0x1f0>)
 800407e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	431a      	orrs	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6859      	ldr	r1, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	021a      	lsls	r2, r3, #8
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80040cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6899      	ldr	r1, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004106:	4a58      	ldr	r2, [pc, #352]	@ (8004268 <ADC_Init+0x1f4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d022      	beq.n	8004152 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800411a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6899      	ldr	r1, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800413c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6899      	ldr	r1, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	e00f      	b.n	8004172 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004160:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004170:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0202 	bic.w	r2, r2, #2
 8004180:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6899      	ldr	r1, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	7e1b      	ldrb	r3, [r3, #24]
 800418c:	005a      	lsls	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01b      	beq.n	80041d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80041be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6859      	ldr	r1, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	3b01      	subs	r3, #1
 80041cc:	035a      	lsls	r2, r3, #13
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	e007      	b.n	80041e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80041f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	3b01      	subs	r3, #1
 8004204:	051a      	lsls	r2, r3, #20
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800421c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6899      	ldr	r1, [r3, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800422a:	025a      	lsls	r2, r3, #9
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004242:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6899      	ldr	r1, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	029a      	lsls	r2, r3, #10
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	609a      	str	r2, [r3, #8]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	40012300 	.word	0x40012300
 8004268:	0f000001 	.word	0x0f000001

0800426c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004278:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004282:	2b00      	cmp	r3, #0
 8004284:	d13c      	bne.n	8004300 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d12b      	bne.n	80042f8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d127      	bne.n	80042f8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d006      	beq.n	80042c4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d119      	bne.n	80042f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0220 	bic.w	r2, r2, #32
 80042d2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d105      	bne.n	80042f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f0:	f043 0201 	orr.w	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff fd7b 	bl	8003df4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80042fe:	e00e      	b.n	800431e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004304:	f003 0310 	and.w	r3, r3, #16
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f7ff fd85 	bl	8003e1c <HAL_ADC_ErrorCallback>
}
 8004312:	e004      	b.n	800431e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	4798      	blx	r3
}
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004332:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7ff fd67 	bl	8003e08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800433a:	bf00      	nop
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2240      	movs	r2, #64	@ 0x40
 8004354:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435a:	f043 0204 	orr.w	r2, r3, #4
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7ff fd5a 	bl	8003e1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004368:	bf00      	nop
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004380:	4b0c      	ldr	r3, [pc, #48]	@ (80043b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800438c:	4013      	ands	r3, r2
 800438e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800439c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043a2:	4a04      	ldr	r2, [pc, #16]	@ (80043b4 <__NVIC_SetPriorityGrouping+0x44>)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	60d3      	str	r3, [r2, #12]
}
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	e000ed00 	.word	0xe000ed00

080043b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043bc:	4b04      	ldr	r3, [pc, #16]	@ (80043d0 <__NVIC_GetPriorityGrouping+0x18>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	0a1b      	lsrs	r3, r3, #8
 80043c2:	f003 0307 	and.w	r3, r3, #7
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	e000ed00 	.word	0xe000ed00

080043d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	db0b      	blt.n	80043fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	f003 021f 	and.w	r2, r3, #31
 80043ec:	4907      	ldr	r1, [pc, #28]	@ (800440c <__NVIC_EnableIRQ+0x38>)
 80043ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	2001      	movs	r0, #1
 80043f6:	fa00 f202 	lsl.w	r2, r0, r2
 80043fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	e000e100 	.word	0xe000e100

08004410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	6039      	str	r1, [r7, #0]
 800441a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800441c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004420:	2b00      	cmp	r3, #0
 8004422:	db0a      	blt.n	800443a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	b2da      	uxtb	r2, r3
 8004428:	490c      	ldr	r1, [pc, #48]	@ (800445c <__NVIC_SetPriority+0x4c>)
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	0112      	lsls	r2, r2, #4
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	440b      	add	r3, r1
 8004434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004438:	e00a      	b.n	8004450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	b2da      	uxtb	r2, r3
 800443e:	4908      	ldr	r1, [pc, #32]	@ (8004460 <__NVIC_SetPriority+0x50>)
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	3b04      	subs	r3, #4
 8004448:	0112      	lsls	r2, r2, #4
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	440b      	add	r3, r1
 800444e:	761a      	strb	r2, [r3, #24]
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	e000e100 	.word	0xe000e100
 8004460:	e000ed00 	.word	0xe000ed00

08004464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	@ 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f1c3 0307 	rsb	r3, r3, #7
 800447e:	2b04      	cmp	r3, #4
 8004480:	bf28      	it	cs
 8004482:	2304      	movcs	r3, #4
 8004484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3304      	adds	r3, #4
 800448a:	2b06      	cmp	r3, #6
 800448c:	d902      	bls.n	8004494 <NVIC_EncodePriority+0x30>
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3b03      	subs	r3, #3
 8004492:	e000      	b.n	8004496 <NVIC_EncodePriority+0x32>
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004498:	f04f 32ff 	mov.w	r2, #4294967295
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43da      	mvns	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	401a      	ands	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044ac:	f04f 31ff 	mov.w	r1, #4294967295
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	fa01 f303 	lsl.w	r3, r1, r3
 80044b6:	43d9      	mvns	r1, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044bc:	4313      	orrs	r3, r2
         );
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3724      	adds	r7, #36	@ 0x24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044dc:	d301      	bcc.n	80044e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044de:	2301      	movs	r3, #1
 80044e0:	e00f      	b.n	8004502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044e2:	4a0a      	ldr	r2, [pc, #40]	@ (800450c <SysTick_Config+0x40>)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ea:	210f      	movs	r1, #15
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	f7ff ff8e 	bl	8004410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044f4:	4b05      	ldr	r3, [pc, #20]	@ (800450c <SysTick_Config+0x40>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044fa:	4b04      	ldr	r3, [pc, #16]	@ (800450c <SysTick_Config+0x40>)
 80044fc:	2207      	movs	r2, #7
 80044fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	e000e010 	.word	0xe000e010

08004510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff ff29 	bl	8004370 <__NVIC_SetPriorityGrouping>
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004526:	b580      	push	{r7, lr}
 8004528:	b086      	sub	sp, #24
 800452a:	af00      	add	r7, sp, #0
 800452c:	4603      	mov	r3, r0
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004538:	f7ff ff3e 	bl	80043b8 <__NVIC_GetPriorityGrouping>
 800453c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	6978      	ldr	r0, [r7, #20]
 8004544:	f7ff ff8e 	bl	8004464 <NVIC_EncodePriority>
 8004548:	4602      	mov	r2, r0
 800454a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800454e:	4611      	mov	r1, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff ff5d 	bl	8004410 <__NVIC_SetPriority>
}
 8004556:	bf00      	nop
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	4603      	mov	r3, r0
 8004566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff31 	bl	80043d4 <__NVIC_EnableIRQ>
}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff ffa2 	bl	80044cc <SysTick_Config>
 8004588:	4603      	mov	r3, r0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80045a0:	f7ff faa4 	bl	8003aec <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e099      	b.n	80046e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045d0:	e00f      	b.n	80045f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045d2:	f7ff fa8b 	bl	8003aec <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b05      	cmp	r3, #5
 80045de:	d908      	bls.n	80045f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2203      	movs	r2, #3
 80045ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e078      	b.n	80046e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e8      	bne.n	80045d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	4b38      	ldr	r3, [pc, #224]	@ (80046ec <HAL_DMA_Init+0x158>)
 800460c:	4013      	ands	r3, r2
 800460e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800461e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800462a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4313      	orrs	r3, r2
 8004642:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004648:	2b04      	cmp	r3, #4
 800464a:	d107      	bne.n	800465c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004654:	4313      	orrs	r3, r2
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 0307 	bic.w	r3, r3, #7
 8004672:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	2b04      	cmp	r3, #4
 8004684:	d117      	bne.n	80046b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00e      	beq.n	80046b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fb01 	bl	8004ca0 <DMA_CheckFifoParam>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2240      	movs	r2, #64	@ 0x40
 80046a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80046b2:	2301      	movs	r3, #1
 80046b4:	e016      	b.n	80046e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fab8 	bl	8004c34 <DMA_CalcBaseAndBitshift>
 80046c4:	4603      	mov	r3, r0
 80046c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046cc:	223f      	movs	r2, #63	@ 0x3f
 80046ce:	409a      	lsls	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	f010803f 	.word	0xf010803f

080046f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004706:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_DMA_Start_IT+0x26>
 8004712:	2302      	movs	r3, #2
 8004714:	e040      	b.n	8004798 <HAL_DMA_Start_IT+0xa8>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b01      	cmp	r3, #1
 8004728:	d12f      	bne.n	800478a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2202      	movs	r2, #2
 800472e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fa4a 	bl	8004bd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004748:	223f      	movs	r2, #63	@ 0x3f
 800474a:	409a      	lsls	r2, r3
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0216 	orr.w	r2, r2, #22
 800475e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0208 	orr.w	r2, r2, #8
 8004776:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	e005      	b.n	8004796 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004792:	2302      	movs	r3, #2
 8004794:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004796:	7dfb      	ldrb	r3, [r7, #23]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047ae:	f7ff f99d 	bl	8003aec <HAL_GetTick>
 80047b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d008      	beq.n	80047d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2280      	movs	r2, #128	@ 0x80
 80047c4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e052      	b.n	8004878 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0216 	bic.w	r2, r2, #22
 80047e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d103      	bne.n	8004802 <HAL_DMA_Abort+0x62>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0208 	bic.w	r2, r2, #8
 8004810:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0201 	bic.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004822:	e013      	b.n	800484c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004824:	f7ff f962 	bl	8003aec <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b05      	cmp	r3, #5
 8004830:	d90c      	bls.n	800484c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2203      	movs	r2, #3
 800483c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e015      	b.n	8004878 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e4      	bne.n	8004824 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485e:	223f      	movs	r2, #63	@ 0x3f
 8004860:	409a      	lsls	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d004      	beq.n	800489e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2280      	movs	r2, #128	@ 0x80
 8004898:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e00c      	b.n	80048b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2205      	movs	r2, #5
 80048a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0201 	bic.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048d0:	4b8e      	ldr	r3, [pc, #568]	@ (8004b0c <HAL_DMA_IRQHandler+0x248>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a8e      	ldr	r2, [pc, #568]	@ (8004b10 <HAL_DMA_IRQHandler+0x24c>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	0a9b      	lsrs	r3, r3, #10
 80048dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ee:	2208      	movs	r2, #8
 80048f0:	409a      	lsls	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01a      	beq.n	8004930 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d013      	beq.n	8004930 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0204 	bic.w	r2, r2, #4
 8004916:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491c:	2208      	movs	r2, #8
 800491e:	409a      	lsls	r2, r3
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004928:	f043 0201 	orr.w	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004934:	2201      	movs	r2, #1
 8004936:	409a      	lsls	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d012      	beq.n	8004966 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004952:	2201      	movs	r2, #1
 8004954:	409a      	lsls	r2, r3
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495e:	f043 0202 	orr.w	r2, r3, #2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800496a:	2204      	movs	r2, #4
 800496c:	409a      	lsls	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4013      	ands	r3, r2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d012      	beq.n	800499c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00b      	beq.n	800499c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004988:	2204      	movs	r2, #4
 800498a:	409a      	lsls	r2, r3
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004994:	f043 0204 	orr.w	r2, r3, #4
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a0:	2210      	movs	r2, #16
 80049a2:	409a      	lsls	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d043      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d03c      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049be:	2210      	movs	r2, #16
 80049c0:	409a      	lsls	r2, r3
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d018      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d108      	bne.n	80049f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d024      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	4798      	blx	r3
 80049f2:	e01f      	b.n	8004a34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01b      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4798      	blx	r3
 8004a04:	e016      	b.n	8004a34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d107      	bne.n	8004a24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0208 	bic.w	r2, r2, #8
 8004a22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a38:	2220      	movs	r2, #32
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 808f 	beq.w	8004b64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8087 	beq.w	8004b64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b05      	cmp	r3, #5
 8004a6c:	d136      	bne.n	8004adc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0216 	bic.w	r2, r2, #22
 8004a7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695a      	ldr	r2, [r3, #20]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d103      	bne.n	8004a9e <HAL_DMA_IRQHandler+0x1da>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0208 	bic.w	r2, r2, #8
 8004aac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab2:	223f      	movs	r2, #63	@ 0x3f
 8004ab4:	409a      	lsls	r2, r3
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d07e      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
        }
        return;
 8004ada:	e079      	b.n	8004bd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01d      	beq.n	8004b26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10d      	bne.n	8004b14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d031      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	4798      	blx	r3
 8004b08:	e02c      	b.n	8004b64 <HAL_DMA_IRQHandler+0x2a0>
 8004b0a:	bf00      	nop
 8004b0c:	20000010 	.word	0x20000010
 8004b10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d023      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4798      	blx	r3
 8004b24:	e01e      	b.n	8004b64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10f      	bne.n	8004b54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0210 	bic.w	r2, r2, #16
 8004b42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d032      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d022      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2205      	movs	r2, #5
 8004b7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0201 	bic.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	3301      	adds	r3, #1
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d307      	bcc.n	8004bac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f2      	bne.n	8004b90 <HAL_DMA_IRQHandler+0x2cc>
 8004baa:	e000      	b.n	8004bae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004bac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
 8004bce:	e000      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004bd0:	bf00      	nop
    }
  }
}
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004bf4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b40      	cmp	r3, #64	@ 0x40
 8004c04:	d108      	bne.n	8004c18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c16:	e007      	b.n	8004c28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	60da      	str	r2, [r3, #12]
}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	3b10      	subs	r3, #16
 8004c44:	4a14      	ldr	r2, [pc, #80]	@ (8004c98 <DMA_CalcBaseAndBitshift+0x64>)
 8004c46:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c4e:	4a13      	ldr	r2, [pc, #76]	@ (8004c9c <DMA_CalcBaseAndBitshift+0x68>)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d909      	bls.n	8004c76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004c6a:	f023 0303 	bic.w	r3, r3, #3
 8004c6e:	1d1a      	adds	r2, r3, #4
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c74:	e007      	b.n	8004c86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004c7e:	f023 0303 	bic.w	r3, r3, #3
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	aaaaaaab 	.word	0xaaaaaaab
 8004c9c:	0800d5c4 	.word	0x0800d5c4

08004ca0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d11f      	bne.n	8004cfa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d856      	bhi.n	8004d6e <DMA_CheckFifoParam+0xce>
 8004cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc8 <DMA_CheckFifoParam+0x28>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004cd9 	.word	0x08004cd9
 8004ccc:	08004ceb 	.word	0x08004ceb
 8004cd0:	08004cd9 	.word	0x08004cd9
 8004cd4:	08004d6f 	.word	0x08004d6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d046      	beq.n	8004d72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce8:	e043      	b.n	8004d72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004cf2:	d140      	bne.n	8004d76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cf8:	e03d      	b.n	8004d76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d02:	d121      	bne.n	8004d48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d837      	bhi.n	8004d7a <DMA_CheckFifoParam+0xda>
 8004d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d10 <DMA_CheckFifoParam+0x70>)
 8004d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d10:	08004d21 	.word	0x08004d21
 8004d14:	08004d27 	.word	0x08004d27
 8004d18:	08004d21 	.word	0x08004d21
 8004d1c:	08004d39 	.word	0x08004d39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
      break;
 8004d24:	e030      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d025      	beq.n	8004d7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d36:	e022      	b.n	8004d7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d40:	d11f      	bne.n	8004d82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d46:	e01c      	b.n	8004d82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d903      	bls.n	8004d56 <DMA_CheckFifoParam+0xb6>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d003      	beq.n	8004d5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d54:	e018      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	73fb      	strb	r3, [r7, #15]
      break;
 8004d5a:	e015      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00e      	beq.n	8004d86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d6c:	e00b      	b.n	8004d86 <DMA_CheckFifoParam+0xe6>
      break;
 8004d6e:	bf00      	nop
 8004d70:	e00a      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      break;
 8004d72:	bf00      	nop
 8004d74:	e008      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      break;
 8004d76:	bf00      	nop
 8004d78:	e006      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      break;
 8004d7a:	bf00      	nop
 8004d7c:	e004      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      break;
 8004d7e:	bf00      	nop
 8004d80:	e002      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d82:	bf00      	nop
 8004d84:	e000      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      break;
 8004d86:	bf00      	nop
    }
  } 
  
  return status; 
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop

08004d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b089      	sub	sp, #36	@ 0x24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	e16b      	b.n	800508c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004db4:	2201      	movs	r2, #1
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	f040 815a 	bne.w	8005086 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d005      	beq.n	8004dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d130      	bne.n	8004e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	2203      	movs	r2, #3
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e20:	2201      	movs	r2, #1
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	f003 0201 	and.w	r2, r3, #1
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d017      	beq.n	8004e88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	2203      	movs	r2, #3
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d123      	bne.n	8004edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	08da      	lsrs	r2, r3, #3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3208      	adds	r2, #8
 8004e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	220f      	movs	r2, #15
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	08da      	lsrs	r2, r3, #3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3208      	adds	r2, #8
 8004ed6:	69b9      	ldr	r1, [r7, #24]
 8004ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f003 0203 	and.w	r2, r3, #3
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80b4 	beq.w	8005086 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	4b60      	ldr	r3, [pc, #384]	@ (80050a4 <HAL_GPIO_Init+0x30c>)
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	4a5f      	ldr	r2, [pc, #380]	@ (80050a4 <HAL_GPIO_Init+0x30c>)
 8004f28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f2e:	4b5d      	ldr	r3, [pc, #372]	@ (80050a4 <HAL_GPIO_Init+0x30c>)
 8004f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f3a:	4a5b      	ldr	r2, [pc, #364]	@ (80050a8 <HAL_GPIO_Init+0x310>)
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	089b      	lsrs	r3, r3, #2
 8004f40:	3302      	adds	r3, #2
 8004f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	220f      	movs	r2, #15
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	43db      	mvns	r3, r3
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a52      	ldr	r2, [pc, #328]	@ (80050ac <HAL_GPIO_Init+0x314>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d02b      	beq.n	8004fbe <HAL_GPIO_Init+0x226>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a51      	ldr	r2, [pc, #324]	@ (80050b0 <HAL_GPIO_Init+0x318>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d025      	beq.n	8004fba <HAL_GPIO_Init+0x222>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a50      	ldr	r2, [pc, #320]	@ (80050b4 <HAL_GPIO_Init+0x31c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d01f      	beq.n	8004fb6 <HAL_GPIO_Init+0x21e>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a4f      	ldr	r2, [pc, #316]	@ (80050b8 <HAL_GPIO_Init+0x320>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d019      	beq.n	8004fb2 <HAL_GPIO_Init+0x21a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a4e      	ldr	r2, [pc, #312]	@ (80050bc <HAL_GPIO_Init+0x324>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_GPIO_Init+0x216>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a4d      	ldr	r2, [pc, #308]	@ (80050c0 <HAL_GPIO_Init+0x328>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00d      	beq.n	8004faa <HAL_GPIO_Init+0x212>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a4c      	ldr	r2, [pc, #304]	@ (80050c4 <HAL_GPIO_Init+0x32c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d007      	beq.n	8004fa6 <HAL_GPIO_Init+0x20e>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a4b      	ldr	r2, [pc, #300]	@ (80050c8 <HAL_GPIO_Init+0x330>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d101      	bne.n	8004fa2 <HAL_GPIO_Init+0x20a>
 8004f9e:	2307      	movs	r3, #7
 8004fa0:	e00e      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	e00c      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004fa6:	2306      	movs	r3, #6
 8004fa8:	e00a      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004faa:	2305      	movs	r3, #5
 8004fac:	e008      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004fae:	2304      	movs	r3, #4
 8004fb0:	e006      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e004      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e002      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	69fa      	ldr	r2, [r7, #28]
 8004fc2:	f002 0203 	and.w	r2, r2, #3
 8004fc6:	0092      	lsls	r2, r2, #2
 8004fc8:	4093      	lsls	r3, r2
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fd0:	4935      	ldr	r1, [pc, #212]	@ (80050a8 <HAL_GPIO_Init+0x310>)
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	089b      	lsrs	r3, r3, #2
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fde:	4b3b      	ldr	r3, [pc, #236]	@ (80050cc <HAL_GPIO_Init+0x334>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4013      	ands	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005002:	4a32      	ldr	r2, [pc, #200]	@ (80050cc <HAL_GPIO_Init+0x334>)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005008:	4b30      	ldr	r3, [pc, #192]	@ (80050cc <HAL_GPIO_Init+0x334>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	43db      	mvns	r3, r3
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4013      	ands	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800502c:	4a27      	ldr	r2, [pc, #156]	@ (80050cc <HAL_GPIO_Init+0x334>)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005032:	4b26      	ldr	r3, [pc, #152]	@ (80050cc <HAL_GPIO_Init+0x334>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	43db      	mvns	r3, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4013      	ands	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005056:	4a1d      	ldr	r2, [pc, #116]	@ (80050cc <HAL_GPIO_Init+0x334>)
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800505c:	4b1b      	ldr	r3, [pc, #108]	@ (80050cc <HAL_GPIO_Init+0x334>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	43db      	mvns	r3, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4013      	ands	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005080:	4a12      	ldr	r2, [pc, #72]	@ (80050cc <HAL_GPIO_Init+0x334>)
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	3301      	adds	r3, #1
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	2b0f      	cmp	r3, #15
 8005090:	f67f ae90 	bls.w	8004db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	3724      	adds	r7, #36	@ 0x24
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40023800 	.word	0x40023800
 80050a8:	40013800 	.word	0x40013800
 80050ac:	40020000 	.word	0x40020000
 80050b0:	40020400 	.word	0x40020400
 80050b4:	40020800 	.word	0x40020800
 80050b8:	40020c00 	.word	0x40020c00
 80050bc:	40021000 	.word	0x40021000
 80050c0:	40021400 	.word	0x40021400
 80050c4:	40021800 	.word	0x40021800
 80050c8:	40021c00 	.word	0x40021c00
 80050cc:	40013c00 	.word	0x40013c00

080050d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	807b      	strh	r3, [r7, #2]
 80050dc:	4613      	mov	r3, r2
 80050de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050e0:	787b      	ldrb	r3, [r7, #1]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050e6:	887a      	ldrh	r2, [r7, #2]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050ec:	e003      	b.n	80050f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050ee:	887b      	ldrh	r3, [r7, #2]
 80050f0:	041a      	lsls	r2, r3, #16
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	619a      	str	r2, [r3, #24]
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	460b      	mov	r3, r1
 800510c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005114:	887a      	ldrh	r2, [r7, #2]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4013      	ands	r3, r2
 800511a:	041a      	lsls	r2, r3, #16
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	43d9      	mvns	r1, r3
 8005120:	887b      	ldrh	r3, [r7, #2]
 8005122:	400b      	ands	r3, r1
 8005124:	431a      	orrs	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	619a      	str	r2, [r3, #24]
}
 800512a:	bf00      	nop
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
	...

08005138 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e12b      	b.n	80053a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fc fcca 	bl	8001af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2224      	movs	r2, #36	@ 0x24
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0201 	bic.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800518a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800519a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800519c:	f001 fd8e 	bl	8006cbc <HAL_RCC_GetPCLK1Freq>
 80051a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	4a81      	ldr	r2, [pc, #516]	@ (80053ac <HAL_I2C_Init+0x274>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d807      	bhi.n	80051bc <HAL_I2C_Init+0x84>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4a80      	ldr	r2, [pc, #512]	@ (80053b0 <HAL_I2C_Init+0x278>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	bf94      	ite	ls
 80051b4:	2301      	movls	r3, #1
 80051b6:	2300      	movhi	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	e006      	b.n	80051ca <HAL_I2C_Init+0x92>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4a7d      	ldr	r2, [pc, #500]	@ (80053b4 <HAL_I2C_Init+0x27c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	bf94      	ite	ls
 80051c4:	2301      	movls	r3, #1
 80051c6:	2300      	movhi	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e0e7      	b.n	80053a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4a78      	ldr	r2, [pc, #480]	@ (80053b8 <HAL_I2C_Init+0x280>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	0c9b      	lsrs	r3, r3, #18
 80051dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4a6a      	ldr	r2, [pc, #424]	@ (80053ac <HAL_I2C_Init+0x274>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d802      	bhi.n	800520c <HAL_I2C_Init+0xd4>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	3301      	adds	r3, #1
 800520a:	e009      	b.n	8005220 <HAL_I2C_Init+0xe8>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005212:	fb02 f303 	mul.w	r3, r2, r3
 8005216:	4a69      	ldr	r2, [pc, #420]	@ (80053bc <HAL_I2C_Init+0x284>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	099b      	lsrs	r3, r3, #6
 800521e:	3301      	adds	r3, #1
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	430b      	orrs	r3, r1
 8005226:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005232:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	495c      	ldr	r1, [pc, #368]	@ (80053ac <HAL_I2C_Init+0x274>)
 800523c:	428b      	cmp	r3, r1
 800523e:	d819      	bhi.n	8005274 <HAL_I2C_Init+0x13c>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	1e59      	subs	r1, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	fbb1 f3f3 	udiv	r3, r1, r3
 800524e:	1c59      	adds	r1, r3, #1
 8005250:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005254:	400b      	ands	r3, r1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <HAL_I2C_Init+0x138>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1e59      	subs	r1, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	fbb1 f3f3 	udiv	r3, r1, r3
 8005268:	3301      	adds	r3, #1
 800526a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800526e:	e051      	b.n	8005314 <HAL_I2C_Init+0x1dc>
 8005270:	2304      	movs	r3, #4
 8005272:	e04f      	b.n	8005314 <HAL_I2C_Init+0x1dc>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d111      	bne.n	80052a0 <HAL_I2C_Init+0x168>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	1e58      	subs	r0, r3, #1
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6859      	ldr	r1, [r3, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	440b      	add	r3, r1
 800528a:	fbb0 f3f3 	udiv	r3, r0, r3
 800528e:	3301      	adds	r3, #1
 8005290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005294:	2b00      	cmp	r3, #0
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	e012      	b.n	80052c6 <HAL_I2C_Init+0x18e>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	1e58      	subs	r0, r3, #1
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6859      	ldr	r1, [r3, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	0099      	lsls	r1, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052b6:	3301      	adds	r3, #1
 80052b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052bc:	2b00      	cmp	r3, #0
 80052be:	bf0c      	ite	eq
 80052c0:	2301      	moveq	r3, #1
 80052c2:	2300      	movne	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_I2C_Init+0x196>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e022      	b.n	8005314 <HAL_I2C_Init+0x1dc>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10e      	bne.n	80052f4 <HAL_I2C_Init+0x1bc>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1e58      	subs	r0, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6859      	ldr	r1, [r3, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	440b      	add	r3, r1
 80052e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80052e8:	3301      	adds	r3, #1
 80052ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052f2:	e00f      	b.n	8005314 <HAL_I2C_Init+0x1dc>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	1e58      	subs	r0, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6859      	ldr	r1, [r3, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	0099      	lsls	r1, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	fbb0 f3f3 	udiv	r3, r0, r3
 800530a:	3301      	adds	r3, #1
 800530c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005310:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	6809      	ldr	r1, [r1, #0]
 8005318:	4313      	orrs	r3, r2
 800531a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69da      	ldr	r2, [r3, #28]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005342:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6911      	ldr	r1, [r2, #16]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	68d2      	ldr	r2, [r2, #12]
 800534e:	4311      	orrs	r1, r2
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	430b      	orrs	r3, r1
 8005356:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	000186a0 	.word	0x000186a0
 80053b0:	001e847f 	.word	0x001e847f
 80053b4:	003d08ff 	.word	0x003d08ff
 80053b8:	431bde83 	.word	0x431bde83
 80053bc:	10624dd3 	.word	0x10624dd3

080053c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	4608      	mov	r0, r1
 80053ca:	4611      	mov	r1, r2
 80053cc:	461a      	mov	r2, r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	817b      	strh	r3, [r7, #10]
 80053d2:	460b      	mov	r3, r1
 80053d4:	813b      	strh	r3, [r7, #8]
 80053d6:	4613      	mov	r3, r2
 80053d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053da:	f7fe fb87 	bl	8003aec <HAL_GetTick>
 80053de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	f040 80d9 	bne.w	80055a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	2319      	movs	r3, #25
 80053f4:	2201      	movs	r2, #1
 80053f6:	496d      	ldr	r1, [pc, #436]	@ (80055ac <HAL_I2C_Mem_Write+0x1ec>)
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 fdb9 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005404:	2302      	movs	r3, #2
 8005406:	e0cc      	b.n	80055a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_I2C_Mem_Write+0x56>
 8005412:	2302      	movs	r3, #2
 8005414:	e0c5      	b.n	80055a2 <HAL_I2C_Mem_Write+0x1e2>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b01      	cmp	r3, #1
 800542a:	d007      	beq.n	800543c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800544a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2221      	movs	r2, #33	@ 0x21
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2240      	movs	r2, #64	@ 0x40
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a3a      	ldr	r2, [r7, #32]
 8005466:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800546c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4a4d      	ldr	r2, [pc, #308]	@ (80055b0 <HAL_I2C_Mem_Write+0x1f0>)
 800547c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800547e:	88f8      	ldrh	r0, [r7, #6]
 8005480:	893a      	ldrh	r2, [r7, #8]
 8005482:	8979      	ldrh	r1, [r7, #10]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	4603      	mov	r3, r0
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 fbf0 	bl	8005c74 <I2C_RequestMemoryWrite>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d052      	beq.n	8005540 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e081      	b.n	80055a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 fe7e 	bl	80061a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00d      	beq.n	80054ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d107      	bne.n	80054c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e06b      	b.n	80055a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ce:	781a      	ldrb	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b04      	cmp	r3, #4
 8005506:	d11b      	bne.n	8005540 <HAL_I2C_Mem_Write+0x180>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550c:	2b00      	cmp	r3, #0
 800550e:	d017      	beq.n	8005540 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005514:	781a      	ldrb	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1aa      	bne.n	800549e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 fe71 	bl	8006234 <I2C_WaitOnBTFFlagUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00d      	beq.n	8005574 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555c:	2b04      	cmp	r3, #4
 800555e:	d107      	bne.n	8005570 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800556e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e016      	b.n	80055a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	e000      	b.n	80055a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80055a0:	2302      	movs	r3, #2
  }
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	00100002 	.word	0x00100002
 80055b0:	ffff0000 	.word	0xffff0000

080055b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08c      	sub	sp, #48	@ 0x30
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	4608      	mov	r0, r1
 80055be:	4611      	mov	r1, r2
 80055c0:	461a      	mov	r2, r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	817b      	strh	r3, [r7, #10]
 80055c6:	460b      	mov	r3, r1
 80055c8:	813b      	strh	r3, [r7, #8]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055ce:	f7fe fa8d 	bl	8003aec <HAL_GetTick>
 80055d2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b20      	cmp	r3, #32
 80055de:	f040 8214 	bne.w	8005a0a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	2319      	movs	r3, #25
 80055e8:	2201      	movs	r2, #1
 80055ea:	497b      	ldr	r1, [pc, #492]	@ (80057d8 <HAL_I2C_Mem_Read+0x224>)
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 fcbf 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80055f8:	2302      	movs	r3, #2
 80055fa:	e207      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005602:	2b01      	cmp	r3, #1
 8005604:	d101      	bne.n	800560a <HAL_I2C_Mem_Read+0x56>
 8005606:	2302      	movs	r3, #2
 8005608:	e200      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b01      	cmp	r3, #1
 800561e:	d007      	beq.n	8005630 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800563e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2222      	movs	r2, #34	@ 0x22
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2240      	movs	r2, #64	@ 0x40
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800565a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005660:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4a5b      	ldr	r2, [pc, #364]	@ (80057dc <HAL_I2C_Mem_Read+0x228>)
 8005670:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005672:	88f8      	ldrh	r0, [r7, #6]
 8005674:	893a      	ldrh	r2, [r7, #8]
 8005676:	8979      	ldrh	r1, [r7, #10]
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	9301      	str	r3, [sp, #4]
 800567c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	4603      	mov	r3, r0
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 fb8c 	bl	8005da0 <I2C_RequestMemoryRead>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e1bc      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005696:	2b00      	cmp	r3, #0
 8005698:	d113      	bne.n	80056c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800569a:	2300      	movs	r3, #0
 800569c:	623b      	str	r3, [r7, #32]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	623b      	str	r3, [r7, #32]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	623b      	str	r3, [r7, #32]
 80056ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	e190      	b.n	80059e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d11b      	bne.n	8005702 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	61fb      	str	r3, [r7, #28]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	e170      	b.n	80059e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005706:	2b02      	cmp	r3, #2
 8005708:	d11b      	bne.n	8005742 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005718:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005728:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572a:	2300      	movs	r3, #0
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	e150      	b.n	80059e4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005758:	e144      	b.n	80059e4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800575e:	2b03      	cmp	r3, #3
 8005760:	f200 80f1 	bhi.w	8005946 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005768:	2b01      	cmp	r3, #1
 800576a:	d123      	bne.n	80057b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800576c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 fda7 	bl	80062c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e145      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057b2:	e117      	b.n	80059e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d14e      	bne.n	800585a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c2:	2200      	movs	r2, #0
 80057c4:	4906      	ldr	r1, [pc, #24]	@ (80057e0 <HAL_I2C_Mem_Read+0x22c>)
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 fbd2 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d008      	beq.n	80057e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e11a      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
 80057d6:	bf00      	nop
 80057d8:	00100002 	.word	0x00100002
 80057dc:	ffff0000 	.word	0xffff0000
 80057e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005842:	3b01      	subs	r3, #1
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584e:	b29b      	uxth	r3, r3
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005858:	e0c4      	b.n	80059e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005860:	2200      	movs	r2, #0
 8005862:	496c      	ldr	r1, [pc, #432]	@ (8005a14 <HAL_I2C_Mem_Read+0x460>)
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fb83 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0cb      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058bc:	2200      	movs	r2, #0
 80058be:	4955      	ldr	r1, [pc, #340]	@ (8005a14 <HAL_I2C_Mem_Read+0x460>)
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fb55 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e09d      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691a      	ldr	r2, [r3, #16]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005944:	e04e      	b.n	80059e4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005948:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 fcba 	bl	80062c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e058      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b04      	cmp	r3, #4
 8005998:	d124      	bne.n	80059e4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d107      	bne.n	80059b2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059b0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f47f aeb6 	bne.w	800575a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e000      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005a0a:	2302      	movs	r3, #2
  }
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3728      	adds	r7, #40	@ 0x28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	00010004 	.word	0x00010004

08005a18 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	@ 0x28
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	607a      	str	r2, [r7, #4]
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	460b      	mov	r3, r1
 8005a26:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005a28:	f7fe f860 	bl	8003aec <HAL_GetTick>
 8005a2c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	f040 8111 	bne.w	8005c62 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	2319      	movs	r3, #25
 8005a46:	2201      	movs	r2, #1
 8005a48:	4988      	ldr	r1, [pc, #544]	@ (8005c6c <HAL_I2C_IsDeviceReady+0x254>)
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fa90 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005a56:	2302      	movs	r3, #2
 8005a58:	e104      	b.n	8005c64 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_I2C_IsDeviceReady+0x50>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e0fd      	b.n	8005c64 <HAL_I2C_IsDeviceReady+0x24c>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d007      	beq.n	8005a8e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0201 	orr.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2224      	movs	r2, #36	@ 0x24
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4a70      	ldr	r2, [pc, #448]	@ (8005c70 <HAL_I2C_IsDeviceReady+0x258>)
 8005ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ac0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 fa4e 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00d      	beq.n	8005af6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ae8:	d103      	bne.n	8005af2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005af0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e0b6      	b.n	8005c64 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005af6:	897b      	ldrh	r3, [r7, #10]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	461a      	mov	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b04:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005b06:	f7fd fff1 	bl	8003aec <HAL_GetTick>
 8005b0a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	bf0c      	ite	eq
 8005b1a:	2301      	moveq	r3, #1
 8005b1c:	2300      	movne	r3, #0
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b30:	bf0c      	ite	eq
 8005b32:	2301      	moveq	r3, #1
 8005b34:	2300      	movne	r3, #0
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005b3a:	e025      	b.n	8005b88 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b3c:	f7fd ffd6 	bl	8003aec <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d302      	bcc.n	8005b52 <HAL_I2C_IsDeviceReady+0x13a>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	22a0      	movs	r2, #160	@ 0xa0
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	bf0c      	ite	eq
 8005b68:	2301      	moveq	r3, #1
 8005b6a:	2300      	movne	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b7e:	bf0c      	ite	eq
 8005b80:	2301      	moveq	r3, #1
 8005b82:	2300      	movne	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2ba0      	cmp	r3, #160	@ 0xa0
 8005b92:	d005      	beq.n	8005ba0 <HAL_I2C_IsDeviceReady+0x188>
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d102      	bne.n	8005ba0 <HAL_I2C_IsDeviceReady+0x188>
 8005b9a:	7dbb      	ldrb	r3, [r7, #22]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0cd      	beq.n	8005b3c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d129      	bne.n	8005c0a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bc4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	613b      	str	r3, [r7, #16]
 8005bda:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	2319      	movs	r3, #25
 8005be2:	2201      	movs	r2, #1
 8005be4:	4921      	ldr	r1, [pc, #132]	@ (8005c6c <HAL_I2C_IsDeviceReady+0x254>)
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 f9c2 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e036      	b.n	8005c64 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e02c      	b.n	8005c64 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c18:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c22:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	2319      	movs	r3, #25
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	490f      	ldr	r1, [pc, #60]	@ (8005c6c <HAL_I2C_IsDeviceReady+0x254>)
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 f99e 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e012      	b.n	8005c64 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	3301      	adds	r3, #1
 8005c42:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	f4ff af32 	bcc.w	8005ab2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005c62:	2302      	movs	r3, #2
  }
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3720      	adds	r7, #32
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	00100002 	.word	0x00100002
 8005c70:	ffff0000 	.word	0xffff0000

08005c74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	4611      	mov	r1, r2
 8005c80:	461a      	mov	r2, r3
 8005c82:	4603      	mov	r3, r0
 8005c84:	817b      	strh	r3, [r7, #10]
 8005c86:	460b      	mov	r3, r1
 8005c88:	813b      	strh	r3, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 f960 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00d      	beq.n	8005cd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cc4:	d103      	bne.n	8005cce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ccc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e05f      	b.n	8005d92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cd2:	897b      	ldrh	r3, [r7, #10]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ce0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	6a3a      	ldr	r2, [r7, #32]
 8005ce6:	492d      	ldr	r1, [pc, #180]	@ (8005d9c <I2C_RequestMemoryWrite+0x128>)
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f9bb 	bl	8006064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e04c      	b.n	8005d92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	617b      	str	r3, [r7, #20]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d10:	6a39      	ldr	r1, [r7, #32]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 fa46 	bl	80061a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00d      	beq.n	8005d3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d107      	bne.n	8005d36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e02b      	b.n	8005d92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d3a:	88fb      	ldrh	r3, [r7, #6]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d105      	bne.n	8005d4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d40:	893b      	ldrh	r3, [r7, #8]
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	611a      	str	r2, [r3, #16]
 8005d4a:	e021      	b.n	8005d90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d4c:	893b      	ldrh	r3, [r7, #8]
 8005d4e:	0a1b      	lsrs	r3, r3, #8
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d5c:	6a39      	ldr	r1, [r7, #32]
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 fa20 	bl	80061a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00d      	beq.n	8005d86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d107      	bne.n	8005d82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e005      	b.n	8005d92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d86:	893b      	ldrh	r3, [r7, #8]
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	00010002 	.word	0x00010002

08005da0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	4608      	mov	r0, r1
 8005daa:	4611      	mov	r1, r2
 8005dac:	461a      	mov	r2, r3
 8005dae:	4603      	mov	r3, r0
 8005db0:	817b      	strh	r3, [r7, #10]
 8005db2:	460b      	mov	r3, r1
 8005db4:	813b      	strh	r3, [r7, #8]
 8005db6:	4613      	mov	r3, r2
 8005db8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005dc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f8c2 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00d      	beq.n	8005e0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e00:	d103      	bne.n	8005e0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e0aa      	b.n	8005f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e0e:	897b      	ldrh	r3, [r7, #10]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	461a      	mov	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	6a3a      	ldr	r2, [r7, #32]
 8005e22:	4952      	ldr	r1, [pc, #328]	@ (8005f6c <I2C_RequestMemoryRead+0x1cc>)
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f91d 	bl	8006064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e097      	b.n	8005f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e34:	2300      	movs	r3, #0
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e4c:	6a39      	ldr	r1, [r7, #32]
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 f9a8 	bl	80061a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00d      	beq.n	8005e76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d107      	bne.n	8005e72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e076      	b.n	8005f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e76:	88fb      	ldrh	r3, [r7, #6]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d105      	bne.n	8005e88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e7c:	893b      	ldrh	r3, [r7, #8]
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	611a      	str	r2, [r3, #16]
 8005e86:	e021      	b.n	8005ecc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e88:	893b      	ldrh	r3, [r7, #8]
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e98:	6a39      	ldr	r1, [r7, #32]
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 f982 	bl	80061a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00d      	beq.n	8005ec2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	d107      	bne.n	8005ebe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ebc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e050      	b.n	8005f64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ec2:	893b      	ldrh	r3, [r7, #8]
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ece:	6a39      	ldr	r1, [r7, #32]
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f967 	bl	80061a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00d      	beq.n	8005ef8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d107      	bne.n	8005ef4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ef2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e035      	b.n	8005f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f82b 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00d      	beq.n	8005f3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f2e:	d103      	bne.n	8005f38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e013      	b.n	8005f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f3c:	897b      	ldrh	r3, [r7, #10]
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	f043 0301 	orr.w	r3, r3, #1
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	6a3a      	ldr	r2, [r7, #32]
 8005f50:	4906      	ldr	r1, [pc, #24]	@ (8005f6c <I2C_RequestMemoryRead+0x1cc>)
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 f886 	bl	8006064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	00010002 	.word	0x00010002

08005f70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f80:	e048      	b.n	8006014 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d044      	beq.n	8006014 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f8a:	f7fd fdaf 	bl	8003aec <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d302      	bcc.n	8005fa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d139      	bne.n	8006014 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	0c1b      	lsrs	r3, r3, #16
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d10d      	bne.n	8005fc6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	43da      	mvns	r2, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bf0c      	ite	eq
 8005fbc:	2301      	moveq	r3, #1
 8005fbe:	2300      	movne	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	e00c      	b.n	8005fe0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	43da      	mvns	r2, r3
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	bf0c      	ite	eq
 8005fd8:	2301      	moveq	r3, #1
 8005fda:	2300      	movne	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	79fb      	ldrb	r3, [r7, #7]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d116      	bne.n	8006014 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006000:	f043 0220 	orr.w	r2, r3, #32
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e023      	b.n	800605c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	0c1b      	lsrs	r3, r3, #16
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b01      	cmp	r3, #1
 800601c:	d10d      	bne.n	800603a <I2C_WaitOnFlagUntilTimeout+0xca>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	43da      	mvns	r2, r3
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	4013      	ands	r3, r2
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	bf0c      	ite	eq
 8006030:	2301      	moveq	r3, #1
 8006032:	2300      	movne	r3, #0
 8006034:	b2db      	uxtb	r3, r3
 8006036:	461a      	mov	r2, r3
 8006038:	e00c      	b.n	8006054 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	43da      	mvns	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	429a      	cmp	r2, r3
 8006058:	d093      	beq.n	8005f82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006072:	e071      	b.n	8006158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800607e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006082:	d123      	bne.n	80060cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006092:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800609c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b8:	f043 0204 	orr.w	r2, r3, #4
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e067      	b.n	800619c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d2:	d041      	beq.n	8006158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d4:	f7fd fd0a 	bl	8003aec <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d302      	bcc.n	80060ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d136      	bne.n	8006158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	0c1b      	lsrs	r3, r3, #16
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d10c      	bne.n	800610e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	43da      	mvns	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4013      	ands	r3, r2
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	bf14      	ite	ne
 8006106:	2301      	movne	r3, #1
 8006108:	2300      	moveq	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	e00b      	b.n	8006126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	43da      	mvns	r2, r3
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	4013      	ands	r3, r2
 800611a:	b29b      	uxth	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	bf14      	ite	ne
 8006120:	2301      	movne	r3, #1
 8006122:	2300      	moveq	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d016      	beq.n	8006158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2220      	movs	r2, #32
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006144:	f043 0220 	orr.w	r2, r3, #32
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e021      	b.n	800619c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	0c1b      	lsrs	r3, r3, #16
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b01      	cmp	r3, #1
 8006160:	d10c      	bne.n	800617c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	43da      	mvns	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4013      	ands	r3, r2
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf14      	ite	ne
 8006174:	2301      	movne	r3, #1
 8006176:	2300      	moveq	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	e00b      	b.n	8006194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	43da      	mvns	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4013      	ands	r3, r2
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	bf14      	ite	ne
 800618e:	2301      	movne	r3, #1
 8006190:	2300      	moveq	r3, #0
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	f47f af6d 	bne.w	8006074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061b0:	e034      	b.n	800621c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 f8e3 	bl	800637e <I2C_IsAcknowledgeFailed>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e034      	b.n	800622c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c8:	d028      	beq.n	800621c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ca:	f7fd fc8f 	bl	8003aec <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d302      	bcc.n	80061e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d11d      	bne.n	800621c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ea:	2b80      	cmp	r3, #128	@ 0x80
 80061ec:	d016      	beq.n	800621c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006208:	f043 0220 	orr.w	r2, r3, #32
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e007      	b.n	800622c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006226:	2b80      	cmp	r3, #128	@ 0x80
 8006228:	d1c3      	bne.n	80061b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006240:	e034      	b.n	80062ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 f89b 	bl	800637e <I2C_IsAcknowledgeFailed>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e034      	b.n	80062bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006258:	d028      	beq.n	80062ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800625a:	f7fd fc47 	bl	8003aec <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	429a      	cmp	r2, r3
 8006268:	d302      	bcc.n	8006270 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11d      	bne.n	80062ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f003 0304 	and.w	r3, r3, #4
 800627a:	2b04      	cmp	r3, #4
 800627c:	d016      	beq.n	80062ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006298:	f043 0220 	orr.w	r2, r3, #32
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e007      	b.n	80062bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d1c3      	bne.n	8006242 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062d0:	e049      	b.n	8006366 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	f003 0310 	and.w	r3, r3, #16
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d119      	bne.n	8006314 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f06f 0210 	mvn.w	r2, #16
 80062e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e030      	b.n	8006376 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006314:	f7fd fbea 	bl	8003aec <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	429a      	cmp	r2, r3
 8006322:	d302      	bcc.n	800632a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d11d      	bne.n	8006366 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006334:	2b40      	cmp	r3, #64	@ 0x40
 8006336:	d016      	beq.n	8006366 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006352:	f043 0220 	orr.w	r2, r3, #32
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e007      	b.n	8006376 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006370:	2b40      	cmp	r3, #64	@ 0x40
 8006372:	d1ae      	bne.n	80062d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006394:	d11b      	bne.n	80063ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800639e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ba:	f043 0204 	orr.w	r2, r3, #4
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e267      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d075      	beq.n	80064e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80063fa:	4b88      	ldr	r3, [pc, #544]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 030c 	and.w	r3, r3, #12
 8006402:	2b04      	cmp	r3, #4
 8006404:	d00c      	beq.n	8006420 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006406:	4b85      	ldr	r3, [pc, #532]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800640e:	2b08      	cmp	r3, #8
 8006410:	d112      	bne.n	8006438 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006412:	4b82      	ldr	r3, [pc, #520]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800641a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800641e:	d10b      	bne.n	8006438 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006420:	4b7e      	ldr	r3, [pc, #504]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d05b      	beq.n	80064e4 <HAL_RCC_OscConfig+0x108>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d157      	bne.n	80064e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e242      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006440:	d106      	bne.n	8006450 <HAL_RCC_OscConfig+0x74>
 8006442:	4b76      	ldr	r3, [pc, #472]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a75      	ldr	r2, [pc, #468]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	e01d      	b.n	800648c <HAL_RCC_OscConfig+0xb0>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006458:	d10c      	bne.n	8006474 <HAL_RCC_OscConfig+0x98>
 800645a:	4b70      	ldr	r3, [pc, #448]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a6f      	ldr	r2, [pc, #444]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	4b6d      	ldr	r3, [pc, #436]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a6c      	ldr	r2, [pc, #432]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800646c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	e00b      	b.n	800648c <HAL_RCC_OscConfig+0xb0>
 8006474:	4b69      	ldr	r3, [pc, #420]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a68      	ldr	r2, [pc, #416]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800647a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	4b66      	ldr	r3, [pc, #408]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a65      	ldr	r2, [pc, #404]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800648a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d013      	beq.n	80064bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7fd fb2a 	bl	8003aec <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800649c:	f7fd fb26 	bl	8003aec <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b64      	cmp	r3, #100	@ 0x64
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e207      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ae:	4b5b      	ldr	r3, [pc, #364]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0f0      	beq.n	800649c <HAL_RCC_OscConfig+0xc0>
 80064ba:	e014      	b.n	80064e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064bc:	f7fd fb16 	bl	8003aec <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c4:	f7fd fb12 	bl	8003aec <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b64      	cmp	r3, #100	@ 0x64
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e1f3      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d6:	4b51      	ldr	r3, [pc, #324]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f0      	bne.n	80064c4 <HAL_RCC_OscConfig+0xe8>
 80064e2:	e000      	b.n	80064e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d063      	beq.n	80065ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80064f2:	4b4a      	ldr	r3, [pc, #296]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 030c 	and.w	r3, r3, #12
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00b      	beq.n	8006516 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064fe:	4b47      	ldr	r3, [pc, #284]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006506:	2b08      	cmp	r3, #8
 8006508:	d11c      	bne.n	8006544 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800650a:	4b44      	ldr	r3, [pc, #272]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d116      	bne.n	8006544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006516:	4b41      	ldr	r3, [pc, #260]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_RCC_OscConfig+0x152>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d001      	beq.n	800652e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e1c7      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652e:	4b3b      	ldr	r3, [pc, #236]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	4937      	ldr	r1, [pc, #220]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800653e:	4313      	orrs	r3, r2
 8006540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006542:	e03a      	b.n	80065ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d020      	beq.n	800658e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800654c:	4b34      	ldr	r3, [pc, #208]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006552:	f7fd facb 	bl	8003aec <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800655a:	f7fd fac7 	bl	8003aec <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e1a8      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800656c:	4b2b      	ldr	r3, [pc, #172]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0f0      	beq.n	800655a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006578:	4b28      	ldr	r3, [pc, #160]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4925      	ldr	r1, [pc, #148]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006588:	4313      	orrs	r3, r2
 800658a:	600b      	str	r3, [r1, #0]
 800658c:	e015      	b.n	80065ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800658e:	4b24      	ldr	r3, [pc, #144]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006594:	f7fd faaa 	bl	8003aec <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800659c:	f7fd faa6 	bl	8003aec <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e187      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ae:	4b1b      	ldr	r3, [pc, #108]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d036      	beq.n	8006634 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d016      	beq.n	80065fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ce:	4b15      	ldr	r3, [pc, #84]	@ (8006624 <HAL_RCC_OscConfig+0x248>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d4:	f7fd fa8a 	bl	8003aec <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065dc:	f7fd fa86 	bl	8003aec <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e167      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ee:	4b0b      	ldr	r3, [pc, #44]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80065f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0f0      	beq.n	80065dc <HAL_RCC_OscConfig+0x200>
 80065fa:	e01b      	b.n	8006634 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065fc:	4b09      	ldr	r3, [pc, #36]	@ (8006624 <HAL_RCC_OscConfig+0x248>)
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006602:	f7fd fa73 	bl	8003aec <HAL_GetTick>
 8006606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006608:	e00e      	b.n	8006628 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800660a:	f7fd fa6f 	bl	8003aec <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d907      	bls.n	8006628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e150      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
 800661c:	40023800 	.word	0x40023800
 8006620:	42470000 	.word	0x42470000
 8006624:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006628:	4b88      	ldr	r3, [pc, #544]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 800662a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1ea      	bne.n	800660a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 8097 	beq.w	8006770 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006642:	2300      	movs	r3, #0
 8006644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006646:	4b81      	ldr	r3, [pc, #516]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10f      	bne.n	8006672 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006652:	2300      	movs	r3, #0
 8006654:	60bb      	str	r3, [r7, #8]
 8006656:	4b7d      	ldr	r3, [pc, #500]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665a:	4a7c      	ldr	r2, [pc, #496]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 800665c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006660:	6413      	str	r3, [r2, #64]	@ 0x40
 8006662:	4b7a      	ldr	r3, [pc, #488]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800666a:	60bb      	str	r3, [r7, #8]
 800666c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800666e:	2301      	movs	r3, #1
 8006670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006672:	4b77      	ldr	r3, [pc, #476]	@ (8006850 <HAL_RCC_OscConfig+0x474>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800667a:	2b00      	cmp	r3, #0
 800667c:	d118      	bne.n	80066b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800667e:	4b74      	ldr	r3, [pc, #464]	@ (8006850 <HAL_RCC_OscConfig+0x474>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a73      	ldr	r2, [pc, #460]	@ (8006850 <HAL_RCC_OscConfig+0x474>)
 8006684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800668a:	f7fd fa2f 	bl	8003aec <HAL_GetTick>
 800668e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006690:	e008      	b.n	80066a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006692:	f7fd fa2b 	bl	8003aec <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e10c      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006850 <HAL_RCC_OscConfig+0x474>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0f0      	beq.n	8006692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d106      	bne.n	80066c6 <HAL_RCC_OscConfig+0x2ea>
 80066b8:	4b64      	ldr	r3, [pc, #400]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066bc:	4a63      	ldr	r2, [pc, #396]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066be:	f043 0301 	orr.w	r3, r3, #1
 80066c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80066c4:	e01c      	b.n	8006700 <HAL_RCC_OscConfig+0x324>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2b05      	cmp	r3, #5
 80066cc:	d10c      	bne.n	80066e8 <HAL_RCC_OscConfig+0x30c>
 80066ce:	4b5f      	ldr	r3, [pc, #380]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d2:	4a5e      	ldr	r2, [pc, #376]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066d4:	f043 0304 	orr.w	r3, r3, #4
 80066d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80066da:	4b5c      	ldr	r3, [pc, #368]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066de:	4a5b      	ldr	r2, [pc, #364]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066e0:	f043 0301 	orr.w	r3, r3, #1
 80066e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80066e6:	e00b      	b.n	8006700 <HAL_RCC_OscConfig+0x324>
 80066e8:	4b58      	ldr	r3, [pc, #352]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ec:	4a57      	ldr	r2, [pc, #348]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80066f4:	4b55      	ldr	r3, [pc, #340]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f8:	4a54      	ldr	r2, [pc, #336]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066fa:	f023 0304 	bic.w	r3, r3, #4
 80066fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d015      	beq.n	8006734 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006708:	f7fd f9f0 	bl	8003aec <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800670e:	e00a      	b.n	8006726 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006710:	f7fd f9ec 	bl	8003aec <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800671e:	4293      	cmp	r3, r2
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e0cb      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006726:	4b49      	ldr	r3, [pc, #292]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0ee      	beq.n	8006710 <HAL_RCC_OscConfig+0x334>
 8006732:	e014      	b.n	800675e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006734:	f7fd f9da 	bl	8003aec <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800673a:	e00a      	b.n	8006752 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673c:	f7fd f9d6 	bl	8003aec <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800674a:	4293      	cmp	r3, r2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e0b5      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006752:	4b3e      	ldr	r3, [pc, #248]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1ee      	bne.n	800673c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800675e:	7dfb      	ldrb	r3, [r7, #23]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d105      	bne.n	8006770 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006764:	4b39      	ldr	r3, [pc, #228]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006768:	4a38      	ldr	r2, [pc, #224]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 800676a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800676e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80a1 	beq.w	80068bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800677a:	4b34      	ldr	r3, [pc, #208]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 030c 	and.w	r3, r3, #12
 8006782:	2b08      	cmp	r3, #8
 8006784:	d05c      	beq.n	8006840 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d141      	bne.n	8006812 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800678e:	4b31      	ldr	r3, [pc, #196]	@ (8006854 <HAL_RCC_OscConfig+0x478>)
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006794:	f7fd f9aa 	bl	8003aec <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800679c:	f7fd f9a6 	bl	8003aec <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e087      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ae:	4b27      	ldr	r3, [pc, #156]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1f0      	bne.n	800679c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69da      	ldr	r2, [r3, #28]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	019b      	lsls	r3, r3, #6
 80067ca:	431a      	orrs	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d0:	085b      	lsrs	r3, r3, #1
 80067d2:	3b01      	subs	r3, #1
 80067d4:	041b      	lsls	r3, r3, #16
 80067d6:	431a      	orrs	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067dc:	061b      	lsls	r3, r3, #24
 80067de:	491b      	ldr	r1, [pc, #108]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006854 <HAL_RCC_OscConfig+0x478>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ea:	f7fd f97f 	bl	8003aec <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f2:	f7fd f97b 	bl	8003aec <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e05c      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006804:	4b11      	ldr	r3, [pc, #68]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0f0      	beq.n	80067f2 <HAL_RCC_OscConfig+0x416>
 8006810:	e054      	b.n	80068bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006812:	4b10      	ldr	r3, [pc, #64]	@ (8006854 <HAL_RCC_OscConfig+0x478>)
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006818:	f7fd f968 	bl	8003aec <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006820:	f7fd f964 	bl	8003aec <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e045      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006832:	4b06      	ldr	r3, [pc, #24]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f0      	bne.n	8006820 <HAL_RCC_OscConfig+0x444>
 800683e:	e03d      	b.n	80068bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d107      	bne.n	8006858 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e038      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
 800684c:	40023800 	.word	0x40023800
 8006850:	40007000 	.word	0x40007000
 8006854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006858:	4b1b      	ldr	r3, [pc, #108]	@ (80068c8 <HAL_RCC_OscConfig+0x4ec>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d028      	beq.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006870:	429a      	cmp	r2, r3
 8006872:	d121      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687e:	429a      	cmp	r2, r3
 8006880:	d11a      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006888:	4013      	ands	r3, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800688e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006890:	4293      	cmp	r3, r2
 8006892:	d111      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	3b01      	subs	r3, #1
 80068a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d107      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d001      	beq.n	80068bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e000      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	40023800 	.word	0x40023800

080068cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e0cc      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068e0:	4b68      	ldr	r3, [pc, #416]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d90c      	bls.n	8006908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ee:	4b65      	ldr	r3, [pc, #404]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f6:	4b63      	ldr	r3, [pc, #396]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d001      	beq.n	8006908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e0b8      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d020      	beq.n	8006956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006920:	4b59      	ldr	r3, [pc, #356]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	4a58      	ldr	r2, [pc, #352]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006926:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800692a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b00      	cmp	r3, #0
 8006936:	d005      	beq.n	8006944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006938:	4b53      	ldr	r3, [pc, #332]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	4a52      	ldr	r2, [pc, #328]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800693e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006944:	4b50      	ldr	r3, [pc, #320]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	494d      	ldr	r1, [pc, #308]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006952:	4313      	orrs	r3, r2
 8006954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d044      	beq.n	80069ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d107      	bne.n	800697a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800696a:	4b47      	ldr	r3, [pc, #284]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d119      	bne.n	80069aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e07f      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2b02      	cmp	r3, #2
 8006980:	d003      	beq.n	800698a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006986:	2b03      	cmp	r3, #3
 8006988:	d107      	bne.n	800699a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800698a:	4b3f      	ldr	r3, [pc, #252]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d109      	bne.n	80069aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e06f      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800699a:	4b3b      	ldr	r3, [pc, #236]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e067      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069aa:	4b37      	ldr	r3, [pc, #220]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f023 0203 	bic.w	r2, r3, #3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	4934      	ldr	r1, [pc, #208]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069bc:	f7fd f896 	bl	8003aec <HAL_GetTick>
 80069c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c2:	e00a      	b.n	80069da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069c4:	f7fd f892 	bl	8003aec <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e04f      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069da:	4b2b      	ldr	r3, [pc, #172]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 020c 	and.w	r2, r3, #12
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d1eb      	bne.n	80069c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069ec:	4b25      	ldr	r3, [pc, #148]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d20c      	bcs.n	8006a14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069fa:	4b22      	ldr	r3, [pc, #136]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	b2d2      	uxtb	r2, r2
 8006a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a02:	4b20      	ldr	r3, [pc, #128]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d001      	beq.n	8006a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e032      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d008      	beq.n	8006a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a20:	4b19      	ldr	r3, [pc, #100]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	4916      	ldr	r1, [pc, #88]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0308 	and.w	r3, r3, #8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d009      	beq.n	8006a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a3e:	4b12      	ldr	r3, [pc, #72]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	490e      	ldr	r1, [pc, #56]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a52:	f000 f821 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 8006a56:	4602      	mov	r2, r0
 8006a58:	4b0b      	ldr	r3, [pc, #44]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	091b      	lsrs	r3, r3, #4
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	490a      	ldr	r1, [pc, #40]	@ (8006a8c <HAL_RCC_ClockConfig+0x1c0>)
 8006a64:	5ccb      	ldrb	r3, [r1, r3]
 8006a66:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6a:	4a09      	ldr	r2, [pc, #36]	@ (8006a90 <HAL_RCC_ClockConfig+0x1c4>)
 8006a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006a6e:	4b09      	ldr	r3, [pc, #36]	@ (8006a94 <HAL_RCC_ClockConfig+0x1c8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fc fff6 	bl	8003a64 <HAL_InitTick>

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	40023c00 	.word	0x40023c00
 8006a88:	40023800 	.word	0x40023800
 8006a8c:	0800d5ac 	.word	0x0800d5ac
 8006a90:	20000010 	.word	0x20000010
 8006a94:	20000014 	.word	0x20000014

08006a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a9c:	b094      	sub	sp, #80	@ 0x50
 8006a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ab0:	4b79      	ldr	r3, [pc, #484]	@ (8006c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 030c 	and.w	r3, r3, #12
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d00d      	beq.n	8006ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	f200 80e1 	bhi.w	8006c84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <HAL_RCC_GetSysClockFreq+0x34>
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d003      	beq.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006aca:	e0db      	b.n	8006c84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006acc:	4b73      	ldr	r3, [pc, #460]	@ (8006c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8006ace:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ad0:	e0db      	b.n	8006c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ad2:	4b73      	ldr	r3, [pc, #460]	@ (8006ca0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ad6:	e0d8      	b.n	8006c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ad8:	4b6f      	ldr	r3, [pc, #444]	@ (8006c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ae0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ae2:	4b6d      	ldr	r3, [pc, #436]	@ (8006c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d063      	beq.n	8006bb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aee:	4b6a      	ldr	r3, [pc, #424]	@ (8006c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	099b      	lsrs	r3, r3, #6
 8006af4:	2200      	movs	r2, #0
 8006af6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006af8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b02:	2300      	movs	r3, #0
 8006b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006b0a:	4622      	mov	r2, r4
 8006b0c:	462b      	mov	r3, r5
 8006b0e:	f04f 0000 	mov.w	r0, #0
 8006b12:	f04f 0100 	mov.w	r1, #0
 8006b16:	0159      	lsls	r1, r3, #5
 8006b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b1c:	0150      	lsls	r0, r2, #5
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	4621      	mov	r1, r4
 8006b24:	1a51      	subs	r1, r2, r1
 8006b26:	6139      	str	r1, [r7, #16]
 8006b28:	4629      	mov	r1, r5
 8006b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b3c:	4659      	mov	r1, fp
 8006b3e:	018b      	lsls	r3, r1, #6
 8006b40:	4651      	mov	r1, sl
 8006b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b46:	4651      	mov	r1, sl
 8006b48:	018a      	lsls	r2, r1, #6
 8006b4a:	4651      	mov	r1, sl
 8006b4c:	ebb2 0801 	subs.w	r8, r2, r1
 8006b50:	4659      	mov	r1, fp
 8006b52:	eb63 0901 	sbc.w	r9, r3, r1
 8006b56:	f04f 0200 	mov.w	r2, #0
 8006b5a:	f04f 0300 	mov.w	r3, #0
 8006b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b6a:	4690      	mov	r8, r2
 8006b6c:	4699      	mov	r9, r3
 8006b6e:	4623      	mov	r3, r4
 8006b70:	eb18 0303 	adds.w	r3, r8, r3
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	462b      	mov	r3, r5
 8006b78:	eb49 0303 	adc.w	r3, r9, r3
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	f04f 0300 	mov.w	r3, #0
 8006b86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	024b      	lsls	r3, r1, #9
 8006b8e:	4621      	mov	r1, r4
 8006b90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b94:	4621      	mov	r1, r4
 8006b96:	024a      	lsls	r2, r1, #9
 8006b98:	4610      	mov	r0, r2
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ba4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ba8:	f7fa f808 	bl	8000bbc <__aeabi_uldivmod>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bb4:	e058      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bb6:	4b38      	ldr	r3, [pc, #224]	@ (8006c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	099b      	lsrs	r3, r3, #6
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006bc6:	623b      	str	r3, [r7, #32]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	f04f 0000 	mov.w	r0, #0
 8006bd8:	f04f 0100 	mov.w	r1, #0
 8006bdc:	0159      	lsls	r1, r3, #5
 8006bde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006be2:	0150      	lsls	r0, r2, #5
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4641      	mov	r1, r8
 8006bea:	ebb2 0a01 	subs.w	sl, r2, r1
 8006bee:	4649      	mov	r1, r9
 8006bf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c08:	ebb2 040a 	subs.w	r4, r2, sl
 8006c0c:	eb63 050b 	sbc.w	r5, r3, fp
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	00eb      	lsls	r3, r5, #3
 8006c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c1e:	00e2      	lsls	r2, r4, #3
 8006c20:	4614      	mov	r4, r2
 8006c22:	461d      	mov	r5, r3
 8006c24:	4643      	mov	r3, r8
 8006c26:	18e3      	adds	r3, r4, r3
 8006c28:	603b      	str	r3, [r7, #0]
 8006c2a:	464b      	mov	r3, r9
 8006c2c:	eb45 0303 	adc.w	r3, r5, r3
 8006c30:	607b      	str	r3, [r7, #4]
 8006c32:	f04f 0200 	mov.w	r2, #0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c3e:	4629      	mov	r1, r5
 8006c40:	028b      	lsls	r3, r1, #10
 8006c42:	4621      	mov	r1, r4
 8006c44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c48:	4621      	mov	r1, r4
 8006c4a:	028a      	lsls	r2, r1, #10
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c52:	2200      	movs	r2, #0
 8006c54:	61bb      	str	r3, [r7, #24]
 8006c56:	61fa      	str	r2, [r7, #28]
 8006c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c5c:	f7f9 ffae 	bl	8000bbc <__aeabi_uldivmod>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4613      	mov	r3, r2
 8006c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006c68:	4b0b      	ldr	r3, [pc, #44]	@ (8006c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	0c1b      	lsrs	r3, r3, #16
 8006c6e:	f003 0303 	and.w	r3, r3, #3
 8006c72:	3301      	adds	r3, #1
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006c78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c82:	e002      	b.n	8006c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c84:	4b05      	ldr	r3, [pc, #20]	@ (8006c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8006c86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3750      	adds	r7, #80	@ 0x50
 8006c90:	46bd      	mov	sp, r7
 8006c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c96:	bf00      	nop
 8006c98:	40023800 	.word	0x40023800
 8006c9c:	00f42400 	.word	0x00f42400
 8006ca0:	007a1200 	.word	0x007a1200

08006ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ca8:	4b03      	ldr	r3, [pc, #12]	@ (8006cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006caa:	681b      	ldr	r3, [r3, #0]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	20000010 	.word	0x20000010

08006cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006cc0:	f7ff fff0 	bl	8006ca4 <HAL_RCC_GetHCLKFreq>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	4b05      	ldr	r3, [pc, #20]	@ (8006cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	0a9b      	lsrs	r3, r3, #10
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	4903      	ldr	r1, [pc, #12]	@ (8006ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cd2:	5ccb      	ldrb	r3, [r1, r3]
 8006cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	0800d5bc 	.word	0x0800d5bc

08006ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ce8:	f7ff ffdc 	bl	8006ca4 <HAL_RCC_GetHCLKFreq>
 8006cec:	4602      	mov	r2, r0
 8006cee:	4b05      	ldr	r3, [pc, #20]	@ (8006d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	0b5b      	lsrs	r3, r3, #13
 8006cf4:	f003 0307 	and.w	r3, r3, #7
 8006cf8:	4903      	ldr	r1, [pc, #12]	@ (8006d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cfa:	5ccb      	ldrb	r3, [r1, r3]
 8006cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	40023800 	.word	0x40023800
 8006d08:	0800d5bc 	.word	0x0800d5bc

08006d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e07b      	b.n	8006e16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d108      	bne.n	8006d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d2e:	d009      	beq.n	8006d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	61da      	str	r2, [r3, #28]
 8006d36:	e005      	b.n	8006d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d106      	bne.n	8006d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7fc f9ae 	bl	80030c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dc8:	ea42 0103 	orr.w	r1, r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	0c1b      	lsrs	r3, r3, #16
 8006de2:	f003 0104 	and.w	r1, r3, #4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dea:	f003 0210 	and.w	r2, r3, #16
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69da      	ldr	r2, [r3, #28]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b088      	sub	sp, #32
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	60b9      	str	r1, [r7, #8]
 8006e28:	603b      	str	r3, [r7, #0]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e2e:	f7fc fe5d 	bl	8003aec <HAL_GetTick>
 8006e32:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006e34:	88fb      	ldrh	r3, [r7, #6]
 8006e36:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d001      	beq.n	8006e48 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006e44:	2302      	movs	r3, #2
 8006e46:	e12a      	b.n	800709e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_SPI_Transmit+0x36>
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e122      	b.n	800709e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_SPI_Transmit+0x48>
 8006e62:	2302      	movs	r3, #2
 8006e64:	e11b      	b.n	800709e <HAL_SPI_Transmit+0x280>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2203      	movs	r2, #3
 8006e72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	88fa      	ldrh	r2, [r7, #6]
 8006e86:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	88fa      	ldrh	r2, [r7, #6]
 8006e8c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eb4:	d10f      	bne.n	8006ed6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ec4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ed4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee0:	2b40      	cmp	r3, #64	@ 0x40
 8006ee2:	d007      	beq.n	8006ef4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ef2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006efc:	d152      	bne.n	8006fa4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d002      	beq.n	8006f0c <HAL_SPI_Transmit+0xee>
 8006f06:	8b7b      	ldrh	r3, [r7, #26]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d145      	bne.n	8006f98 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f10:	881a      	ldrh	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1c:	1c9a      	adds	r2, r3, #2
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f30:	e032      	b.n	8006f98 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d112      	bne.n	8006f66 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f44:	881a      	ldrh	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f50:	1c9a      	adds	r2, r3, #2
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f64:	e018      	b.n	8006f98 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f66:	f7fc fdc1 	bl	8003aec <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d803      	bhi.n	8006f7e <HAL_SPI_Transmit+0x160>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7c:	d102      	bne.n	8006f84 <HAL_SPI_Transmit+0x166>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d109      	bne.n	8006f98 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e082      	b.n	800709e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1c7      	bne.n	8006f32 <HAL_SPI_Transmit+0x114>
 8006fa2:	e053      	b.n	800704c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <HAL_SPI_Transmit+0x194>
 8006fac:	8b7b      	ldrh	r3, [r7, #26]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d147      	bne.n	8007042 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	330c      	adds	r3, #12
 8006fbc:	7812      	ldrb	r2, [r2, #0]
 8006fbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006fd8:	e033      	b.n	8007042 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d113      	bne.n	8007010 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	330c      	adds	r3, #12
 8006ff2:	7812      	ldrb	r2, [r2, #0]
 8006ff4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007004:	b29b      	uxth	r3, r3
 8007006:	3b01      	subs	r3, #1
 8007008:	b29a      	uxth	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800700e:	e018      	b.n	8007042 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007010:	f7fc fd6c 	bl	8003aec <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	429a      	cmp	r2, r3
 800701e:	d803      	bhi.n	8007028 <HAL_SPI_Transmit+0x20a>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007026:	d102      	bne.n	800702e <HAL_SPI_Transmit+0x210>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e02d      	b.n	800709e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007046:	b29b      	uxth	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1c6      	bne.n	8006fda <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800704c:	69fa      	ldr	r2, [r7, #28]
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 fbd9 	bl	8007808 <SPI_EndRxTxTransaction>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2220      	movs	r2, #32
 8007060:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800706a:	2300      	movs	r3, #0
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	617b      	str	r3, [r7, #20]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	617b      	str	r3, [r7, #20]
 800707e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e000      	b.n	800709e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800709c:	2300      	movs	r3, #0
  }
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3720      	adds	r7, #32
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b088      	sub	sp, #32
 80070aa:	af02      	add	r7, sp, #8
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	60b9      	str	r1, [r7, #8]
 80070b0:	603b      	str	r3, [r7, #0]
 80070b2:	4613      	mov	r3, r2
 80070b4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d001      	beq.n	80070c6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80070c2:	2302      	movs	r3, #2
 80070c4:	e104      	b.n	80072d0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070ce:	d112      	bne.n	80070f6 <HAL_SPI_Receive+0x50>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10e      	bne.n	80070f6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2204      	movs	r2, #4
 80070dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80070e0:	88fa      	ldrh	r2, [r7, #6]
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	4613      	mov	r3, r2
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f8f3 	bl	80072d8 <HAL_SPI_TransmitReceive>
 80070f2:	4603      	mov	r3, r0
 80070f4:	e0ec      	b.n	80072d0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070f6:	f7fc fcf9 	bl	8003aec <HAL_GetTick>
 80070fa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <HAL_SPI_Receive+0x62>
 8007102:	88fb      	ldrh	r3, [r7, #6]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e0e1      	b.n	80072d0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007112:	2b01      	cmp	r3, #1
 8007114:	d101      	bne.n	800711a <HAL_SPI_Receive+0x74>
 8007116:	2302      	movs	r3, #2
 8007118:	e0da      	b.n	80072d0 <HAL_SPI_Receive+0x22a>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2204      	movs	r2, #4
 8007126:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	88fa      	ldrh	r2, [r7, #6]
 800713a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	88fa      	ldrh	r2, [r7, #6]
 8007140:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007168:	d10f      	bne.n	800718a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007178:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007188:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007194:	2b40      	cmp	r3, #64	@ 0x40
 8007196:	d007      	beq.n	80071a8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d170      	bne.n	8007292 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80071b0:	e035      	b.n	800721e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d115      	bne.n	80071ec <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f103 020c 	add.w	r2, r3, #12
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071cc:	7812      	ldrb	r2, [r2, #0]
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	3b01      	subs	r3, #1
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071ea:	e018      	b.n	800721e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071ec:	f7fc fc7e 	bl	8003aec <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d803      	bhi.n	8007204 <HAL_SPI_Receive+0x15e>
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007202:	d102      	bne.n	800720a <HAL_SPI_Receive+0x164>
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d109      	bne.n	800721e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e058      	b.n	80072d0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007222:	b29b      	uxth	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1c4      	bne.n	80071b2 <HAL_SPI_Receive+0x10c>
 8007228:	e038      	b.n	800729c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b01      	cmp	r3, #1
 8007236:	d113      	bne.n	8007260 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007242:	b292      	uxth	r2, r2
 8007244:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724a:	1c9a      	adds	r2, r3, #2
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007254:	b29b      	uxth	r3, r3
 8007256:	3b01      	subs	r3, #1
 8007258:	b29a      	uxth	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800725e:	e018      	b.n	8007292 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007260:	f7fc fc44 	bl	8003aec <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d803      	bhi.n	8007278 <HAL_SPI_Receive+0x1d2>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007276:	d102      	bne.n	800727e <HAL_SPI_Receive+0x1d8>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d109      	bne.n	8007292 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e01e      	b.n	80072d0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007296:	b29b      	uxth	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1c6      	bne.n	800722a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 fa4b 	bl	800773c <SPI_EndRxTransaction>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2220      	movs	r2, #32
 80072b0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e000      	b.n	80072d0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80072ce:	2300      	movs	r3, #0
  }
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08a      	sub	sp, #40	@ 0x28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072e6:	2301      	movs	r3, #1
 80072e8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072ea:	f7fc fbff 	bl	8003aec <HAL_GetTick>
 80072ee:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072f6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80072fe:	887b      	ldrh	r3, [r7, #2]
 8007300:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007302:	7ffb      	ldrb	r3, [r7, #31]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d00c      	beq.n	8007322 <HAL_SPI_TransmitReceive+0x4a>
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800730e:	d106      	bne.n	800731e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d102      	bne.n	800731e <HAL_SPI_TransmitReceive+0x46>
 8007318:	7ffb      	ldrb	r3, [r7, #31]
 800731a:	2b04      	cmp	r3, #4
 800731c:	d001      	beq.n	8007322 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800731e:	2302      	movs	r3, #2
 8007320:	e17f      	b.n	8007622 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <HAL_SPI_TransmitReceive+0x5c>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <HAL_SPI_TransmitReceive+0x5c>
 800732e:	887b      	ldrh	r3, [r7, #2]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e174      	b.n	8007622 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800733e:	2b01      	cmp	r3, #1
 8007340:	d101      	bne.n	8007346 <HAL_SPI_TransmitReceive+0x6e>
 8007342:	2302      	movs	r3, #2
 8007344:	e16d      	b.n	8007622 <HAL_SPI_TransmitReceive+0x34a>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b04      	cmp	r3, #4
 8007358:	d003      	beq.n	8007362 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2205      	movs	r2, #5
 800735e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	887a      	ldrh	r2, [r7, #2]
 8007372:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	887a      	ldrh	r2, [r7, #2]
 8007378:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	887a      	ldrh	r2, [r7, #2]
 8007384:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	887a      	ldrh	r2, [r7, #2]
 800738a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a2:	2b40      	cmp	r3, #64	@ 0x40
 80073a4:	d007      	beq.n	80073b6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073be:	d17e      	bne.n	80074be <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <HAL_SPI_TransmitReceive+0xf6>
 80073c8:	8afb      	ldrh	r3, [r7, #22]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d16c      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d2:	881a      	ldrh	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073de:	1c9a      	adds	r2, r3, #2
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	3b01      	subs	r3, #1
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073f2:	e059      	b.n	80074a8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d11b      	bne.n	800743a <HAL_SPI_TransmitReceive+0x162>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007406:	b29b      	uxth	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d016      	beq.n	800743a <HAL_SPI_TransmitReceive+0x162>
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	2b01      	cmp	r3, #1
 8007410:	d113      	bne.n	800743a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007416:	881a      	ldrh	r2, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007422:	1c9a      	adds	r2, r3, #2
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800742c:	b29b      	uxth	r3, r3
 800742e:	3b01      	subs	r3, #1
 8007430:	b29a      	uxth	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	2b01      	cmp	r3, #1
 8007446:	d119      	bne.n	800747c <HAL_SPI_TransmitReceive+0x1a4>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800744c:	b29b      	uxth	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d014      	beq.n	800747c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745c:	b292      	uxth	r2, r2
 800745e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007464:	1c9a      	adds	r2, r3, #2
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800746e:	b29b      	uxth	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007478:	2301      	movs	r3, #1
 800747a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800747c:	f7fc fb36 	bl	8003aec <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007488:	429a      	cmp	r2, r3
 800748a:	d80d      	bhi.n	80074a8 <HAL_SPI_TransmitReceive+0x1d0>
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007492:	d009      	beq.n	80074a8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e0bc      	b.n	8007622 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1a0      	bne.n	80073f4 <HAL_SPI_TransmitReceive+0x11c>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d19b      	bne.n	80073f4 <HAL_SPI_TransmitReceive+0x11c>
 80074bc:	e082      	b.n	80075c4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d002      	beq.n	80074cc <HAL_SPI_TransmitReceive+0x1f4>
 80074c6:	8afb      	ldrh	r3, [r7, #22]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d171      	bne.n	80075b0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	330c      	adds	r3, #12
 80074d6:	7812      	ldrb	r2, [r2, #0]
 80074d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	3b01      	subs	r3, #1
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074f2:	e05d      	b.n	80075b0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d11c      	bne.n	800753c <HAL_SPI_TransmitReceive+0x264>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007506:	b29b      	uxth	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d017      	beq.n	800753c <HAL_SPI_TransmitReceive+0x264>
 800750c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750e:	2b01      	cmp	r3, #1
 8007510:	d114      	bne.n	800753c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	330c      	adds	r3, #12
 800751c:	7812      	ldrb	r2, [r2, #0]
 800751e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007524:	1c5a      	adds	r2, r3, #1
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800752e:	b29b      	uxth	r3, r3
 8007530:	3b01      	subs	r3, #1
 8007532:	b29a      	uxth	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b01      	cmp	r3, #1
 8007548:	d119      	bne.n	800757e <HAL_SPI_TransmitReceive+0x2a6>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800754e:	b29b      	uxth	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d014      	beq.n	800757e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007570:	b29b      	uxth	r3, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800757a:	2301      	movs	r3, #1
 800757c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800757e:	f7fc fab5 	bl	8003aec <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800758a:	429a      	cmp	r2, r3
 800758c:	d803      	bhi.n	8007596 <HAL_SPI_TransmitReceive+0x2be>
 800758e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007594:	d102      	bne.n	800759c <HAL_SPI_TransmitReceive+0x2c4>
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	2b00      	cmp	r3, #0
 800759a:	d109      	bne.n	80075b0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e038      	b.n	8007622 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d19c      	bne.n	80074f4 <HAL_SPI_TransmitReceive+0x21c>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075be:	b29b      	uxth	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d197      	bne.n	80074f4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075c4:	6a3a      	ldr	r2, [r7, #32]
 80075c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 f91d 	bl	8007808 <SPI_EndRxTxTransaction>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d008      	beq.n	80075e6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2220      	movs	r2, #32
 80075d8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e01d      	b.n	8007622 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10a      	bne.n	8007604 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075ee:	2300      	movs	r3, #0
 80075f0:	613b      	str	r3, [r7, #16]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	613b      	str	r3, [r7, #16]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	613b      	str	r3, [r7, #16]
 8007602:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e000      	b.n	8007622 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007620:	2300      	movs	r3, #0
  }
}
 8007622:	4618      	mov	r0, r3
 8007624:	3728      	adds	r7, #40	@ 0x28
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
	...

0800762c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	4613      	mov	r3, r2
 800763a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800763c:	f7fc fa56 	bl	8003aec <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	4413      	add	r3, r2
 800764a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800764c:	f7fc fa4e 	bl	8003aec <HAL_GetTick>
 8007650:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007652:	4b39      	ldr	r3, [pc, #228]	@ (8007738 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	015b      	lsls	r3, r3, #5
 8007658:	0d1b      	lsrs	r3, r3, #20
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	fb02 f303 	mul.w	r3, r2, r3
 8007660:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007662:	e054      	b.n	800770e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766a:	d050      	beq.n	800770e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800766c:	f7fc fa3e 	bl	8003aec <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	69fa      	ldr	r2, [r7, #28]
 8007678:	429a      	cmp	r2, r3
 800767a:	d902      	bls.n	8007682 <SPI_WaitFlagStateUntilTimeout+0x56>
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d13d      	bne.n	80076fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007690:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800769a:	d111      	bne.n	80076c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076a4:	d004      	beq.n	80076b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ae:	d107      	bne.n	80076c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076c8:	d10f      	bne.n	80076ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e017      	b.n	800772e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	3b01      	subs	r3, #1
 800770c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	4013      	ands	r3, r2
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	429a      	cmp	r2, r3
 800771c:	bf0c      	ite	eq
 800771e:	2301      	moveq	r3, #1
 8007720:	2300      	movne	r3, #0
 8007722:	b2db      	uxtb	r3, r3
 8007724:	461a      	mov	r2, r3
 8007726:	79fb      	ldrb	r3, [r7, #7]
 8007728:	429a      	cmp	r2, r3
 800772a:	d19b      	bne.n	8007664 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20000010 	.word	0x20000010

0800773c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af02      	add	r7, sp, #8
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007750:	d111      	bne.n	8007776 <SPI_EndRxTransaction+0x3a>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800775a:	d004      	beq.n	8007766 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007764:	d107      	bne.n	8007776 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007774:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800777e:	d12a      	bne.n	80077d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007788:	d012      	beq.n	80077b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2200      	movs	r2, #0
 8007792:	2180      	movs	r1, #128	@ 0x80
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f7ff ff49 	bl	800762c <SPI_WaitFlagStateUntilTimeout>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d02d      	beq.n	80077fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077a4:	f043 0220 	orr.w	r2, r3, #32
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e026      	b.n	80077fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2200      	movs	r2, #0
 80077b8:	2101      	movs	r1, #1
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f7ff ff36 	bl	800762c <SPI_WaitFlagStateUntilTimeout>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d01a      	beq.n	80077fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ca:	f043 0220 	orr.w	r2, r3, #32
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e013      	b.n	80077fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2200      	movs	r2, #0
 80077de:	2101      	movs	r1, #1
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f7ff ff23 	bl	800762c <SPI_WaitFlagStateUntilTimeout>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d007      	beq.n	80077fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f0:	f043 0220 	orr.w	r2, r3, #32
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e000      	b.n	80077fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af02      	add	r7, sp, #8
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2201      	movs	r2, #1
 800781c:	2102      	movs	r1, #2
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f7ff ff04 	bl	800762c <SPI_WaitFlagStateUntilTimeout>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d007      	beq.n	800783a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782e:	f043 0220 	orr.w	r2, r3, #32
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e032      	b.n	80078a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800783a:	4b1b      	ldr	r3, [pc, #108]	@ (80078a8 <SPI_EndRxTxTransaction+0xa0>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a1b      	ldr	r2, [pc, #108]	@ (80078ac <SPI_EndRxTxTransaction+0xa4>)
 8007840:	fba2 2303 	umull	r2, r3, r2, r3
 8007844:	0d5b      	lsrs	r3, r3, #21
 8007846:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800784a:	fb02 f303 	mul.w	r3, r2, r3
 800784e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007858:	d112      	bne.n	8007880 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2200      	movs	r2, #0
 8007862:	2180      	movs	r1, #128	@ 0x80
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f7ff fee1 	bl	800762c <SPI_WaitFlagStateUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d016      	beq.n	800789e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007874:	f043 0220 	orr.w	r2, r3, #32
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e00f      	b.n	80078a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	3b01      	subs	r3, #1
 800788a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007896:	2b80      	cmp	r3, #128	@ 0x80
 8007898:	d0f2      	beq.n	8007880 <SPI_EndRxTxTransaction+0x78>
 800789a:	e000      	b.n	800789e <SPI_EndRxTxTransaction+0x96>
        break;
 800789c:	bf00      	nop
  }

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	20000010 	.word	0x20000010
 80078ac:	165e9f81 	.word	0x165e9f81

080078b0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e038      	b.n	8007938 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f7f9 ffaa 	bl	8001834 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3308      	adds	r3, #8
 80078e8:	4619      	mov	r1, r3
 80078ea:	4610      	mov	r0, r2
 80078ec:	f002 f8ae 	bl	8009a4c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	461a      	mov	r2, r3
 80078fa:	68b9      	ldr	r1, [r7, #8]
 80078fc:	f002 f910 	bl	8009b20 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6858      	ldr	r0, [r3, #4]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	f002 f93d 	bl	8009b8c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	6892      	ldr	r2, [r2, #8]
 800791a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	6892      	ldr	r2, [r2, #8]
 8007926:	f041 0101 	orr.w	r1, r1, #1
 800792a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e041      	b.n	80079d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d106      	bne.n	800796c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7fb fd54 	bl	8003414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2202      	movs	r2, #2
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	3304      	adds	r3, #4
 800797c:	4619      	mov	r1, r3
 800797e:	4610      	mov	r0, r2
 8007980:	f000 fc62 	bl	8008248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d001      	beq.n	80079f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e04e      	b.n	8007a96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2202      	movs	r2, #2
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0201 	orr.w	r2, r2, #1
 8007a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a23      	ldr	r2, [pc, #140]	@ (8007aa4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d022      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a22:	d01d      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a1f      	ldr	r2, [pc, #124]	@ (8007aa8 <HAL_TIM_Base_Start_IT+0xc8>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d018      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a1e      	ldr	r2, [pc, #120]	@ (8007aac <HAL_TIM_Base_Start_IT+0xcc>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d013      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ab0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d00e      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a1b      	ldr	r2, [pc, #108]	@ (8007ab4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d009      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a19      	ldr	r2, [pc, #100]	@ (8007ab8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d004      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a18      	ldr	r2, [pc, #96]	@ (8007abc <HAL_TIM_Base_Start_IT+0xdc>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d111      	bne.n	8007a84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b06      	cmp	r3, #6
 8007a70:	d010      	beq.n	8007a94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f042 0201 	orr.w	r2, r2, #1
 8007a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a82:	e007      	b.n	8007a94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0201 	orr.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	40010000 	.word	0x40010000
 8007aa8:	40000400 	.word	0x40000400
 8007aac:	40000800 	.word	0x40000800
 8007ab0:	40000c00 	.word	0x40000c00
 8007ab4:	40010400 	.word	0x40010400
 8007ab8:	40014000 	.word	0x40014000
 8007abc:	40001800 	.word	0x40001800

08007ac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e041      	b.n	8007b56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d106      	bne.n	8007aec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f839 	bl	8007b5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3304      	adds	r3, #4
 8007afc:	4619      	mov	r1, r3
 8007afe:	4610      	mov	r0, r2
 8007b00:	f000 fba2 	bl	8008248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b083      	sub	sp, #12
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
	...

08007b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d109      	bne.n	8007b98 <HAL_TIM_PWM_Start+0x24>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	bf14      	ite	ne
 8007b90:	2301      	movne	r3, #1
 8007b92:	2300      	moveq	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	e022      	b.n	8007bde <HAL_TIM_PWM_Start+0x6a>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d109      	bne.n	8007bb2 <HAL_TIM_PWM_Start+0x3e>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	bf14      	ite	ne
 8007baa:	2301      	movne	r3, #1
 8007bac:	2300      	moveq	r3, #0
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	e015      	b.n	8007bde <HAL_TIM_PWM_Start+0x6a>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d109      	bne.n	8007bcc <HAL_TIM_PWM_Start+0x58>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	bf14      	ite	ne
 8007bc4:	2301      	movne	r3, #1
 8007bc6:	2300      	moveq	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	e008      	b.n	8007bde <HAL_TIM_PWM_Start+0x6a>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	bf14      	ite	ne
 8007bd8:	2301      	movne	r3, #1
 8007bda:	2300      	moveq	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e07c      	b.n	8007ce0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <HAL_TIM_PWM_Start+0x82>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bf4:	e013      	b.n	8007c1e <HAL_TIM_PWM_Start+0xaa>
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d104      	bne.n	8007c06 <HAL_TIM_PWM_Start+0x92>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c04:	e00b      	b.n	8007c1e <HAL_TIM_PWM_Start+0xaa>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d104      	bne.n	8007c16 <HAL_TIM_PWM_Start+0xa2>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c14:	e003      	b.n	8007c1e <HAL_TIM_PWM_Start+0xaa>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2202      	movs	r2, #2
 8007c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2201      	movs	r2, #1
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fe04 	bl	8008834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a2d      	ldr	r2, [pc, #180]	@ (8007ce8 <HAL_TIM_PWM_Start+0x174>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d004      	beq.n	8007c40 <HAL_TIM_PWM_Start+0xcc>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8007cec <HAL_TIM_PWM_Start+0x178>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d101      	bne.n	8007c44 <HAL_TIM_PWM_Start+0xd0>
 8007c40:	2301      	movs	r3, #1
 8007c42:	e000      	b.n	8007c46 <HAL_TIM_PWM_Start+0xd2>
 8007c44:	2300      	movs	r3, #0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d007      	beq.n	8007c5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a22      	ldr	r2, [pc, #136]	@ (8007ce8 <HAL_TIM_PWM_Start+0x174>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d022      	beq.n	8007caa <HAL_TIM_PWM_Start+0x136>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c6c:	d01d      	beq.n	8007caa <HAL_TIM_PWM_Start+0x136>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a1f      	ldr	r2, [pc, #124]	@ (8007cf0 <HAL_TIM_PWM_Start+0x17c>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d018      	beq.n	8007caa <HAL_TIM_PWM_Start+0x136>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf4 <HAL_TIM_PWM_Start+0x180>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d013      	beq.n	8007caa <HAL_TIM_PWM_Start+0x136>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a1c      	ldr	r2, [pc, #112]	@ (8007cf8 <HAL_TIM_PWM_Start+0x184>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d00e      	beq.n	8007caa <HAL_TIM_PWM_Start+0x136>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a16      	ldr	r2, [pc, #88]	@ (8007cec <HAL_TIM_PWM_Start+0x178>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d009      	beq.n	8007caa <HAL_TIM_PWM_Start+0x136>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a18      	ldr	r2, [pc, #96]	@ (8007cfc <HAL_TIM_PWM_Start+0x188>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d004      	beq.n	8007caa <HAL_TIM_PWM_Start+0x136>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a16      	ldr	r2, [pc, #88]	@ (8007d00 <HAL_TIM_PWM_Start+0x18c>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d111      	bne.n	8007cce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f003 0307 	and.w	r3, r3, #7
 8007cb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b06      	cmp	r3, #6
 8007cba:	d010      	beq.n	8007cde <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0201 	orr.w	r2, r2, #1
 8007cca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ccc:	e007      	b.n	8007cde <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0201 	orr.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	40010000 	.word	0x40010000
 8007cec:	40010400 	.word	0x40010400
 8007cf0:	40000400 	.word	0x40000400
 8007cf4:	40000800 	.word	0x40000800
 8007cf8:	40000c00 	.word	0x40000c00
 8007cfc:	40014000 	.word	0x40014000
 8007d00:	40001800 	.word	0x40001800

08007d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d020      	beq.n	8007d68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01b      	beq.n	8007d68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f06f 0202 	mvn.w	r2, #2
 8007d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	f003 0303 	and.w	r3, r3, #3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fa5b 	bl	800820a <HAL_TIM_IC_CaptureCallback>
 8007d54:	e005      	b.n	8007d62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa4d 	bl	80081f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fa5e 	bl	800821e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f003 0304 	and.w	r3, r3, #4
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d020      	beq.n	8007db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d01b      	beq.n	8007db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f06f 0204 	mvn.w	r2, #4
 8007d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa35 	bl	800820a <HAL_TIM_IC_CaptureCallback>
 8007da0:	e005      	b.n	8007dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fa27 	bl	80081f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fa38 	bl	800821e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d020      	beq.n	8007e00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f003 0308 	and.w	r3, r3, #8
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d01b      	beq.n	8007e00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f06f 0208 	mvn.w	r2, #8
 8007dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	f003 0303 	and.w	r3, r3, #3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fa0f 	bl	800820a <HAL_TIM_IC_CaptureCallback>
 8007dec:	e005      	b.n	8007dfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fa01 	bl	80081f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fa12 	bl	800821e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	f003 0310 	and.w	r3, r3, #16
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d020      	beq.n	8007e4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f003 0310 	and.w	r3, r3, #16
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d01b      	beq.n	8007e4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f06f 0210 	mvn.w	r2, #16
 8007e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2208      	movs	r2, #8
 8007e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f9e9 	bl	800820a <HAL_TIM_IC_CaptureCallback>
 8007e38:	e005      	b.n	8007e46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f9db 	bl	80081f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f9ec 	bl	800821e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00c      	beq.n	8007e70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d007      	beq.n	8007e70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f06f 0201 	mvn.w	r2, #1
 8007e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7fb f888 	bl	8002f80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00c      	beq.n	8007e94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d007      	beq.n	8007e94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fd7c 	bl	800898c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00c      	beq.n	8007eb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f9bd 	bl	8008232 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00c      	beq.n	8007edc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f003 0320 	and.w	r3, r3, #32
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d007      	beq.n	8007edc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f06f 0220 	mvn.w	r2, #32
 8007ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fd4e 	bl	8008978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007edc:	bf00      	nop
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007efe:	2302      	movs	r3, #2
 8007f00:	e0ae      	b.n	8008060 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b0c      	cmp	r3, #12
 8007f0e:	f200 809f 	bhi.w	8008050 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f12:	a201      	add	r2, pc, #4	@ (adr r2, 8007f18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f18:	08007f4d 	.word	0x08007f4d
 8007f1c:	08008051 	.word	0x08008051
 8007f20:	08008051 	.word	0x08008051
 8007f24:	08008051 	.word	0x08008051
 8007f28:	08007f8d 	.word	0x08007f8d
 8007f2c:	08008051 	.word	0x08008051
 8007f30:	08008051 	.word	0x08008051
 8007f34:	08008051 	.word	0x08008051
 8007f38:	08007fcf 	.word	0x08007fcf
 8007f3c:	08008051 	.word	0x08008051
 8007f40:	08008051 	.word	0x08008051
 8007f44:	08008051 	.word	0x08008051
 8007f48:	0800800f 	.word	0x0800800f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68b9      	ldr	r1, [r7, #8]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fa24 	bl	80083a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	699a      	ldr	r2, [r3, #24]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f042 0208 	orr.w	r2, r2, #8
 8007f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	699a      	ldr	r2, [r3, #24]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 0204 	bic.w	r2, r2, #4
 8007f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6999      	ldr	r1, [r3, #24]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	691a      	ldr	r2, [r3, #16]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	619a      	str	r2, [r3, #24]
      break;
 8007f8a:	e064      	b.n	8008056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68b9      	ldr	r1, [r7, #8]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fa74 	bl	8008480 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699a      	ldr	r2, [r3, #24]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	699a      	ldr	r2, [r3, #24]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6999      	ldr	r1, [r3, #24]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	021a      	lsls	r2, r3, #8
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	619a      	str	r2, [r3, #24]
      break;
 8007fcc:	e043      	b.n	8008056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68b9      	ldr	r1, [r7, #8]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 fac9 	bl	800856c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69da      	ldr	r2, [r3, #28]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f042 0208 	orr.w	r2, r2, #8
 8007fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69da      	ldr	r2, [r3, #28]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0204 	bic.w	r2, r2, #4
 8007ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69d9      	ldr	r1, [r3, #28]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	691a      	ldr	r2, [r3, #16]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	61da      	str	r2, [r3, #28]
      break;
 800800c:	e023      	b.n	8008056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fb1d 	bl	8008654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	69da      	ldr	r2, [r3, #28]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69da      	ldr	r2, [r3, #28]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	69d9      	ldr	r1, [r3, #28]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	021a      	lsls	r2, r3, #8
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	61da      	str	r2, [r3, #28]
      break;
 800804e:	e002      	b.n	8008056 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	75fb      	strb	r3, [r7, #23]
      break;
 8008054:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800805e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800807c:	2b01      	cmp	r3, #1
 800807e:	d101      	bne.n	8008084 <HAL_TIM_ConfigClockSource+0x1c>
 8008080:	2302      	movs	r3, #2
 8008082:	e0b4      	b.n	80081ee <HAL_TIM_ConfigClockSource+0x186>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2202      	movs	r2, #2
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80080a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080bc:	d03e      	beq.n	800813c <HAL_TIM_ConfigClockSource+0xd4>
 80080be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080c2:	f200 8087 	bhi.w	80081d4 <HAL_TIM_ConfigClockSource+0x16c>
 80080c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080ca:	f000 8086 	beq.w	80081da <HAL_TIM_ConfigClockSource+0x172>
 80080ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080d2:	d87f      	bhi.n	80081d4 <HAL_TIM_ConfigClockSource+0x16c>
 80080d4:	2b70      	cmp	r3, #112	@ 0x70
 80080d6:	d01a      	beq.n	800810e <HAL_TIM_ConfigClockSource+0xa6>
 80080d8:	2b70      	cmp	r3, #112	@ 0x70
 80080da:	d87b      	bhi.n	80081d4 <HAL_TIM_ConfigClockSource+0x16c>
 80080dc:	2b60      	cmp	r3, #96	@ 0x60
 80080de:	d050      	beq.n	8008182 <HAL_TIM_ConfigClockSource+0x11a>
 80080e0:	2b60      	cmp	r3, #96	@ 0x60
 80080e2:	d877      	bhi.n	80081d4 <HAL_TIM_ConfigClockSource+0x16c>
 80080e4:	2b50      	cmp	r3, #80	@ 0x50
 80080e6:	d03c      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0xfa>
 80080e8:	2b50      	cmp	r3, #80	@ 0x50
 80080ea:	d873      	bhi.n	80081d4 <HAL_TIM_ConfigClockSource+0x16c>
 80080ec:	2b40      	cmp	r3, #64	@ 0x40
 80080ee:	d058      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0x13a>
 80080f0:	2b40      	cmp	r3, #64	@ 0x40
 80080f2:	d86f      	bhi.n	80081d4 <HAL_TIM_ConfigClockSource+0x16c>
 80080f4:	2b30      	cmp	r3, #48	@ 0x30
 80080f6:	d064      	beq.n	80081c2 <HAL_TIM_ConfigClockSource+0x15a>
 80080f8:	2b30      	cmp	r3, #48	@ 0x30
 80080fa:	d86b      	bhi.n	80081d4 <HAL_TIM_ConfigClockSource+0x16c>
 80080fc:	2b20      	cmp	r3, #32
 80080fe:	d060      	beq.n	80081c2 <HAL_TIM_ConfigClockSource+0x15a>
 8008100:	2b20      	cmp	r3, #32
 8008102:	d867      	bhi.n	80081d4 <HAL_TIM_ConfigClockSource+0x16c>
 8008104:	2b00      	cmp	r3, #0
 8008106:	d05c      	beq.n	80081c2 <HAL_TIM_ConfigClockSource+0x15a>
 8008108:	2b10      	cmp	r3, #16
 800810a:	d05a      	beq.n	80081c2 <HAL_TIM_ConfigClockSource+0x15a>
 800810c:	e062      	b.n	80081d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800811e:	f000 fb69 	bl	80087f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	609a      	str	r2, [r3, #8]
      break;
 800813a:	e04f      	b.n	80081dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800814c:	f000 fb52 	bl	80087f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689a      	ldr	r2, [r3, #8]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800815e:	609a      	str	r2, [r3, #8]
      break;
 8008160:	e03c      	b.n	80081dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800816e:	461a      	mov	r2, r3
 8008170:	f000 fac6 	bl	8008700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2150      	movs	r1, #80	@ 0x50
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fb1f 	bl	80087be <TIM_ITRx_SetConfig>
      break;
 8008180:	e02c      	b.n	80081dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800818e:	461a      	mov	r2, r3
 8008190:	f000 fae5 	bl	800875e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2160      	movs	r1, #96	@ 0x60
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fb0f 	bl	80087be <TIM_ITRx_SetConfig>
      break;
 80081a0:	e01c      	b.n	80081dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ae:	461a      	mov	r2, r3
 80081b0:	f000 faa6 	bl	8008700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2140      	movs	r1, #64	@ 0x40
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 faff 	bl	80087be <TIM_ITRx_SetConfig>
      break;
 80081c0:	e00c      	b.n	80081dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4619      	mov	r1, r3
 80081cc:	4610      	mov	r0, r2
 80081ce:	f000 faf6 	bl	80087be <TIM_ITRx_SetConfig>
      break;
 80081d2:	e003      	b.n	80081dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	73fb      	strb	r3, [r7, #15]
      break;
 80081d8:	e000      	b.n	80081dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b083      	sub	sp, #12
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081fe:	bf00      	nop
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008212:	bf00      	nop
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800821e:	b480      	push	{r7}
 8008220:	b083      	sub	sp, #12
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008226:	bf00      	nop
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008232:	b480      	push	{r7}
 8008234:	b083      	sub	sp, #12
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800823a:	bf00      	nop
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
	...

08008248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a46      	ldr	r2, [pc, #280]	@ (8008374 <TIM_Base_SetConfig+0x12c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d013      	beq.n	8008288 <TIM_Base_SetConfig+0x40>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008266:	d00f      	beq.n	8008288 <TIM_Base_SetConfig+0x40>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a43      	ldr	r2, [pc, #268]	@ (8008378 <TIM_Base_SetConfig+0x130>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d00b      	beq.n	8008288 <TIM_Base_SetConfig+0x40>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a42      	ldr	r2, [pc, #264]	@ (800837c <TIM_Base_SetConfig+0x134>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d007      	beq.n	8008288 <TIM_Base_SetConfig+0x40>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a41      	ldr	r2, [pc, #260]	@ (8008380 <TIM_Base_SetConfig+0x138>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d003      	beq.n	8008288 <TIM_Base_SetConfig+0x40>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a40      	ldr	r2, [pc, #256]	@ (8008384 <TIM_Base_SetConfig+0x13c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d108      	bne.n	800829a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800828e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a35      	ldr	r2, [pc, #212]	@ (8008374 <TIM_Base_SetConfig+0x12c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d02b      	beq.n	80082fa <TIM_Base_SetConfig+0xb2>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082a8:	d027      	beq.n	80082fa <TIM_Base_SetConfig+0xb2>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a32      	ldr	r2, [pc, #200]	@ (8008378 <TIM_Base_SetConfig+0x130>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d023      	beq.n	80082fa <TIM_Base_SetConfig+0xb2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a31      	ldr	r2, [pc, #196]	@ (800837c <TIM_Base_SetConfig+0x134>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d01f      	beq.n	80082fa <TIM_Base_SetConfig+0xb2>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a30      	ldr	r2, [pc, #192]	@ (8008380 <TIM_Base_SetConfig+0x138>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d01b      	beq.n	80082fa <TIM_Base_SetConfig+0xb2>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a2f      	ldr	r2, [pc, #188]	@ (8008384 <TIM_Base_SetConfig+0x13c>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d017      	beq.n	80082fa <TIM_Base_SetConfig+0xb2>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a2e      	ldr	r2, [pc, #184]	@ (8008388 <TIM_Base_SetConfig+0x140>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d013      	beq.n	80082fa <TIM_Base_SetConfig+0xb2>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a2d      	ldr	r2, [pc, #180]	@ (800838c <TIM_Base_SetConfig+0x144>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d00f      	beq.n	80082fa <TIM_Base_SetConfig+0xb2>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a2c      	ldr	r2, [pc, #176]	@ (8008390 <TIM_Base_SetConfig+0x148>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d00b      	beq.n	80082fa <TIM_Base_SetConfig+0xb2>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a2b      	ldr	r2, [pc, #172]	@ (8008394 <TIM_Base_SetConfig+0x14c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d007      	beq.n	80082fa <TIM_Base_SetConfig+0xb2>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a2a      	ldr	r2, [pc, #168]	@ (8008398 <TIM_Base_SetConfig+0x150>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d003      	beq.n	80082fa <TIM_Base_SetConfig+0xb2>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a29      	ldr	r2, [pc, #164]	@ (800839c <TIM_Base_SetConfig+0x154>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d108      	bne.n	800830c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	4313      	orrs	r3, r2
 800830a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	4313      	orrs	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	689a      	ldr	r2, [r3, #8]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a10      	ldr	r2, [pc, #64]	@ (8008374 <TIM_Base_SetConfig+0x12c>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d003      	beq.n	8008340 <TIM_Base_SetConfig+0xf8>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a12      	ldr	r2, [pc, #72]	@ (8008384 <TIM_Base_SetConfig+0x13c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d103      	bne.n	8008348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	691a      	ldr	r2, [r3, #16]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b01      	cmp	r3, #1
 8008358:	d105      	bne.n	8008366 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	f023 0201 	bic.w	r2, r3, #1
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	611a      	str	r2, [r3, #16]
  }
}
 8008366:	bf00      	nop
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	40010000 	.word	0x40010000
 8008378:	40000400 	.word	0x40000400
 800837c:	40000800 	.word	0x40000800
 8008380:	40000c00 	.word	0x40000c00
 8008384:	40010400 	.word	0x40010400
 8008388:	40014000 	.word	0x40014000
 800838c:	40014400 	.word	0x40014400
 8008390:	40014800 	.word	0x40014800
 8008394:	40001800 	.word	0x40001800
 8008398:	40001c00 	.word	0x40001c00
 800839c:	40002000 	.word	0x40002000

080083a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	f023 0201 	bic.w	r2, r3, #1
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 0303 	bic.w	r3, r3, #3
 80083d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	4313      	orrs	r3, r2
 80083e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f023 0302 	bic.w	r3, r3, #2
 80083e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a20      	ldr	r2, [pc, #128]	@ (8008478 <TIM_OC1_SetConfig+0xd8>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d003      	beq.n	8008404 <TIM_OC1_SetConfig+0x64>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a1f      	ldr	r2, [pc, #124]	@ (800847c <TIM_OC1_SetConfig+0xdc>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d10c      	bne.n	800841e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f023 0308 	bic.w	r3, r3, #8
 800840a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	4313      	orrs	r3, r2
 8008414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f023 0304 	bic.w	r3, r3, #4
 800841c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a15      	ldr	r2, [pc, #84]	@ (8008478 <TIM_OC1_SetConfig+0xd8>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d003      	beq.n	800842e <TIM_OC1_SetConfig+0x8e>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a14      	ldr	r2, [pc, #80]	@ (800847c <TIM_OC1_SetConfig+0xdc>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d111      	bne.n	8008452 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800843c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	4313      	orrs	r3, r2
 8008446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	4313      	orrs	r3, r2
 8008450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	621a      	str	r2, [r3, #32]
}
 800846c:	bf00      	nop
 800846e:	371c      	adds	r7, #28
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	40010000 	.word	0x40010000
 800847c:	40010400 	.word	0x40010400

08008480 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008480:	b480      	push	{r7}
 8008482:	b087      	sub	sp, #28
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	f023 0210 	bic.w	r2, r3, #16
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f023 0320 	bic.w	r3, r3, #32
 80084ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a22      	ldr	r2, [pc, #136]	@ (8008564 <TIM_OC2_SetConfig+0xe4>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d003      	beq.n	80084e8 <TIM_OC2_SetConfig+0x68>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a21      	ldr	r2, [pc, #132]	@ (8008568 <TIM_OC2_SetConfig+0xe8>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d10d      	bne.n	8008504 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	011b      	lsls	r3, r3, #4
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008502:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a17      	ldr	r2, [pc, #92]	@ (8008564 <TIM_OC2_SetConfig+0xe4>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d003      	beq.n	8008514 <TIM_OC2_SetConfig+0x94>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a16      	ldr	r2, [pc, #88]	@ (8008568 <TIM_OC2_SetConfig+0xe8>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d113      	bne.n	800853c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800851a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008522:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	695b      	ldr	r3, [r3, #20]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	4313      	orrs	r3, r2
 800852e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	4313      	orrs	r3, r2
 800853a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	621a      	str	r2, [r3, #32]
}
 8008556:	bf00      	nop
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	40010000 	.word	0x40010000
 8008568:	40010400 	.word	0x40010400

0800856c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800859a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f023 0303 	bic.w	r3, r3, #3
 80085a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	021b      	lsls	r3, r3, #8
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	4313      	orrs	r3, r2
 80085c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a21      	ldr	r2, [pc, #132]	@ (800864c <TIM_OC3_SetConfig+0xe0>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d003      	beq.n	80085d2 <TIM_OC3_SetConfig+0x66>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a20      	ldr	r2, [pc, #128]	@ (8008650 <TIM_OC3_SetConfig+0xe4>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d10d      	bne.n	80085ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80085d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	021b      	lsls	r3, r3, #8
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a16      	ldr	r2, [pc, #88]	@ (800864c <TIM_OC3_SetConfig+0xe0>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d003      	beq.n	80085fe <TIM_OC3_SetConfig+0x92>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a15      	ldr	r2, [pc, #84]	@ (8008650 <TIM_OC3_SetConfig+0xe4>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d113      	bne.n	8008626 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800860c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	011b      	lsls	r3, r3, #4
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	4313      	orrs	r3, r2
 8008618:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	011b      	lsls	r3, r3, #4
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	4313      	orrs	r3, r2
 8008624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	697a      	ldr	r2, [r7, #20]
 800863e:	621a      	str	r2, [r3, #32]
}
 8008640:	bf00      	nop
 8008642:	371c      	adds	r7, #28
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	40010000 	.word	0x40010000
 8008650:	40010400 	.word	0x40010400

08008654 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800868a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	021b      	lsls	r3, r3, #8
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	4313      	orrs	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800869e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	031b      	lsls	r3, r3, #12
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a12      	ldr	r2, [pc, #72]	@ (80086f8 <TIM_OC4_SetConfig+0xa4>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d003      	beq.n	80086bc <TIM_OC4_SetConfig+0x68>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a11      	ldr	r2, [pc, #68]	@ (80086fc <TIM_OC4_SetConfig+0xa8>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d109      	bne.n	80086d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	019b      	lsls	r3, r3, #6
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	621a      	str	r2, [r3, #32]
}
 80086ea:	bf00      	nop
 80086ec:	371c      	adds	r7, #28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	40010000 	.word	0x40010000
 80086fc:	40010400 	.word	0x40010400

08008700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6a1b      	ldr	r3, [r3, #32]
 8008710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	f023 0201 	bic.w	r2, r3, #1
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800872a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	4313      	orrs	r3, r2
 8008734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f023 030a 	bic.w	r3, r3, #10
 800873c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	4313      	orrs	r3, r2
 8008744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	621a      	str	r2, [r3, #32]
}
 8008752:	bf00      	nop
 8008754:	371c      	adds	r7, #28
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800875e:	b480      	push	{r7}
 8008760:	b087      	sub	sp, #28
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	f023 0210 	bic.w	r2, r3, #16
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	031b      	lsls	r3, r3, #12
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	4313      	orrs	r3, r2
 8008792:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800879a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	011b      	lsls	r3, r3, #4
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	621a      	str	r2, [r3, #32]
}
 80087b2:	bf00      	nop
 80087b4:	371c      	adds	r7, #28
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087be:	b480      	push	{r7}
 80087c0:	b085      	sub	sp, #20
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4313      	orrs	r3, r2
 80087dc:	f043 0307 	orr.w	r3, r3, #7
 80087e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	609a      	str	r2, [r3, #8]
}
 80087e8:	bf00      	nop
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b087      	sub	sp, #28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
 8008800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800880e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	021a      	lsls	r2, r3, #8
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	431a      	orrs	r2, r3
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	4313      	orrs	r3, r2
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	4313      	orrs	r3, r2
 8008820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	609a      	str	r2, [r3, #8]
}
 8008828:	bf00      	nop
 800882a:	371c      	adds	r7, #28
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008834:	b480      	push	{r7}
 8008836:	b087      	sub	sp, #28
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f003 031f 	and.w	r3, r3, #31
 8008846:	2201      	movs	r2, #1
 8008848:	fa02 f303 	lsl.w	r3, r2, r3
 800884c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6a1a      	ldr	r2, [r3, #32]
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	43db      	mvns	r3, r3
 8008856:	401a      	ands	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6a1a      	ldr	r2, [r3, #32]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f003 031f 	and.w	r3, r3, #31
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	fa01 f303 	lsl.w	r3, r1, r3
 800886c:	431a      	orrs	r2, r3
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	621a      	str	r2, [r3, #32]
}
 8008872:	bf00      	nop
 8008874:	371c      	adds	r7, #28
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
	...

08008880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008890:	2b01      	cmp	r3, #1
 8008892:	d101      	bne.n	8008898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008894:	2302      	movs	r3, #2
 8008896:	e05a      	b.n	800894e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a21      	ldr	r2, [pc, #132]	@ (800895c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d022      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088e4:	d01d      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a1d      	ldr	r2, [pc, #116]	@ (8008960 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d018      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a1b      	ldr	r2, [pc, #108]	@ (8008964 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d013      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a1a      	ldr	r2, [pc, #104]	@ (8008968 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d00e      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a18      	ldr	r2, [pc, #96]	@ (800896c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d009      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a17      	ldr	r2, [pc, #92]	@ (8008970 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d004      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a15      	ldr	r2, [pc, #84]	@ (8008974 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d10c      	bne.n	800893c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	4313      	orrs	r3, r2
 8008932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	40010000 	.word	0x40010000
 8008960:	40000400 	.word	0x40000400
 8008964:	40000800 	.word	0x40000800
 8008968:	40000c00 	.word	0x40000c00
 800896c:	40010400 	.word	0x40010400
 8008970:	40014000 	.word	0x40014000
 8008974:	40001800 	.word	0x40001800

08008978 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e042      	b.n	8008a38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d106      	bne.n	80089cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7fa ff36 	bl	8003838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2224      	movs	r2, #36	@ 0x24
 80089d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80089e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fdbd 	bl	8009564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	691a      	ldr	r2, [r3, #16]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	695a      	ldr	r2, [r3, #20]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68da      	ldr	r2, [r3, #12]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2220      	movs	r2, #32
 8008a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b08a      	sub	sp, #40	@ 0x28
 8008a44:	af02      	add	r7, sp, #8
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b20      	cmp	r3, #32
 8008a5e:	d175      	bne.n	8008b4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <HAL_UART_Transmit+0x2c>
 8008a66:	88fb      	ldrh	r3, [r7, #6]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d101      	bne.n	8008a70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e06e      	b.n	8008b4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2221      	movs	r2, #33	@ 0x21
 8008a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a7e:	f7fb f835 	bl	8003aec <HAL_GetTick>
 8008a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	88fa      	ldrh	r2, [r7, #6]
 8008a88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	88fa      	ldrh	r2, [r7, #6]
 8008a8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a98:	d108      	bne.n	8008aac <HAL_UART_Transmit+0x6c>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d104      	bne.n	8008aac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	61bb      	str	r3, [r7, #24]
 8008aaa:	e003      	b.n	8008ab4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ab4:	e02e      	b.n	8008b14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	2200      	movs	r2, #0
 8008abe:	2180      	movs	r1, #128	@ 0x80
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f000 fb1f 	bl	8009104 <UART_WaitOnFlagUntilTimeout>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d005      	beq.n	8008ad8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2220      	movs	r2, #32
 8008ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e03a      	b.n	8008b4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10b      	bne.n	8008af6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	3302      	adds	r3, #2
 8008af2:	61bb      	str	r3, [r7, #24]
 8008af4:	e007      	b.n	8008b06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	781a      	ldrb	r2, [r3, #0]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	3301      	adds	r3, #1
 8008b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1cb      	bne.n	8008ab6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	2200      	movs	r2, #0
 8008b26:	2140      	movs	r1, #64	@ 0x40
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 faeb 	bl	8009104 <UART_WaitOnFlagUntilTimeout>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d005      	beq.n	8008b40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2220      	movs	r2, #32
 8008b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e006      	b.n	8008b4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2220      	movs	r2, #32
 8008b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	e000      	b.n	8008b4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008b4c:	2302      	movs	r3, #2
  }
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3720      	adds	r7, #32
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	60f8      	str	r0, [r7, #12]
 8008b5e:	60b9      	str	r1, [r7, #8]
 8008b60:	4613      	mov	r3, r2
 8008b62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	d112      	bne.n	8008b96 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <HAL_UART_Receive_IT+0x26>
 8008b76:	88fb      	ldrh	r3, [r7, #6]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e00b      	b.n	8008b98 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b86:	88fb      	ldrh	r3, [r7, #6]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	68b9      	ldr	r1, [r7, #8]
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f000 fb12 	bl	80091b6 <UART_Start_Receive_IT>
 8008b92:	4603      	mov	r3, r0
 8008b94:	e000      	b.n	8008b98 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008b96:	2302      	movs	r3, #2
  }
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b0ba      	sub	sp, #232	@ 0xe8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008bde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10f      	bne.n	8008c06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bea:	f003 0320 	and.w	r3, r3, #32
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d009      	beq.n	8008c06 <HAL_UART_IRQHandler+0x66>
 8008bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bf6:	f003 0320 	and.w	r3, r3, #32
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fbf2 	bl	80093e8 <UART_Receive_IT>
      return;
 8008c04:	e25b      	b.n	80090be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f000 80de 	beq.w	8008dcc <HAL_UART_IRQHandler+0x22c>
 8008c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c14:	f003 0301 	and.w	r3, r3, #1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d106      	bne.n	8008c2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c20:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 80d1 	beq.w	8008dcc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00b      	beq.n	8008c4e <HAL_UART_IRQHandler+0xae>
 8008c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d005      	beq.n	8008c4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c46:	f043 0201 	orr.w	r2, r3, #1
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c52:	f003 0304 	and.w	r3, r3, #4
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00b      	beq.n	8008c72 <HAL_UART_IRQHandler+0xd2>
 8008c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d005      	beq.n	8008c72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c6a:	f043 0202 	orr.w	r2, r3, #2
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c76:	f003 0302 	and.w	r3, r3, #2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00b      	beq.n	8008c96 <HAL_UART_IRQHandler+0xf6>
 8008c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d005      	beq.n	8008c96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c8e:	f043 0204 	orr.w	r2, r3, #4
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c9a:	f003 0308 	and.w	r3, r3, #8
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d011      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x126>
 8008ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ca6:	f003 0320 	and.w	r3, r3, #32
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d105      	bne.n	8008cba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d005      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cbe:	f043 0208 	orr.w	r2, r3, #8
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f000 81f2 	beq.w	80090b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd4:	f003 0320 	and.w	r3, r3, #32
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d008      	beq.n	8008cee <HAL_UART_IRQHandler+0x14e>
 8008cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ce0:	f003 0320 	and.w	r3, r3, #32
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d002      	beq.n	8008cee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fb7d 	bl	80093e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	695b      	ldr	r3, [r3, #20]
 8008cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cf8:	2b40      	cmp	r3, #64	@ 0x40
 8008cfa:	bf0c      	ite	eq
 8008cfc:	2301      	moveq	r3, #1
 8008cfe:	2300      	movne	r3, #0
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d0a:	f003 0308 	and.w	r3, r3, #8
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d103      	bne.n	8008d1a <HAL_UART_IRQHandler+0x17a>
 8008d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d04f      	beq.n	8008dba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fa85 	bl	800922a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d2a:	2b40      	cmp	r3, #64	@ 0x40
 8008d2c:	d141      	bne.n	8008db2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3314      	adds	r3, #20
 8008d34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008d3c:	e853 3f00 	ldrex	r3, [r3]
 8008d40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3314      	adds	r3, #20
 8008d56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008d5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008d66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008d6a:	e841 2300 	strex	r3, r2, [r1]
 8008d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008d72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1d9      	bne.n	8008d2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d013      	beq.n	8008daa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d86:	4a7e      	ldr	r2, [pc, #504]	@ (8008f80 <HAL_UART_IRQHandler+0x3e0>)
 8008d88:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fb fd76 	bl	8004880 <HAL_DMA_Abort_IT>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d016      	beq.n	8008dc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008da4:	4610      	mov	r0, r2
 8008da6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008da8:	e00e      	b.n	8008dc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f994 	bl	80090d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db0:	e00a      	b.n	8008dc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f990 	bl	80090d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db8:	e006      	b.n	8008dc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f98c 	bl	80090d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008dc6:	e175      	b.n	80090b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dc8:	bf00      	nop
    return;
 8008dca:	e173      	b.n	80090b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	f040 814f 	bne.w	8009074 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dda:	f003 0310 	and.w	r3, r3, #16
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f000 8148 	beq.w	8009074 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008de8:	f003 0310 	and.w	r3, r3, #16
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 8141 	beq.w	8009074 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008df2:	2300      	movs	r3, #0
 8008df4:	60bb      	str	r3, [r7, #8]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	60bb      	str	r3, [r7, #8]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	60bb      	str	r3, [r7, #8]
 8008e06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e12:	2b40      	cmp	r3, #64	@ 0x40
 8008e14:	f040 80b6 	bne.w	8008f84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 8145 	beq.w	80090b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e36:	429a      	cmp	r2, r3
 8008e38:	f080 813e 	bcs.w	80090b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e42:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e48:	69db      	ldr	r3, [r3, #28]
 8008e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e4e:	f000 8088 	beq.w	8008f62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	330c      	adds	r3, #12
 8008e58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	330c      	adds	r3, #12
 8008e7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008e7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008e82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e86:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e8e:	e841 2300 	strex	r3, r2, [r1]
 8008e92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1d9      	bne.n	8008e52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3314      	adds	r3, #20
 8008ea4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008eae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008eb0:	f023 0301 	bic.w	r3, r3, #1
 8008eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3314      	adds	r3, #20
 8008ebe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ec2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ec6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008eca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008ece:	e841 2300 	strex	r3, r2, [r1]
 8008ed2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ed4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1e1      	bne.n	8008e9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3314      	adds	r3, #20
 8008ee0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008eea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008eec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3314      	adds	r3, #20
 8008efa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008efe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f06:	e841 2300 	strex	r3, r2, [r1]
 8008f0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1e3      	bne.n	8008eda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2220      	movs	r2, #32
 8008f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	330c      	adds	r3, #12
 8008f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f2a:	e853 3f00 	ldrex	r3, [r3]
 8008f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f32:	f023 0310 	bic.w	r3, r3, #16
 8008f36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	330c      	adds	r3, #12
 8008f40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008f44:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008f46:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f4c:	e841 2300 	strex	r3, r2, [r1]
 8008f50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e3      	bne.n	8008f20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fb fc1f 	bl	80047a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2202      	movs	r2, #2
 8008f66:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f8b7 	bl	80090ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f7e:	e09b      	b.n	80090b8 <HAL_UART_IRQHandler+0x518>
 8008f80:	080092f1 	.word	0x080092f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 808e 	beq.w	80090bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 8089 	beq.w	80090bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	330c      	adds	r3, #12
 8008fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb4:	e853 3f00 	ldrex	r3, [r3]
 8008fb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	330c      	adds	r3, #12
 8008fca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008fce:	647a      	str	r2, [r7, #68]	@ 0x44
 8008fd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1e3      	bne.n	8008faa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3314      	adds	r3, #20
 8008fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	f023 0301 	bic.w	r3, r3, #1
 8008ff8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3314      	adds	r3, #20
 8009002:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009006:	633a      	str	r2, [r7, #48]	@ 0x30
 8009008:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800900c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800900e:	e841 2300 	strex	r3, r2, [r1]
 8009012:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1e3      	bne.n	8008fe2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2220      	movs	r2, #32
 800901e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	330c      	adds	r3, #12
 800902e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	e853 3f00 	ldrex	r3, [r3]
 8009036:	60fb      	str	r3, [r7, #12]
   return(result);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f023 0310 	bic.w	r3, r3, #16
 800903e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	330c      	adds	r3, #12
 8009048:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800904c:	61fa      	str	r2, [r7, #28]
 800904e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009050:	69b9      	ldr	r1, [r7, #24]
 8009052:	69fa      	ldr	r2, [r7, #28]
 8009054:	e841 2300 	strex	r3, r2, [r1]
 8009058:	617b      	str	r3, [r7, #20]
   return(result);
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1e3      	bne.n	8009028 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2202      	movs	r2, #2
 8009064:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009066:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f83d 	bl	80090ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009072:	e023      	b.n	80090bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800907c:	2b00      	cmp	r3, #0
 800907e:	d009      	beq.n	8009094 <HAL_UART_IRQHandler+0x4f4>
 8009080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f943 	bl	8009318 <UART_Transmit_IT>
    return;
 8009092:	e014      	b.n	80090be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00e      	beq.n	80090be <HAL_UART_IRQHandler+0x51e>
 80090a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d008      	beq.n	80090be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f983 	bl	80093b8 <UART_EndTransmit_IT>
    return;
 80090b2:	e004      	b.n	80090be <HAL_UART_IRQHandler+0x51e>
    return;
 80090b4:	bf00      	nop
 80090b6:	e002      	b.n	80090be <HAL_UART_IRQHandler+0x51e>
      return;
 80090b8:	bf00      	nop
 80090ba:	e000      	b.n	80090be <HAL_UART_IRQHandler+0x51e>
      return;
 80090bc:	bf00      	nop
  }
}
 80090be:	37e8      	adds	r7, #232	@ 0xe8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	603b      	str	r3, [r7, #0]
 8009110:	4613      	mov	r3, r2
 8009112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009114:	e03b      	b.n	800918e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911c:	d037      	beq.n	800918e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800911e:	f7fa fce5 	bl	8003aec <HAL_GetTick>
 8009122:	4602      	mov	r2, r0
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	6a3a      	ldr	r2, [r7, #32]
 800912a:	429a      	cmp	r2, r3
 800912c:	d302      	bcc.n	8009134 <UART_WaitOnFlagUntilTimeout+0x30>
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d101      	bne.n	8009138 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e03a      	b.n	80091ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	f003 0304 	and.w	r3, r3, #4
 8009142:	2b00      	cmp	r3, #0
 8009144:	d023      	beq.n	800918e <UART_WaitOnFlagUntilTimeout+0x8a>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b80      	cmp	r3, #128	@ 0x80
 800914a:	d020      	beq.n	800918e <UART_WaitOnFlagUntilTimeout+0x8a>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2b40      	cmp	r3, #64	@ 0x40
 8009150:	d01d      	beq.n	800918e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0308 	and.w	r3, r3, #8
 800915c:	2b08      	cmp	r3, #8
 800915e:	d116      	bne.n	800918e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009160:	2300      	movs	r3, #0
 8009162:	617b      	str	r3, [r7, #20]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	617b      	str	r3, [r7, #20]
 8009174:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 f857 	bl	800922a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2208      	movs	r2, #8
 8009180:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e00f      	b.n	80091ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	4013      	ands	r3, r2
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	429a      	cmp	r2, r3
 800919c:	bf0c      	ite	eq
 800919e:	2301      	moveq	r3, #1
 80091a0:	2300      	movne	r3, #0
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	461a      	mov	r2, r3
 80091a6:	79fb      	ldrb	r3, [r7, #7]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d0b4      	beq.n	8009116 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b085      	sub	sp, #20
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	60b9      	str	r1, [r7, #8]
 80091c0:	4613      	mov	r3, r2
 80091c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	88fa      	ldrh	r2, [r7, #6]
 80091ce:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	88fa      	ldrh	r2, [r7, #6]
 80091d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2222      	movs	r2, #34	@ 0x22
 80091e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d007      	beq.n	80091fc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68da      	ldr	r2, [r3, #12]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	695a      	ldr	r2, [r3, #20]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68da      	ldr	r2, [r3, #12]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f042 0220 	orr.w	r2, r2, #32
 800921a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800922a:	b480      	push	{r7}
 800922c:	b095      	sub	sp, #84	@ 0x54
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	330c      	adds	r3, #12
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800923c:	e853 3f00 	ldrex	r3, [r3]
 8009240:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009244:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009248:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	330c      	adds	r3, #12
 8009250:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009252:	643a      	str	r2, [r7, #64]	@ 0x40
 8009254:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009258:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e5      	bne.n	8009232 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3314      	adds	r3, #20
 800926c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	6a3b      	ldr	r3, [r7, #32]
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	61fb      	str	r3, [r7, #28]
   return(result);
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	f023 0301 	bic.w	r3, r3, #1
 800927c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3314      	adds	r3, #20
 8009284:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009286:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009288:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800928c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800928e:	e841 2300 	strex	r3, r2, [r1]
 8009292:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1e5      	bne.n	8009266 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d119      	bne.n	80092d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	330c      	adds	r3, #12
 80092a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	e853 3f00 	ldrex	r3, [r3]
 80092b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f023 0310 	bic.w	r3, r3, #16
 80092b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	330c      	adds	r3, #12
 80092c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092c2:	61ba      	str	r2, [r7, #24]
 80092c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c6:	6979      	ldr	r1, [r7, #20]
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	e841 2300 	strex	r3, r2, [r1]
 80092ce:	613b      	str	r3, [r7, #16]
   return(result);
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1e5      	bne.n	80092a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2220      	movs	r2, #32
 80092da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80092e4:	bf00      	nop
 80092e6:	3754      	adds	r7, #84	@ 0x54
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f7ff fee4 	bl	80090d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009310:	bf00      	nop
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b21      	cmp	r3, #33	@ 0x21
 800932a:	d13e      	bne.n	80093aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009334:	d114      	bne.n	8009360 <UART_Transmit_IT+0x48>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d110      	bne.n	8009360 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	461a      	mov	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009352:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a1b      	ldr	r3, [r3, #32]
 8009358:	1c9a      	adds	r2, r3, #2
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	621a      	str	r2, [r3, #32]
 800935e:	e008      	b.n	8009372 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a1b      	ldr	r3, [r3, #32]
 8009364:	1c59      	adds	r1, r3, #1
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	6211      	str	r1, [r2, #32]
 800936a:	781a      	ldrb	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009376:	b29b      	uxth	r3, r3
 8009378:	3b01      	subs	r3, #1
 800937a:	b29b      	uxth	r3, r3
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	4619      	mov	r1, r3
 8009380:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10f      	bne.n	80093a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68da      	ldr	r2, [r3, #12]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009394:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68da      	ldr	r2, [r3, #12]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80093a6:	2300      	movs	r3, #0
 80093a8:	e000      	b.n	80093ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80093aa:	2302      	movs	r3, #2
  }
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68da      	ldr	r2, [r3, #12]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2220      	movs	r2, #32
 80093d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7ff fe73 	bl	80090c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08c      	sub	sp, #48	@ 0x30
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b22      	cmp	r3, #34	@ 0x22
 80093fa:	f040 80ae 	bne.w	800955a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009406:	d117      	bne.n	8009438 <UART_Receive_IT+0x50>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d113      	bne.n	8009438 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009410:	2300      	movs	r3, #0
 8009412:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009418:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	b29b      	uxth	r3, r3
 8009422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009426:	b29a      	uxth	r2, r3
 8009428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009430:	1c9a      	adds	r2, r3, #2
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	629a      	str	r2, [r3, #40]	@ 0x28
 8009436:	e026      	b.n	8009486 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800943c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800943e:	2300      	movs	r3, #0
 8009440:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800944a:	d007      	beq.n	800945c <UART_Receive_IT+0x74>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10a      	bne.n	800946a <UART_Receive_IT+0x82>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d106      	bne.n	800946a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	b2da      	uxtb	r2, r3
 8009464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009466:	701a      	strb	r2, [r3, #0]
 8009468:	e008      	b.n	800947c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	b2db      	uxtb	r3, r3
 8009472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009476:	b2da      	uxtb	r2, r3
 8009478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800947a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800948a:	b29b      	uxth	r3, r3
 800948c:	3b01      	subs	r3, #1
 800948e:	b29b      	uxth	r3, r3
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	4619      	mov	r1, r3
 8009494:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009496:	2b00      	cmp	r3, #0
 8009498:	d15d      	bne.n	8009556 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68da      	ldr	r2, [r3, #12]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f022 0220 	bic.w	r2, r2, #32
 80094a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68da      	ldr	r2, [r3, #12]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80094b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	695a      	ldr	r2, [r3, #20]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f022 0201 	bic.w	r2, r2, #1
 80094c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2220      	movs	r2, #32
 80094ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d135      	bne.n	800954c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	330c      	adds	r3, #12
 80094ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	e853 3f00 	ldrex	r3, [r3]
 80094f4:	613b      	str	r3, [r7, #16]
   return(result);
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f023 0310 	bic.w	r3, r3, #16
 80094fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	330c      	adds	r3, #12
 8009504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009506:	623a      	str	r2, [r7, #32]
 8009508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950a:	69f9      	ldr	r1, [r7, #28]
 800950c:	6a3a      	ldr	r2, [r7, #32]
 800950e:	e841 2300 	strex	r3, r2, [r1]
 8009512:	61bb      	str	r3, [r7, #24]
   return(result);
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e5      	bne.n	80094e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 0310 	and.w	r3, r3, #16
 8009524:	2b10      	cmp	r3, #16
 8009526:	d10a      	bne.n	800953e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009528:	2300      	movs	r3, #0
 800952a:	60fb      	str	r3, [r7, #12]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	60fb      	str	r3, [r7, #12]
 800953c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009542:	4619      	mov	r1, r3
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f7ff fdd1 	bl	80090ec <HAL_UARTEx_RxEventCallback>
 800954a:	e002      	b.n	8009552 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7fa f8db 	bl	8003708 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	e002      	b.n	800955c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	e000      	b.n	800955c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800955a:	2302      	movs	r3, #2
  }
}
 800955c:	4618      	mov	r0, r3
 800955e:	3730      	adds	r7, #48	@ 0x30
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009568:	b0c0      	sub	sp, #256	@ 0x100
 800956a:	af00      	add	r7, sp, #0
 800956c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800957c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009580:	68d9      	ldr	r1, [r3, #12]
 8009582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	ea40 0301 	orr.w	r3, r0, r1
 800958c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800958e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009592:	689a      	ldr	r2, [r3, #8]
 8009594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	431a      	orrs	r2, r3
 800959c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	431a      	orrs	r2, r3
 80095a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80095b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80095bc:	f021 010c 	bic.w	r1, r1, #12
 80095c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80095ca:	430b      	orrs	r3, r1
 80095cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80095ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80095da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095de:	6999      	ldr	r1, [r3, #24]
 80095e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	ea40 0301 	orr.w	r3, r0, r1
 80095ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	4b8f      	ldr	r3, [pc, #572]	@ (8009830 <UART_SetConfig+0x2cc>)
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d005      	beq.n	8009604 <UART_SetConfig+0xa0>
 80095f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	4b8d      	ldr	r3, [pc, #564]	@ (8009834 <UART_SetConfig+0x2d0>)
 8009600:	429a      	cmp	r2, r3
 8009602:	d104      	bne.n	800960e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009604:	f7fd fb6e 	bl	8006ce4 <HAL_RCC_GetPCLK2Freq>
 8009608:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800960c:	e003      	b.n	8009616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800960e:	f7fd fb55 	bl	8006cbc <HAL_RCC_GetPCLK1Freq>
 8009612:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800961a:	69db      	ldr	r3, [r3, #28]
 800961c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009620:	f040 810c 	bne.w	800983c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009628:	2200      	movs	r2, #0
 800962a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800962e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009636:	4622      	mov	r2, r4
 8009638:	462b      	mov	r3, r5
 800963a:	1891      	adds	r1, r2, r2
 800963c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800963e:	415b      	adcs	r3, r3
 8009640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009646:	4621      	mov	r1, r4
 8009648:	eb12 0801 	adds.w	r8, r2, r1
 800964c:	4629      	mov	r1, r5
 800964e:	eb43 0901 	adc.w	r9, r3, r1
 8009652:	f04f 0200 	mov.w	r2, #0
 8009656:	f04f 0300 	mov.w	r3, #0
 800965a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800965e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009666:	4690      	mov	r8, r2
 8009668:	4699      	mov	r9, r3
 800966a:	4623      	mov	r3, r4
 800966c:	eb18 0303 	adds.w	r3, r8, r3
 8009670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009674:	462b      	mov	r3, r5
 8009676:	eb49 0303 	adc.w	r3, r9, r3
 800967a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800967e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800968a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800968e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009692:	460b      	mov	r3, r1
 8009694:	18db      	adds	r3, r3, r3
 8009696:	653b      	str	r3, [r7, #80]	@ 0x50
 8009698:	4613      	mov	r3, r2
 800969a:	eb42 0303 	adc.w	r3, r2, r3
 800969e:	657b      	str	r3, [r7, #84]	@ 0x54
 80096a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80096a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80096a8:	f7f7 fa88 	bl	8000bbc <__aeabi_uldivmod>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4b61      	ldr	r3, [pc, #388]	@ (8009838 <UART_SetConfig+0x2d4>)
 80096b2:	fba3 2302 	umull	r2, r3, r3, r2
 80096b6:	095b      	lsrs	r3, r3, #5
 80096b8:	011c      	lsls	r4, r3, #4
 80096ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096be:	2200      	movs	r2, #0
 80096c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80096c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80096c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80096cc:	4642      	mov	r2, r8
 80096ce:	464b      	mov	r3, r9
 80096d0:	1891      	adds	r1, r2, r2
 80096d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80096d4:	415b      	adcs	r3, r3
 80096d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80096dc:	4641      	mov	r1, r8
 80096de:	eb12 0a01 	adds.w	sl, r2, r1
 80096e2:	4649      	mov	r1, r9
 80096e4:	eb43 0b01 	adc.w	fp, r3, r1
 80096e8:	f04f 0200 	mov.w	r2, #0
 80096ec:	f04f 0300 	mov.w	r3, #0
 80096f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80096f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80096f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096fc:	4692      	mov	sl, r2
 80096fe:	469b      	mov	fp, r3
 8009700:	4643      	mov	r3, r8
 8009702:	eb1a 0303 	adds.w	r3, sl, r3
 8009706:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800970a:	464b      	mov	r3, r9
 800970c:	eb4b 0303 	adc.w	r3, fp, r3
 8009710:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009720:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009728:	460b      	mov	r3, r1
 800972a:	18db      	adds	r3, r3, r3
 800972c:	643b      	str	r3, [r7, #64]	@ 0x40
 800972e:	4613      	mov	r3, r2
 8009730:	eb42 0303 	adc.w	r3, r2, r3
 8009734:	647b      	str	r3, [r7, #68]	@ 0x44
 8009736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800973a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800973e:	f7f7 fa3d 	bl	8000bbc <__aeabi_uldivmod>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	4611      	mov	r1, r2
 8009748:	4b3b      	ldr	r3, [pc, #236]	@ (8009838 <UART_SetConfig+0x2d4>)
 800974a:	fba3 2301 	umull	r2, r3, r3, r1
 800974e:	095b      	lsrs	r3, r3, #5
 8009750:	2264      	movs	r2, #100	@ 0x64
 8009752:	fb02 f303 	mul.w	r3, r2, r3
 8009756:	1acb      	subs	r3, r1, r3
 8009758:	00db      	lsls	r3, r3, #3
 800975a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800975e:	4b36      	ldr	r3, [pc, #216]	@ (8009838 <UART_SetConfig+0x2d4>)
 8009760:	fba3 2302 	umull	r2, r3, r3, r2
 8009764:	095b      	lsrs	r3, r3, #5
 8009766:	005b      	lsls	r3, r3, #1
 8009768:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800976c:	441c      	add	r4, r3
 800976e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009772:	2200      	movs	r2, #0
 8009774:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009778:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800977c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009780:	4642      	mov	r2, r8
 8009782:	464b      	mov	r3, r9
 8009784:	1891      	adds	r1, r2, r2
 8009786:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009788:	415b      	adcs	r3, r3
 800978a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800978c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009790:	4641      	mov	r1, r8
 8009792:	1851      	adds	r1, r2, r1
 8009794:	6339      	str	r1, [r7, #48]	@ 0x30
 8009796:	4649      	mov	r1, r9
 8009798:	414b      	adcs	r3, r1
 800979a:	637b      	str	r3, [r7, #52]	@ 0x34
 800979c:	f04f 0200 	mov.w	r2, #0
 80097a0:	f04f 0300 	mov.w	r3, #0
 80097a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80097a8:	4659      	mov	r1, fp
 80097aa:	00cb      	lsls	r3, r1, #3
 80097ac:	4651      	mov	r1, sl
 80097ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097b2:	4651      	mov	r1, sl
 80097b4:	00ca      	lsls	r2, r1, #3
 80097b6:	4610      	mov	r0, r2
 80097b8:	4619      	mov	r1, r3
 80097ba:	4603      	mov	r3, r0
 80097bc:	4642      	mov	r2, r8
 80097be:	189b      	adds	r3, r3, r2
 80097c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80097c4:	464b      	mov	r3, r9
 80097c6:	460a      	mov	r2, r1
 80097c8:	eb42 0303 	adc.w	r3, r2, r3
 80097cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80097d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80097dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80097e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80097e4:	460b      	mov	r3, r1
 80097e6:	18db      	adds	r3, r3, r3
 80097e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097ea:	4613      	mov	r3, r2
 80097ec:	eb42 0303 	adc.w	r3, r2, r3
 80097f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80097f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80097fa:	f7f7 f9df 	bl	8000bbc <__aeabi_uldivmod>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4b0d      	ldr	r3, [pc, #52]	@ (8009838 <UART_SetConfig+0x2d4>)
 8009804:	fba3 1302 	umull	r1, r3, r3, r2
 8009808:	095b      	lsrs	r3, r3, #5
 800980a:	2164      	movs	r1, #100	@ 0x64
 800980c:	fb01 f303 	mul.w	r3, r1, r3
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	00db      	lsls	r3, r3, #3
 8009814:	3332      	adds	r3, #50	@ 0x32
 8009816:	4a08      	ldr	r2, [pc, #32]	@ (8009838 <UART_SetConfig+0x2d4>)
 8009818:	fba2 2303 	umull	r2, r3, r2, r3
 800981c:	095b      	lsrs	r3, r3, #5
 800981e:	f003 0207 	and.w	r2, r3, #7
 8009822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4422      	add	r2, r4
 800982a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800982c:	e106      	b.n	8009a3c <UART_SetConfig+0x4d8>
 800982e:	bf00      	nop
 8009830:	40011000 	.word	0x40011000
 8009834:	40011400 	.word	0x40011400
 8009838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800983c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009840:	2200      	movs	r2, #0
 8009842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009846:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800984a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800984e:	4642      	mov	r2, r8
 8009850:	464b      	mov	r3, r9
 8009852:	1891      	adds	r1, r2, r2
 8009854:	6239      	str	r1, [r7, #32]
 8009856:	415b      	adcs	r3, r3
 8009858:	627b      	str	r3, [r7, #36]	@ 0x24
 800985a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800985e:	4641      	mov	r1, r8
 8009860:	1854      	adds	r4, r2, r1
 8009862:	4649      	mov	r1, r9
 8009864:	eb43 0501 	adc.w	r5, r3, r1
 8009868:	f04f 0200 	mov.w	r2, #0
 800986c:	f04f 0300 	mov.w	r3, #0
 8009870:	00eb      	lsls	r3, r5, #3
 8009872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009876:	00e2      	lsls	r2, r4, #3
 8009878:	4614      	mov	r4, r2
 800987a:	461d      	mov	r5, r3
 800987c:	4643      	mov	r3, r8
 800987e:	18e3      	adds	r3, r4, r3
 8009880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009884:	464b      	mov	r3, r9
 8009886:	eb45 0303 	adc.w	r3, r5, r3
 800988a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800988e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800989a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800989e:	f04f 0200 	mov.w	r2, #0
 80098a2:	f04f 0300 	mov.w	r3, #0
 80098a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80098aa:	4629      	mov	r1, r5
 80098ac:	008b      	lsls	r3, r1, #2
 80098ae:	4621      	mov	r1, r4
 80098b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098b4:	4621      	mov	r1, r4
 80098b6:	008a      	lsls	r2, r1, #2
 80098b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80098bc:	f7f7 f97e 	bl	8000bbc <__aeabi_uldivmod>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4b60      	ldr	r3, [pc, #384]	@ (8009a48 <UART_SetConfig+0x4e4>)
 80098c6:	fba3 2302 	umull	r2, r3, r3, r2
 80098ca:	095b      	lsrs	r3, r3, #5
 80098cc:	011c      	lsls	r4, r3, #4
 80098ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098d2:	2200      	movs	r2, #0
 80098d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80098d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80098dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80098e0:	4642      	mov	r2, r8
 80098e2:	464b      	mov	r3, r9
 80098e4:	1891      	adds	r1, r2, r2
 80098e6:	61b9      	str	r1, [r7, #24]
 80098e8:	415b      	adcs	r3, r3
 80098ea:	61fb      	str	r3, [r7, #28]
 80098ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098f0:	4641      	mov	r1, r8
 80098f2:	1851      	adds	r1, r2, r1
 80098f4:	6139      	str	r1, [r7, #16]
 80098f6:	4649      	mov	r1, r9
 80098f8:	414b      	adcs	r3, r1
 80098fa:	617b      	str	r3, [r7, #20]
 80098fc:	f04f 0200 	mov.w	r2, #0
 8009900:	f04f 0300 	mov.w	r3, #0
 8009904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009908:	4659      	mov	r1, fp
 800990a:	00cb      	lsls	r3, r1, #3
 800990c:	4651      	mov	r1, sl
 800990e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009912:	4651      	mov	r1, sl
 8009914:	00ca      	lsls	r2, r1, #3
 8009916:	4610      	mov	r0, r2
 8009918:	4619      	mov	r1, r3
 800991a:	4603      	mov	r3, r0
 800991c:	4642      	mov	r2, r8
 800991e:	189b      	adds	r3, r3, r2
 8009920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009924:	464b      	mov	r3, r9
 8009926:	460a      	mov	r2, r1
 8009928:	eb42 0303 	adc.w	r3, r2, r3
 800992c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	67bb      	str	r3, [r7, #120]	@ 0x78
 800993a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800993c:	f04f 0200 	mov.w	r2, #0
 8009940:	f04f 0300 	mov.w	r3, #0
 8009944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009948:	4649      	mov	r1, r9
 800994a:	008b      	lsls	r3, r1, #2
 800994c:	4641      	mov	r1, r8
 800994e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009952:	4641      	mov	r1, r8
 8009954:	008a      	lsls	r2, r1, #2
 8009956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800995a:	f7f7 f92f 	bl	8000bbc <__aeabi_uldivmod>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4611      	mov	r1, r2
 8009964:	4b38      	ldr	r3, [pc, #224]	@ (8009a48 <UART_SetConfig+0x4e4>)
 8009966:	fba3 2301 	umull	r2, r3, r3, r1
 800996a:	095b      	lsrs	r3, r3, #5
 800996c:	2264      	movs	r2, #100	@ 0x64
 800996e:	fb02 f303 	mul.w	r3, r2, r3
 8009972:	1acb      	subs	r3, r1, r3
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	3332      	adds	r3, #50	@ 0x32
 8009978:	4a33      	ldr	r2, [pc, #204]	@ (8009a48 <UART_SetConfig+0x4e4>)
 800997a:	fba2 2303 	umull	r2, r3, r2, r3
 800997e:	095b      	lsrs	r3, r3, #5
 8009980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009984:	441c      	add	r4, r3
 8009986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800998a:	2200      	movs	r2, #0
 800998c:	673b      	str	r3, [r7, #112]	@ 0x70
 800998e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009990:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009994:	4642      	mov	r2, r8
 8009996:	464b      	mov	r3, r9
 8009998:	1891      	adds	r1, r2, r2
 800999a:	60b9      	str	r1, [r7, #8]
 800999c:	415b      	adcs	r3, r3
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099a4:	4641      	mov	r1, r8
 80099a6:	1851      	adds	r1, r2, r1
 80099a8:	6039      	str	r1, [r7, #0]
 80099aa:	4649      	mov	r1, r9
 80099ac:	414b      	adcs	r3, r1
 80099ae:	607b      	str	r3, [r7, #4]
 80099b0:	f04f 0200 	mov.w	r2, #0
 80099b4:	f04f 0300 	mov.w	r3, #0
 80099b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80099bc:	4659      	mov	r1, fp
 80099be:	00cb      	lsls	r3, r1, #3
 80099c0:	4651      	mov	r1, sl
 80099c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099c6:	4651      	mov	r1, sl
 80099c8:	00ca      	lsls	r2, r1, #3
 80099ca:	4610      	mov	r0, r2
 80099cc:	4619      	mov	r1, r3
 80099ce:	4603      	mov	r3, r0
 80099d0:	4642      	mov	r2, r8
 80099d2:	189b      	adds	r3, r3, r2
 80099d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099d6:	464b      	mov	r3, r9
 80099d8:	460a      	mov	r2, r1
 80099da:	eb42 0303 	adc.w	r3, r2, r3
 80099de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80099e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80099ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80099ec:	f04f 0200 	mov.w	r2, #0
 80099f0:	f04f 0300 	mov.w	r3, #0
 80099f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80099f8:	4649      	mov	r1, r9
 80099fa:	008b      	lsls	r3, r1, #2
 80099fc:	4641      	mov	r1, r8
 80099fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a02:	4641      	mov	r1, r8
 8009a04:	008a      	lsls	r2, r1, #2
 8009a06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009a0a:	f7f7 f8d7 	bl	8000bbc <__aeabi_uldivmod>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	4b0d      	ldr	r3, [pc, #52]	@ (8009a48 <UART_SetConfig+0x4e4>)
 8009a14:	fba3 1302 	umull	r1, r3, r3, r2
 8009a18:	095b      	lsrs	r3, r3, #5
 8009a1a:	2164      	movs	r1, #100	@ 0x64
 8009a1c:	fb01 f303 	mul.w	r3, r1, r3
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	011b      	lsls	r3, r3, #4
 8009a24:	3332      	adds	r3, #50	@ 0x32
 8009a26:	4a08      	ldr	r2, [pc, #32]	@ (8009a48 <UART_SetConfig+0x4e4>)
 8009a28:	fba2 2303 	umull	r2, r3, r2, r3
 8009a2c:	095b      	lsrs	r3, r3, #5
 8009a2e:	f003 020f 	and.w	r2, r3, #15
 8009a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4422      	add	r2, r4
 8009a3a:	609a      	str	r2, [r3, #8]
}
 8009a3c:	bf00      	nop
 8009a3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009a42:	46bd      	mov	sp, r7
 8009a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a48:	51eb851f 	.word	0x51eb851f

08009a4c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b087      	sub	sp, #28
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	6812      	ldr	r2, [r2, #0]
 8009a64:	f023 0101 	bic.w	r1, r3, #1
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	2b08      	cmp	r3, #8
 8009a74:	d102      	bne.n	8009a7c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009a76:	2340      	movs	r3, #64	@ 0x40
 8009a78:	617b      	str	r3, [r7, #20]
 8009a7a:	e001      	b.n	8009a80 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009a8c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009a92:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009a98:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009a9e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009aa4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8009aaa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8009ab0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8009ab6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8009abc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ad4:	693a      	ldr	r2, [r7, #16]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8009ada:	4b10      	ldr	r3, [pc, #64]	@ (8009b1c <FSMC_NORSRAM_Init+0xd0>)
 8009adc:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009ae4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8009aec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	43db      	mvns	r3, r3
 8009afc:	ea02 0103 	and.w	r1, r2, r3
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	4319      	orrs	r1, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	371c      	adds	r7, #28
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	0008fb7f 	.word	0x0008fb7f

08009b20 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b36:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	431a      	orrs	r2, r3
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	021b      	lsls	r3, r3, #8
 8009b4c:	431a      	orrs	r2, r3
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	041b      	lsls	r3, r3, #16
 8009b54:	431a      	orrs	r2, r3
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	051b      	lsls	r3, r3, #20
 8009b5e:	431a      	orrs	r2, r3
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	695b      	ldr	r3, [r3, #20]
 8009b64:	3b02      	subs	r3, #2
 8009b66:	061b      	lsls	r3, r3, #24
 8009b68:	431a      	orrs	r2, r3
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	3201      	adds	r2, #1
 8009b74:	4319      	orrs	r1, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
	...

08009b8c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ba0:	d11d      	bne.n	8009bde <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009baa:	4b13      	ldr	r3, [pc, #76]	@ (8009bf8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009bac:	4013      	ands	r3, r2
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	6811      	ldr	r1, [r2, #0]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	6852      	ldr	r2, [r2, #4]
 8009bb6:	0112      	lsls	r2, r2, #4
 8009bb8:	4311      	orrs	r1, r2
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	6892      	ldr	r2, [r2, #8]
 8009bbe:	0212      	lsls	r2, r2, #8
 8009bc0:	4311      	orrs	r1, r2
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	6992      	ldr	r2, [r2, #24]
 8009bc6:	4311      	orrs	r1, r2
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	68d2      	ldr	r2, [r2, #12]
 8009bcc:	0412      	lsls	r2, r2, #16
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	ea43 0102 	orr.w	r1, r3, r2
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009bdc:	e005      	b.n	8009bea <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8009be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	cff00000 	.word	0xcff00000

08009bfc <siprintf>:
 8009bfc:	b40e      	push	{r1, r2, r3}
 8009bfe:	b500      	push	{lr}
 8009c00:	b09c      	sub	sp, #112	@ 0x70
 8009c02:	ab1d      	add	r3, sp, #116	@ 0x74
 8009c04:	9002      	str	r0, [sp, #8]
 8009c06:	9006      	str	r0, [sp, #24]
 8009c08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009c0c:	4809      	ldr	r0, [pc, #36]	@ (8009c34 <siprintf+0x38>)
 8009c0e:	9107      	str	r1, [sp, #28]
 8009c10:	9104      	str	r1, [sp, #16]
 8009c12:	4909      	ldr	r1, [pc, #36]	@ (8009c38 <siprintf+0x3c>)
 8009c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c18:	9105      	str	r1, [sp, #20]
 8009c1a:	6800      	ldr	r0, [r0, #0]
 8009c1c:	9301      	str	r3, [sp, #4]
 8009c1e:	a902      	add	r1, sp, #8
 8009c20:	f000 f994 	bl	8009f4c <_svfiprintf_r>
 8009c24:	9b02      	ldr	r3, [sp, #8]
 8009c26:	2200      	movs	r2, #0
 8009c28:	701a      	strb	r2, [r3, #0]
 8009c2a:	b01c      	add	sp, #112	@ 0x70
 8009c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c30:	b003      	add	sp, #12
 8009c32:	4770      	bx	lr
 8009c34:	2000001c 	.word	0x2000001c
 8009c38:	ffff0208 	.word	0xffff0208

08009c3c <memset>:
 8009c3c:	4402      	add	r2, r0
 8009c3e:	4603      	mov	r3, r0
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d100      	bne.n	8009c46 <memset+0xa>
 8009c44:	4770      	bx	lr
 8009c46:	f803 1b01 	strb.w	r1, [r3], #1
 8009c4a:	e7f9      	b.n	8009c40 <memset+0x4>

08009c4c <__errno>:
 8009c4c:	4b01      	ldr	r3, [pc, #4]	@ (8009c54 <__errno+0x8>)
 8009c4e:	6818      	ldr	r0, [r3, #0]
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	2000001c 	.word	0x2000001c

08009c58 <__libc_init_array>:
 8009c58:	b570      	push	{r4, r5, r6, lr}
 8009c5a:	4d0d      	ldr	r5, [pc, #52]	@ (8009c90 <__libc_init_array+0x38>)
 8009c5c:	4c0d      	ldr	r4, [pc, #52]	@ (8009c94 <__libc_init_array+0x3c>)
 8009c5e:	1b64      	subs	r4, r4, r5
 8009c60:	10a4      	asrs	r4, r4, #2
 8009c62:	2600      	movs	r6, #0
 8009c64:	42a6      	cmp	r6, r4
 8009c66:	d109      	bne.n	8009c7c <__libc_init_array+0x24>
 8009c68:	4d0b      	ldr	r5, [pc, #44]	@ (8009c98 <__libc_init_array+0x40>)
 8009c6a:	4c0c      	ldr	r4, [pc, #48]	@ (8009c9c <__libc_init_array+0x44>)
 8009c6c:	f000 fc66 	bl	800a53c <_init>
 8009c70:	1b64      	subs	r4, r4, r5
 8009c72:	10a4      	asrs	r4, r4, #2
 8009c74:	2600      	movs	r6, #0
 8009c76:	42a6      	cmp	r6, r4
 8009c78:	d105      	bne.n	8009c86 <__libc_init_array+0x2e>
 8009c7a:	bd70      	pop	{r4, r5, r6, pc}
 8009c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c80:	4798      	blx	r3
 8009c82:	3601      	adds	r6, #1
 8009c84:	e7ee      	b.n	8009c64 <__libc_init_array+0xc>
 8009c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c8a:	4798      	blx	r3
 8009c8c:	3601      	adds	r6, #1
 8009c8e:	e7f2      	b.n	8009c76 <__libc_init_array+0x1e>
 8009c90:	0800d608 	.word	0x0800d608
 8009c94:	0800d608 	.word	0x0800d608
 8009c98:	0800d608 	.word	0x0800d608
 8009c9c:	0800d60c 	.word	0x0800d60c

08009ca0 <__retarget_lock_acquire_recursive>:
 8009ca0:	4770      	bx	lr

08009ca2 <__retarget_lock_release_recursive>:
 8009ca2:	4770      	bx	lr

08009ca4 <_free_r>:
 8009ca4:	b538      	push	{r3, r4, r5, lr}
 8009ca6:	4605      	mov	r5, r0
 8009ca8:	2900      	cmp	r1, #0
 8009caa:	d041      	beq.n	8009d30 <_free_r+0x8c>
 8009cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cb0:	1f0c      	subs	r4, r1, #4
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	bfb8      	it	lt
 8009cb6:	18e4      	addlt	r4, r4, r3
 8009cb8:	f000 f8e0 	bl	8009e7c <__malloc_lock>
 8009cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8009d34 <_free_r+0x90>)
 8009cbe:	6813      	ldr	r3, [r2, #0]
 8009cc0:	b933      	cbnz	r3, 8009cd0 <_free_r+0x2c>
 8009cc2:	6063      	str	r3, [r4, #4]
 8009cc4:	6014      	str	r4, [r2, #0]
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ccc:	f000 b8dc 	b.w	8009e88 <__malloc_unlock>
 8009cd0:	42a3      	cmp	r3, r4
 8009cd2:	d908      	bls.n	8009ce6 <_free_r+0x42>
 8009cd4:	6820      	ldr	r0, [r4, #0]
 8009cd6:	1821      	adds	r1, r4, r0
 8009cd8:	428b      	cmp	r3, r1
 8009cda:	bf01      	itttt	eq
 8009cdc:	6819      	ldreq	r1, [r3, #0]
 8009cde:	685b      	ldreq	r3, [r3, #4]
 8009ce0:	1809      	addeq	r1, r1, r0
 8009ce2:	6021      	streq	r1, [r4, #0]
 8009ce4:	e7ed      	b.n	8009cc2 <_free_r+0x1e>
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	b10b      	cbz	r3, 8009cf0 <_free_r+0x4c>
 8009cec:	42a3      	cmp	r3, r4
 8009cee:	d9fa      	bls.n	8009ce6 <_free_r+0x42>
 8009cf0:	6811      	ldr	r1, [r2, #0]
 8009cf2:	1850      	adds	r0, r2, r1
 8009cf4:	42a0      	cmp	r0, r4
 8009cf6:	d10b      	bne.n	8009d10 <_free_r+0x6c>
 8009cf8:	6820      	ldr	r0, [r4, #0]
 8009cfa:	4401      	add	r1, r0
 8009cfc:	1850      	adds	r0, r2, r1
 8009cfe:	4283      	cmp	r3, r0
 8009d00:	6011      	str	r1, [r2, #0]
 8009d02:	d1e0      	bne.n	8009cc6 <_free_r+0x22>
 8009d04:	6818      	ldr	r0, [r3, #0]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	6053      	str	r3, [r2, #4]
 8009d0a:	4408      	add	r0, r1
 8009d0c:	6010      	str	r0, [r2, #0]
 8009d0e:	e7da      	b.n	8009cc6 <_free_r+0x22>
 8009d10:	d902      	bls.n	8009d18 <_free_r+0x74>
 8009d12:	230c      	movs	r3, #12
 8009d14:	602b      	str	r3, [r5, #0]
 8009d16:	e7d6      	b.n	8009cc6 <_free_r+0x22>
 8009d18:	6820      	ldr	r0, [r4, #0]
 8009d1a:	1821      	adds	r1, r4, r0
 8009d1c:	428b      	cmp	r3, r1
 8009d1e:	bf04      	itt	eq
 8009d20:	6819      	ldreq	r1, [r3, #0]
 8009d22:	685b      	ldreq	r3, [r3, #4]
 8009d24:	6063      	str	r3, [r4, #4]
 8009d26:	bf04      	itt	eq
 8009d28:	1809      	addeq	r1, r1, r0
 8009d2a:	6021      	streq	r1, [r4, #0]
 8009d2c:	6054      	str	r4, [r2, #4]
 8009d2e:	e7ca      	b.n	8009cc6 <_free_r+0x22>
 8009d30:	bd38      	pop	{r3, r4, r5, pc}
 8009d32:	bf00      	nop
 8009d34:	20000670 	.word	0x20000670

08009d38 <sbrk_aligned>:
 8009d38:	b570      	push	{r4, r5, r6, lr}
 8009d3a:	4e0f      	ldr	r6, [pc, #60]	@ (8009d78 <sbrk_aligned+0x40>)
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	6831      	ldr	r1, [r6, #0]
 8009d40:	4605      	mov	r5, r0
 8009d42:	b911      	cbnz	r1, 8009d4a <sbrk_aligned+0x12>
 8009d44:	f000 fba6 	bl	800a494 <_sbrk_r>
 8009d48:	6030      	str	r0, [r6, #0]
 8009d4a:	4621      	mov	r1, r4
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	f000 fba1 	bl	800a494 <_sbrk_r>
 8009d52:	1c43      	adds	r3, r0, #1
 8009d54:	d103      	bne.n	8009d5e <sbrk_aligned+0x26>
 8009d56:	f04f 34ff 	mov.w	r4, #4294967295
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	bd70      	pop	{r4, r5, r6, pc}
 8009d5e:	1cc4      	adds	r4, r0, #3
 8009d60:	f024 0403 	bic.w	r4, r4, #3
 8009d64:	42a0      	cmp	r0, r4
 8009d66:	d0f8      	beq.n	8009d5a <sbrk_aligned+0x22>
 8009d68:	1a21      	subs	r1, r4, r0
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	f000 fb92 	bl	800a494 <_sbrk_r>
 8009d70:	3001      	adds	r0, #1
 8009d72:	d1f2      	bne.n	8009d5a <sbrk_aligned+0x22>
 8009d74:	e7ef      	b.n	8009d56 <sbrk_aligned+0x1e>
 8009d76:	bf00      	nop
 8009d78:	2000066c 	.word	0x2000066c

08009d7c <_malloc_r>:
 8009d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d80:	1ccd      	adds	r5, r1, #3
 8009d82:	f025 0503 	bic.w	r5, r5, #3
 8009d86:	3508      	adds	r5, #8
 8009d88:	2d0c      	cmp	r5, #12
 8009d8a:	bf38      	it	cc
 8009d8c:	250c      	movcc	r5, #12
 8009d8e:	2d00      	cmp	r5, #0
 8009d90:	4606      	mov	r6, r0
 8009d92:	db01      	blt.n	8009d98 <_malloc_r+0x1c>
 8009d94:	42a9      	cmp	r1, r5
 8009d96:	d904      	bls.n	8009da2 <_malloc_r+0x26>
 8009d98:	230c      	movs	r3, #12
 8009d9a:	6033      	str	r3, [r6, #0]
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009da2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e78 <_malloc_r+0xfc>
 8009da6:	f000 f869 	bl	8009e7c <__malloc_lock>
 8009daa:	f8d8 3000 	ldr.w	r3, [r8]
 8009dae:	461c      	mov	r4, r3
 8009db0:	bb44      	cbnz	r4, 8009e04 <_malloc_r+0x88>
 8009db2:	4629      	mov	r1, r5
 8009db4:	4630      	mov	r0, r6
 8009db6:	f7ff ffbf 	bl	8009d38 <sbrk_aligned>
 8009dba:	1c43      	adds	r3, r0, #1
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	d158      	bne.n	8009e72 <_malloc_r+0xf6>
 8009dc0:	f8d8 4000 	ldr.w	r4, [r8]
 8009dc4:	4627      	mov	r7, r4
 8009dc6:	2f00      	cmp	r7, #0
 8009dc8:	d143      	bne.n	8009e52 <_malloc_r+0xd6>
 8009dca:	2c00      	cmp	r4, #0
 8009dcc:	d04b      	beq.n	8009e66 <_malloc_r+0xea>
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	4639      	mov	r1, r7
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	eb04 0903 	add.w	r9, r4, r3
 8009dd8:	f000 fb5c 	bl	800a494 <_sbrk_r>
 8009ddc:	4581      	cmp	r9, r0
 8009dde:	d142      	bne.n	8009e66 <_malloc_r+0xea>
 8009de0:	6821      	ldr	r1, [r4, #0]
 8009de2:	1a6d      	subs	r5, r5, r1
 8009de4:	4629      	mov	r1, r5
 8009de6:	4630      	mov	r0, r6
 8009de8:	f7ff ffa6 	bl	8009d38 <sbrk_aligned>
 8009dec:	3001      	adds	r0, #1
 8009dee:	d03a      	beq.n	8009e66 <_malloc_r+0xea>
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	442b      	add	r3, r5
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	f8d8 3000 	ldr.w	r3, [r8]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	bb62      	cbnz	r2, 8009e58 <_malloc_r+0xdc>
 8009dfe:	f8c8 7000 	str.w	r7, [r8]
 8009e02:	e00f      	b.n	8009e24 <_malloc_r+0xa8>
 8009e04:	6822      	ldr	r2, [r4, #0]
 8009e06:	1b52      	subs	r2, r2, r5
 8009e08:	d420      	bmi.n	8009e4c <_malloc_r+0xd0>
 8009e0a:	2a0b      	cmp	r2, #11
 8009e0c:	d917      	bls.n	8009e3e <_malloc_r+0xc2>
 8009e0e:	1961      	adds	r1, r4, r5
 8009e10:	42a3      	cmp	r3, r4
 8009e12:	6025      	str	r5, [r4, #0]
 8009e14:	bf18      	it	ne
 8009e16:	6059      	strne	r1, [r3, #4]
 8009e18:	6863      	ldr	r3, [r4, #4]
 8009e1a:	bf08      	it	eq
 8009e1c:	f8c8 1000 	streq.w	r1, [r8]
 8009e20:	5162      	str	r2, [r4, r5]
 8009e22:	604b      	str	r3, [r1, #4]
 8009e24:	4630      	mov	r0, r6
 8009e26:	f000 f82f 	bl	8009e88 <__malloc_unlock>
 8009e2a:	f104 000b 	add.w	r0, r4, #11
 8009e2e:	1d23      	adds	r3, r4, #4
 8009e30:	f020 0007 	bic.w	r0, r0, #7
 8009e34:	1ac2      	subs	r2, r0, r3
 8009e36:	bf1c      	itt	ne
 8009e38:	1a1b      	subne	r3, r3, r0
 8009e3a:	50a3      	strne	r3, [r4, r2]
 8009e3c:	e7af      	b.n	8009d9e <_malloc_r+0x22>
 8009e3e:	6862      	ldr	r2, [r4, #4]
 8009e40:	42a3      	cmp	r3, r4
 8009e42:	bf0c      	ite	eq
 8009e44:	f8c8 2000 	streq.w	r2, [r8]
 8009e48:	605a      	strne	r2, [r3, #4]
 8009e4a:	e7eb      	b.n	8009e24 <_malloc_r+0xa8>
 8009e4c:	4623      	mov	r3, r4
 8009e4e:	6864      	ldr	r4, [r4, #4]
 8009e50:	e7ae      	b.n	8009db0 <_malloc_r+0x34>
 8009e52:	463c      	mov	r4, r7
 8009e54:	687f      	ldr	r7, [r7, #4]
 8009e56:	e7b6      	b.n	8009dc6 <_malloc_r+0x4a>
 8009e58:	461a      	mov	r2, r3
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	42a3      	cmp	r3, r4
 8009e5e:	d1fb      	bne.n	8009e58 <_malloc_r+0xdc>
 8009e60:	2300      	movs	r3, #0
 8009e62:	6053      	str	r3, [r2, #4]
 8009e64:	e7de      	b.n	8009e24 <_malloc_r+0xa8>
 8009e66:	230c      	movs	r3, #12
 8009e68:	6033      	str	r3, [r6, #0]
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f000 f80c 	bl	8009e88 <__malloc_unlock>
 8009e70:	e794      	b.n	8009d9c <_malloc_r+0x20>
 8009e72:	6005      	str	r5, [r0, #0]
 8009e74:	e7d6      	b.n	8009e24 <_malloc_r+0xa8>
 8009e76:	bf00      	nop
 8009e78:	20000670 	.word	0x20000670

08009e7c <__malloc_lock>:
 8009e7c:	4801      	ldr	r0, [pc, #4]	@ (8009e84 <__malloc_lock+0x8>)
 8009e7e:	f7ff bf0f 	b.w	8009ca0 <__retarget_lock_acquire_recursive>
 8009e82:	bf00      	nop
 8009e84:	20000668 	.word	0x20000668

08009e88 <__malloc_unlock>:
 8009e88:	4801      	ldr	r0, [pc, #4]	@ (8009e90 <__malloc_unlock+0x8>)
 8009e8a:	f7ff bf0a 	b.w	8009ca2 <__retarget_lock_release_recursive>
 8009e8e:	bf00      	nop
 8009e90:	20000668 	.word	0x20000668

08009e94 <__ssputs_r>:
 8009e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e98:	688e      	ldr	r6, [r1, #8]
 8009e9a:	461f      	mov	r7, r3
 8009e9c:	42be      	cmp	r6, r7
 8009e9e:	680b      	ldr	r3, [r1, #0]
 8009ea0:	4682      	mov	sl, r0
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	4690      	mov	r8, r2
 8009ea6:	d82d      	bhi.n	8009f04 <__ssputs_r+0x70>
 8009ea8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009eac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009eb0:	d026      	beq.n	8009f00 <__ssputs_r+0x6c>
 8009eb2:	6965      	ldr	r5, [r4, #20]
 8009eb4:	6909      	ldr	r1, [r1, #16]
 8009eb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009eba:	eba3 0901 	sub.w	r9, r3, r1
 8009ebe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ec2:	1c7b      	adds	r3, r7, #1
 8009ec4:	444b      	add	r3, r9
 8009ec6:	106d      	asrs	r5, r5, #1
 8009ec8:	429d      	cmp	r5, r3
 8009eca:	bf38      	it	cc
 8009ecc:	461d      	movcc	r5, r3
 8009ece:	0553      	lsls	r3, r2, #21
 8009ed0:	d527      	bpl.n	8009f22 <__ssputs_r+0x8e>
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	f7ff ff52 	bl	8009d7c <_malloc_r>
 8009ed8:	4606      	mov	r6, r0
 8009eda:	b360      	cbz	r0, 8009f36 <__ssputs_r+0xa2>
 8009edc:	6921      	ldr	r1, [r4, #16]
 8009ede:	464a      	mov	r2, r9
 8009ee0:	f000 fae8 	bl	800a4b4 <memcpy>
 8009ee4:	89a3      	ldrh	r3, [r4, #12]
 8009ee6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eee:	81a3      	strh	r3, [r4, #12]
 8009ef0:	6126      	str	r6, [r4, #16]
 8009ef2:	6165      	str	r5, [r4, #20]
 8009ef4:	444e      	add	r6, r9
 8009ef6:	eba5 0509 	sub.w	r5, r5, r9
 8009efa:	6026      	str	r6, [r4, #0]
 8009efc:	60a5      	str	r5, [r4, #8]
 8009efe:	463e      	mov	r6, r7
 8009f00:	42be      	cmp	r6, r7
 8009f02:	d900      	bls.n	8009f06 <__ssputs_r+0x72>
 8009f04:	463e      	mov	r6, r7
 8009f06:	6820      	ldr	r0, [r4, #0]
 8009f08:	4632      	mov	r2, r6
 8009f0a:	4641      	mov	r1, r8
 8009f0c:	f000 faa8 	bl	800a460 <memmove>
 8009f10:	68a3      	ldr	r3, [r4, #8]
 8009f12:	1b9b      	subs	r3, r3, r6
 8009f14:	60a3      	str	r3, [r4, #8]
 8009f16:	6823      	ldr	r3, [r4, #0]
 8009f18:	4433      	add	r3, r6
 8009f1a:	6023      	str	r3, [r4, #0]
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f22:	462a      	mov	r2, r5
 8009f24:	f000 fad4 	bl	800a4d0 <_realloc_r>
 8009f28:	4606      	mov	r6, r0
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	d1e0      	bne.n	8009ef0 <__ssputs_r+0x5c>
 8009f2e:	6921      	ldr	r1, [r4, #16]
 8009f30:	4650      	mov	r0, sl
 8009f32:	f7ff feb7 	bl	8009ca4 <_free_r>
 8009f36:	230c      	movs	r3, #12
 8009f38:	f8ca 3000 	str.w	r3, [sl]
 8009f3c:	89a3      	ldrh	r3, [r4, #12]
 8009f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f42:	81a3      	strh	r3, [r4, #12]
 8009f44:	f04f 30ff 	mov.w	r0, #4294967295
 8009f48:	e7e9      	b.n	8009f1e <__ssputs_r+0x8a>
	...

08009f4c <_svfiprintf_r>:
 8009f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f50:	4698      	mov	r8, r3
 8009f52:	898b      	ldrh	r3, [r1, #12]
 8009f54:	061b      	lsls	r3, r3, #24
 8009f56:	b09d      	sub	sp, #116	@ 0x74
 8009f58:	4607      	mov	r7, r0
 8009f5a:	460d      	mov	r5, r1
 8009f5c:	4614      	mov	r4, r2
 8009f5e:	d510      	bpl.n	8009f82 <_svfiprintf_r+0x36>
 8009f60:	690b      	ldr	r3, [r1, #16]
 8009f62:	b973      	cbnz	r3, 8009f82 <_svfiprintf_r+0x36>
 8009f64:	2140      	movs	r1, #64	@ 0x40
 8009f66:	f7ff ff09 	bl	8009d7c <_malloc_r>
 8009f6a:	6028      	str	r0, [r5, #0]
 8009f6c:	6128      	str	r0, [r5, #16]
 8009f6e:	b930      	cbnz	r0, 8009f7e <_svfiprintf_r+0x32>
 8009f70:	230c      	movs	r3, #12
 8009f72:	603b      	str	r3, [r7, #0]
 8009f74:	f04f 30ff 	mov.w	r0, #4294967295
 8009f78:	b01d      	add	sp, #116	@ 0x74
 8009f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7e:	2340      	movs	r3, #64	@ 0x40
 8009f80:	616b      	str	r3, [r5, #20]
 8009f82:	2300      	movs	r3, #0
 8009f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f86:	2320      	movs	r3, #32
 8009f88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f90:	2330      	movs	r3, #48	@ 0x30
 8009f92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a130 <_svfiprintf_r+0x1e4>
 8009f96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f9a:	f04f 0901 	mov.w	r9, #1
 8009f9e:	4623      	mov	r3, r4
 8009fa0:	469a      	mov	sl, r3
 8009fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fa6:	b10a      	cbz	r2, 8009fac <_svfiprintf_r+0x60>
 8009fa8:	2a25      	cmp	r2, #37	@ 0x25
 8009faa:	d1f9      	bne.n	8009fa0 <_svfiprintf_r+0x54>
 8009fac:	ebba 0b04 	subs.w	fp, sl, r4
 8009fb0:	d00b      	beq.n	8009fca <_svfiprintf_r+0x7e>
 8009fb2:	465b      	mov	r3, fp
 8009fb4:	4622      	mov	r2, r4
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	4638      	mov	r0, r7
 8009fba:	f7ff ff6b 	bl	8009e94 <__ssputs_r>
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	f000 80a7 	beq.w	800a112 <_svfiprintf_r+0x1c6>
 8009fc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fc6:	445a      	add	r2, fp
 8009fc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fca:	f89a 3000 	ldrb.w	r3, [sl]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 809f 	beq.w	800a112 <_svfiprintf_r+0x1c6>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fde:	f10a 0a01 	add.w	sl, sl, #1
 8009fe2:	9304      	str	r3, [sp, #16]
 8009fe4:	9307      	str	r3, [sp, #28]
 8009fe6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fea:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fec:	4654      	mov	r4, sl
 8009fee:	2205      	movs	r2, #5
 8009ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff4:	484e      	ldr	r0, [pc, #312]	@ (800a130 <_svfiprintf_r+0x1e4>)
 8009ff6:	f7f6 f8eb 	bl	80001d0 <memchr>
 8009ffa:	9a04      	ldr	r2, [sp, #16]
 8009ffc:	b9d8      	cbnz	r0, 800a036 <_svfiprintf_r+0xea>
 8009ffe:	06d0      	lsls	r0, r2, #27
 800a000:	bf44      	itt	mi
 800a002:	2320      	movmi	r3, #32
 800a004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a008:	0711      	lsls	r1, r2, #28
 800a00a:	bf44      	itt	mi
 800a00c:	232b      	movmi	r3, #43	@ 0x2b
 800a00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a012:	f89a 3000 	ldrb.w	r3, [sl]
 800a016:	2b2a      	cmp	r3, #42	@ 0x2a
 800a018:	d015      	beq.n	800a046 <_svfiprintf_r+0xfa>
 800a01a:	9a07      	ldr	r2, [sp, #28]
 800a01c:	4654      	mov	r4, sl
 800a01e:	2000      	movs	r0, #0
 800a020:	f04f 0c0a 	mov.w	ip, #10
 800a024:	4621      	mov	r1, r4
 800a026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a02a:	3b30      	subs	r3, #48	@ 0x30
 800a02c:	2b09      	cmp	r3, #9
 800a02e:	d94b      	bls.n	800a0c8 <_svfiprintf_r+0x17c>
 800a030:	b1b0      	cbz	r0, 800a060 <_svfiprintf_r+0x114>
 800a032:	9207      	str	r2, [sp, #28]
 800a034:	e014      	b.n	800a060 <_svfiprintf_r+0x114>
 800a036:	eba0 0308 	sub.w	r3, r0, r8
 800a03a:	fa09 f303 	lsl.w	r3, r9, r3
 800a03e:	4313      	orrs	r3, r2
 800a040:	9304      	str	r3, [sp, #16]
 800a042:	46a2      	mov	sl, r4
 800a044:	e7d2      	b.n	8009fec <_svfiprintf_r+0xa0>
 800a046:	9b03      	ldr	r3, [sp, #12]
 800a048:	1d19      	adds	r1, r3, #4
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	9103      	str	r1, [sp, #12]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	bfbb      	ittet	lt
 800a052:	425b      	neglt	r3, r3
 800a054:	f042 0202 	orrlt.w	r2, r2, #2
 800a058:	9307      	strge	r3, [sp, #28]
 800a05a:	9307      	strlt	r3, [sp, #28]
 800a05c:	bfb8      	it	lt
 800a05e:	9204      	strlt	r2, [sp, #16]
 800a060:	7823      	ldrb	r3, [r4, #0]
 800a062:	2b2e      	cmp	r3, #46	@ 0x2e
 800a064:	d10a      	bne.n	800a07c <_svfiprintf_r+0x130>
 800a066:	7863      	ldrb	r3, [r4, #1]
 800a068:	2b2a      	cmp	r3, #42	@ 0x2a
 800a06a:	d132      	bne.n	800a0d2 <_svfiprintf_r+0x186>
 800a06c:	9b03      	ldr	r3, [sp, #12]
 800a06e:	1d1a      	adds	r2, r3, #4
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	9203      	str	r2, [sp, #12]
 800a074:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a078:	3402      	adds	r4, #2
 800a07a:	9305      	str	r3, [sp, #20]
 800a07c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a140 <_svfiprintf_r+0x1f4>
 800a080:	7821      	ldrb	r1, [r4, #0]
 800a082:	2203      	movs	r2, #3
 800a084:	4650      	mov	r0, sl
 800a086:	f7f6 f8a3 	bl	80001d0 <memchr>
 800a08a:	b138      	cbz	r0, 800a09c <_svfiprintf_r+0x150>
 800a08c:	9b04      	ldr	r3, [sp, #16]
 800a08e:	eba0 000a 	sub.w	r0, r0, sl
 800a092:	2240      	movs	r2, #64	@ 0x40
 800a094:	4082      	lsls	r2, r0
 800a096:	4313      	orrs	r3, r2
 800a098:	3401      	adds	r4, #1
 800a09a:	9304      	str	r3, [sp, #16]
 800a09c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a0:	4824      	ldr	r0, [pc, #144]	@ (800a134 <_svfiprintf_r+0x1e8>)
 800a0a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0a6:	2206      	movs	r2, #6
 800a0a8:	f7f6 f892 	bl	80001d0 <memchr>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d036      	beq.n	800a11e <_svfiprintf_r+0x1d2>
 800a0b0:	4b21      	ldr	r3, [pc, #132]	@ (800a138 <_svfiprintf_r+0x1ec>)
 800a0b2:	bb1b      	cbnz	r3, 800a0fc <_svfiprintf_r+0x1b0>
 800a0b4:	9b03      	ldr	r3, [sp, #12]
 800a0b6:	3307      	adds	r3, #7
 800a0b8:	f023 0307 	bic.w	r3, r3, #7
 800a0bc:	3308      	adds	r3, #8
 800a0be:	9303      	str	r3, [sp, #12]
 800a0c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c2:	4433      	add	r3, r6
 800a0c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0c6:	e76a      	b.n	8009f9e <_svfiprintf_r+0x52>
 800a0c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0cc:	460c      	mov	r4, r1
 800a0ce:	2001      	movs	r0, #1
 800a0d0:	e7a8      	b.n	800a024 <_svfiprintf_r+0xd8>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	3401      	adds	r4, #1
 800a0d6:	9305      	str	r3, [sp, #20]
 800a0d8:	4619      	mov	r1, r3
 800a0da:	f04f 0c0a 	mov.w	ip, #10
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0e4:	3a30      	subs	r2, #48	@ 0x30
 800a0e6:	2a09      	cmp	r2, #9
 800a0e8:	d903      	bls.n	800a0f2 <_svfiprintf_r+0x1a6>
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0c6      	beq.n	800a07c <_svfiprintf_r+0x130>
 800a0ee:	9105      	str	r1, [sp, #20]
 800a0f0:	e7c4      	b.n	800a07c <_svfiprintf_r+0x130>
 800a0f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e7f0      	b.n	800a0de <_svfiprintf_r+0x192>
 800a0fc:	ab03      	add	r3, sp, #12
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	462a      	mov	r2, r5
 800a102:	4b0e      	ldr	r3, [pc, #56]	@ (800a13c <_svfiprintf_r+0x1f0>)
 800a104:	a904      	add	r1, sp, #16
 800a106:	4638      	mov	r0, r7
 800a108:	f3af 8000 	nop.w
 800a10c:	1c42      	adds	r2, r0, #1
 800a10e:	4606      	mov	r6, r0
 800a110:	d1d6      	bne.n	800a0c0 <_svfiprintf_r+0x174>
 800a112:	89ab      	ldrh	r3, [r5, #12]
 800a114:	065b      	lsls	r3, r3, #25
 800a116:	f53f af2d 	bmi.w	8009f74 <_svfiprintf_r+0x28>
 800a11a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a11c:	e72c      	b.n	8009f78 <_svfiprintf_r+0x2c>
 800a11e:	ab03      	add	r3, sp, #12
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	462a      	mov	r2, r5
 800a124:	4b05      	ldr	r3, [pc, #20]	@ (800a13c <_svfiprintf_r+0x1f0>)
 800a126:	a904      	add	r1, sp, #16
 800a128:	4638      	mov	r0, r7
 800a12a:	f000 f879 	bl	800a220 <_printf_i>
 800a12e:	e7ed      	b.n	800a10c <_svfiprintf_r+0x1c0>
 800a130:	0800d5cc 	.word	0x0800d5cc
 800a134:	0800d5d6 	.word	0x0800d5d6
 800a138:	00000000 	.word	0x00000000
 800a13c:	08009e95 	.word	0x08009e95
 800a140:	0800d5d2 	.word	0x0800d5d2

0800a144 <_printf_common>:
 800a144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a148:	4616      	mov	r6, r2
 800a14a:	4698      	mov	r8, r3
 800a14c:	688a      	ldr	r2, [r1, #8]
 800a14e:	690b      	ldr	r3, [r1, #16]
 800a150:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a154:	4293      	cmp	r3, r2
 800a156:	bfb8      	it	lt
 800a158:	4613      	movlt	r3, r2
 800a15a:	6033      	str	r3, [r6, #0]
 800a15c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a160:	4607      	mov	r7, r0
 800a162:	460c      	mov	r4, r1
 800a164:	b10a      	cbz	r2, 800a16a <_printf_common+0x26>
 800a166:	3301      	adds	r3, #1
 800a168:	6033      	str	r3, [r6, #0]
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	0699      	lsls	r1, r3, #26
 800a16e:	bf42      	ittt	mi
 800a170:	6833      	ldrmi	r3, [r6, #0]
 800a172:	3302      	addmi	r3, #2
 800a174:	6033      	strmi	r3, [r6, #0]
 800a176:	6825      	ldr	r5, [r4, #0]
 800a178:	f015 0506 	ands.w	r5, r5, #6
 800a17c:	d106      	bne.n	800a18c <_printf_common+0x48>
 800a17e:	f104 0a19 	add.w	sl, r4, #25
 800a182:	68e3      	ldr	r3, [r4, #12]
 800a184:	6832      	ldr	r2, [r6, #0]
 800a186:	1a9b      	subs	r3, r3, r2
 800a188:	42ab      	cmp	r3, r5
 800a18a:	dc26      	bgt.n	800a1da <_printf_common+0x96>
 800a18c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a190:	6822      	ldr	r2, [r4, #0]
 800a192:	3b00      	subs	r3, #0
 800a194:	bf18      	it	ne
 800a196:	2301      	movne	r3, #1
 800a198:	0692      	lsls	r2, r2, #26
 800a19a:	d42b      	bmi.n	800a1f4 <_printf_common+0xb0>
 800a19c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a1a0:	4641      	mov	r1, r8
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	47c8      	blx	r9
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	d01e      	beq.n	800a1e8 <_printf_common+0xa4>
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	6922      	ldr	r2, [r4, #16]
 800a1ae:	f003 0306 	and.w	r3, r3, #6
 800a1b2:	2b04      	cmp	r3, #4
 800a1b4:	bf02      	ittt	eq
 800a1b6:	68e5      	ldreq	r5, [r4, #12]
 800a1b8:	6833      	ldreq	r3, [r6, #0]
 800a1ba:	1aed      	subeq	r5, r5, r3
 800a1bc:	68a3      	ldr	r3, [r4, #8]
 800a1be:	bf0c      	ite	eq
 800a1c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1c4:	2500      	movne	r5, #0
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	bfc4      	itt	gt
 800a1ca:	1a9b      	subgt	r3, r3, r2
 800a1cc:	18ed      	addgt	r5, r5, r3
 800a1ce:	2600      	movs	r6, #0
 800a1d0:	341a      	adds	r4, #26
 800a1d2:	42b5      	cmp	r5, r6
 800a1d4:	d11a      	bne.n	800a20c <_printf_common+0xc8>
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	e008      	b.n	800a1ec <_printf_common+0xa8>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	4652      	mov	r2, sl
 800a1de:	4641      	mov	r1, r8
 800a1e0:	4638      	mov	r0, r7
 800a1e2:	47c8      	blx	r9
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d103      	bne.n	800a1f0 <_printf_common+0xac>
 800a1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f0:	3501      	adds	r5, #1
 800a1f2:	e7c6      	b.n	800a182 <_printf_common+0x3e>
 800a1f4:	18e1      	adds	r1, r4, r3
 800a1f6:	1c5a      	adds	r2, r3, #1
 800a1f8:	2030      	movs	r0, #48	@ 0x30
 800a1fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1fe:	4422      	add	r2, r4
 800a200:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a204:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a208:	3302      	adds	r3, #2
 800a20a:	e7c7      	b.n	800a19c <_printf_common+0x58>
 800a20c:	2301      	movs	r3, #1
 800a20e:	4622      	mov	r2, r4
 800a210:	4641      	mov	r1, r8
 800a212:	4638      	mov	r0, r7
 800a214:	47c8      	blx	r9
 800a216:	3001      	adds	r0, #1
 800a218:	d0e6      	beq.n	800a1e8 <_printf_common+0xa4>
 800a21a:	3601      	adds	r6, #1
 800a21c:	e7d9      	b.n	800a1d2 <_printf_common+0x8e>
	...

0800a220 <_printf_i>:
 800a220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a224:	7e0f      	ldrb	r7, [r1, #24]
 800a226:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a228:	2f78      	cmp	r7, #120	@ 0x78
 800a22a:	4691      	mov	r9, r2
 800a22c:	4680      	mov	r8, r0
 800a22e:	460c      	mov	r4, r1
 800a230:	469a      	mov	sl, r3
 800a232:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a236:	d807      	bhi.n	800a248 <_printf_i+0x28>
 800a238:	2f62      	cmp	r7, #98	@ 0x62
 800a23a:	d80a      	bhi.n	800a252 <_printf_i+0x32>
 800a23c:	2f00      	cmp	r7, #0
 800a23e:	f000 80d2 	beq.w	800a3e6 <_printf_i+0x1c6>
 800a242:	2f58      	cmp	r7, #88	@ 0x58
 800a244:	f000 80b9 	beq.w	800a3ba <_printf_i+0x19a>
 800a248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a24c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a250:	e03a      	b.n	800a2c8 <_printf_i+0xa8>
 800a252:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a256:	2b15      	cmp	r3, #21
 800a258:	d8f6      	bhi.n	800a248 <_printf_i+0x28>
 800a25a:	a101      	add	r1, pc, #4	@ (adr r1, 800a260 <_printf_i+0x40>)
 800a25c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a260:	0800a2b9 	.word	0x0800a2b9
 800a264:	0800a2cd 	.word	0x0800a2cd
 800a268:	0800a249 	.word	0x0800a249
 800a26c:	0800a249 	.word	0x0800a249
 800a270:	0800a249 	.word	0x0800a249
 800a274:	0800a249 	.word	0x0800a249
 800a278:	0800a2cd 	.word	0x0800a2cd
 800a27c:	0800a249 	.word	0x0800a249
 800a280:	0800a249 	.word	0x0800a249
 800a284:	0800a249 	.word	0x0800a249
 800a288:	0800a249 	.word	0x0800a249
 800a28c:	0800a3cd 	.word	0x0800a3cd
 800a290:	0800a2f7 	.word	0x0800a2f7
 800a294:	0800a387 	.word	0x0800a387
 800a298:	0800a249 	.word	0x0800a249
 800a29c:	0800a249 	.word	0x0800a249
 800a2a0:	0800a3ef 	.word	0x0800a3ef
 800a2a4:	0800a249 	.word	0x0800a249
 800a2a8:	0800a2f7 	.word	0x0800a2f7
 800a2ac:	0800a249 	.word	0x0800a249
 800a2b0:	0800a249 	.word	0x0800a249
 800a2b4:	0800a38f 	.word	0x0800a38f
 800a2b8:	6833      	ldr	r3, [r6, #0]
 800a2ba:	1d1a      	adds	r2, r3, #4
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	6032      	str	r2, [r6, #0]
 800a2c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e09d      	b.n	800a408 <_printf_i+0x1e8>
 800a2cc:	6833      	ldr	r3, [r6, #0]
 800a2ce:	6820      	ldr	r0, [r4, #0]
 800a2d0:	1d19      	adds	r1, r3, #4
 800a2d2:	6031      	str	r1, [r6, #0]
 800a2d4:	0606      	lsls	r6, r0, #24
 800a2d6:	d501      	bpl.n	800a2dc <_printf_i+0xbc>
 800a2d8:	681d      	ldr	r5, [r3, #0]
 800a2da:	e003      	b.n	800a2e4 <_printf_i+0xc4>
 800a2dc:	0645      	lsls	r5, r0, #25
 800a2de:	d5fb      	bpl.n	800a2d8 <_printf_i+0xb8>
 800a2e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2e4:	2d00      	cmp	r5, #0
 800a2e6:	da03      	bge.n	800a2f0 <_printf_i+0xd0>
 800a2e8:	232d      	movs	r3, #45	@ 0x2d
 800a2ea:	426d      	negs	r5, r5
 800a2ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2f0:	4859      	ldr	r0, [pc, #356]	@ (800a458 <_printf_i+0x238>)
 800a2f2:	230a      	movs	r3, #10
 800a2f4:	e011      	b.n	800a31a <_printf_i+0xfa>
 800a2f6:	6821      	ldr	r1, [r4, #0]
 800a2f8:	6833      	ldr	r3, [r6, #0]
 800a2fa:	0608      	lsls	r0, r1, #24
 800a2fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a300:	d402      	bmi.n	800a308 <_printf_i+0xe8>
 800a302:	0649      	lsls	r1, r1, #25
 800a304:	bf48      	it	mi
 800a306:	b2ad      	uxthmi	r5, r5
 800a308:	2f6f      	cmp	r7, #111	@ 0x6f
 800a30a:	4853      	ldr	r0, [pc, #332]	@ (800a458 <_printf_i+0x238>)
 800a30c:	6033      	str	r3, [r6, #0]
 800a30e:	bf14      	ite	ne
 800a310:	230a      	movne	r3, #10
 800a312:	2308      	moveq	r3, #8
 800a314:	2100      	movs	r1, #0
 800a316:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a31a:	6866      	ldr	r6, [r4, #4]
 800a31c:	60a6      	str	r6, [r4, #8]
 800a31e:	2e00      	cmp	r6, #0
 800a320:	bfa2      	ittt	ge
 800a322:	6821      	ldrge	r1, [r4, #0]
 800a324:	f021 0104 	bicge.w	r1, r1, #4
 800a328:	6021      	strge	r1, [r4, #0]
 800a32a:	b90d      	cbnz	r5, 800a330 <_printf_i+0x110>
 800a32c:	2e00      	cmp	r6, #0
 800a32e:	d04b      	beq.n	800a3c8 <_printf_i+0x1a8>
 800a330:	4616      	mov	r6, r2
 800a332:	fbb5 f1f3 	udiv	r1, r5, r3
 800a336:	fb03 5711 	mls	r7, r3, r1, r5
 800a33a:	5dc7      	ldrb	r7, [r0, r7]
 800a33c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a340:	462f      	mov	r7, r5
 800a342:	42bb      	cmp	r3, r7
 800a344:	460d      	mov	r5, r1
 800a346:	d9f4      	bls.n	800a332 <_printf_i+0x112>
 800a348:	2b08      	cmp	r3, #8
 800a34a:	d10b      	bne.n	800a364 <_printf_i+0x144>
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	07df      	lsls	r7, r3, #31
 800a350:	d508      	bpl.n	800a364 <_printf_i+0x144>
 800a352:	6923      	ldr	r3, [r4, #16]
 800a354:	6861      	ldr	r1, [r4, #4]
 800a356:	4299      	cmp	r1, r3
 800a358:	bfde      	ittt	le
 800a35a:	2330      	movle	r3, #48	@ 0x30
 800a35c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a360:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a364:	1b92      	subs	r2, r2, r6
 800a366:	6122      	str	r2, [r4, #16]
 800a368:	f8cd a000 	str.w	sl, [sp]
 800a36c:	464b      	mov	r3, r9
 800a36e:	aa03      	add	r2, sp, #12
 800a370:	4621      	mov	r1, r4
 800a372:	4640      	mov	r0, r8
 800a374:	f7ff fee6 	bl	800a144 <_printf_common>
 800a378:	3001      	adds	r0, #1
 800a37a:	d14a      	bne.n	800a412 <_printf_i+0x1f2>
 800a37c:	f04f 30ff 	mov.w	r0, #4294967295
 800a380:	b004      	add	sp, #16
 800a382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	f043 0320 	orr.w	r3, r3, #32
 800a38c:	6023      	str	r3, [r4, #0]
 800a38e:	4833      	ldr	r0, [pc, #204]	@ (800a45c <_printf_i+0x23c>)
 800a390:	2778      	movs	r7, #120	@ 0x78
 800a392:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	6831      	ldr	r1, [r6, #0]
 800a39a:	061f      	lsls	r7, r3, #24
 800a39c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a3a0:	d402      	bmi.n	800a3a8 <_printf_i+0x188>
 800a3a2:	065f      	lsls	r7, r3, #25
 800a3a4:	bf48      	it	mi
 800a3a6:	b2ad      	uxthmi	r5, r5
 800a3a8:	6031      	str	r1, [r6, #0]
 800a3aa:	07d9      	lsls	r1, r3, #31
 800a3ac:	bf44      	itt	mi
 800a3ae:	f043 0320 	orrmi.w	r3, r3, #32
 800a3b2:	6023      	strmi	r3, [r4, #0]
 800a3b4:	b11d      	cbz	r5, 800a3be <_printf_i+0x19e>
 800a3b6:	2310      	movs	r3, #16
 800a3b8:	e7ac      	b.n	800a314 <_printf_i+0xf4>
 800a3ba:	4827      	ldr	r0, [pc, #156]	@ (800a458 <_printf_i+0x238>)
 800a3bc:	e7e9      	b.n	800a392 <_printf_i+0x172>
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	f023 0320 	bic.w	r3, r3, #32
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	e7f6      	b.n	800a3b6 <_printf_i+0x196>
 800a3c8:	4616      	mov	r6, r2
 800a3ca:	e7bd      	b.n	800a348 <_printf_i+0x128>
 800a3cc:	6833      	ldr	r3, [r6, #0]
 800a3ce:	6825      	ldr	r5, [r4, #0]
 800a3d0:	6961      	ldr	r1, [r4, #20]
 800a3d2:	1d18      	adds	r0, r3, #4
 800a3d4:	6030      	str	r0, [r6, #0]
 800a3d6:	062e      	lsls	r6, r5, #24
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	d501      	bpl.n	800a3e0 <_printf_i+0x1c0>
 800a3dc:	6019      	str	r1, [r3, #0]
 800a3de:	e002      	b.n	800a3e6 <_printf_i+0x1c6>
 800a3e0:	0668      	lsls	r0, r5, #25
 800a3e2:	d5fb      	bpl.n	800a3dc <_printf_i+0x1bc>
 800a3e4:	8019      	strh	r1, [r3, #0]
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	6123      	str	r3, [r4, #16]
 800a3ea:	4616      	mov	r6, r2
 800a3ec:	e7bc      	b.n	800a368 <_printf_i+0x148>
 800a3ee:	6833      	ldr	r3, [r6, #0]
 800a3f0:	1d1a      	adds	r2, r3, #4
 800a3f2:	6032      	str	r2, [r6, #0]
 800a3f4:	681e      	ldr	r6, [r3, #0]
 800a3f6:	6862      	ldr	r2, [r4, #4]
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f7f5 fee8 	bl	80001d0 <memchr>
 800a400:	b108      	cbz	r0, 800a406 <_printf_i+0x1e6>
 800a402:	1b80      	subs	r0, r0, r6
 800a404:	6060      	str	r0, [r4, #4]
 800a406:	6863      	ldr	r3, [r4, #4]
 800a408:	6123      	str	r3, [r4, #16]
 800a40a:	2300      	movs	r3, #0
 800a40c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a410:	e7aa      	b.n	800a368 <_printf_i+0x148>
 800a412:	6923      	ldr	r3, [r4, #16]
 800a414:	4632      	mov	r2, r6
 800a416:	4649      	mov	r1, r9
 800a418:	4640      	mov	r0, r8
 800a41a:	47d0      	blx	sl
 800a41c:	3001      	adds	r0, #1
 800a41e:	d0ad      	beq.n	800a37c <_printf_i+0x15c>
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	079b      	lsls	r3, r3, #30
 800a424:	d413      	bmi.n	800a44e <_printf_i+0x22e>
 800a426:	68e0      	ldr	r0, [r4, #12]
 800a428:	9b03      	ldr	r3, [sp, #12]
 800a42a:	4298      	cmp	r0, r3
 800a42c:	bfb8      	it	lt
 800a42e:	4618      	movlt	r0, r3
 800a430:	e7a6      	b.n	800a380 <_printf_i+0x160>
 800a432:	2301      	movs	r3, #1
 800a434:	4632      	mov	r2, r6
 800a436:	4649      	mov	r1, r9
 800a438:	4640      	mov	r0, r8
 800a43a:	47d0      	blx	sl
 800a43c:	3001      	adds	r0, #1
 800a43e:	d09d      	beq.n	800a37c <_printf_i+0x15c>
 800a440:	3501      	adds	r5, #1
 800a442:	68e3      	ldr	r3, [r4, #12]
 800a444:	9903      	ldr	r1, [sp, #12]
 800a446:	1a5b      	subs	r3, r3, r1
 800a448:	42ab      	cmp	r3, r5
 800a44a:	dcf2      	bgt.n	800a432 <_printf_i+0x212>
 800a44c:	e7eb      	b.n	800a426 <_printf_i+0x206>
 800a44e:	2500      	movs	r5, #0
 800a450:	f104 0619 	add.w	r6, r4, #25
 800a454:	e7f5      	b.n	800a442 <_printf_i+0x222>
 800a456:	bf00      	nop
 800a458:	0800d5dd 	.word	0x0800d5dd
 800a45c:	0800d5ee 	.word	0x0800d5ee

0800a460 <memmove>:
 800a460:	4288      	cmp	r0, r1
 800a462:	b510      	push	{r4, lr}
 800a464:	eb01 0402 	add.w	r4, r1, r2
 800a468:	d902      	bls.n	800a470 <memmove+0x10>
 800a46a:	4284      	cmp	r4, r0
 800a46c:	4623      	mov	r3, r4
 800a46e:	d807      	bhi.n	800a480 <memmove+0x20>
 800a470:	1e43      	subs	r3, r0, #1
 800a472:	42a1      	cmp	r1, r4
 800a474:	d008      	beq.n	800a488 <memmove+0x28>
 800a476:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a47a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a47e:	e7f8      	b.n	800a472 <memmove+0x12>
 800a480:	4402      	add	r2, r0
 800a482:	4601      	mov	r1, r0
 800a484:	428a      	cmp	r2, r1
 800a486:	d100      	bne.n	800a48a <memmove+0x2a>
 800a488:	bd10      	pop	{r4, pc}
 800a48a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a48e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a492:	e7f7      	b.n	800a484 <memmove+0x24>

0800a494 <_sbrk_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4d06      	ldr	r5, [pc, #24]	@ (800a4b0 <_sbrk_r+0x1c>)
 800a498:	2300      	movs	r3, #0
 800a49a:	4604      	mov	r4, r0
 800a49c:	4608      	mov	r0, r1
 800a49e:	602b      	str	r3, [r5, #0]
 800a4a0:	f7f8 fed6 	bl	8003250 <_sbrk>
 800a4a4:	1c43      	adds	r3, r0, #1
 800a4a6:	d102      	bne.n	800a4ae <_sbrk_r+0x1a>
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	b103      	cbz	r3, 800a4ae <_sbrk_r+0x1a>
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	bd38      	pop	{r3, r4, r5, pc}
 800a4b0:	20000664 	.word	0x20000664

0800a4b4 <memcpy>:
 800a4b4:	440a      	add	r2, r1
 800a4b6:	4291      	cmp	r1, r2
 800a4b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4bc:	d100      	bne.n	800a4c0 <memcpy+0xc>
 800a4be:	4770      	bx	lr
 800a4c0:	b510      	push	{r4, lr}
 800a4c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4ca:	4291      	cmp	r1, r2
 800a4cc:	d1f9      	bne.n	800a4c2 <memcpy+0xe>
 800a4ce:	bd10      	pop	{r4, pc}

0800a4d0 <_realloc_r>:
 800a4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d4:	4680      	mov	r8, r0
 800a4d6:	4615      	mov	r5, r2
 800a4d8:	460c      	mov	r4, r1
 800a4da:	b921      	cbnz	r1, 800a4e6 <_realloc_r+0x16>
 800a4dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e0:	4611      	mov	r1, r2
 800a4e2:	f7ff bc4b 	b.w	8009d7c <_malloc_r>
 800a4e6:	b92a      	cbnz	r2, 800a4f4 <_realloc_r+0x24>
 800a4e8:	f7ff fbdc 	bl	8009ca4 <_free_r>
 800a4ec:	2400      	movs	r4, #0
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f4:	f000 f81a 	bl	800a52c <_malloc_usable_size_r>
 800a4f8:	4285      	cmp	r5, r0
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	d802      	bhi.n	800a504 <_realloc_r+0x34>
 800a4fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a502:	d8f4      	bhi.n	800a4ee <_realloc_r+0x1e>
 800a504:	4629      	mov	r1, r5
 800a506:	4640      	mov	r0, r8
 800a508:	f7ff fc38 	bl	8009d7c <_malloc_r>
 800a50c:	4607      	mov	r7, r0
 800a50e:	2800      	cmp	r0, #0
 800a510:	d0ec      	beq.n	800a4ec <_realloc_r+0x1c>
 800a512:	42b5      	cmp	r5, r6
 800a514:	462a      	mov	r2, r5
 800a516:	4621      	mov	r1, r4
 800a518:	bf28      	it	cs
 800a51a:	4632      	movcs	r2, r6
 800a51c:	f7ff ffca 	bl	800a4b4 <memcpy>
 800a520:	4621      	mov	r1, r4
 800a522:	4640      	mov	r0, r8
 800a524:	f7ff fbbe 	bl	8009ca4 <_free_r>
 800a528:	463c      	mov	r4, r7
 800a52a:	e7e0      	b.n	800a4ee <_realloc_r+0x1e>

0800a52c <_malloc_usable_size_r>:
 800a52c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a530:	1f18      	subs	r0, r3, #4
 800a532:	2b00      	cmp	r3, #0
 800a534:	bfbc      	itt	lt
 800a536:	580b      	ldrlt	r3, [r1, r0]
 800a538:	18c0      	addlt	r0, r0, r3
 800a53a:	4770      	bx	lr

0800a53c <_init>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	bf00      	nop
 800a540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a542:	bc08      	pop	{r3}
 800a544:	469e      	mov	lr, r3
 800a546:	4770      	bx	lr

0800a548 <_fini>:
 800a548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54a:	bf00      	nop
 800a54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a54e:	bc08      	pop	{r3}
 800a550:	469e      	mov	lr, r3
 800a552:	4770      	bx	lr
