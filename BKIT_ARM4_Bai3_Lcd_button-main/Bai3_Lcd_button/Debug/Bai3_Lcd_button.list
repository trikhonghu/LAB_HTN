
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000580c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003028  08005994  08005994  00006994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089bc  080089bc  0000a024  2**0
                  CONTENTS
  4 .ARM          00000008  080089bc  080089bc  000099bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089c4  080089c4  0000a024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089c4  080089c4  000099c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089c8  080089c8  000099c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080089cc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a024  2**0
                  CONTENTS
 10 .bss          0000019c  20000024  20000024  0000a024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  0000a024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b87  00000000  00000000  0000a054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000353a  00000000  00000000  0001dbdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  00021118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e04  00000000  00000000  00022360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023833  00000000  00000000  00023164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018812  00000000  00000000  00046997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfb22  00000000  00000000  0005f1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012eccb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a2c  00000000  00000000  0012ed10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  0013373c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800597c 	.word	0x0800597c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	0800597c 	.word	0x0800597c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2108      	movs	r1, #8
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <button_init+0x14>)
 80004c2:	f002 fb2b 	bl	8002b1c <HAL_GPIO_WritePin>
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40020c00 	.word	0x40020c00

080004d0 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2108      	movs	r1, #8
 80004da:	482f      	ldr	r0, [pc, #188]	@ (8000598 <button_Scan+0xc8>)
 80004dc:	f002 fb1e 	bl	8002b1c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2108      	movs	r1, #8
 80004e4:	482c      	ldr	r0, [pc, #176]	@ (8000598 <button_Scan+0xc8>)
 80004e6:	f002 fb19 	bl	8002b1c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004ea:	230a      	movs	r3, #10
 80004ec:	2202      	movs	r2, #2
 80004ee:	492b      	ldr	r1, [pc, #172]	@ (800059c <button_Scan+0xcc>)
 80004f0:	482b      	ldr	r0, [pc, #172]	@ (80005a0 <button_Scan+0xd0>)
 80004f2:	f003 f98a 	bl	800380a <HAL_SPI_Receive>
	  int button_index = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80004fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004fe:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000500:	2300      	movs	r3, #0
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	e03f      	b.n	8000586 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2b00      	cmp	r3, #0
 800050a:	db06      	blt.n	800051a <button_Scan+0x4a>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b03      	cmp	r3, #3
 8000510:	dc03      	bgt.n	800051a <button_Scan+0x4a>
			  button_index = i + 4;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3304      	adds	r3, #4
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	e018      	b.n	800054c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b03      	cmp	r3, #3
 800051e:	dd07      	ble.n	8000530 <button_Scan+0x60>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b07      	cmp	r3, #7
 8000524:	dc04      	bgt.n	8000530 <button_Scan+0x60>
			  button_index = 7 - i;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f1c3 0307 	rsb	r3, r3, #7
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	e00d      	b.n	800054c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b07      	cmp	r3, #7
 8000534:	dd06      	ble.n	8000544 <button_Scan+0x74>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b0b      	cmp	r3, #11
 800053a:	dc03      	bgt.n	8000544 <button_Scan+0x74>
			  button_index = i + 4;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3304      	adds	r3, #4
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	e003      	b.n	800054c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f1c3 0317 	rsb	r3, r3, #23
 800054a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800054c:	4b13      	ldr	r3, [pc, #76]	@ (800059c <button_Scan+0xcc>)
 800054e:	881a      	ldrh	r2, [r3, #0]
 8000550:	897b      	ldrh	r3, [r7, #10]
 8000552:	4013      	ands	r3, r2
 8000554:	b29b      	uxth	r3, r3
 8000556:	2b00      	cmp	r3, #0
 8000558:	d005      	beq.n	8000566 <button_Scan+0x96>
 800055a:	4a12      	ldr	r2, [pc, #72]	@ (80005a4 <button_Scan+0xd4>)
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	2100      	movs	r1, #0
 8000560:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000564:	e009      	b.n	800057a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000566:	4a0f      	ldr	r2, [pc, #60]	@ (80005a4 <button_Scan+0xd4>)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800056e:	3301      	adds	r3, #1
 8000570:	b299      	uxth	r1, r3
 8000572:	4a0c      	ldr	r2, [pc, #48]	@ (80005a4 <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800057a:	897b      	ldrh	r3, [r7, #10]
 800057c:	085b      	lsrs	r3, r3, #1
 800057e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3301      	adds	r3, #1
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	ddbc      	ble.n	8000506 <button_Scan+0x36>
	  }
}
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020c00 	.word	0x40020c00
 800059c:	20000060 	.word	0x20000060
 80005a0:	200000d8 	.word	0x200000d8
 80005a4:	20000040 	.word	0x20000040

080005a8 <blink_light>:

uint8_t col_mode = 0; // 1: RED, 2: YELLOW, 3: GREEN
uint16_t period = 0;


void blink_light(uint8_t col_mode){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	if (blink_state == 0){
 80005b2:	4b29      	ldr	r3, [pc, #164]	@ (8000658 <blink_light+0xb0>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d117      	bne.n	80005ea <blink_light+0x42>
		left_light(0);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 fa40 	bl	8000a40 <left_light>
		right_light(0);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 fa65 	bl	8000a90 <right_light>
		if(flag_timer5 == 1){
 80005c6:	4b25      	ldr	r3, [pc, #148]	@ (800065c <blink_light+0xb4>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d13f      	bne.n	800064e <blink_light+0xa6>
			blink_state = 1;
 80005ce:	4b22      	ldr	r3, [pc, #136]	@ (8000658 <blink_light+0xb0>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	701a      	strb	r2, [r3, #0]
			left_light(0);
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 fa33 	bl	8000a40 <left_light>
			right_light(0);
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 fa58 	bl	8000a90 <right_light>
			setTimer5(500);
 80005e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005e4:	f001 fc2a 	bl	8001e3c <setTimer5>
			setTimer5(500);
			left_light(0);
			right_light(0);
		}
	}
}
 80005e8:	e031      	b.n	800064e <blink_light+0xa6>
	else if (blink_state == 1){
 80005ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000658 <blink_light+0xb0>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d12d      	bne.n	800064e <blink_light+0xa6>
		if (col_mode == 1){
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d106      	bne.n	8000606 <blink_light+0x5e>
			left_light(1);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 fa21 	bl	8000a40 <left_light>
			right_light(1);
 80005fe:	2001      	movs	r0, #1
 8000600:	f000 fa46 	bl	8000a90 <right_light>
 8000604:	e012      	b.n	800062c <blink_light+0x84>
		else if (col_mode == 3){
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2b03      	cmp	r3, #3
 800060a:	d106      	bne.n	800061a <blink_light+0x72>
			left_light(3);
 800060c:	2003      	movs	r0, #3
 800060e:	f000 fa17 	bl	8000a40 <left_light>
			right_light(3);
 8000612:	2003      	movs	r0, #3
 8000614:	f000 fa3c 	bl	8000a90 <right_light>
 8000618:	e008      	b.n	800062c <blink_light+0x84>
		else if (col_mode == 2){
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b02      	cmp	r3, #2
 800061e:	d105      	bne.n	800062c <blink_light+0x84>
			left_light(2);
 8000620:	2002      	movs	r0, #2
 8000622:	f000 fa0d 	bl	8000a40 <left_light>
			right_light(2);
 8000626:	2002      	movs	r0, #2
 8000628:	f000 fa32 	bl	8000a90 <right_light>
		if (flag_timer5 == 1){
 800062c:	4b0b      	ldr	r3, [pc, #44]	@ (800065c <blink_light+0xb4>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d10c      	bne.n	800064e <blink_light+0xa6>
			blink_state = 0;
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <blink_light+0xb0>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
			setTimer5(500);
 800063a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800063e:	f001 fbfd 	bl	8001e3c <setTimer5>
			left_light(0);
 8000642:	2000      	movs	r0, #0
 8000644:	f000 f9fc 	bl	8000a40 <left_light>
			right_light(0);
 8000648:	2000      	movs	r0, #0
 800064a:	f000 fa21 	bl	8000a90 <right_light>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200000ba 	.word	0x200000ba
 800065c:	200000d2 	.word	0x200000d2

08000660 <show_frequency>:

void show_frequency(uint16_t period){
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af04      	add	r7, sp, #16
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
	lcd_ShowStr(10, 270, "Period: ", BLUE, WHITE, 16, 1);
 800066a:	2301      	movs	r3, #1
 800066c:	9302      	str	r3, [sp, #8]
 800066e:	2310      	movs	r3, #16
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	231f      	movs	r3, #31
 800067a:	4a0c      	ldr	r2, [pc, #48]	@ (80006ac <show_frequency+0x4c>)
 800067c:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000680:	200a      	movs	r0, #10
 8000682:	f001 f995 	bl	80019b0 <lcd_ShowStr>
	lcd_ShowIntNum(70, 270, period, 8, BRED, WHITE, 16);
 8000686:	88fa      	ldrh	r2, [r7, #6]
 8000688:	2310      	movs	r3, #16
 800068a:	9302      	str	r3, [sp, #8]
 800068c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2308      	movs	r3, #8
 800069a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800069e:	2046      	movs	r0, #70	@ 0x46
 80006a0:	f000 fe8c 	bl	80013bc <lcd_ShowIntNum>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	08005994 	.word	0x08005994

080006b0 <traffic_lights_operation>:

void traffic_lights_operation(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af04      	add	r7, sp, #16
	if (mode == 1){
 80006b6:	4b75      	ldr	r3, [pc, #468]	@ (800088c <traffic_lights_operation+0x1dc>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d102      	bne.n	80006c4 <traffic_lights_operation+0x14>
		traffic_lights();
 80006be:	f000 fac3 	bl	8000c48 <traffic_lights>
				lcd_ShowStr(10, 290, "Can't change YELLOW's period.", BLUE, WHITE, 16, 1);
			}
			count_yellow = temp_count[2];
		}
	}
}
 80006c2:	e0e0      	b.n	8000886 <traffic_lights_operation+0x1d6>
	else if (mode == 2){
 80006c4:	4b71      	ldr	r3, [pc, #452]	@ (800088c <traffic_lights_operation+0x1dc>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	d147      	bne.n	800075c <traffic_lights_operation+0xac>
		temp_count[1] = 0;
 80006cc:	4b70      	ldr	r3, [pc, #448]	@ (8000890 <traffic_lights_operation+0x1e0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	805a      	strh	r2, [r3, #2]
		temp_count[2] = 0;
 80006d2:	4b6f      	ldr	r3, [pc, #444]	@ (8000890 <traffic_lights_operation+0x1e0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	809a      	strh	r2, [r3, #4]
		if(temp_count[0] == 0)
 80006d8:	4b6d      	ldr	r3, [pc, #436]	@ (8000890 <traffic_lights_operation+0x1e0>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d103      	bne.n	80006e8 <traffic_lights_operation+0x38>
			temp_count[0] =count_red;
 80006e0:	4b6c      	ldr	r3, [pc, #432]	@ (8000894 <traffic_lights_operation+0x1e4>)
 80006e2:	881a      	ldrh	r2, [r3, #0]
 80006e4:	4b6a      	ldr	r3, [pc, #424]	@ (8000890 <traffic_lights_operation+0x1e0>)
 80006e6:	801a      	strh	r2, [r3, #0]
		blink_light(1);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f7ff ff5d 	bl	80005a8 <blink_light>
		if (button_count[1] == 1) {
 80006ee:	4b6a      	ldr	r3, [pc, #424]	@ (8000898 <traffic_lights_operation+0x1e8>)
 80006f0:	885b      	ldrh	r3, [r3, #2]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d106      	bne.n	8000704 <traffic_lights_operation+0x54>
			temp_count[0] = temp_count[0] + 1000;
 80006f6:	4b66      	ldr	r3, [pc, #408]	@ (8000890 <traffic_lights_operation+0x1e0>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b63      	ldr	r3, [pc, #396]	@ (8000890 <traffic_lights_operation+0x1e0>)
 8000702:	801a      	strh	r2, [r3, #0]
		show_frequency(temp_count[0]);
 8000704:	4b62      	ldr	r3, [pc, #392]	@ (8000890 <traffic_lights_operation+0x1e0>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffa9 	bl	8000660 <show_frequency>
		if (button_count[2] == 1){
 800070e:	4b62      	ldr	r3, [pc, #392]	@ (8000898 <traffic_lights_operation+0x1e8>)
 8000710:	889b      	ldrh	r3, [r3, #4]
 8000712:	2b01      	cmp	r3, #1
 8000714:	f040 80b7 	bne.w	8000886 <traffic_lights_operation+0x1d6>
			if (temp_count[0] > 99000 || temp_count[0] < (count_green + count_yellow)) {
 8000718:	4b5d      	ldr	r3, [pc, #372]	@ (8000890 <traffic_lights_operation+0x1e0>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4b5f      	ldr	r3, [pc, #380]	@ (800089c <traffic_lights_operation+0x1ec>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	4619      	mov	r1, r3
 8000724:	4b5e      	ldr	r3, [pc, #376]	@ (80008a0 <traffic_lights_operation+0x1f0>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	440b      	add	r3, r1
 800072a:	429a      	cmp	r2, r3
 800072c:	da11      	bge.n	8000752 <traffic_lights_operation+0xa2>
				temp_count[0] = count_red;
 800072e:	4b59      	ldr	r3, [pc, #356]	@ (8000894 <traffic_lights_operation+0x1e4>)
 8000730:	881a      	ldrh	r2, [r3, #0]
 8000732:	4b57      	ldr	r3, [pc, #348]	@ (8000890 <traffic_lights_operation+0x1e0>)
 8000734:	801a      	strh	r2, [r3, #0]
				lcd_ShowStr(10, 290, "Can't change RED's period.", BLUE, WHITE, 16, 1);
 8000736:	2301      	movs	r3, #1
 8000738:	9302      	str	r3, [sp, #8]
 800073a:	2310      	movs	r3, #16
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	231f      	movs	r3, #31
 8000746:	4a57      	ldr	r2, [pc, #348]	@ (80008a4 <traffic_lights_operation+0x1f4>)
 8000748:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800074c:	200a      	movs	r0, #10
 800074e:	f001 f92f 	bl	80019b0 <lcd_ShowStr>
			count_red = temp_count[0];
 8000752:	4b4f      	ldr	r3, [pc, #316]	@ (8000890 <traffic_lights_operation+0x1e0>)
 8000754:	881a      	ldrh	r2, [r3, #0]
 8000756:	4b4f      	ldr	r3, [pc, #316]	@ (8000894 <traffic_lights_operation+0x1e4>)
 8000758:	801a      	strh	r2, [r3, #0]
}
 800075a:	e094      	b.n	8000886 <traffic_lights_operation+0x1d6>
	else if (mode == 3){
 800075c:	4b4b      	ldr	r3, [pc, #300]	@ (800088c <traffic_lights_operation+0x1dc>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b03      	cmp	r3, #3
 8000762:	d146      	bne.n	80007f2 <traffic_lights_operation+0x142>
		temp_count[0] = 0;
 8000764:	4b4a      	ldr	r3, [pc, #296]	@ (8000890 <traffic_lights_operation+0x1e0>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
		temp_count[2] = 0;
 800076a:	4b49      	ldr	r3, [pc, #292]	@ (8000890 <traffic_lights_operation+0x1e0>)
 800076c:	2200      	movs	r2, #0
 800076e:	809a      	strh	r2, [r3, #4]
		if(temp_count[1] == 0)
 8000770:	4b47      	ldr	r3, [pc, #284]	@ (8000890 <traffic_lights_operation+0x1e0>)
 8000772:	885b      	ldrh	r3, [r3, #2]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d103      	bne.n	8000780 <traffic_lights_operation+0xd0>
			temp_count[1] =count_green;
 8000778:	4b48      	ldr	r3, [pc, #288]	@ (800089c <traffic_lights_operation+0x1ec>)
 800077a:	881a      	ldrh	r2, [r3, #0]
 800077c:	4b44      	ldr	r3, [pc, #272]	@ (8000890 <traffic_lights_operation+0x1e0>)
 800077e:	805a      	strh	r2, [r3, #2]
		blink_light(3);
 8000780:	2003      	movs	r0, #3
 8000782:	f7ff ff11 	bl	80005a8 <blink_light>
		if (button_count[1] == 1) {
 8000786:	4b44      	ldr	r3, [pc, #272]	@ (8000898 <traffic_lights_operation+0x1e8>)
 8000788:	885b      	ldrh	r3, [r3, #2]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d106      	bne.n	800079c <traffic_lights_operation+0xec>
			temp_count[1] = temp_count[1] + 1000;
 800078e:	4b40      	ldr	r3, [pc, #256]	@ (8000890 <traffic_lights_operation+0x1e0>)
 8000790:	885b      	ldrh	r3, [r3, #2]
 8000792:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000796:	b29a      	uxth	r2, r3
 8000798:	4b3d      	ldr	r3, [pc, #244]	@ (8000890 <traffic_lights_operation+0x1e0>)
 800079a:	805a      	strh	r2, [r3, #2]
		show_frequency(temp_count[1]);
 800079c:	4b3c      	ldr	r3, [pc, #240]	@ (8000890 <traffic_lights_operation+0x1e0>)
 800079e:	885b      	ldrh	r3, [r3, #2]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff5d 	bl	8000660 <show_frequency>
		if (button_count[2] == 1){
 80007a6:	4b3c      	ldr	r3, [pc, #240]	@ (8000898 <traffic_lights_operation+0x1e8>)
 80007a8:	889b      	ldrh	r3, [r3, #4]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d16b      	bne.n	8000886 <traffic_lights_operation+0x1d6>
			if (temp_count[1] > 99000 || count_red < (temp_count[1] + count_yellow)) {
 80007ae:	4b39      	ldr	r3, [pc, #228]	@ (8000894 <traffic_lights_operation+0x1e4>)
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	461a      	mov	r2, r3
 80007b4:	4b36      	ldr	r3, [pc, #216]	@ (8000890 <traffic_lights_operation+0x1e0>)
 80007b6:	885b      	ldrh	r3, [r3, #2]
 80007b8:	4619      	mov	r1, r3
 80007ba:	4b39      	ldr	r3, [pc, #228]	@ (80008a0 <traffic_lights_operation+0x1f0>)
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	440b      	add	r3, r1
 80007c0:	429a      	cmp	r2, r3
 80007c2:	da11      	bge.n	80007e8 <traffic_lights_operation+0x138>
				temp_count[1] = 1000;
 80007c4:	4b32      	ldr	r3, [pc, #200]	@ (8000890 <traffic_lights_operation+0x1e0>)
 80007c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007ca:	805a      	strh	r2, [r3, #2]
				lcd_ShowStr(10, 290, "Can't change GREEN's period.", BLUE, WHITE, 16, 1);
 80007cc:	2301      	movs	r3, #1
 80007ce:	9302      	str	r3, [sp, #8]
 80007d0:	2310      	movs	r3, #16
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	231f      	movs	r3, #31
 80007dc:	4a32      	ldr	r2, [pc, #200]	@ (80008a8 <traffic_lights_operation+0x1f8>)
 80007de:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80007e2:	200a      	movs	r0, #10
 80007e4:	f001 f8e4 	bl	80019b0 <lcd_ShowStr>
			count_green = temp_count;
 80007e8:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <traffic_lights_operation+0x1e0>)
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	4b2b      	ldr	r3, [pc, #172]	@ (800089c <traffic_lights_operation+0x1ec>)
 80007ee:	801a      	strh	r2, [r3, #0]
}
 80007f0:	e049      	b.n	8000886 <traffic_lights_operation+0x1d6>
	else if (mode == 4){
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <traffic_lights_operation+0x1dc>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	d145      	bne.n	8000886 <traffic_lights_operation+0x1d6>
		temp_count[1] = 0;
 80007fa:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <traffic_lights_operation+0x1e0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	805a      	strh	r2, [r3, #2]
		temp_count[0] = 0;
 8000800:	4b23      	ldr	r3, [pc, #140]	@ (8000890 <traffic_lights_operation+0x1e0>)
 8000802:	2200      	movs	r2, #0
 8000804:	801a      	strh	r2, [r3, #0]
		if(temp_count[2] == 0)
 8000806:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <traffic_lights_operation+0x1e0>)
 8000808:	889b      	ldrh	r3, [r3, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d103      	bne.n	8000816 <traffic_lights_operation+0x166>
			temp_count[2] =count_yellow;
 800080e:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <traffic_lights_operation+0x1f0>)
 8000810:	881a      	ldrh	r2, [r3, #0]
 8000812:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <traffic_lights_operation+0x1e0>)
 8000814:	809a      	strh	r2, [r3, #4]
		blink_light(2);
 8000816:	2002      	movs	r0, #2
 8000818:	f7ff fec6 	bl	80005a8 <blink_light>
		if (button_count[1] == 1) {
 800081c:	4b1e      	ldr	r3, [pc, #120]	@ (8000898 <traffic_lights_operation+0x1e8>)
 800081e:	885b      	ldrh	r3, [r3, #2]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d106      	bne.n	8000832 <traffic_lights_operation+0x182>
			temp_count[2] = temp_count[2] + 1000;
 8000824:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <traffic_lights_operation+0x1e0>)
 8000826:	889b      	ldrh	r3, [r3, #4]
 8000828:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800082c:	b29a      	uxth	r2, r3
 800082e:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <traffic_lights_operation+0x1e0>)
 8000830:	809a      	strh	r2, [r3, #4]
		show_frequency(temp_count[2]);
 8000832:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <traffic_lights_operation+0x1e0>)
 8000834:	889b      	ldrh	r3, [r3, #4]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff12 	bl	8000660 <show_frequency>
		if (button_count[2] == 1){
 800083c:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <traffic_lights_operation+0x1e8>)
 800083e:	889b      	ldrh	r3, [r3, #4]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d120      	bne.n	8000886 <traffic_lights_operation+0x1d6>
			if (temp_count[2] > 99000 || count_red < (count_green + temp_count[2])) {
 8000844:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <traffic_lights_operation+0x1e4>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <traffic_lights_operation+0x1ec>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	4619      	mov	r1, r3
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <traffic_lights_operation+0x1e0>)
 8000852:	889b      	ldrh	r3, [r3, #4]
 8000854:	440b      	add	r3, r1
 8000856:	429a      	cmp	r2, r3
 8000858:	da11      	bge.n	800087e <traffic_lights_operation+0x1ce>
				temp_count[2] = 1000;
 800085a:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <traffic_lights_operation+0x1e0>)
 800085c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000860:	809a      	strh	r2, [r3, #4]
				lcd_ShowStr(10, 290, "Can't change YELLOW's period.", BLUE, WHITE, 16, 1);
 8000862:	2301      	movs	r3, #1
 8000864:	9302      	str	r3, [sp, #8]
 8000866:	2310      	movs	r3, #16
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	231f      	movs	r3, #31
 8000872:	4a0e      	ldr	r2, [pc, #56]	@ (80008ac <traffic_lights_operation+0x1fc>)
 8000874:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000878:	200a      	movs	r0, #10
 800087a:	f001 f899 	bl	80019b0 <lcd_ShowStr>
			count_yellow = temp_count[2];
 800087e:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <traffic_lights_operation+0x1e0>)
 8000880:	889a      	ldrh	r2, [r3, #4]
 8000882:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <traffic_lights_operation+0x1f0>)
 8000884:	801a      	strh	r2, [r3, #0]
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000001 	.word	0x20000001
 8000890:	20000008 	.word	0x20000008
 8000894:	20000002 	.word	0x20000002
 8000898:	20000040 	.word	0x20000040
 800089c:	20000006 	.word	0x20000006
 80008a0:	20000004 	.word	0x20000004
 80008a4:	080059a0 	.word	0x080059a0
 80008a8:	080059bc 	.word	0x080059bc
 80008ac:	080059dc 	.word	0x080059dc

080008b0 <draw_filled_retangle>:
 *      Author: DELL
 */

#include "fsm_traffic.h"

void draw_filled_retangle(uint16_t x, uint16_t y_start){
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af02      	add	r7, sp, #8
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	80fb      	strh	r3, [r7, #6]
 80008bc:	4613      	mov	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	lcd_Fill(x - 35, y_start - 35, x + 35, y_start + 175, BLACK);
 80008c0:	88fb      	ldrh	r3, [r7, #6]
 80008c2:	3b23      	subs	r3, #35	@ 0x23
 80008c4:	b298      	uxth	r0, r3
 80008c6:	88bb      	ldrh	r3, [r7, #4]
 80008c8:	3b23      	subs	r3, #35	@ 0x23
 80008ca:	b299      	uxth	r1, r3
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	3323      	adds	r3, #35	@ 0x23
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	88bb      	ldrh	r3, [r7, #4]
 80008d4:	33af      	adds	r3, #175	@ 0xaf
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	2400      	movs	r4, #0
 80008da:	9400      	str	r4, [sp, #0]
 80008dc:	f000 fc34 	bl	8001148 <lcd_Fill>
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd90      	pop	{r4, r7, pc}

080008e8 <off_state>:

void off_state(uint16_t x, uint16_t y_start){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	4603      	mov	r3, r0
 80008f0:	460a      	mov	r2, r1
 80008f2:	80fb      	strh	r3, [r7, #6]
 80008f4:	4613      	mov	r3, r2
 80008f6:	80bb      	strh	r3, [r7, #4]
	lcd_DrawCircle(x, y_start, GRAY, 30, 1);
 80008f8:	88f8      	ldrh	r0, [r7, #6]
 80008fa:	88b9      	ldrh	r1, [r7, #4]
 80008fc:	2301      	movs	r3, #1
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	231e      	movs	r3, #30
 8000902:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000906:	f000 ffe6 	bl	80018d6 <lcd_DrawCircle>
	lcd_DrawCircle(x, y_start + 70, GRAY, 30, 1);
 800090a:	88f8      	ldrh	r0, [r7, #6]
 800090c:	88bb      	ldrh	r3, [r7, #4]
 800090e:	f103 0146 	add.w	r1, r3, #70	@ 0x46
 8000912:	2301      	movs	r3, #1
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	231e      	movs	r3, #30
 8000918:	f248 4230 	movw	r2, #33840	@ 0x8430
 800091c:	f000 ffdb 	bl	80018d6 <lcd_DrawCircle>
	lcd_DrawCircle(x, y_start + 140, GRAY, 30, 1);
 8000920:	88f8      	ldrh	r0, [r7, #6]
 8000922:	88bb      	ldrh	r3, [r7, #4]
 8000924:	f103 018c 	add.w	r1, r3, #140	@ 0x8c
 8000928:	2301      	movs	r3, #1
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	231e      	movs	r3, #30
 800092e:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000932:	f000 ffd0 	bl	80018d6 <lcd_DrawCircle>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <red_state>:
void red_state(uint16_t x, uint16_t y_start){
 800093e:	b580      	push	{r7, lr}
 8000940:	b084      	sub	sp, #16
 8000942:	af02      	add	r7, sp, #8
 8000944:	4603      	mov	r3, r0
 8000946:	460a      	mov	r2, r1
 8000948:	80fb      	strh	r3, [r7, #6]
 800094a:	4613      	mov	r3, r2
 800094c:	80bb      	strh	r3, [r7, #4]
	lcd_DrawCircle(x, y_start, RED, 30, 1);
 800094e:	88f8      	ldrh	r0, [r7, #6]
 8000950:	88b9      	ldrh	r1, [r7, #4]
 8000952:	2301      	movs	r3, #1
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	231e      	movs	r3, #30
 8000958:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800095c:	f000 ffbb 	bl	80018d6 <lcd_DrawCircle>
	lcd_DrawCircle(x, y_start + 70, GRAY, 30, 1);
 8000960:	88f8      	ldrh	r0, [r7, #6]
 8000962:	88bb      	ldrh	r3, [r7, #4]
 8000964:	f103 0146 	add.w	r1, r3, #70	@ 0x46
 8000968:	2301      	movs	r3, #1
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	231e      	movs	r3, #30
 800096e:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000972:	f000 ffb0 	bl	80018d6 <lcd_DrawCircle>
	lcd_DrawCircle(x, y_start + 140, GRAY, 30, 1);
 8000976:	88f8      	ldrh	r0, [r7, #6]
 8000978:	88bb      	ldrh	r3, [r7, #4]
 800097a:	f103 018c 	add.w	r1, r3, #140	@ 0x8c
 800097e:	2301      	movs	r3, #1
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	231e      	movs	r3, #30
 8000984:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000988:	f000 ffa5 	bl	80018d6 <lcd_DrawCircle>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <yellow_state>:
void yellow_state(uint16_t x, uint16_t y_start){
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af02      	add	r7, sp, #8
 800099a:	4603      	mov	r3, r0
 800099c:	460a      	mov	r2, r1
 800099e:	80fb      	strh	r3, [r7, #6]
 80009a0:	4613      	mov	r3, r2
 80009a2:	80bb      	strh	r3, [r7, #4]
	lcd_DrawCircle(x, y_start, GRAY, 30, 1);
 80009a4:	88f8      	ldrh	r0, [r7, #6]
 80009a6:	88b9      	ldrh	r1, [r7, #4]
 80009a8:	2301      	movs	r3, #1
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	231e      	movs	r3, #30
 80009ae:	f248 4230 	movw	r2, #33840	@ 0x8430
 80009b2:	f000 ff90 	bl	80018d6 <lcd_DrawCircle>
	lcd_DrawCircle(x, y_start + 70, YELLOW, 30, 1);
 80009b6:	88f8      	ldrh	r0, [r7, #6]
 80009b8:	88bb      	ldrh	r3, [r7, #4]
 80009ba:	f103 0146 	add.w	r1, r3, #70	@ 0x46
 80009be:	2301      	movs	r3, #1
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	231e      	movs	r3, #30
 80009c4:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80009c8:	f000 ff85 	bl	80018d6 <lcd_DrawCircle>
	lcd_DrawCircle(x, y_start + 140, GRAY, 30, 1);
 80009cc:	88f8      	ldrh	r0, [r7, #6]
 80009ce:	88bb      	ldrh	r3, [r7, #4]
 80009d0:	f103 018c 	add.w	r1, r3, #140	@ 0x8c
 80009d4:	2301      	movs	r3, #1
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	231e      	movs	r3, #30
 80009da:	f248 4230 	movw	r2, #33840	@ 0x8430
 80009de:	f000 ff7a 	bl	80018d6 <lcd_DrawCircle>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <green_state>:
void green_state(uint16_t x, uint16_t y_start){
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b084      	sub	sp, #16
 80009ee:	af02      	add	r7, sp, #8
 80009f0:	4603      	mov	r3, r0
 80009f2:	460a      	mov	r2, r1
 80009f4:	80fb      	strh	r3, [r7, #6]
 80009f6:	4613      	mov	r3, r2
 80009f8:	80bb      	strh	r3, [r7, #4]
	lcd_DrawCircle(x, y_start, GRAY, 30, 1);
 80009fa:	88f8      	ldrh	r0, [r7, #6]
 80009fc:	88b9      	ldrh	r1, [r7, #4]
 80009fe:	2301      	movs	r3, #1
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	231e      	movs	r3, #30
 8000a04:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000a08:	f000 ff65 	bl	80018d6 <lcd_DrawCircle>
	lcd_DrawCircle(x, y_start + 70, GRAY, 30, 1);
 8000a0c:	88f8      	ldrh	r0, [r7, #6]
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	f103 0146 	add.w	r1, r3, #70	@ 0x46
 8000a14:	2301      	movs	r3, #1
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	231e      	movs	r3, #30
 8000a1a:	f248 4230 	movw	r2, #33840	@ 0x8430
 8000a1e:	f000 ff5a 	bl	80018d6 <lcd_DrawCircle>
	lcd_DrawCircle(x, y_start + 140, GREEN, 30, 1);
 8000a22:	88f8      	ldrh	r0, [r7, #6]
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	f103 018c 	add.w	r1, r3, #140	@ 0x8c
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	231e      	movs	r3, #30
 8000a30:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000a34:	f000 ff4f 	bl	80018d6 <lcd_DrawCircle>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <left_light>:
void left_light(uint8_t col_code){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	if (col_code == 0){
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d104      	bne.n	8000a5a <left_light+0x1a>
		off_state(60, 90);
 8000a50:	215a      	movs	r1, #90	@ 0x5a
 8000a52:	203c      	movs	r0, #60	@ 0x3c
 8000a54:	f7ff ff48 	bl	80008e8 <off_state>
		yellow_state(60, 90);
	}
	else if (col_code == 3){
		green_state(60, 90);
	}
}
 8000a58:	e016      	b.n	8000a88 <left_light+0x48>
	else if (col_code == 1){
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d104      	bne.n	8000a6a <left_light+0x2a>
		red_state(60, 90);
 8000a60:	215a      	movs	r1, #90	@ 0x5a
 8000a62:	203c      	movs	r0, #60	@ 0x3c
 8000a64:	f7ff ff6b 	bl	800093e <red_state>
}
 8000a68:	e00e      	b.n	8000a88 <left_light+0x48>
	else if (col_code == 2){
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d104      	bne.n	8000a7a <left_light+0x3a>
		yellow_state(60, 90);
 8000a70:	215a      	movs	r1, #90	@ 0x5a
 8000a72:	203c      	movs	r0, #60	@ 0x3c
 8000a74:	f7ff ff8e 	bl	8000994 <yellow_state>
}
 8000a78:	e006      	b.n	8000a88 <left_light+0x48>
	else if (col_code == 3){
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b03      	cmp	r3, #3
 8000a7e:	d103      	bne.n	8000a88 <left_light+0x48>
		green_state(60, 90);
 8000a80:	215a      	movs	r1, #90	@ 0x5a
 8000a82:	203c      	movs	r0, #60	@ 0x3c
 8000a84:	f7ff ffb1 	bl	80009ea <green_state>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <right_light>:
void right_light(uint8_t col_code){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
	if(col_code == 0){
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d104      	bne.n	8000aaa <right_light+0x1a>
		off_state(180, 90);
 8000aa0:	215a      	movs	r1, #90	@ 0x5a
 8000aa2:	20b4      	movs	r0, #180	@ 0xb4
 8000aa4:	f7ff ff20 	bl	80008e8 <off_state>
		yellow_state(180, 90);
	}
	else if (col_code == 3){
		green_state(180, 90);
	}
}
 8000aa8:	e016      	b.n	8000ad8 <right_light+0x48>
	else if (col_code == 1){
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d104      	bne.n	8000aba <right_light+0x2a>
		red_state(180, 90);
 8000ab0:	215a      	movs	r1, #90	@ 0x5a
 8000ab2:	20b4      	movs	r0, #180	@ 0xb4
 8000ab4:	f7ff ff43 	bl	800093e <red_state>
}
 8000ab8:	e00e      	b.n	8000ad8 <right_light+0x48>
	else if (col_code == 2){
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d104      	bne.n	8000aca <right_light+0x3a>
		yellow_state(180, 90);
 8000ac0:	215a      	movs	r1, #90	@ 0x5a
 8000ac2:	20b4      	movs	r0, #180	@ 0xb4
 8000ac4:	f7ff ff66 	bl	8000994 <yellow_state>
}
 8000ac8:	e006      	b.n	8000ad8 <right_light+0x48>
	else if (col_code == 3){
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d103      	bne.n	8000ad8 <right_light+0x48>
		green_state(180, 90);
 8000ad0:	215a      	movs	r1, #90	@ 0x5a
 8000ad2:	20b4      	movs	r0, #180	@ 0xb4
 8000ad4:	f7ff ff89 	bl	80009ea <green_state>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <left_light_mode1>:

void left_light_mode1(){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	if (status0 == 0){
 8000ae4:	4b26      	ldr	r3, [pc, #152]	@ (8000b80 <left_light_mode1+0xa0>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10b      	bne.n	8000b04 <left_light_mode1+0x24>
		left_light(0);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f7ff ffa7 	bl	8000a40 <left_light>
		status0 = 1;
 8000af2:	4b23      	ldr	r3, [pc, #140]	@ (8000b80 <left_light_mode1+0xa0>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
		setTimer3(count_red);
 8000af8:	4b22      	ldr	r3, [pc, #136]	@ (8000b84 <left_light_mode1+0xa4>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 f971 	bl	8001de4 <setTimer3>
		if (flag_timer3 == 1){
			status0 = 2;
			setTimer3(count_yellow);
		}
	}
}
 8000b02:	e03a      	b.n	8000b7a <left_light_mode1+0x9a>
	else if (status0 == 1){
 8000b04:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <left_light_mode1+0xa0>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d10f      	bne.n	8000b2c <left_light_mode1+0x4c>
		left_light(1);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f7ff ff97 	bl	8000a40 <left_light>
		if (flag_timer3 == 1){
 8000b12:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <left_light_mode1+0xa8>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d12f      	bne.n	8000b7a <left_light_mode1+0x9a>
			status0 = 3;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <left_light_mode1+0xa0>)
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	701a      	strb	r2, [r3, #0]
			setTimer3(count_green);
 8000b20:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <left_light_mode1+0xac>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 f95d 	bl	8001de4 <setTimer3>
}
 8000b2a:	e026      	b.n	8000b7a <left_light_mode1+0x9a>
	else if (status0 == 2){
 8000b2c:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <left_light_mode1+0xa0>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d10f      	bne.n	8000b54 <left_light_mode1+0x74>
		left_light(2);
 8000b34:	2002      	movs	r0, #2
 8000b36:	f7ff ff83 	bl	8000a40 <left_light>
		if (flag_timer3 == 1){
 8000b3a:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <left_light_mode1+0xa8>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d11b      	bne.n	8000b7a <left_light_mode1+0x9a>
			status0 = 1;
 8000b42:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <left_light_mode1+0xa0>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
			setTimer3(count_red);
 8000b48:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <left_light_mode1+0xa4>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 f949 	bl	8001de4 <setTimer3>
}
 8000b52:	e012      	b.n	8000b7a <left_light_mode1+0x9a>
	else if (status0 == 3){
 8000b54:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <left_light_mode1+0xa0>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d10e      	bne.n	8000b7a <left_light_mode1+0x9a>
		left_light(3);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f7ff ff6f 	bl	8000a40 <left_light>
		if (flag_timer3 == 1){
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <left_light_mode1+0xa8>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d107      	bne.n	8000b7a <left_light_mode1+0x9a>
			status0 = 2;
 8000b6a:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <left_light_mode1+0xa0>)
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	701a      	strb	r2, [r3, #0]
			setTimer3(count_yellow);
 8000b70:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <left_light_mode1+0xb0>)
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 f935 	bl	8001de4 <setTimer3>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000b8 	.word	0x200000b8
 8000b84:	20000002 	.word	0x20000002
 8000b88:	200000ca 	.word	0x200000ca
 8000b8c:	20000006 	.word	0x20000006
 8000b90:	20000004 	.word	0x20000004

08000b94 <right_light_mode1>:
void right_light_mode1(){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	if (status1 == 0){
 8000b98:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <right_light_mode1+0xa0>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10b      	bne.n	8000bb8 <right_light_mode1+0x24>
		right_light(0);
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff ff75 	bl	8000a90 <right_light>
		status1 = 3;
 8000ba6:	4b23      	ldr	r3, [pc, #140]	@ (8000c34 <right_light_mode1+0xa0>)
 8000ba8:	2203      	movs	r2, #3
 8000baa:	701a      	strb	r2, [r3, #0]
		setTimer4(count_green);
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <right_light_mode1+0xa4>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f001 f92d 	bl	8001e10 <setTimer4>
		if (flag_timer4 == 1){
			status1 = 2;
			setTimer4(count_yellow);
		}
	}
}
 8000bb6:	e03a      	b.n	8000c2e <right_light_mode1+0x9a>
	else if (status1 == 1){
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <right_light_mode1+0xa0>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d10f      	bne.n	8000be0 <right_light_mode1+0x4c>
		right_light(1);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff ff65 	bl	8000a90 <right_light>
		if (flag_timer4 == 1){
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c3c <right_light_mode1+0xa8>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d12f      	bne.n	8000c2e <right_light_mode1+0x9a>
			status1 = 3;
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <right_light_mode1+0xa0>)
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	701a      	strb	r2, [r3, #0]
			setTimer4(count_green);
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <right_light_mode1+0xa4>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 f919 	bl	8001e10 <setTimer4>
}
 8000bde:	e026      	b.n	8000c2e <right_light_mode1+0x9a>
	else if (status1 == 2){
 8000be0:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <right_light_mode1+0xa0>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d10f      	bne.n	8000c08 <right_light_mode1+0x74>
		right_light(2);
 8000be8:	2002      	movs	r0, #2
 8000bea:	f7ff ff51 	bl	8000a90 <right_light>
		if (flag_timer4 == 1){
 8000bee:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <right_light_mode1+0xa8>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d11b      	bne.n	8000c2e <right_light_mode1+0x9a>
			status1 = 1;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <right_light_mode1+0xa0>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
			setTimer4(count_red);
 8000bfc:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <right_light_mode1+0xac>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 f905 	bl	8001e10 <setTimer4>
}
 8000c06:	e012      	b.n	8000c2e <right_light_mode1+0x9a>
	else if (status1 == 3){
 8000c08:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <right_light_mode1+0xa0>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d10e      	bne.n	8000c2e <right_light_mode1+0x9a>
		right_light(3);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f7ff ff3d 	bl	8000a90 <right_light>
		if (flag_timer4 == 1){
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <right_light_mode1+0xa8>)
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d107      	bne.n	8000c2e <right_light_mode1+0x9a>
			status1 = 2;
 8000c1e:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <right_light_mode1+0xa0>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	701a      	strb	r2, [r3, #0]
			setTimer4(count_yellow);
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <right_light_mode1+0xb0>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 f8f1 	bl	8001e10 <setTimer4>
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000b9 	.word	0x200000b9
 8000c38:	20000006 	.word	0x20000006
 8000c3c:	200000ce 	.word	0x200000ce
 8000c40:	20000002 	.word	0x20000002
 8000c44:	20000004 	.word	0x20000004

08000c48 <traffic_lights>:

void traffic_lights(){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	left_light_mode1();
 8000c4c:	f7ff ff48 	bl	8000ae0 <left_light_mode1>
	right_light_mode1();
 8000c50:	f7ff ffa0 	bl	8000b94 <right_light_mode1>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	@ 0x38
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	615a      	str	r2, [r3, #20]
 8000c70:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	615a      	str	r2, [r3, #20]
 8000c82:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000c84:	4b2f      	ldr	r3, [pc, #188]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000c86:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000c8a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000c8e:	4a2e      	ldr	r2, [pc, #184]	@ (8000d48 <MX_FSMC_Init+0xf0>)
 8000c90:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000c92:	4b2c      	ldr	r3, [pc, #176]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000c98:	4b2a      	ldr	r3, [pc, #168]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000c9e:	4b29      	ldr	r3, [pc, #164]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ca4:	4b27      	ldr	r3, [pc, #156]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000ca6:	2210      	movs	r2, #16
 8000ca8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000caa:	4b26      	ldr	r3, [pc, #152]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000cb0:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000cb6:	4b23      	ldr	r3, [pc, #140]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000cbc:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000cc2:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000cc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000cca:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000cd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000cde:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000ce4:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000cea:	230f      	movs	r3, #15
 8000cec:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000cee:	230f      	movs	r3, #15
 8000cf0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000cf2:	233c      	movs	r3, #60	@ 0x3c
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000cfe:	2311      	movs	r3, #17
 8000d00:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000d02:	2300      	movs	r3, #0
 8000d04:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000d06:	2308      	movs	r3, #8
 8000d08:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000d0e:	2309      	movs	r3, #9
 8000d10:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000d16:	2310      	movs	r3, #16
 8000d18:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000d1a:	2311      	movs	r3, #17
 8000d1c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000d22:	463a      	mov	r2, r7
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	@ (8000d44 <MX_FSMC_Init+0xec>)
 8000d2c:	f003 f950 	bl	8003fd0 <HAL_SRAM_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000d36:	f001 f845 	bl	8001dc4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3738      	adds	r7, #56	@ 0x38
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000064 	.word	0x20000064
 8000d48:	a0000104 	.word	0xa0000104

08000d4c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000d60:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <HAL_FSMC_MspInit+0x88>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d131      	bne.n	8000dcc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <HAL_FSMC_MspInit+0x88>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <HAL_FSMC_MspInit+0x8c>)
 8000d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d76:	4a18      	ldr	r2, [pc, #96]	@ (8000dd8 <HAL_FSMC_MspInit+0x8c>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d7e:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <HAL_FSMC_MspInit+0x8c>)
 8000d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000d8a:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000d8e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000d9c:	230c      	movs	r3, #12
 8000d9e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	4619      	mov	r1, r3
 8000da4:	480d      	ldr	r0, [pc, #52]	@ (8000ddc <HAL_FSMC_MspInit+0x90>)
 8000da6:	f001 fd1d 	bl	80027e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000daa:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000dae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000dbc:	230c      	movs	r3, #12
 8000dbe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4806      	ldr	r0, [pc, #24]	@ (8000de0 <HAL_FSMC_MspInit+0x94>)
 8000dc6:	f001 fd0d 	bl	80027e4 <HAL_GPIO_Init>
 8000dca:	e000      	b.n	8000dce <HAL_FSMC_MspInit+0x82>
    return;
 8000dcc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200000b4 	.word	0x200000b4
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40020c00 	.word	0x40020c00

08000de4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000dec:	f7ff ffae 	bl	8000d4c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08c      	sub	sp, #48	@ 0x30
 8000dfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	4b6f      	ldr	r3, [pc, #444]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a6e      	ldr	r2, [pc, #440]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000e18:	f043 0310 	orr.w	r3, r3, #16
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b6c      	ldr	r3, [pc, #432]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	61bb      	str	r3, [r7, #24]
 8000e28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	4b68      	ldr	r3, [pc, #416]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a67      	ldr	r2, [pc, #412]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b65      	ldr	r3, [pc, #404]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b61      	ldr	r3, [pc, #388]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a60      	ldr	r2, [pc, #384]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b5e      	ldr	r3, [pc, #376]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b5a      	ldr	r3, [pc, #360]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a59      	ldr	r2, [pc, #356]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b57      	ldr	r3, [pc, #348]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b53      	ldr	r3, [pc, #332]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a52      	ldr	r2, [pc, #328]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b50      	ldr	r3, [pc, #320]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a4b      	ldr	r2, [pc, #300]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b49      	ldr	r3, [pc, #292]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b45      	ldr	r3, [pc, #276]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a44      	ldr	r2, [pc, #272]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b42      	ldr	r3, [pc, #264]	@ (8000fd0 <MX_GPIO_Init+0x1d8>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2170      	movs	r1, #112	@ 0x70
 8000ed6:	483f      	ldr	r0, [pc, #252]	@ (8000fd4 <MX_GPIO_Init+0x1dc>)
 8000ed8:	f001 fe20 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ee2:	483d      	ldr	r0, [pc, #244]	@ (8000fd8 <MX_GPIO_Init+0x1e0>)
 8000ee4:	f001 fe1a 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2140      	movs	r1, #64	@ 0x40
 8000eec:	483b      	ldr	r0, [pc, #236]	@ (8000fdc <MX_GPIO_Init+0x1e4>)
 8000eee:	f001 fe15 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ef8:	4839      	ldr	r0, [pc, #228]	@ (8000fe0 <MX_GPIO_Init+0x1e8>)
 8000efa:	f001 fe0f 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2108      	movs	r1, #8
 8000f02:	4838      	ldr	r0, [pc, #224]	@ (8000fe4 <MX_GPIO_Init+0x1ec>)
 8000f04:	f001 fe0a 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000f08:	2370      	movs	r3, #112	@ 0x70
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	482d      	ldr	r0, [pc, #180]	@ (8000fd4 <MX_GPIO_Init+0x1dc>)
 8000f20:	f001 fc60 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000f24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4826      	ldr	r0, [pc, #152]	@ (8000fd8 <MX_GPIO_Init+0x1e0>)
 8000f3e:	f001 fc51 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000f42:	23c0      	movs	r3, #192	@ 0xc0
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	4822      	ldr	r0, [pc, #136]	@ (8000fe0 <MX_GPIO_Init+0x1e8>)
 8000f56:	f001 fc45 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000f5a:	2330      	movs	r3, #48	@ 0x30
 8000f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	481a      	ldr	r0, [pc, #104]	@ (8000fd8 <MX_GPIO_Init+0x1e0>)
 8000f6e:	f001 fc39 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000f72:	2340      	movs	r3, #64	@ 0x40
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	4814      	ldr	r0, [pc, #80]	@ (8000fdc <MX_GPIO_Init+0x1e4>)
 8000f8a:	f001 fc2b 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000f8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480e      	ldr	r0, [pc, #56]	@ (8000fe0 <MX_GPIO_Init+0x1e8>)
 8000fa8:	f001 fc1c 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000fac:	2308      	movs	r3, #8
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4808      	ldr	r0, [pc, #32]	@ (8000fe4 <MX_GPIO_Init+0x1ec>)
 8000fc4:	f001 fc0e 	bl	80027e4 <HAL_GPIO_Init>

}
 8000fc8:	bf00      	nop
 8000fca:	3730      	adds	r7, #48	@ 0x30
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40021800 	.word	0x40021800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	40020c00 	.word	0x40020c00

08000fe8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <LCD_WR_REG+0x1c>)
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	8013      	strh	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	600ffffe 	.word	0x600ffffe

08001008 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001012:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <LCD_WR_DATA+0x1c>)
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	8053      	strh	r3, [r2, #2]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	600ffffe 	.word	0x600ffffe

08001028 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <LCD_RD_DATA+0x20>)
 8001030:	885b      	ldrh	r3, [r3, #2]
 8001032:	b29b      	uxth	r3, r3
 8001034:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	b29b      	uxth	r3, r3
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	600ffffe 	.word	0x600ffffe

0800104c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	461a      	mov	r2, r3
 800105a:	4623      	mov	r3, r4
 800105c:	80fb      	strh	r3, [r7, #6]
 800105e:	4603      	mov	r3, r0
 8001060:	80bb      	strh	r3, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	807b      	strh	r3, [r7, #2]
 8001066:	4613      	mov	r3, r2
 8001068:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800106a:	202a      	movs	r0, #42	@ 0x2a
 800106c:	f7ff ffbc 	bl	8000fe8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ffc6 	bl	8001008 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ffc0 	bl	8001008 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b29b      	uxth	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ffba 	bl	8001008 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b29b      	uxth	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ffb4 	bl	8001008 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80010a0:	202b      	movs	r0, #43	@ 0x2b
 80010a2:	f7ff ffa1 	bl	8000fe8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffab 	bl	8001008 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ffa5 	bl	8001008 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80010be:	883b      	ldrh	r3, [r7, #0]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff9f 	bl	8001008 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80010ca:	883b      	ldrh	r3, [r7, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff99 	bl	8001008 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80010d6:	202c      	movs	r0, #44	@ 0x2c
 80010d8:	f7ff ff86 	bl	8000fe8 <LCD_WR_REG>
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}

080010e4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <lcd_Clear+0x60>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <lcd_Clear+0x60>)
 80010f8:	885b      	ldrh	r3, [r3, #2]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	2100      	movs	r1, #0
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff ffa3 	bl	800104c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001106:	2300      	movs	r3, #0
 8001108:	81fb      	strh	r3, [r7, #14]
 800110a:	e011      	b.n	8001130 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 800110c:	2300      	movs	r3, #0
 800110e:	81bb      	strh	r3, [r7, #12]
 8001110:	e006      	b.n	8001120 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff77 	bl	8001008 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	3301      	adds	r3, #1
 800111e:	81bb      	strh	r3, [r7, #12]
 8001120:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <lcd_Clear+0x60>)
 8001122:	885b      	ldrh	r3, [r3, #2]
 8001124:	89ba      	ldrh	r2, [r7, #12]
 8001126:	429a      	cmp	r2, r3
 8001128:	d3f3      	bcc.n	8001112 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800112a:	89fb      	ldrh	r3, [r7, #14]
 800112c:	3301      	adds	r3, #1
 800112e:	81fb      	strh	r3, [r7, #14]
 8001130:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <lcd_Clear+0x60>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	89fa      	ldrh	r2, [r7, #14]
 8001136:	429a      	cmp	r2, r3
 8001138:	d3e8      	bcc.n	800110c <lcd_Clear+0x28>
		}
	}
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200000bc 	.word	0x200000bc

08001148 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	4604      	mov	r4, r0
 8001150:	4608      	mov	r0, r1
 8001152:	4611      	mov	r1, r2
 8001154:	461a      	mov	r2, r3
 8001156:	4623      	mov	r3, r4
 8001158:	80fb      	strh	r3, [r7, #6]
 800115a:	4603      	mov	r3, r0
 800115c:	80bb      	strh	r3, [r7, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	807b      	strh	r3, [r7, #2]
 8001162:	4613      	mov	r3, r2
 8001164:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	3b01      	subs	r3, #1
 800116a:	b29a      	uxth	r2, r3
 800116c:	883b      	ldrh	r3, [r7, #0]
 800116e:	3b01      	subs	r3, #1
 8001170:	b29b      	uxth	r3, r3
 8001172:	88b9      	ldrh	r1, [r7, #4]
 8001174:	88f8      	ldrh	r0, [r7, #6]
 8001176:	f7ff ff69 	bl	800104c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 800117a:	88bb      	ldrh	r3, [r7, #4]
 800117c:	81fb      	strh	r3, [r7, #14]
 800117e:	e010      	b.n	80011a2 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	81bb      	strh	r3, [r7, #12]
 8001184:	e006      	b.n	8001194 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001186:	8c3b      	ldrh	r3, [r7, #32]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff3d 	bl	8001008 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800118e:	89bb      	ldrh	r3, [r7, #12]
 8001190:	3301      	adds	r3, #1
 8001192:	81bb      	strh	r3, [r7, #12]
 8001194:	89ba      	ldrh	r2, [r7, #12]
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	429a      	cmp	r2, r3
 800119a:	d3f4      	bcc.n	8001186 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 800119c:	89fb      	ldrh	r3, [r7, #14]
 800119e:	3301      	adds	r3, #1
 80011a0:	81fb      	strh	r3, [r7, #14]
 80011a2:	89fa      	ldrh	r2, [r7, #14]
 80011a4:	883b      	ldrh	r3, [r7, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d3ea      	bcc.n	8001180 <lcd_Fill+0x38>
		}
	}
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd90      	pop	{r4, r7, pc}

080011b4 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
 80011be:	460b      	mov	r3, r1
 80011c0:	80bb      	strh	r3, [r7, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	88fa      	ldrh	r2, [r7, #6]
 80011ca:	88b9      	ldrh	r1, [r7, #4]
 80011cc:	88f8      	ldrh	r0, [r7, #6]
 80011ce:	f7ff ff3d 	bl	800104c <lcd_AddressSet>
	LCD_WR_DATA(color);
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff17 	bl	8001008 <LCD_WR_DATA>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4604      	mov	r4, r0
 80011ec:	4608      	mov	r0, r1
 80011ee:	4611      	mov	r1, r2
 80011f0:	461a      	mov	r2, r3
 80011f2:	4623      	mov	r3, r4
 80011f4:	80fb      	strh	r3, [r7, #6]
 80011f6:	4603      	mov	r3, r0
 80011f8:	80bb      	strh	r3, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	70fb      	strb	r3, [r7, #3]
 80011fe:	4613      	mov	r3, r2
 8001200:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001202:	2300      	movs	r3, #0
 8001204:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800120a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800120e:	085b      	lsrs	r3, r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	08db      	lsrs	r3, r3, #3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	bf14      	ite	ne
 8001226:	2301      	movne	r3, #1
 8001228:	2300      	moveq	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	4413      	add	r3, r2
 800122e:	b29a      	uxth	r2, r3
 8001230:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001234:	b29b      	uxth	r3, r3
 8001236:	fb12 f303 	smulbb	r3, r2, r3
 800123a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	3b20      	subs	r3, #32
 8001240:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	b29a      	uxth	r2, r3
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	4413      	add	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	3b01      	subs	r3, #1
 800124e:	b29c      	uxth	r4, r3
 8001250:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001254:	b29a      	uxth	r2, r3
 8001256:	88bb      	ldrh	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	b29b      	uxth	r3, r3
 800125c:	3b01      	subs	r3, #1
 800125e:	b29b      	uxth	r3, r3
 8001260:	88b9      	ldrh	r1, [r7, #4]
 8001262:	88f8      	ldrh	r0, [r7, #6]
 8001264:	4622      	mov	r2, r4
 8001266:	f7ff fef1 	bl	800104c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800126a:	2300      	movs	r3, #0
 800126c:	827b      	strh	r3, [r7, #18]
 800126e:	e07a      	b.n	8001366 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001270:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001274:	2b0c      	cmp	r3, #12
 8001276:	d028      	beq.n	80012ca <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001278:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800127c:	2b10      	cmp	r3, #16
 800127e:	d108      	bne.n	8001292 <lcd_ShowChar+0xae>
 8001280:	78fa      	ldrb	r2, [r7, #3]
 8001282:	8a7b      	ldrh	r3, [r7, #18]
 8001284:	493c      	ldr	r1, [pc, #240]	@ (8001378 <lcd_ShowChar+0x194>)
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	440a      	add	r2, r1
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	75fb      	strb	r3, [r7, #23]
 8001290:	e01b      	b.n	80012ca <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001292:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001296:	2b18      	cmp	r3, #24
 8001298:	d10b      	bne.n	80012b2 <lcd_ShowChar+0xce>
 800129a:	78fa      	ldrb	r2, [r7, #3]
 800129c:	8a79      	ldrh	r1, [r7, #18]
 800129e:	4837      	ldr	r0, [pc, #220]	@ (800137c <lcd_ShowChar+0x198>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	4403      	add	r3, r0
 80012aa:	440b      	add	r3, r1
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	75fb      	strb	r3, [r7, #23]
 80012b0:	e00b      	b.n	80012ca <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 80012b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012b6:	2b20      	cmp	r3, #32
 80012b8:	d15a      	bne.n	8001370 <lcd_ShowChar+0x18c>
 80012ba:	78fa      	ldrb	r2, [r7, #3]
 80012bc:	8a7b      	ldrh	r3, [r7, #18]
 80012be:	4930      	ldr	r1, [pc, #192]	@ (8001380 <lcd_ShowChar+0x19c>)
 80012c0:	0192      	lsls	r2, r2, #6
 80012c2:	440a      	add	r2, r1
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	75bb      	strb	r3, [r7, #22]
 80012ce:	e044      	b.n	800135a <lcd_ShowChar+0x176>
		{
			if(!mode)
 80012d0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d120      	bne.n	800131a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80012d8:	7dfa      	ldrb	r2, [r7, #23]
 80012da:	7dbb      	ldrb	r3, [r7, #22]
 80012dc:	fa42 f303 	asr.w	r3, r2, r3
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <lcd_ShowChar+0x10e>
 80012e8:	883b      	ldrh	r3, [r7, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fe8c 	bl	8001008 <LCD_WR_DATA>
 80012f0:	e003      	b.n	80012fa <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80012f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fe87 	bl	8001008 <LCD_WR_DATA>
				m++;
 80012fa:	7d7b      	ldrb	r3, [r7, #21]
 80012fc:	3301      	adds	r3, #1
 80012fe:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001300:	7d7b      	ldrb	r3, [r7, #21]
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	fbb3 f1f2 	udiv	r1, r3, r2
 8001308:	fb01 f202 	mul.w	r2, r1, r2
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d11f      	bne.n	8001354 <lcd_ShowChar+0x170>
				{
					m=0;
 8001314:	2300      	movs	r3, #0
 8001316:	757b      	strb	r3, [r7, #21]
					break;
 8001318:	e022      	b.n	8001360 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800131a:	7dfa      	ldrb	r2, [r7, #23]
 800131c:	7dbb      	ldrb	r3, [r7, #22]
 800131e:	fa42 f303 	asr.w	r3, r2, r3
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <lcd_ShowChar+0x152>
 800132a:	883a      	ldrh	r2, [r7, #0]
 800132c:	88b9      	ldrh	r1, [r7, #4]
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff3f 	bl	80011b4 <lcd_DrawPoint>
				x++;
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	3301      	adds	r3, #1
 800133a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 800133c:	88fa      	ldrh	r2, [r7, #6]
 800133e:	8a3b      	ldrh	r3, [r7, #16]
 8001340:	1ad2      	subs	r2, r2, r3
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	429a      	cmp	r2, r3
 8001346:	d105      	bne.n	8001354 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001348:	8a3b      	ldrh	r3, [r7, #16]
 800134a:	80fb      	strh	r3, [r7, #6]
					y++;
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	3301      	adds	r3, #1
 8001350:	80bb      	strh	r3, [r7, #4]
					break;
 8001352:	e005      	b.n	8001360 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001354:	7dbb      	ldrb	r3, [r7, #22]
 8001356:	3301      	adds	r3, #1
 8001358:	75bb      	strb	r3, [r7, #22]
 800135a:	7dbb      	ldrb	r3, [r7, #22]
 800135c:	2b07      	cmp	r3, #7
 800135e:	d9b7      	bls.n	80012d0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001360:	8a7b      	ldrh	r3, [r7, #18]
 8001362:	3301      	adds	r3, #1
 8001364:	827b      	strh	r3, [r7, #18]
 8001366:	8a7a      	ldrh	r2, [r7, #18]
 8001368:	89bb      	ldrh	r3, [r7, #12]
 800136a:	429a      	cmp	r2, r3
 800136c:	d380      	bcc.n	8001270 <lcd_ShowChar+0x8c>
 800136e:	e000      	b.n	8001372 <lcd_ShowChar+0x18e>
		else return;
 8001370:	bf00      	nop
				}
			}
		}
	}
}
 8001372:	371c      	adds	r7, #28
 8001374:	46bd      	mov	sp, r7
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	08005a24 	.word	0x08005a24
 800137c:	08006014 	.word	0x08006014
 8001380:	080071e4 	.word	0x080071e4

08001384 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	460a      	mov	r2, r1
 800138e:	71fb      	strb	r3, [r7, #7]
 8001390:	4613      	mov	r3, r2
 8001392:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001394:	2301      	movs	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001398:	e004      	b.n	80013a4 <mypow+0x20>
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	1e5a      	subs	r2, r3, #1
 80013a8:	71ba      	strb	r2, [r7, #6]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f5      	bne.n	800139a <mypow+0x16>
	return result;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b089      	sub	sp, #36	@ 0x24
 80013c0:	af04      	add	r7, sp, #16
 80013c2:	4604      	mov	r4, r0
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4623      	mov	r3, r4
 80013cc:	80fb      	strh	r3, [r7, #6]
 80013ce:	4603      	mov	r3, r0
 80013d0:	80bb      	strh	r3, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	807b      	strh	r3, [r7, #2]
 80013d6:	4613      	mov	r3, r2
 80013d8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80013da:	2300      	movs	r3, #0
 80013dc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80013de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80013e2:	085b      	lsrs	r3, r3, #1
 80013e4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	e059      	b.n	80014a0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80013ec:	887c      	ldrh	r4, [r7, #2]
 80013ee:	787a      	ldrb	r2, [r7, #1]
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3b01      	subs	r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	4619      	mov	r1, r3
 80013fc:	200a      	movs	r0, #10
 80013fe:	f7ff ffc1 	bl	8001384 <mypow>
 8001402:	4603      	mov	r3, r0
 8001404:	fbb4 f1f3 	udiv	r1, r4, r3
 8001408:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <lcd_ShowIntNum+0xf8>)
 800140a:	fba3 2301 	umull	r2, r3, r3, r1
 800140e:	08da      	lsrs	r2, r3, #3
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	1aca      	subs	r2, r1, r3
 800141a:	4613      	mov	r3, r2
 800141c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800141e:	7bbb      	ldrb	r3, [r7, #14]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d121      	bne.n	8001468 <lcd_ShowIntNum+0xac>
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	787b      	ldrb	r3, [r7, #1]
 8001428:	3b01      	subs	r3, #1
 800142a:	429a      	cmp	r2, r3
 800142c:	da1c      	bge.n	8001468 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800142e:	7b3b      	ldrb	r3, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d117      	bne.n	8001464 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	b29a      	uxth	r2, r3
 8001438:	7b7b      	ldrb	r3, [r7, #13]
 800143a:	b29b      	uxth	r3, r3
 800143c:	fb12 f303 	smulbb	r3, r2, r3
 8001440:	b29a      	uxth	r2, r3
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4413      	add	r3, r2
 8001446:	b298      	uxth	r0, r3
 8001448:	8c3a      	ldrh	r2, [r7, #32]
 800144a:	88b9      	ldrh	r1, [r7, #4]
 800144c:	2300      	movs	r3, #0
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	4613      	mov	r3, r2
 800145c:	2220      	movs	r2, #32
 800145e:	f7ff fec1 	bl	80011e4 <lcd_ShowChar>
				continue;
 8001462:	e01a      	b.n	800149a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001464:	2301      	movs	r3, #1
 8001466:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	b29a      	uxth	r2, r3
 800146c:	7b7b      	ldrb	r3, [r7, #13]
 800146e:	b29b      	uxth	r3, r3
 8001470:	fb12 f303 	smulbb	r3, r2, r3
 8001474:	b29a      	uxth	r2, r3
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	4413      	add	r3, r2
 800147a:	b298      	uxth	r0, r3
 800147c:	7b3b      	ldrb	r3, [r7, #12]
 800147e:	3330      	adds	r3, #48	@ 0x30
 8001480:	b2da      	uxtb	r2, r3
 8001482:	8c3c      	ldrh	r4, [r7, #32]
 8001484:	88b9      	ldrh	r1, [r7, #4]
 8001486:	2300      	movs	r3, #0
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	4623      	mov	r3, r4
 8001496:	f7ff fea5 	bl	80011e4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	3301      	adds	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	787b      	ldrb	r3, [r7, #1]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d3a1      	bcc.n	80013ec <lcd_ShowIntNum+0x30>
	}
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd90      	pop	{r4, r7, pc}
 80014b2:	bf00      	nop
 80014b4:	cccccccd 	.word	0xcccccccd

080014b8 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <lcd_SetDir+0x44>)
 80014d4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80014d8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <lcd_SetDir+0x44>)
 80014dc:	22f0      	movs	r2, #240	@ 0xf0
 80014de:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80014e0:	e006      	b.n	80014f0 <lcd_SetDir+0x38>
		lcddev.width=240;
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <lcd_SetDir+0x44>)
 80014e4:	22f0      	movs	r2, #240	@ 0xf0
 80014e6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80014e8:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <lcd_SetDir+0x44>)
 80014ea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80014ee:	805a      	strh	r2, [r3, #2]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	200000bc 	.word	0x200000bc

08001500 <lcd_init>:


void lcd_init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800150a:	48aa      	ldr	r0, [pc, #680]	@ (80017b4 <lcd_init+0x2b4>)
 800150c:	f001 fb06 	bl	8002b1c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001510:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001514:	f000 ff9e 	bl	8002454 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800151e:	48a5      	ldr	r0, [pc, #660]	@ (80017b4 <lcd_init+0x2b4>)
 8001520:	f001 fafc 	bl	8002b1c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001524:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001528:	f000 ff94 	bl	8002454 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff ffc3 	bl	80014b8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001532:	20d3      	movs	r0, #211	@ 0xd3
 8001534:	f7ff fd58 	bl	8000fe8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001538:	f7ff fd76 	bl	8001028 <LCD_RD_DATA>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b9d      	ldr	r3, [pc, #628]	@ (80017b8 <lcd_init+0x2b8>)
 8001542:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001544:	f7ff fd70 	bl	8001028 <LCD_RD_DATA>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b9a      	ldr	r3, [pc, #616]	@ (80017b8 <lcd_init+0x2b8>)
 800154e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001550:	f7ff fd6a 	bl	8001028 <LCD_RD_DATA>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	4b97      	ldr	r3, [pc, #604]	@ (80017b8 <lcd_init+0x2b8>)
 800155a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800155c:	4b96      	ldr	r3, [pc, #600]	@ (80017b8 <lcd_init+0x2b8>)
 800155e:	889b      	ldrh	r3, [r3, #4]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b94      	ldr	r3, [pc, #592]	@ (80017b8 <lcd_init+0x2b8>)
 8001566:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001568:	f7ff fd5e 	bl	8001028 <LCD_RD_DATA>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	4b91      	ldr	r3, [pc, #580]	@ (80017b8 <lcd_init+0x2b8>)
 8001572:	889b      	ldrh	r3, [r3, #4]
 8001574:	4313      	orrs	r3, r2
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b8f      	ldr	r3, [pc, #572]	@ (80017b8 <lcd_init+0x2b8>)
 800157a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800157c:	20cf      	movs	r0, #207	@ 0xcf
 800157e:	f7ff fd33 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff fd40 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001588:	20c1      	movs	r0, #193	@ 0xc1
 800158a:	f7ff fd3d 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800158e:	2030      	movs	r0, #48	@ 0x30
 8001590:	f7ff fd3a 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001594:	20ed      	movs	r0, #237	@ 0xed
 8001596:	f7ff fd27 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800159a:	2064      	movs	r0, #100	@ 0x64
 800159c:	f7ff fd34 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f7ff fd31 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80015a6:	2012      	movs	r0, #18
 80015a8:	f7ff fd2e 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80015ac:	2081      	movs	r0, #129	@ 0x81
 80015ae:	f7ff fd2b 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80015b2:	20e8      	movs	r0, #232	@ 0xe8
 80015b4:	f7ff fd18 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80015b8:	2085      	movs	r0, #133	@ 0x85
 80015ba:	f7ff fd25 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80015be:	2010      	movs	r0, #16
 80015c0:	f7ff fd22 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80015c4:	207a      	movs	r0, #122	@ 0x7a
 80015c6:	f7ff fd1f 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80015ca:	20cb      	movs	r0, #203	@ 0xcb
 80015cc:	f7ff fd0c 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80015d0:	2039      	movs	r0, #57	@ 0x39
 80015d2:	f7ff fd19 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80015d6:	202c      	movs	r0, #44	@ 0x2c
 80015d8:	f7ff fd16 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff fd13 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80015e2:	2034      	movs	r0, #52	@ 0x34
 80015e4:	f7ff fd10 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80015e8:	2002      	movs	r0, #2
 80015ea:	f7ff fd0d 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80015ee:	20f7      	movs	r0, #247	@ 0xf7
 80015f0:	f7ff fcfa 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80015f4:	2020      	movs	r0, #32
 80015f6:	f7ff fd07 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80015fa:	20ea      	movs	r0, #234	@ 0xea
 80015fc:	f7ff fcf4 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff fd01 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001606:	2000      	movs	r0, #0
 8001608:	f7ff fcfe 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800160c:	20c0      	movs	r0, #192	@ 0xc0
 800160e:	f7ff fceb 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001612:	201b      	movs	r0, #27
 8001614:	f7ff fcf8 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001618:	20c1      	movs	r0, #193	@ 0xc1
 800161a:	f7ff fce5 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800161e:	2001      	movs	r0, #1
 8001620:	f7ff fcf2 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001624:	20c5      	movs	r0, #197	@ 0xc5
 8001626:	f7ff fcdf 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800162a:	2030      	movs	r0, #48	@ 0x30
 800162c:	f7ff fcec 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001630:	2030      	movs	r0, #48	@ 0x30
 8001632:	f7ff fce9 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001636:	20c7      	movs	r0, #199	@ 0xc7
 8001638:	f7ff fcd6 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800163c:	20b7      	movs	r0, #183	@ 0xb7
 800163e:	f7ff fce3 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001642:	2036      	movs	r0, #54	@ 0x36
 8001644:	f7ff fcd0 	bl	8000fe8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001648:	2008      	movs	r0, #8
 800164a:	f7ff fcdd 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800164e:	203a      	movs	r0, #58	@ 0x3a
 8001650:	f7ff fcca 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001654:	2055      	movs	r0, #85	@ 0x55
 8001656:	f7ff fcd7 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800165a:	20b1      	movs	r0, #177	@ 0xb1
 800165c:	f7ff fcc4 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff fcd1 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001666:	201a      	movs	r0, #26
 8001668:	f7ff fcce 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800166c:	20b6      	movs	r0, #182	@ 0xb6
 800166e:	f7ff fcbb 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001672:	200a      	movs	r0, #10
 8001674:	f7ff fcc8 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001678:	20a2      	movs	r0, #162	@ 0xa2
 800167a:	f7ff fcc5 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800167e:	20f2      	movs	r0, #242	@ 0xf2
 8001680:	f7ff fcb2 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fcbf 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800168a:	2026      	movs	r0, #38	@ 0x26
 800168c:	f7ff fcac 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff fcb9 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001696:	20e0      	movs	r0, #224	@ 0xe0
 8001698:	f7ff fca6 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800169c:	200f      	movs	r0, #15
 800169e:	f7ff fcb3 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80016a2:	202a      	movs	r0, #42	@ 0x2a
 80016a4:	f7ff fcb0 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80016a8:	2028      	movs	r0, #40	@ 0x28
 80016aa:	f7ff fcad 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80016ae:	2008      	movs	r0, #8
 80016b0:	f7ff fcaa 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80016b4:	200e      	movs	r0, #14
 80016b6:	f7ff fca7 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80016ba:	2008      	movs	r0, #8
 80016bc:	f7ff fca4 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80016c0:	2054      	movs	r0, #84	@ 0x54
 80016c2:	f7ff fca1 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80016c6:	20a9      	movs	r0, #169	@ 0xa9
 80016c8:	f7ff fc9e 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80016cc:	2043      	movs	r0, #67	@ 0x43
 80016ce:	f7ff fc9b 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80016d2:	200a      	movs	r0, #10
 80016d4:	f7ff fc98 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80016d8:	200f      	movs	r0, #15
 80016da:	f7ff fc95 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016de:	2000      	movs	r0, #0
 80016e0:	f7ff fc92 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff fc8f 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff fc8c 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016f0:	2000      	movs	r0, #0
 80016f2:	f7ff fc89 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80016f6:	20e1      	movs	r0, #225	@ 0xe1
 80016f8:	f7ff fc76 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff fc83 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001702:	2015      	movs	r0, #21
 8001704:	f7ff fc80 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001708:	2017      	movs	r0, #23
 800170a:	f7ff fc7d 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800170e:	2007      	movs	r0, #7
 8001710:	f7ff fc7a 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001714:	2011      	movs	r0, #17
 8001716:	f7ff fc77 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800171a:	2006      	movs	r0, #6
 800171c:	f7ff fc74 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001720:	202b      	movs	r0, #43	@ 0x2b
 8001722:	f7ff fc71 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001726:	2056      	movs	r0, #86	@ 0x56
 8001728:	f7ff fc6e 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800172c:	203c      	movs	r0, #60	@ 0x3c
 800172e:	f7ff fc6b 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001732:	2005      	movs	r0, #5
 8001734:	f7ff fc68 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001738:	2010      	movs	r0, #16
 800173a:	f7ff fc65 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800173e:	200f      	movs	r0, #15
 8001740:	f7ff fc62 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001744:	203f      	movs	r0, #63	@ 0x3f
 8001746:	f7ff fc5f 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800174a:	203f      	movs	r0, #63	@ 0x3f
 800174c:	f7ff fc5c 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001750:	200f      	movs	r0, #15
 8001752:	f7ff fc59 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001756:	202b      	movs	r0, #43	@ 0x2b
 8001758:	f7ff fc46 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff fc53 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001762:	2000      	movs	r0, #0
 8001764:	f7ff fc50 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001768:	2001      	movs	r0, #1
 800176a:	f7ff fc4d 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800176e:	203f      	movs	r0, #63	@ 0x3f
 8001770:	f7ff fc4a 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001774:	202a      	movs	r0, #42	@ 0x2a
 8001776:	f7ff fc37 	bl	8000fe8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff fc44 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff fc41 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001786:	2000      	movs	r0, #0
 8001788:	f7ff fc3e 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800178c:	20ef      	movs	r0, #239	@ 0xef
 800178e:	f7ff fc3b 	bl	8001008 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001792:	2011      	movs	r0, #17
 8001794:	f7ff fc28 	bl	8000fe8 <LCD_WR_REG>
	HAL_Delay(120);
 8001798:	2078      	movs	r0, #120	@ 0x78
 800179a:	f000 fe5b 	bl	8002454 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800179e:	2029      	movs	r0, #41	@ 0x29
 80017a0:	f7ff fc22 	bl	8000fe8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80017a4:	2201      	movs	r2, #1
 80017a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017aa:	4804      	ldr	r0, [pc, #16]	@ (80017bc <lcd_init+0x2bc>)
 80017ac:	f001 f9b6 	bl	8002b1c <HAL_GPIO_WritePin>
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40020800 	.word	0x40020800
 80017b8:	200000bc 	.word	0x200000bc
 80017bc:	40020000 	.word	0x40020000

080017c0 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	b298      	uxth	r0, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	b29a      	uxth	r2, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	8b3a      	ldrh	r2, [r7, #24]
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff fce3 	bl	80011b4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	b298      	uxth	r0, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4413      	add	r3, r2
 8001804:	b29b      	uxth	r3, r3
 8001806:	8b3a      	ldrh	r2, [r7, #24]
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff fcd3 	bl	80011b4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	b29a      	uxth	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	b29b      	uxth	r3, r3
 8001816:	4413      	add	r3, r2
 8001818:	b298      	uxth	r0, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	b29a      	uxth	r2, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b29b      	uxth	r3, r3
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	b29b      	uxth	r3, r3
 8001826:	8b3a      	ldrh	r2, [r7, #24]
 8001828:	4619      	mov	r1, r3
 800182a:	f7ff fcc3 	bl	80011b4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	b29a      	uxth	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	b29b      	uxth	r3, r3
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	b298      	uxth	r0, r3
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	b29a      	uxth	r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	b29b      	uxth	r3, r3
 8001846:	8b3a      	ldrh	r2, [r7, #24]
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff fcb3 	bl	80011b4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	b29a      	uxth	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	4413      	add	r3, r2
 8001858:	b298      	uxth	r0, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	b29a      	uxth	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	b29b      	uxth	r3, r3
 8001862:	4413      	add	r3, r2
 8001864:	b29b      	uxth	r3, r3
 8001866:	8b3a      	ldrh	r2, [r7, #24]
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff fca3 	bl	80011b4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	b29a      	uxth	r2, r3
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b29b      	uxth	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	b298      	uxth	r0, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	b29a      	uxth	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	b29b      	uxth	r3, r3
 8001882:	4413      	add	r3, r2
 8001884:	b29b      	uxth	r3, r3
 8001886:	8b3a      	ldrh	r2, [r7, #24]
 8001888:	4619      	mov	r1, r3
 800188a:	f7ff fc93 	bl	80011b4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	b29a      	uxth	r2, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4413      	add	r3, r2
 8001898:	b298      	uxth	r0, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	b29a      	uxth	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	8b3a      	ldrh	r2, [r7, #24]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff fc83 	bl	80011b4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b298      	uxth	r0, r3
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	8b3a      	ldrh	r2, [r7, #24]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff fc73 	bl	80011b4 <lcd_DrawPoint>
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b08a      	sub	sp, #40	@ 0x28
 80018da:	af02      	add	r7, sp, #8
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	4613      	mov	r3, r2
 80018e4:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	f1c3 0303 	rsb	r3, r3, #3
 80018f6:	613b      	str	r3, [r7, #16]


	if (fill)
 80018f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d04f      	beq.n	800199e <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80018fe:	e029      	b.n	8001954 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e00a      	b.n	800191c <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	68b9      	ldr	r1, [r7, #8]
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f7ff ff55 	bl	80017c0 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	429a      	cmp	r2, r3
 8001922:	ddf0      	ble.n	8001906 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	da06      	bge.n	8001938 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	009a      	lsls	r2, r3, #2
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4413      	add	r3, r2
 8001932:	3306      	adds	r3, #6
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	e00a      	b.n	800194e <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	009a      	lsls	r2, r3, #2
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4413      	add	r3, r2
 8001944:	330a      	adds	r3, #10
 8001946:	613b      	str	r3, [r7, #16]
				y--;
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	3b01      	subs	r3, #1
 800194c:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3301      	adds	r3, #1
 8001952:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	429a      	cmp	r2, r3
 800195a:	ddd1      	ble.n	8001900 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 800195c:	e023      	b.n	80019a6 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f7ff ff29 	bl	80017c0 <_draw_circle_8>
			if (d < 0) {
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	da06      	bge.n	8001982 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	009a      	lsls	r2, r3, #2
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4413      	add	r3, r2
 800197c:	3306      	adds	r3, #6
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	e00a      	b.n	8001998 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	009a      	lsls	r2, r3, #2
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4413      	add	r3, r2
 800198e:	330a      	adds	r3, #10
 8001990:	613b      	str	r3, [r7, #16]
				y--;
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	3b01      	subs	r3, #1
 8001996:	61bb      	str	r3, [r7, #24]
			x++;
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	3301      	adds	r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	dddb      	ble.n	800195e <lcd_DrawCircle+0x88>
}
 80019a6:	bf00      	nop
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b08b      	sub	sp, #44	@ 0x2c
 80019b4:	af04      	add	r7, sp, #16
 80019b6:	60ba      	str	r2, [r7, #8]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4603      	mov	r3, r0
 80019bc:	81fb      	strh	r3, [r7, #14]
 80019be:	460b      	mov	r3, r1
 80019c0:	81bb      	strh	r3, [r7, #12]
 80019c2:	4613      	mov	r3, r2
 80019c4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80019c6:	89fb      	ldrh	r3, [r7, #14]
 80019c8:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80019ce:	e048      	b.n	8001a62 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d145      	bne.n	8001a62 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80019d6:	89fa      	ldrh	r2, [r7, #14]
 80019d8:	4b26      	ldr	r3, [pc, #152]	@ (8001a74 <lcd_ShowStr+0xc4>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	1acb      	subs	r3, r1, r3
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dc3f      	bgt.n	8001a6c <lcd_ShowStr+0xbc>
 80019ec:	89ba      	ldrh	r2, [r7, #12]
 80019ee:	4b21      	ldr	r3, [pc, #132]	@ (8001a74 <lcd_ShowStr+0xc4>)
 80019f0:	885b      	ldrh	r3, [r3, #2]
 80019f2:	4619      	mov	r1, r3
 80019f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019f8:	1acb      	subs	r3, r1, r3
 80019fa:	429a      	cmp	r2, r3
 80019fc:	dc36      	bgt.n	8001a6c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b80      	cmp	r3, #128	@ 0x80
 8001a04:	d902      	bls.n	8001a0c <lcd_ShowStr+0x5c>
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
 8001a0a:	e02a      	b.n	8001a62 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b0d      	cmp	r3, #13
 8001a12:	d10b      	bne.n	8001a2c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001a14:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	89bb      	ldrh	r3, [r7, #12]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001a20:	8abb      	ldrh	r3, [r7, #20]
 8001a22:	81fb      	strh	r3, [r7, #14]
					str++;
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	3301      	adds	r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	e017      	b.n	8001a5c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	88fc      	ldrh	r4, [r7, #6]
 8001a32:	89b9      	ldrh	r1, [r7, #12]
 8001a34:	89f8      	ldrh	r0, [r7, #14]
 8001a36:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	4623      	mov	r3, r4
 8001a48:	f7ff fbcc 	bl	80011e4 <lcd_ShowChar>
					x+=sizey/2;
 8001a4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a50:	085b      	lsrs	r3, r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	89fb      	ldrh	r3, [r7, #14]
 8001a58:	4413      	add	r3, r2
 8001a5a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1b2      	bne.n	80019d0 <lcd_ShowStr+0x20>
 8001a6a:	e000      	b.n	8001a6e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001a6c:	bf00      	nop
			}
		}
	}
}
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd90      	pop	{r4, r7, pc}
 8001a74:	200000bc 	.word	0x200000bc

08001a78 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2140      	movs	r1, #64	@ 0x40
 8001a80:	4802      	ldr	r0, [pc, #8]	@ (8001a8c <led7_init+0x14>)
 8001a82:	f001 f84b 	bl	8002b1c <HAL_GPIO_WritePin>
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021800 	.word	0x40021800

08001a90 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001a94:	4b3f      	ldr	r3, [pc, #252]	@ (8001b94 <led7_Scan+0x104>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b94 <led7_Scan+0x104>)
 8001a9e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8001b98 <led7_Scan+0x108>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8001b9c <led7_Scan+0x10c>)
 8001aa8:	5c9b      	ldrb	r3, [r3, r2]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	4b39      	ldr	r3, [pc, #228]	@ (8001b94 <led7_Scan+0x104>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	b21b      	sxth	r3, r3
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	4b36      	ldr	r3, [pc, #216]	@ (8001b94 <led7_Scan+0x104>)
 8001abc:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001abe:	4b36      	ldr	r3, [pc, #216]	@ (8001b98 <led7_Scan+0x108>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d846      	bhi.n	8001b54 <led7_Scan+0xc4>
 8001ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8001acc <led7_Scan+0x3c>)
 8001ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001acc:	08001add 	.word	0x08001add
 8001ad0:	08001afb 	.word	0x08001afb
 8001ad4:	08001b19 	.word	0x08001b19
 8001ad8:	08001b37 	.word	0x08001b37
	case 0:
		spi_buffer |= 0x00b0;
 8001adc:	4b2d      	ldr	r3, [pc, #180]	@ (8001b94 <led7_Scan+0x104>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b94 <led7_Scan+0x104>)
 8001ae8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001aea:	4b2a      	ldr	r3, [pc, #168]	@ (8001b94 <led7_Scan+0x104>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	4b27      	ldr	r3, [pc, #156]	@ (8001b94 <led7_Scan+0x104>)
 8001af6:	801a      	strh	r2, [r3, #0]
		break;
 8001af8:	e02d      	b.n	8001b56 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001afa:	4b26      	ldr	r3, [pc, #152]	@ (8001b94 <led7_Scan+0x104>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	4b23      	ldr	r3, [pc, #140]	@ (8001b94 <led7_Scan+0x104>)
 8001b06:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001b08:	4b22      	ldr	r3, [pc, #136]	@ (8001b94 <led7_Scan+0x104>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	f023 0320 	bic.w	r3, r3, #32
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <led7_Scan+0x104>)
 8001b14:	801a      	strh	r2, [r3, #0]
		break;
 8001b16:	e01e      	b.n	8001b56 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001b18:	4b1e      	ldr	r3, [pc, #120]	@ (8001b94 <led7_Scan+0x104>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	4b1c      	ldr	r3, [pc, #112]	@ (8001b94 <led7_Scan+0x104>)
 8001b24:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001b26:	4b1b      	ldr	r3, [pc, #108]	@ (8001b94 <led7_Scan+0x104>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	f023 0310 	bic.w	r3, r3, #16
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <led7_Scan+0x104>)
 8001b32:	801a      	strh	r2, [r3, #0]
		break;
 8001b34:	e00f      	b.n	8001b56 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001b36:	4b17      	ldr	r3, [pc, #92]	@ (8001b94 <led7_Scan+0x104>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <led7_Scan+0x104>)
 8001b42:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001b44:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <led7_Scan+0x104>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <led7_Scan+0x104>)
 8001b50:	801a      	strh	r2, [r3, #0]
		break;
 8001b52:	e000      	b.n	8001b56 <led7_Scan+0xc6>
	default:
		break;
 8001b54:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <led7_Scan+0x108>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	425a      	negs	r2, r3
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	f002 0203 	and.w	r2, r2, #3
 8001b66:	bf58      	it	pl
 8001b68:	4253      	negpl	r3, r2
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <led7_Scan+0x108>)
 8001b6e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2140      	movs	r1, #64	@ 0x40
 8001b74:	480a      	ldr	r0, [pc, #40]	@ (8001ba0 <led7_Scan+0x110>)
 8001b76:	f000 ffd1 	bl	8002b1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	4905      	ldr	r1, [pc, #20]	@ (8001b94 <led7_Scan+0x104>)
 8001b80:	4808      	ldr	r0, [pc, #32]	@ (8001ba4 <led7_Scan+0x114>)
 8001b82:	f001 fd06 	bl	8003592 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001b86:	2201      	movs	r2, #1
 8001b88:	2140      	movs	r1, #64	@ 0x40
 8001b8a:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <led7_Scan+0x110>)
 8001b8c:	f000 ffc6 	bl	8002b1c <HAL_GPIO_WritePin>
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000014 	.word	0x20000014
 8001b98:	200000c2 	.word	0x200000c2
 8001b9c:	20000010 	.word	0x20000010
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	200000d8 	.word	0x200000d8

08001ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bac:	f000 fbe0 	bl	8002370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb0:	f000 f820 	bl	8001bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb4:	f7ff f920 	bl	8000df8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001bb8:	f000 fac4 	bl	8002144 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001bbc:	f000 f9c6 	bl	8001f4c <MX_SPI1_Init>
  MX_FSMC_Init();
 8001bc0:	f7ff f84a 	bl	8000c58 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001bc4:	f000 fb30 	bl	8002228 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001bc8:	f000 f87e 	bl	8001cc8 <system_init>
  lcd_Clear(WHITE);
 8001bcc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001bd0:	f7ff fa88 	bl	80010e4 <lcd_Clear>
  draw_filled_retangle(60, 90);
 8001bd4:	215a      	movs	r1, #90	@ 0x5a
 8001bd6:	203c      	movs	r0, #60	@ 0x3c
 8001bd8:	f7fe fe6a 	bl	80008b0 <draw_filled_retangle>
  draw_filled_retangle(180, 90);
 8001bdc:	215a      	movs	r1, #90	@ 0x5a
 8001bde:	20b4      	movs	r0, #180	@ 0xb4
 8001be0:	f7fe fe66 	bl	80008b0 <draw_filled_retangle>

  while (1)
  {
	  // while(!flag_timer2);
	  // flag_timer2 = 0;
	  button_Scan();
 8001be4:	f7fe fc74 	bl	80004d0 <button_Scan>
	  // test_button();
	  set_mode();
 8001be8:	f000 f88c 	bl	8001d04 <set_mode>
	  traffic_lights_operation();
 8001bec:	f7fe fd60 	bl	80006b0 <traffic_lights_operation>
  {
 8001bf0:	bf00      	nop
 8001bf2:	e7f7      	b.n	8001be4 <main+0x3c>

08001bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b094      	sub	sp, #80	@ 0x50
 8001bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfa:	f107 0320 	add.w	r3, r7, #32
 8001bfe:	2230      	movs	r2, #48	@ 0x30
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 fe8e 	bl	8005924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	4b28      	ldr	r3, [pc, #160]	@ (8001cc0 <SystemClock_Config+0xcc>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	4a27      	ldr	r2, [pc, #156]	@ (8001cc0 <SystemClock_Config+0xcc>)
 8001c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c28:	4b25      	ldr	r3, [pc, #148]	@ (8001cc0 <SystemClock_Config+0xcc>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	4b22      	ldr	r3, [pc, #136]	@ (8001cc4 <SystemClock_Config+0xd0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a21      	ldr	r2, [pc, #132]	@ (8001cc4 <SystemClock_Config+0xd0>)
 8001c3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc4 <SystemClock_Config+0xd0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c50:	2302      	movs	r3, #2
 8001c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c54:	2301      	movs	r3, #1
 8001c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c58:	2310      	movs	r3, #16
 8001c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c60:	2300      	movs	r3, #0
 8001c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c64:	2308      	movs	r3, #8
 8001c66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c68:	23a8      	movs	r3, #168	@ 0xa8
 8001c6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c70:	2304      	movs	r3, #4
 8001c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c74:	f107 0320 	add.w	r3, r7, #32
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 ff69 	bl	8002b50 <HAL_RCC_OscConfig>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c84:	f000 f89e 	bl	8001dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c88:	230f      	movs	r3, #15
 8001c8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c94:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001c9a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	2105      	movs	r1, #5
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f001 f9ca 	bl	8003040 <HAL_RCC_ClockConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cb2:	f000 f887 	bl	8001dc4 <Error_Handler>
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3750      	adds	r7, #80	@ 0x50
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000

08001cc8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2120      	movs	r1, #32
 8001cd0:	480b      	ldr	r0, [pc, #44]	@ (8001d00 <system_init+0x38>)
 8001cd2:	f000 ff23 	bl	8002b1c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2140      	movs	r1, #64	@ 0x40
 8001cda:	4809      	ldr	r0, [pc, #36]	@ (8001d00 <system_init+0x38>)
 8001cdc:	f000 ff1e 	bl	8002b1c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2110      	movs	r1, #16
 8001ce4:	4806      	ldr	r0, [pc, #24]	@ (8001d00 <system_init+0x38>)
 8001ce6:	f000 ff19 	bl	8002b1c <HAL_GPIO_WritePin>
	  timer_init();
 8001cea:	f000 f871 	bl	8001dd0 <timer_init>
	  led7_init();
 8001cee:	f7ff fec3 	bl	8001a78 <led7_init>
	  button_init();
 8001cf2:	f7fe fbe1 	bl	80004b8 <button_init>
	  lcd_init();
 8001cf6:	f7ff fc03 	bl	8001500 <lcd_init>
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000

08001d04 <set_mode>:

uint8_t count_led_debug = 0;
uint8_t count_led_Y0 = 0;
uint8_t count_led_Y1 = 0;

void set_mode(){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af04      	add	r7, sp, #16
	if (button_count[0] == 1){
 8001d0a:	4b26      	ldr	r3, [pc, #152]	@ (8001da4 <set_mode+0xa0>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d11f      	bne.n	8001d52 <set_mode+0x4e>
		mode_step = (mode_step + 1)%5;
 8001d12:	4b25      	ldr	r3, [pc, #148]	@ (8001da8 <set_mode+0xa4>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <set_mode+0xa8>)
 8001d1a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d1e:	1059      	asrs	r1, r3, #1
 8001d20:	17d3      	asrs	r3, r2, #31
 8001d22:	1ac9      	subs	r1, r1, r3
 8001d24:	460b      	mov	r3, r1
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	1ad1      	subs	r1, r2, r3
 8001d2c:	b2ca      	uxtb	r2, r1
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001da8 <set_mode+0xa4>)
 8001d30:	701a      	strb	r2, [r3, #0]
		flag_timer5 = 1;
 8001d32:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <set_mode+0xac>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	801a      	strh	r2, [r3, #0]
		if (mode_step == 0) {
 8001d38:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <set_mode+0xa4>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d108      	bne.n	8001d52 <set_mode+0x4e>
			mode_step = 1;
 8001d40:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <set_mode+0xa4>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
			status0 = 0;
 8001d46:	4b1b      	ldr	r3, [pc, #108]	@ (8001db4 <set_mode+0xb0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
			status1 = 0;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <set_mode+0xb4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
		}
	}
	if (button_count[0] == 0){
 8001d52:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <set_mode+0xa0>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d120      	bne.n	8001d9c <set_mode+0x98>
		mode = mode_step;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <set_mode+0xa4>)
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <set_mode+0xb8>)
 8001d60:	701a      	strb	r2, [r3, #0]
		lcd_ShowStr(10, 10, "Mode: ", RED, BLUE, 16, 1);
 8001d62:	2301      	movs	r3, #1
 8001d64:	9302      	str	r3, [sp, #8]
 8001d66:	2310      	movs	r3, #16
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	231f      	movs	r3, #31
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d72:	4a13      	ldr	r2, [pc, #76]	@ (8001dc0 <set_mode+0xbc>)
 8001d74:	210a      	movs	r1, #10
 8001d76:	200a      	movs	r0, #10
 8001d78:	f7ff fe1a 	bl	80019b0 <lcd_ShowStr>
		lcd_ShowIntNum(50, 10, mode, 1, BRED, WHITE, 16);
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <set_mode+0xb8>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	2310      	movs	r3, #16
 8001d84:	9302      	str	r3, [sp, #8]
 8001d86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2301      	movs	r3, #1
 8001d94:	210a      	movs	r1, #10
 8001d96:	2032      	movs	r0, #50	@ 0x32
 8001d98:	f7ff fb10 	bl	80013bc <lcd_ShowIntNum>
	}
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000040 	.word	0x20000040
 8001da8:	20000000 	.word	0x20000000
 8001dac:	66666667 	.word	0x66666667
 8001db0:	200000d2 	.word	0x200000d2
 8001db4:	200000b8 	.word	0x200000b8
 8001db8:	200000b9 	.word	0x200000b9
 8001dbc:	20000001 	.word	0x20000001
 8001dc0:	080059fc 	.word	0x080059fc

08001dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc8:	b672      	cpsid	i
}
 8001dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <Error_Handler+0x8>

08001dd0 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <timer_init+0x10>)
 8001dd6:	f002 f98f 	bl	80040f8 <HAL_TIM_Base_Start_IT>
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000130 	.word	0x20000130

08001de4 <setTimer3>:
	timer2_MUL = duration/TIMER_CYCLE_2;
	timer2_counter = timer2_MUL;
	flag_timer2 = 0;
}

void setTimer3(uint16_t duration){
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
	timer3_counter = duration;
 8001dee:	4a06      	ldr	r2, [pc, #24]	@ (8001e08 <setTimer3+0x24>)
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	8013      	strh	r3, [r2, #0]
	flag_timer3 = 0;
 8001df4:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <setTimer3+0x28>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	801a      	strh	r2, [r3, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	200000cc 	.word	0x200000cc
 8001e0c:	200000ca 	.word	0x200000ca

08001e10 <setTimer4>:

void setTimer4(uint16_t duration){
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	80fb      	strh	r3, [r7, #6]
	timer4_counter = duration;
 8001e1a:	4a06      	ldr	r2, [pc, #24]	@ (8001e34 <setTimer4+0x24>)
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	8013      	strh	r3, [r2, #0]
	flag_timer4 = 0;
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <setTimer4+0x28>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	801a      	strh	r2, [r3, #0]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	200000d0 	.word	0x200000d0
 8001e38:	200000ce 	.word	0x200000ce

08001e3c <setTimer5>:

void setTimer5(uint16_t duration){
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
	timer5_counter = duration;
 8001e46:	4a06      	ldr	r2, [pc, #24]	@ (8001e60 <setTimer5+0x24>)
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	8013      	strh	r3, [r2, #0]
	flag_timer5 = 0;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <setTimer5+0x28>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	801a      	strh	r2, [r3, #0]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	200000d4 	.word	0x200000d4
 8001e64:	200000d2 	.word	0x200000d2

08001e68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e78:	d152      	bne.n	8001f20 <HAL_TIM_PeriodElapsedCallback+0xb8>
		if(timer2_counter > 0){
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f28 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d010      	beq.n	8001ea4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001e82:	4b29      	ldr	r3, [pc, #164]	@ (8001f28 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	4b27      	ldr	r3, [pc, #156]	@ (8001f28 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001e8c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001e8e:	4b26      	ldr	r3, [pc, #152]	@ (8001f28 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001e96:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001e9c:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001e9e:	881a      	ldrh	r2, [r3, #0]
 8001ea0:	4b21      	ldr	r3, [pc, #132]	@ (8001f28 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001ea2:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer3_counter > 0){
 8001ea4:	4b23      	ldr	r3, [pc, #140]	@ (8001f34 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00f      	beq.n	8001ecc <HAL_TIM_PeriodElapsedCallback+0x64>
			timer3_counter--;
 8001eac:	4b21      	ldr	r3, [pc, #132]	@ (8001f34 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f34 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001eb6:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f34 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d105      	bne.n	8001ecc <HAL_TIM_PeriodElapsedCallback+0x64>
				flag_timer3 = 1;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f38 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	801a      	strh	r2, [r3, #0]
				timer3_counter = 0;
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f34 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer4_counter > 0){
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00f      	beq.n	8001ef4 <HAL_TIM_PeriodElapsedCallback+0x8c>
			timer4_counter--;
 8001ed4:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001ede:	801a      	strh	r2, [r3, #0]
			if(timer4_counter == 0) {
 8001ee0:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <HAL_TIM_PeriodElapsedCallback+0x8c>
				flag_timer4 = 1;
 8001ee8:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	801a      	strh	r2, [r3, #0]
				timer4_counter = 0;
 8001eee:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer5_counter > 0){
 8001ef4:	4b13      	ldr	r3, [pc, #76]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00f      	beq.n	8001f1c <HAL_TIM_PeriodElapsedCallback+0xb4>
			timer5_counter--;
 8001efc:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001f06:	801a      	strh	r2, [r3, #0]
			if(timer5_counter == 0) {
 8001f08:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d105      	bne.n	8001f1c <HAL_TIM_PeriodElapsedCallback+0xb4>
				flag_timer5 = 1;
 8001f10:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	801a      	strh	r2, [r3, #0]
				timer5_counter = 0;
 8001f16:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8001f1c:	f7ff fdb8 	bl	8001a90 <led7_Scan>
	}
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200000c6 	.word	0x200000c6
 8001f2c:	200000c4 	.word	0x200000c4
 8001f30:	200000c8 	.word	0x200000c8
 8001f34:	200000cc 	.word	0x200000cc
 8001f38:	200000ca 	.word	0x200000ca
 8001f3c:	200000d0 	.word	0x200000d0
 8001f40:	200000ce 	.word	0x200000ce
 8001f44:	200000d4 	.word	0x200000d4
 8001f48:	200000d2 	.word	0x200000d2

08001f4c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f50:	4b17      	ldr	r3, [pc, #92]	@ (8001fb0 <MX_SPI1_Init+0x64>)
 8001f52:	4a18      	ldr	r2, [pc, #96]	@ (8001fb4 <MX_SPI1_Init+0x68>)
 8001f54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f56:	4b16      	ldr	r3, [pc, #88]	@ (8001fb0 <MX_SPI1_Init+0x64>)
 8001f58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f5e:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <MX_SPI1_Init+0x64>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f64:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <MX_SPI1_Init+0x64>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <MX_SPI1_Init+0x64>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <MX_SPI1_Init+0x64>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <MX_SPI1_Init+0x64>)
 8001f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <MX_SPI1_Init+0x64>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f84:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb0 <MX_SPI1_Init+0x64>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f8a:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <MX_SPI1_Init+0x64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f90:	4b07      	ldr	r3, [pc, #28]	@ (8001fb0 <MX_SPI1_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <MX_SPI1_Init+0x64>)
 8001f98:	220a      	movs	r2, #10
 8001f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f9c:	4804      	ldr	r0, [pc, #16]	@ (8001fb0 <MX_SPI1_Init+0x64>)
 8001f9e:	f001 fa6f 	bl	8003480 <HAL_SPI_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fa8:	f7ff ff0c 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200000d8 	.word	0x200000d8
 8001fb4:	40013000 	.word	0x40013000

08001fb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a19      	ldr	r2, [pc, #100]	@ (800203c <HAL_SPI_MspInit+0x84>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d12b      	bne.n	8002032 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	4b18      	ldr	r3, [pc, #96]	@ (8002040 <HAL_SPI_MspInit+0x88>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	4a17      	ldr	r2, [pc, #92]	@ (8002040 <HAL_SPI_MspInit+0x88>)
 8001fe4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fea:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <HAL_SPI_MspInit+0x88>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <HAL_SPI_MspInit+0x88>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	4a10      	ldr	r2, [pc, #64]	@ (8002040 <HAL_SPI_MspInit+0x88>)
 8002000:	f043 0302 	orr.w	r3, r3, #2
 8002004:	6313      	str	r3, [r2, #48]	@ 0x30
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <HAL_SPI_MspInit+0x88>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002012:	2338      	movs	r3, #56	@ 0x38
 8002014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002022:	2305      	movs	r3, #5
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	@ (8002044 <HAL_SPI_MspInit+0x8c>)
 800202e:	f000 fbd9 	bl	80027e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	@ 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40013000 	.word	0x40013000
 8002040:	40023800 	.word	0x40023800
 8002044:	40020400 	.word	0x40020400

08002048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <HAL_MspInit+0x4c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	4a0f      	ldr	r2, [pc, #60]	@ (8002094 <HAL_MspInit+0x4c>)
 8002058:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800205c:	6453      	str	r3, [r2, #68]	@ 0x44
 800205e:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <HAL_MspInit+0x4c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002062:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	603b      	str	r3, [r7, #0]
 800206e:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <HAL_MspInit+0x4c>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	4a08      	ldr	r2, [pc, #32]	@ (8002094 <HAL_MspInit+0x4c>)
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002078:	6413      	str	r3, [r2, #64]	@ 0x40
 800207a:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <HAL_MspInit+0x4c>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800

08002098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <NMI_Handler+0x4>

080020a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <HardFault_Handler+0x4>

080020a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <MemManage_Handler+0x4>

080020b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <BusFault_Handler+0x4>

080020b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <UsageFault_Handler+0x4>

080020c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ee:	f000 f991 	bl	8002414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020fc:	4802      	ldr	r0, [pc, #8]	@ (8002108 <TIM2_IRQHandler+0x10>)
 80020fe:	f002 f86b 	bl	80041d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000130 	.word	0x20000130

0800210c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002110:	4802      	ldr	r0, [pc, #8]	@ (800211c <USART1_IRQHandler+0x10>)
 8002112:	f002 fc71 	bl	80049f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000178 	.word	0x20000178

08002120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <SystemInit+0x20>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212a:	4a05      	ldr	r2, [pc, #20]	@ (8002140 <SystemInit+0x20>)
 800212c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214a:	f107 0308 	add.w	r3, r7, #8
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002158:	463b      	mov	r3, r7
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002160:	4b1d      	ldr	r3, [pc, #116]	@ (80021d8 <MX_TIM2_Init+0x94>)
 8002162:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002166:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002168:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <MX_TIM2_Init+0x94>)
 800216a:	f240 3247 	movw	r2, #839	@ 0x347
 800216e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002170:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <MX_TIM2_Init+0x94>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002176:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <MX_TIM2_Init+0x94>)
 8002178:	2263      	movs	r2, #99	@ 0x63
 800217a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217c:	4b16      	ldr	r3, [pc, #88]	@ (80021d8 <MX_TIM2_Init+0x94>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002182:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <MX_TIM2_Init+0x94>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002188:	4813      	ldr	r0, [pc, #76]	@ (80021d8 <MX_TIM2_Init+0x94>)
 800218a:	f001 ff65 	bl	8004058 <HAL_TIM_Base_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002194:	f7ff fe16 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800219c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800219e:	f107 0308 	add.w	r3, r7, #8
 80021a2:	4619      	mov	r1, r3
 80021a4:	480c      	ldr	r0, [pc, #48]	@ (80021d8 <MX_TIM2_Init+0x94>)
 80021a6:	f002 f91f 	bl	80043e8 <HAL_TIM_ConfigClockSource>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80021b0:	f7ff fe08 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b4:	2300      	movs	r3, #0
 80021b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021bc:	463b      	mov	r3, r7
 80021be:	4619      	mov	r1, r3
 80021c0:	4805      	ldr	r0, [pc, #20]	@ (80021d8 <MX_TIM2_Init+0x94>)
 80021c2:	f002 fb3b 	bl	800483c <HAL_TIMEx_MasterConfigSynchronization>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80021cc:	f7ff fdfa 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021d0:	bf00      	nop
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000130 	.word	0x20000130

080021dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ec:	d115      	bne.n	800221a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <HAL_TIM_Base_MspInit+0x48>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002224 <HAL_TIM_Base_MspInit+0x48>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021fe:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <HAL_TIM_Base_MspInit+0x48>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	201c      	movs	r0, #28
 8002210:	f000 fa1f 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002214:	201c      	movs	r0, #28
 8002216:	f000 fa38 	bl	800268a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800

08002228 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800222c:	4b11      	ldr	r3, [pc, #68]	@ (8002274 <MX_USART1_UART_Init+0x4c>)
 800222e:	4a12      	ldr	r2, [pc, #72]	@ (8002278 <MX_USART1_UART_Init+0x50>)
 8002230:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <MX_USART1_UART_Init+0x4c>)
 8002234:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002238:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800223a:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <MX_USART1_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002240:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <MX_USART1_UART_Init+0x4c>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002246:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <MX_USART1_UART_Init+0x4c>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800224c:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <MX_USART1_UART_Init+0x4c>)
 800224e:	220c      	movs	r2, #12
 8002250:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002252:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <MX_USART1_UART_Init+0x4c>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002258:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <MX_USART1_UART_Init+0x4c>)
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800225e:	4805      	ldr	r0, [pc, #20]	@ (8002274 <MX_USART1_UART_Init+0x4c>)
 8002260:	f002 fb7c 	bl	800495c <HAL_UART_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800226a:	f7ff fdab 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000178 	.word	0x20000178
 8002278:	40011000 	.word	0x40011000

0800227c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	@ 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1d      	ldr	r2, [pc, #116]	@ (8002310 <HAL_UART_MspInit+0x94>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d134      	bne.n	8002308 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002314 <HAL_UART_MspInit+0x98>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002314 <HAL_UART_MspInit+0x98>)
 80022a8:	f043 0310 	orr.w	r3, r3, #16
 80022ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ae:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <HAL_UART_MspInit+0x98>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <HAL_UART_MspInit+0x98>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	4a14      	ldr	r2, [pc, #80]	@ (8002314 <HAL_UART_MspInit+0x98>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ca:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <HAL_UART_MspInit+0x98>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022e8:	2307      	movs	r3, #7
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	4619      	mov	r1, r3
 80022f2:	4809      	ldr	r0, [pc, #36]	@ (8002318 <HAL_UART_MspInit+0x9c>)
 80022f4:	f000 fa76 	bl	80027e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022f8:	2200      	movs	r2, #0
 80022fa:	2100      	movs	r1, #0
 80022fc:	2025      	movs	r0, #37	@ 0x25
 80022fe:	f000 f9a8 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002302:	2025      	movs	r0, #37	@ 0x25
 8002304:	f000 f9c1 	bl	800268a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	@ 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40011000 	.word	0x40011000
 8002314:	40023800 	.word	0x40023800
 8002318:	40020000 	.word	0x40020000

0800231c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800231c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002354 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002320:	480d      	ldr	r0, [pc, #52]	@ (8002358 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002322:	490e      	ldr	r1, [pc, #56]	@ (800235c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002324:	4a0e      	ldr	r2, [pc, #56]	@ (8002360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002328:	e002      	b.n	8002330 <LoopCopyDataInit>

0800232a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800232c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232e:	3304      	adds	r3, #4

08002330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002334:	d3f9      	bcc.n	800232a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002336:	4a0b      	ldr	r2, [pc, #44]	@ (8002364 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002338:	4c0b      	ldr	r4, [pc, #44]	@ (8002368 <LoopFillZerobss+0x26>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800233c:	e001      	b.n	8002342 <LoopFillZerobss>

0800233e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002340:	3204      	adds	r2, #4

08002342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002344:	d3fb      	bcc.n	800233e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002346:	f7ff feeb 	bl	8002120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800234a:	f003 faf3 	bl	8005934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800234e:	f7ff fc2b 	bl	8001ba8 <main>
  bx  lr    
 8002352:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002354:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800235c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002360:	080089cc 	.word	0x080089cc
  ldr r2, =_sbss
 8002364:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002368:	200001c0 	.word	0x200001c0

0800236c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800236c:	e7fe      	b.n	800236c <ADC_IRQHandler>
	...

08002370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002374:	4b0e      	ldr	r3, [pc, #56]	@ (80023b0 <HAL_Init+0x40>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0d      	ldr	r2, [pc, #52]	@ (80023b0 <HAL_Init+0x40>)
 800237a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800237e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <HAL_Init+0x40>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <HAL_Init+0x40>)
 8002386:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800238a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800238c:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <HAL_Init+0x40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a07      	ldr	r2, [pc, #28]	@ (80023b0 <HAL_Init+0x40>)
 8002392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002396:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002398:	2003      	movs	r0, #3
 800239a:	f000 f94f 	bl	800263c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800239e:	200f      	movs	r0, #15
 80023a0:	f000 f808 	bl	80023b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023a4:	f7ff fe50 	bl	8002048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023c00 	.word	0x40023c00

080023b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023bc:	4b12      	ldr	r3, [pc, #72]	@ (8002408 <HAL_InitTick+0x54>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b12      	ldr	r3, [pc, #72]	@ (800240c <HAL_InitTick+0x58>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f967 	bl	80026a6 <HAL_SYSTICK_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e00e      	b.n	8002400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b0f      	cmp	r3, #15
 80023e6:	d80a      	bhi.n	80023fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e8:	2200      	movs	r2, #0
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295
 80023f0:	f000 f92f 	bl	8002652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023f4:	4a06      	ldr	r2, [pc, #24]	@ (8002410 <HAL_InitTick+0x5c>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	e000      	b.n	8002400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000018 	.word	0x20000018
 800240c:	20000020 	.word	0x20000020
 8002410:	2000001c 	.word	0x2000001c

08002414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <HAL_IncTick+0x20>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <HAL_IncTick+0x24>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4413      	add	r3, r2
 8002424:	4a04      	ldr	r2, [pc, #16]	@ (8002438 <HAL_IncTick+0x24>)
 8002426:	6013      	str	r3, [r2, #0]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000020 	.word	0x20000020
 8002438:	200001bc 	.word	0x200001bc

0800243c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return uwTick;
 8002440:	4b03      	ldr	r3, [pc, #12]	@ (8002450 <HAL_GetTick+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	200001bc 	.word	0x200001bc

08002454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff ffee 	bl	800243c <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d005      	beq.n	800247a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800246e:	4b0a      	ldr	r3, [pc, #40]	@ (8002498 <HAL_Delay+0x44>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800247a:	bf00      	nop
 800247c:	f7ff ffde 	bl	800243c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d8f7      	bhi.n	800247c <HAL_Delay+0x28>
  {
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000020 	.word	0x20000020

0800249c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ac:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024b8:	4013      	ands	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ce:	4a04      	ldr	r2, [pc, #16]	@ (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	60d3      	str	r3, [r2, #12]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e8:	4b04      	ldr	r3, [pc, #16]	@ (80024fc <__NVIC_GetPriorityGrouping+0x18>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	f003 0307 	and.w	r3, r3, #7
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	db0b      	blt.n	800252a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	4907      	ldr	r1, [pc, #28]	@ (8002538 <__NVIC_EnableIRQ+0x38>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	2001      	movs	r0, #1
 8002522:	fa00 f202 	lsl.w	r2, r0, r2
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000e100 	.word	0xe000e100

0800253c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	2b00      	cmp	r3, #0
 800254e:	db0a      	blt.n	8002566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	490c      	ldr	r1, [pc, #48]	@ (8002588 <__NVIC_SetPriority+0x4c>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	0112      	lsls	r2, r2, #4
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	440b      	add	r3, r1
 8002560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002564:	e00a      	b.n	800257c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4908      	ldr	r1, [pc, #32]	@ (800258c <__NVIC_SetPriority+0x50>)
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	3b04      	subs	r3, #4
 8002574:	0112      	lsls	r2, r2, #4
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	440b      	add	r3, r1
 800257a:	761a      	strb	r2, [r3, #24]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000e100 	.word	0xe000e100
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	@ 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f1c3 0307 	rsb	r3, r3, #7
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	bf28      	it	cs
 80025ae:	2304      	movcs	r3, #4
 80025b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d902      	bls.n	80025c0 <NVIC_EncodePriority+0x30>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3b03      	subs	r3, #3
 80025be:	e000      	b.n	80025c2 <NVIC_EncodePriority+0x32>
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	401a      	ands	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	43d9      	mvns	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	4313      	orrs	r3, r2
         );
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3724      	adds	r7, #36	@ 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002608:	d301      	bcc.n	800260e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260a:	2301      	movs	r3, #1
 800260c:	e00f      	b.n	800262e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260e:	4a0a      	ldr	r2, [pc, #40]	@ (8002638 <SysTick_Config+0x40>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002616:	210f      	movs	r1, #15
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	f7ff ff8e 	bl	800253c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002620:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <SysTick_Config+0x40>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002626:	4b04      	ldr	r3, [pc, #16]	@ (8002638 <SysTick_Config+0x40>)
 8002628:	2207      	movs	r2, #7
 800262a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	e000e010 	.word	0xe000e010

0800263c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ff29 	bl	800249c <__NVIC_SetPriorityGrouping>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002664:	f7ff ff3e 	bl	80024e4 <__NVIC_GetPriorityGrouping>
 8002668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	f7ff ff8e 	bl	8002590 <NVIC_EncodePriority>
 8002674:	4602      	mov	r2, r0
 8002676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff5d 	bl	800253c <__NVIC_SetPriority>
}
 8002682:	bf00      	nop
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff31 	bl	8002500 <__NVIC_EnableIRQ>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ffa2 	bl	80025f8 <SysTick_Config>
 80026b4:	4603      	mov	r3, r0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026cc:	f7ff feb6 	bl	800243c <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d008      	beq.n	80026f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2280      	movs	r2, #128	@ 0x80
 80026e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e052      	b.n	8002796 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0216 	bic.w	r2, r2, #22
 80026fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800270e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002714:	2b00      	cmp	r3, #0
 8002716:	d103      	bne.n	8002720 <HAL_DMA_Abort+0x62>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0208 	bic.w	r2, r2, #8
 800272e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002740:	e013      	b.n	800276a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002742:	f7ff fe7b 	bl	800243c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b05      	cmp	r3, #5
 800274e:	d90c      	bls.n	800276a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2203      	movs	r2, #3
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e015      	b.n	8002796 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e4      	bne.n	8002742 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277c:	223f      	movs	r2, #63	@ 0x3f
 800277e:	409a      	lsls	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d004      	beq.n	80027bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2280      	movs	r2, #128	@ 0x80
 80027b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e00c      	b.n	80027d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2205      	movs	r2, #5
 80027c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	@ 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	e16b      	b.n	8002ad8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002800:	2201      	movs	r2, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	429a      	cmp	r2, r3
 800281a:	f040 815a 	bne.w	8002ad2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b01      	cmp	r3, #1
 8002828:	d005      	beq.n	8002836 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002832:	2b02      	cmp	r3, #2
 8002834:	d130      	bne.n	8002898 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	2203      	movs	r2, #3
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800286c:	2201      	movs	r2, #1
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 0201 	and.w	r2, r3, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d017      	beq.n	80028d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d123      	bne.n	8002928 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	08da      	lsrs	r2, r3, #3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3208      	adds	r2, #8
 80028e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	220f      	movs	r2, #15
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	08da      	lsrs	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3208      	adds	r2, #8
 8002922:	69b9      	ldr	r1, [r7, #24]
 8002924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	2203      	movs	r2, #3
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0203 	and.w	r2, r3, #3
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80b4 	beq.w	8002ad2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	4b60      	ldr	r3, [pc, #384]	@ (8002af0 <HAL_GPIO_Init+0x30c>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	4a5f      	ldr	r2, [pc, #380]	@ (8002af0 <HAL_GPIO_Init+0x30c>)
 8002974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002978:	6453      	str	r3, [r2, #68]	@ 0x44
 800297a:	4b5d      	ldr	r3, [pc, #372]	@ (8002af0 <HAL_GPIO_Init+0x30c>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002986:	4a5b      	ldr	r2, [pc, #364]	@ (8002af4 <HAL_GPIO_Init+0x310>)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	089b      	lsrs	r3, r3, #2
 800298c:	3302      	adds	r3, #2
 800298e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	220f      	movs	r2, #15
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a52      	ldr	r2, [pc, #328]	@ (8002af8 <HAL_GPIO_Init+0x314>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d02b      	beq.n	8002a0a <HAL_GPIO_Init+0x226>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a51      	ldr	r2, [pc, #324]	@ (8002afc <HAL_GPIO_Init+0x318>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d025      	beq.n	8002a06 <HAL_GPIO_Init+0x222>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a50      	ldr	r2, [pc, #320]	@ (8002b00 <HAL_GPIO_Init+0x31c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d01f      	beq.n	8002a02 <HAL_GPIO_Init+0x21e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002b04 <HAL_GPIO_Init+0x320>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d019      	beq.n	80029fe <HAL_GPIO_Init+0x21a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002b08 <HAL_GPIO_Init+0x324>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_GPIO_Init+0x216>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4d      	ldr	r2, [pc, #308]	@ (8002b0c <HAL_GPIO_Init+0x328>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00d      	beq.n	80029f6 <HAL_GPIO_Init+0x212>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002b10 <HAL_GPIO_Init+0x32c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <HAL_GPIO_Init+0x20e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002b14 <HAL_GPIO_Init+0x330>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_GPIO_Init+0x20a>
 80029ea:	2307      	movs	r3, #7
 80029ec:	e00e      	b.n	8002a0c <HAL_GPIO_Init+0x228>
 80029ee:	2308      	movs	r3, #8
 80029f0:	e00c      	b.n	8002a0c <HAL_GPIO_Init+0x228>
 80029f2:	2306      	movs	r3, #6
 80029f4:	e00a      	b.n	8002a0c <HAL_GPIO_Init+0x228>
 80029f6:	2305      	movs	r3, #5
 80029f8:	e008      	b.n	8002a0c <HAL_GPIO_Init+0x228>
 80029fa:	2304      	movs	r3, #4
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_Init+0x228>
 80029fe:	2303      	movs	r3, #3
 8002a00:	e004      	b.n	8002a0c <HAL_GPIO_Init+0x228>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_Init+0x228>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_Init+0x228>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	f002 0203 	and.w	r2, r2, #3
 8002a12:	0092      	lsls	r2, r2, #2
 8002a14:	4093      	lsls	r3, r2
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a1c:	4935      	ldr	r1, [pc, #212]	@ (8002af4 <HAL_GPIO_Init+0x310>)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	3302      	adds	r3, #2
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b18 <HAL_GPIO_Init+0x334>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a4e:	4a32      	ldr	r2, [pc, #200]	@ (8002b18 <HAL_GPIO_Init+0x334>)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a54:	4b30      	ldr	r3, [pc, #192]	@ (8002b18 <HAL_GPIO_Init+0x334>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a78:	4a27      	ldr	r2, [pc, #156]	@ (8002b18 <HAL_GPIO_Init+0x334>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a7e:	4b26      	ldr	r3, [pc, #152]	@ (8002b18 <HAL_GPIO_Init+0x334>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b18 <HAL_GPIO_Init+0x334>)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b18 <HAL_GPIO_Init+0x334>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002acc:	4a12      	ldr	r2, [pc, #72]	@ (8002b18 <HAL_GPIO_Init+0x334>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b0f      	cmp	r3, #15
 8002adc:	f67f ae90 	bls.w	8002800 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3724      	adds	r7, #36	@ 0x24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40013800 	.word	0x40013800
 8002af8:	40020000 	.word	0x40020000
 8002afc:	40020400 	.word	0x40020400
 8002b00:	40020800 	.word	0x40020800
 8002b04:	40020c00 	.word	0x40020c00
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40021400 	.word	0x40021400
 8002b10:	40021800 	.word	0x40021800
 8002b14:	40021c00 	.word	0x40021c00
 8002b18:	40013c00 	.word	0x40013c00

08002b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b2c:	787b      	ldrb	r3, [r7, #1]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b38:	e003      	b.n	8002b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b3a:	887b      	ldrh	r3, [r7, #2]
 8002b3c:	041a      	lsls	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	619a      	str	r2, [r3, #24]
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e267      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d075      	beq.n	8002c5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b6e:	4b88      	ldr	r3, [pc, #544]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d00c      	beq.n	8002b94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7a:	4b85      	ldr	r3, [pc, #532]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d112      	bne.n	8002bac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b86:	4b82      	ldr	r3, [pc, #520]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b92:	d10b      	bne.n	8002bac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b94:	4b7e      	ldr	r3, [pc, #504]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d05b      	beq.n	8002c58 <HAL_RCC_OscConfig+0x108>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d157      	bne.n	8002c58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e242      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bb4:	d106      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x74>
 8002bb6:	4b76      	ldr	r3, [pc, #472]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a75      	ldr	r2, [pc, #468]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e01d      	b.n	8002c00 <HAL_RCC_OscConfig+0xb0>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x98>
 8002bce:	4b70      	ldr	r3, [pc, #448]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a6f      	ldr	r2, [pc, #444]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b6d      	ldr	r3, [pc, #436]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a6c      	ldr	r2, [pc, #432]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0xb0>
 8002be8:	4b69      	ldr	r3, [pc, #420]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a68      	ldr	r2, [pc, #416]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	4b66      	ldr	r3, [pc, #408]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a65      	ldr	r2, [pc, #404]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002bfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d013      	beq.n	8002c30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7ff fc18 	bl	800243c <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c10:	f7ff fc14 	bl	800243c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	@ 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e207      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	4b5b      	ldr	r3, [pc, #364]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0xc0>
 8002c2e:	e014      	b.n	8002c5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7ff fc04 	bl	800243c <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c38:	f7ff fc00 	bl	800243c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	@ 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e1f3      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	4b51      	ldr	r3, [pc, #324]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0xe8>
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d063      	beq.n	8002d2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c66:	4b4a      	ldr	r3, [pc, #296]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c72:	4b47      	ldr	r3, [pc, #284]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d11c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7e:	4b44      	ldr	r3, [pc, #272]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d116      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8a:	4b41      	ldr	r3, [pc, #260]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x152>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e1c7      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4937      	ldr	r1, [pc, #220]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb6:	e03a      	b.n	8002d2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d020      	beq.n	8002d02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc0:	4b34      	ldr	r3, [pc, #208]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7ff fbb9 	bl	800243c <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cce:	f7ff fbb5 	bl	800243c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e1a8      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cec:	4b28      	ldr	r3, [pc, #160]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4925      	ldr	r1, [pc, #148]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]
 8002d00:	e015      	b.n	8002d2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d02:	4b24      	ldr	r3, [pc, #144]	@ (8002d94 <HAL_RCC_OscConfig+0x244>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7ff fb98 	bl	800243c <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d10:	f7ff fb94 	bl	800243c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e187      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	4b1b      	ldr	r3, [pc, #108]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d036      	beq.n	8002da8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d016      	beq.n	8002d70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d42:	4b15      	ldr	r3, [pc, #84]	@ (8002d98 <HAL_RCC_OscConfig+0x248>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d48:	f7ff fb78 	bl	800243c <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d50:	f7ff fb74 	bl	800243c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e167      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_RCC_OscConfig+0x240>)
 8002d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x200>
 8002d6e:	e01b      	b.n	8002da8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d70:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <HAL_RCC_OscConfig+0x248>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d76:	f7ff fb61 	bl	800243c <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	e00e      	b.n	8002d9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7e:	f7ff fb5d 	bl	800243c <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d907      	bls.n	8002d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e150      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
 8002d90:	40023800 	.word	0x40023800
 8002d94:	42470000 	.word	0x42470000
 8002d98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d9c:	4b88      	ldr	r3, [pc, #544]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1ea      	bne.n	8002d7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8097 	beq.w	8002ee4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db6:	2300      	movs	r3, #0
 8002db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dba:	4b81      	ldr	r3, [pc, #516]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10f      	bne.n	8002de6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	4b7d      	ldr	r3, [pc, #500]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	4a7c      	ldr	r2, [pc, #496]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dd6:	4b7a      	ldr	r3, [pc, #488]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de2:	2301      	movs	r3, #1
 8002de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de6:	4b77      	ldr	r3, [pc, #476]	@ (8002fc4 <HAL_RCC_OscConfig+0x474>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d118      	bne.n	8002e24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df2:	4b74      	ldr	r3, [pc, #464]	@ (8002fc4 <HAL_RCC_OscConfig+0x474>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a73      	ldr	r2, [pc, #460]	@ (8002fc4 <HAL_RCC_OscConfig+0x474>)
 8002df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dfe:	f7ff fb1d 	bl	800243c <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e06:	f7ff fb19 	bl	800243c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e10c      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	4b6a      	ldr	r3, [pc, #424]	@ (8002fc4 <HAL_RCC_OscConfig+0x474>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCC_OscConfig+0x2ea>
 8002e2c:	4b64      	ldr	r3, [pc, #400]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e30:	4a63      	ldr	r2, [pc, #396]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e38:	e01c      	b.n	8002e74 <HAL_RCC_OscConfig+0x324>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b05      	cmp	r3, #5
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x30c>
 8002e42:	4b5f      	ldr	r3, [pc, #380]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e46:	4a5e      	ldr	r2, [pc, #376]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e4e:	4b5c      	ldr	r3, [pc, #368]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e52:	4a5b      	ldr	r2, [pc, #364]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e5a:	e00b      	b.n	8002e74 <HAL_RCC_OscConfig+0x324>
 8002e5c:	4b58      	ldr	r3, [pc, #352]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e60:	4a57      	ldr	r2, [pc, #348]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e68:	4b55      	ldr	r3, [pc, #340]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6c:	4a54      	ldr	r2, [pc, #336]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002e6e:	f023 0304 	bic.w	r3, r3, #4
 8002e72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d015      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7c:	f7ff fade 	bl	800243c <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e82:	e00a      	b.n	8002e9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e84:	f7ff fada 	bl	800243c <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e0cb      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9a:	4b49      	ldr	r3, [pc, #292]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0ee      	beq.n	8002e84 <HAL_RCC_OscConfig+0x334>
 8002ea6:	e014      	b.n	8002ed2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea8:	f7ff fac8 	bl	800243c <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb0:	f7ff fac4 	bl	800243c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e0b5      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1ee      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d105      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed8:	4b39      	ldr	r3, [pc, #228]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	4a38      	ldr	r2, [pc, #224]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002ede:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ee2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80a1 	beq.w	8003030 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eee:	4b34      	ldr	r3, [pc, #208]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d05c      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d141      	bne.n	8002f86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f02:	4b31      	ldr	r3, [pc, #196]	@ (8002fc8 <HAL_RCC_OscConfig+0x478>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7ff fa98 	bl	800243c <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f10:	f7ff fa94 	bl	800243c <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e087      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	4b27      	ldr	r3, [pc, #156]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	019b      	lsls	r3, r3, #6
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f44:	085b      	lsrs	r3, r3, #1
 8002f46:	3b01      	subs	r3, #1
 8002f48:	041b      	lsls	r3, r3, #16
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	491b      	ldr	r1, [pc, #108]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f58:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc8 <HAL_RCC_OscConfig+0x478>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7ff fa6d 	bl	800243c <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f66:	f7ff fa69 	bl	800243c <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e05c      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f78:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x416>
 8002f84:	e054      	b.n	8003030 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f86:	4b10      	ldr	r3, [pc, #64]	@ (8002fc8 <HAL_RCC_OscConfig+0x478>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7ff fa56 	bl	800243c <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f94:	f7ff fa52 	bl	800243c <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e045      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x444>
 8002fb2:	e03d      	b.n	8003030 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e038      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40007000 	.word	0x40007000
 8002fc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800303c <HAL_RCC_OscConfig+0x4ec>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d028      	beq.n	800302c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d121      	bne.n	800302c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d11a      	bne.n	800302c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003002:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003004:	4293      	cmp	r3, r2
 8003006:	d111      	bne.n	800302c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	3b01      	subs	r3, #1
 8003016:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d107      	bne.n	800302c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800

08003040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0cc      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003054:	4b68      	ldr	r3, [pc, #416]	@ (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d90c      	bls.n	800307c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b65      	ldr	r3, [pc, #404]	@ (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b63      	ldr	r3, [pc, #396]	@ (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0b8      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003094:	4b59      	ldr	r3, [pc, #356]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a58      	ldr	r2, [pc, #352]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800309e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ac:	4b53      	ldr	r3, [pc, #332]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a52      	ldr	r2, [pc, #328]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	4b50      	ldr	r3, [pc, #320]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	494d      	ldr	r1, [pc, #308]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d044      	beq.n	8003160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b47      	ldr	r3, [pc, #284]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d119      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e07f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d003      	beq.n	80030fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d107      	bne.n	800310e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fe:	4b3f      	ldr	r3, [pc, #252]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e06f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310e:	4b3b      	ldr	r3, [pc, #236]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e067      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311e:	4b37      	ldr	r3, [pc, #220]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f023 0203 	bic.w	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4934      	ldr	r1, [pc, #208]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	4313      	orrs	r3, r2
 800312e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003130:	f7ff f984 	bl	800243c <HAL_GetTick>
 8003134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003136:	e00a      	b.n	800314e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003138:	f7ff f980 	bl	800243c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e04f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	4b2b      	ldr	r3, [pc, #172]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 020c 	and.w	r2, r3, #12
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	429a      	cmp	r2, r3
 800315e:	d1eb      	bne.n	8003138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003160:	4b25      	ldr	r3, [pc, #148]	@ (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d20c      	bcs.n	8003188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b22      	ldr	r3, [pc, #136]	@ (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b20      	ldr	r3, [pc, #128]	@ (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e032      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003194:	4b19      	ldr	r3, [pc, #100]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4916      	ldr	r1, [pc, #88]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031b2:	4b12      	ldr	r3, [pc, #72]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	490e      	ldr	r1, [pc, #56]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031c6:	f000 f821 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80031ca:	4602      	mov	r2, r0
 80031cc:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	490a      	ldr	r1, [pc, #40]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	5ccb      	ldrb	r3, [r1, r3]
 80031da:	fa22 f303 	lsr.w	r3, r2, r3
 80031de:	4a09      	ldr	r2, [pc, #36]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031e2:	4b09      	ldr	r3, [pc, #36]	@ (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff f8e4 	bl	80023b4 <HAL_InitTick>

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40023c00 	.word	0x40023c00
 80031fc:	40023800 	.word	0x40023800
 8003200:	080089a4 	.word	0x080089a4
 8003204:	20000018 	.word	0x20000018
 8003208:	2000001c 	.word	0x2000001c

0800320c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800320c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003210:	b094      	sub	sp, #80	@ 0x50
 8003212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	647b      	str	r3, [r7, #68]	@ 0x44
 8003218:	2300      	movs	r3, #0
 800321a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800321c:	2300      	movs	r3, #0
 800321e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003224:	4b79      	ldr	r3, [pc, #484]	@ (800340c <HAL_RCC_GetSysClockFreq+0x200>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b08      	cmp	r3, #8
 800322e:	d00d      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x40>
 8003230:	2b08      	cmp	r3, #8
 8003232:	f200 80e1 	bhi.w	80033f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x34>
 800323a:	2b04      	cmp	r3, #4
 800323c:	d003      	beq.n	8003246 <HAL_RCC_GetSysClockFreq+0x3a>
 800323e:	e0db      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003240:	4b73      	ldr	r3, [pc, #460]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x204>)
 8003242:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003244:	e0db      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003246:	4b73      	ldr	r3, [pc, #460]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x208>)
 8003248:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800324a:	e0d8      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800324c:	4b6f      	ldr	r3, [pc, #444]	@ (800340c <HAL_RCC_GetSysClockFreq+0x200>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003254:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003256:	4b6d      	ldr	r3, [pc, #436]	@ (800340c <HAL_RCC_GetSysClockFreq+0x200>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d063      	beq.n	800332a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003262:	4b6a      	ldr	r3, [pc, #424]	@ (800340c <HAL_RCC_GetSysClockFreq+0x200>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	099b      	lsrs	r3, r3, #6
 8003268:	2200      	movs	r2, #0
 800326a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800326c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800326e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003274:	633b      	str	r3, [r7, #48]	@ 0x30
 8003276:	2300      	movs	r3, #0
 8003278:	637b      	str	r3, [r7, #52]	@ 0x34
 800327a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800327e:	4622      	mov	r2, r4
 8003280:	462b      	mov	r3, r5
 8003282:	f04f 0000 	mov.w	r0, #0
 8003286:	f04f 0100 	mov.w	r1, #0
 800328a:	0159      	lsls	r1, r3, #5
 800328c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003290:	0150      	lsls	r0, r2, #5
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4621      	mov	r1, r4
 8003298:	1a51      	subs	r1, r2, r1
 800329a:	6139      	str	r1, [r7, #16]
 800329c:	4629      	mov	r1, r5
 800329e:	eb63 0301 	sbc.w	r3, r3, r1
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032b0:	4659      	mov	r1, fp
 80032b2:	018b      	lsls	r3, r1, #6
 80032b4:	4651      	mov	r1, sl
 80032b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ba:	4651      	mov	r1, sl
 80032bc:	018a      	lsls	r2, r1, #6
 80032be:	4651      	mov	r1, sl
 80032c0:	ebb2 0801 	subs.w	r8, r2, r1
 80032c4:	4659      	mov	r1, fp
 80032c6:	eb63 0901 	sbc.w	r9, r3, r1
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032de:	4690      	mov	r8, r2
 80032e0:	4699      	mov	r9, r3
 80032e2:	4623      	mov	r3, r4
 80032e4:	eb18 0303 	adds.w	r3, r8, r3
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	462b      	mov	r3, r5
 80032ec:	eb49 0303 	adc.w	r3, r9, r3
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032fe:	4629      	mov	r1, r5
 8003300:	024b      	lsls	r3, r1, #9
 8003302:	4621      	mov	r1, r4
 8003304:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003308:	4621      	mov	r1, r4
 800330a:	024a      	lsls	r2, r1, #9
 800330c:	4610      	mov	r0, r2
 800330e:	4619      	mov	r1, r3
 8003310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003312:	2200      	movs	r2, #0
 8003314:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003316:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003318:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800331c:	f7fc ff54 	bl	80001c8 <__aeabi_uldivmod>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4613      	mov	r3, r2
 8003326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003328:	e058      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332a:	4b38      	ldr	r3, [pc, #224]	@ (800340c <HAL_RCC_GetSysClockFreq+0x200>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	099b      	lsrs	r3, r3, #6
 8003330:	2200      	movs	r2, #0
 8003332:	4618      	mov	r0, r3
 8003334:	4611      	mov	r1, r2
 8003336:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800333a:	623b      	str	r3, [r7, #32]
 800333c:	2300      	movs	r3, #0
 800333e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003340:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003344:	4642      	mov	r2, r8
 8003346:	464b      	mov	r3, r9
 8003348:	f04f 0000 	mov.w	r0, #0
 800334c:	f04f 0100 	mov.w	r1, #0
 8003350:	0159      	lsls	r1, r3, #5
 8003352:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003356:	0150      	lsls	r0, r2, #5
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4641      	mov	r1, r8
 800335e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003362:	4649      	mov	r1, r9
 8003364:	eb63 0b01 	sbc.w	fp, r3, r1
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003374:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003378:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800337c:	ebb2 040a 	subs.w	r4, r2, sl
 8003380:	eb63 050b 	sbc.w	r5, r3, fp
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	00eb      	lsls	r3, r5, #3
 800338e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003392:	00e2      	lsls	r2, r4, #3
 8003394:	4614      	mov	r4, r2
 8003396:	461d      	mov	r5, r3
 8003398:	4643      	mov	r3, r8
 800339a:	18e3      	adds	r3, r4, r3
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	464b      	mov	r3, r9
 80033a0:	eb45 0303 	adc.w	r3, r5, r3
 80033a4:	607b      	str	r3, [r7, #4]
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033b2:	4629      	mov	r1, r5
 80033b4:	028b      	lsls	r3, r1, #10
 80033b6:	4621      	mov	r1, r4
 80033b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033bc:	4621      	mov	r1, r4
 80033be:	028a      	lsls	r2, r1, #10
 80033c0:	4610      	mov	r0, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033c6:	2200      	movs	r2, #0
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	61fa      	str	r2, [r7, #28]
 80033cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033d0:	f7fc fefa 	bl	80001c8 <__aeabi_uldivmod>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4613      	mov	r3, r2
 80033da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033dc:	4b0b      	ldr	r3, [pc, #44]	@ (800340c <HAL_RCC_GetSysClockFreq+0x200>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	0c1b      	lsrs	r3, r3, #16
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	3301      	adds	r3, #1
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80033ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033f6:	e002      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x204>)
 80033fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003400:	4618      	mov	r0, r3
 8003402:	3750      	adds	r7, #80	@ 0x50
 8003404:	46bd      	mov	sp, r7
 8003406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800
 8003410:	00f42400 	.word	0x00f42400
 8003414:	007a1200 	.word	0x007a1200

08003418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800341c:	4b03      	ldr	r3, [pc, #12]	@ (800342c <HAL_RCC_GetHCLKFreq+0x14>)
 800341e:	681b      	ldr	r3, [r3, #0]
}
 8003420:	4618      	mov	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000018 	.word	0x20000018

08003430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003434:	f7ff fff0 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 8003438:	4602      	mov	r2, r0
 800343a:	4b05      	ldr	r3, [pc, #20]	@ (8003450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	0a9b      	lsrs	r3, r3, #10
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	4903      	ldr	r1, [pc, #12]	@ (8003454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003446:	5ccb      	ldrb	r3, [r1, r3]
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40023800 	.word	0x40023800
 8003454:	080089b4 	.word	0x080089b4

08003458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800345c:	f7ff ffdc 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b05      	ldr	r3, [pc, #20]	@ (8003478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	0b5b      	lsrs	r3, r3, #13
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4903      	ldr	r1, [pc, #12]	@ (800347c <HAL_RCC_GetPCLK2Freq+0x24>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40023800 	.word	0x40023800
 800347c:	080089b4 	.word	0x080089b4

08003480 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e07b      	b.n	800358a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	d108      	bne.n	80034ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034a2:	d009      	beq.n	80034b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	61da      	str	r2, [r3, #28]
 80034aa:	e005      	b.n	80034b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fe fd70 	bl	8001fb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353c:	ea42 0103 	orr.w	r1, r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003544:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	0c1b      	lsrs	r3, r3, #16
 8003556:	f003 0104 	and.w	r1, r3, #4
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	f003 0210 	and.w	r2, r3, #16
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003578:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b088      	sub	sp, #32
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	4613      	mov	r3, r2
 80035a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_SPI_Transmit+0x22>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e126      	b.n	8003802 <HAL_SPI_Transmit+0x270>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035bc:	f7fe ff3e 	bl	800243c <HAL_GetTick>
 80035c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d002      	beq.n	80035d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
 80035d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035d6:	e10b      	b.n	80037f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_SPI_Transmit+0x52>
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d102      	bne.n	80035ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035e8:	e102      	b.n	80037f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2203      	movs	r2, #3
 80035ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	88fa      	ldrh	r2, [r7, #6]
 8003602:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	88fa      	ldrh	r2, [r7, #6]
 8003608:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003630:	d10f      	bne.n	8003652 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003640:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003650:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365c:	2b40      	cmp	r3, #64	@ 0x40
 800365e:	d007      	beq.n	8003670 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003678:	d14b      	bne.n	8003712 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_SPI_Transmit+0xf6>
 8003682:	8afb      	ldrh	r3, [r7, #22]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d13e      	bne.n	8003706 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368c:	881a      	ldrh	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003698:	1c9a      	adds	r2, r3, #2
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036ac:	e02b      	b.n	8003706 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d112      	bne.n	80036e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c0:	881a      	ldrh	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	1c9a      	adds	r2, r3, #2
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80036e0:	e011      	b.n	8003706 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e2:	f7fe feab 	bl	800243c <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d803      	bhi.n	80036fa <HAL_SPI_Transmit+0x168>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d102      	bne.n	8003700 <HAL_SPI_Transmit+0x16e>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d102      	bne.n	8003706 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003704:	e074      	b.n	80037f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ce      	bne.n	80036ae <HAL_SPI_Transmit+0x11c>
 8003710:	e04c      	b.n	80037ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_SPI_Transmit+0x18e>
 800371a:	8afb      	ldrh	r3, [r7, #22]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d140      	bne.n	80037a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	7812      	ldrb	r2, [r2, #0]
 800372c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003746:	e02c      	b.n	80037a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d113      	bne.n	800377e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	330c      	adds	r3, #12
 8003760:	7812      	ldrb	r2, [r2, #0]
 8003762:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800377c:	e011      	b.n	80037a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800377e:	f7fe fe5d 	bl	800243c <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d803      	bhi.n	8003796 <HAL_SPI_Transmit+0x204>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d102      	bne.n	800379c <HAL_SPI_Transmit+0x20a>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037a0:	e026      	b.n	80037f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1cd      	bne.n	8003748 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	6839      	ldr	r1, [r7, #0]
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fbcb 	bl	8003f4c <SPI_EndRxTxTransaction>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e000      	b.n	80037f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80037ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003800:	7ffb      	ldrb	r3, [r7, #31]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b088      	sub	sp, #32
 800380e:	af02      	add	r7, sp, #8
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	603b      	str	r3, [r7, #0]
 8003816:	4613      	mov	r3, r2
 8003818:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003826:	d112      	bne.n	800384e <HAL_SPI_Receive+0x44>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10e      	bne.n	800384e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2204      	movs	r2, #4
 8003834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003838:	88fa      	ldrh	r2, [r7, #6]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f8f1 	bl	8003a2c <HAL_SPI_TransmitReceive>
 800384a:	4603      	mov	r3, r0
 800384c:	e0ea      	b.n	8003a24 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_SPI_Receive+0x52>
 8003858:	2302      	movs	r3, #2
 800385a:	e0e3      	b.n	8003a24 <HAL_SPI_Receive+0x21a>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003864:	f7fe fdea 	bl	800243c <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d002      	beq.n	800387c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003876:	2302      	movs	r3, #2
 8003878:	75fb      	strb	r3, [r7, #23]
    goto error;
 800387a:	e0ca      	b.n	8003a12 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_SPI_Receive+0x7e>
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d102      	bne.n	800388e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800388c:	e0c1      	b.n	8003a12 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2204      	movs	r2, #4
 8003892:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	88fa      	ldrh	r2, [r7, #6]
 80038a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	88fa      	ldrh	r2, [r7, #6]
 80038ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038d4:	d10f      	bne.n	80038f6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003900:	2b40      	cmp	r3, #64	@ 0x40
 8003902:	d007      	beq.n	8003914 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003912:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d162      	bne.n	80039e2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800391c:	e02e      	b.n	800397c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d115      	bne.n	8003958 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f103 020c 	add.w	r2, r3, #12
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003938:	7812      	ldrb	r2, [r2, #0]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003956:	e011      	b.n	800397c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003958:	f7fe fd70 	bl	800243c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d803      	bhi.n	8003970 <HAL_SPI_Receive+0x166>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396e:	d102      	bne.n	8003976 <HAL_SPI_Receive+0x16c>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d102      	bne.n	800397c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	75fb      	strb	r3, [r7, #23]
          goto error;
 800397a:	e04a      	b.n	8003a12 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1cb      	bne.n	800391e <HAL_SPI_Receive+0x114>
 8003986:	e031      	b.n	80039ec <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b01      	cmp	r3, #1
 8003994:	d113      	bne.n	80039be <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a0:	b292      	uxth	r2, r2
 80039a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a8:	1c9a      	adds	r2, r3, #2
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039bc:	e011      	b.n	80039e2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039be:	f7fe fd3d 	bl	800243c <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d803      	bhi.n	80039d6 <HAL_SPI_Receive+0x1cc>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d102      	bne.n	80039dc <HAL_SPI_Receive+0x1d2>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039e0:	e017      	b.n	8003a12 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1cd      	bne.n	8003988 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	6839      	ldr	r1, [r7, #0]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fa45 	bl	8003e80 <SPI_EndRxTransaction>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	75fb      	strb	r3, [r7, #23]
 8003a0e:	e000      	b.n	8003a12 <HAL_SPI_Receive+0x208>
  }

error :
 8003a10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08c      	sub	sp, #48	@ 0x30
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_SPI_TransmitReceive+0x26>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e18a      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x33c>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a5a:	f7fe fcef 	bl	800243c <HAL_GetTick>
 8003a5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a70:	887b      	ldrh	r3, [r7, #2]
 8003a72:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d00f      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x70>
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a82:	d107      	bne.n	8003a94 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d103      	bne.n	8003a94 <HAL_SPI_TransmitReceive+0x68>
 8003a8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d003      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
 8003a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003a9a:	e15b      	b.n	8003d54 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_SPI_TransmitReceive+0x82>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_SPI_TransmitReceive+0x82>
 8003aa8:	887b      	ldrh	r3, [r7, #2]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d103      	bne.n	8003ab6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003ab4:	e14e      	b.n	8003d54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d003      	beq.n	8003aca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2205      	movs	r2, #5
 8003ac6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	887a      	ldrh	r2, [r7, #2]
 8003ada:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	887a      	ldrh	r2, [r7, #2]
 8003ae0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	887a      	ldrh	r2, [r7, #2]
 8003af2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0a:	2b40      	cmp	r3, #64	@ 0x40
 8003b0c:	d007      	beq.n	8003b1e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b26:	d178      	bne.n	8003c1a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_SPI_TransmitReceive+0x10a>
 8003b30:	8b7b      	ldrh	r3, [r7, #26]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d166      	bne.n	8003c04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	881a      	ldrh	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b46:	1c9a      	adds	r2, r3, #2
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b5a:	e053      	b.n	8003c04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d11b      	bne.n	8003ba2 <HAL_SPI_TransmitReceive+0x176>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d016      	beq.n	8003ba2 <HAL_SPI_TransmitReceive+0x176>
 8003b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d113      	bne.n	8003ba2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	881a      	ldrh	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8a:	1c9a      	adds	r2, r3, #2
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d119      	bne.n	8003be4 <HAL_SPI_TransmitReceive+0x1b8>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d014      	beq.n	8003be4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc4:	b292      	uxth	r2, r2
 8003bc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bcc:	1c9a      	adds	r2, r3, #2
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003be0:	2301      	movs	r3, #1
 8003be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003be4:	f7fe fc2a 	bl	800243c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d807      	bhi.n	8003c04 <HAL_SPI_TransmitReceive+0x1d8>
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfa:	d003      	beq.n	8003c04 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8003c02:	e0a7      	b.n	8003d54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1a6      	bne.n	8003b5c <HAL_SPI_TransmitReceive+0x130>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1a1      	bne.n	8003b5c <HAL_SPI_TransmitReceive+0x130>
 8003c18:	e07c      	b.n	8003d14 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <HAL_SPI_TransmitReceive+0x1fc>
 8003c22:	8b7b      	ldrh	r3, [r7, #26]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d16b      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	7812      	ldrb	r2, [r2, #0]
 8003c34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c4e:	e057      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d11c      	bne.n	8003c98 <HAL_SPI_TransmitReceive+0x26c>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d017      	beq.n	8003c98 <HAL_SPI_TransmitReceive+0x26c>
 8003c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d114      	bne.n	8003c98 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	7812      	ldrb	r2, [r2, #0]
 8003c7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d119      	bne.n	8003cda <HAL_SPI_TransmitReceive+0x2ae>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d014      	beq.n	8003cda <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cda:	f7fe fbaf 	bl	800243c <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d803      	bhi.n	8003cf2 <HAL_SPI_TransmitReceive+0x2c6>
 8003cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf0:	d102      	bne.n	8003cf8 <HAL_SPI_TransmitReceive+0x2cc>
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d103      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8003cfe:	e029      	b.n	8003d54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1a2      	bne.n	8003c50 <HAL_SPI_TransmitReceive+0x224>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d19d      	bne.n	8003c50 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d16:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f917 	bl	8003f4c <SPI_EndRxTxTransaction>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d006      	beq.n	8003d32 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003d30:	e010      	b.n	8003d54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10b      	bne.n	8003d52 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	e000      	b.n	8003d54 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003d64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3730      	adds	r7, #48	@ 0x30
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d80:	f7fe fb5c 	bl	800243c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d90:	f7fe fb54 	bl	800243c <HAL_GetTick>
 8003d94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d96:	4b39      	ldr	r3, [pc, #228]	@ (8003e7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	015b      	lsls	r3, r3, #5
 8003d9c:	0d1b      	lsrs	r3, r3, #20
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	fb02 f303 	mul.w	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003da6:	e054      	b.n	8003e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d050      	beq.n	8003e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003db0:	f7fe fb44 	bl	800243c <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d902      	bls.n	8003dc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d13d      	bne.n	8003e42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dde:	d111      	bne.n	8003e04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de8:	d004      	beq.n	8003df4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003df2:	d107      	bne.n	8003e04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e0c:	d10f      	bne.n	8003e2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e017      	b.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d19b      	bne.n	8003da8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000018 	.word	0x20000018

08003e80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e94:	d111      	bne.n	8003eba <SPI_EndRxTransaction+0x3a>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e9e:	d004      	beq.n	8003eaa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea8:	d107      	bne.n	8003eba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eb8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ec2:	d12a      	bne.n	8003f1a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ecc:	d012      	beq.n	8003ef4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2180      	movs	r1, #128	@ 0x80
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7ff ff49 	bl	8003d70 <SPI_WaitFlagStateUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d02d      	beq.n	8003f40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee8:	f043 0220 	orr.w	r2, r3, #32
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e026      	b.n	8003f42 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2200      	movs	r2, #0
 8003efc:	2101      	movs	r1, #1
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f7ff ff36 	bl	8003d70 <SPI_WaitFlagStateUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01a      	beq.n	8003f40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0e:	f043 0220 	orr.w	r2, r3, #32
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e013      	b.n	8003f42 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2200      	movs	r2, #0
 8003f22:	2101      	movs	r1, #1
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff ff23 	bl	8003d70 <SPI_WaitFlagStateUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e000      	b.n	8003f42 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f58:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc8 <SPI_EndRxTxTransaction+0x7c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003fcc <SPI_EndRxTxTransaction+0x80>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	0d5b      	lsrs	r3, r3, #21
 8003f64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f68:	fb02 f303 	mul.w	r3, r2, r3
 8003f6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f76:	d112      	bne.n	8003f9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2180      	movs	r1, #128	@ 0x80
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f7ff fef4 	bl	8003d70 <SPI_WaitFlagStateUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f92:	f043 0220 	orr.w	r2, r3, #32
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e00f      	b.n	8003fbe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb4:	2b80      	cmp	r3, #128	@ 0x80
 8003fb6:	d0f2      	beq.n	8003f9e <SPI_EndRxTxTransaction+0x52>
 8003fb8:	e000      	b.n	8003fbc <SPI_EndRxTxTransaction+0x70>
        break;
 8003fba:	bf00      	nop
  }

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000018 	.word	0x20000018
 8003fcc:	165e9f81 	.word	0x165e9f81

08003fd0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e034      	b.n	8004050 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f7fc fef2 	bl	8000de4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3308      	adds	r3, #8
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f001 fbba 	bl	8005784 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	461a      	mov	r2, r3
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	f001 fc04 	bl	8005828 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6858      	ldr	r0, [r3, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	f001 fc39 	bl	80058a4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	6892      	ldr	r2, [r2, #8]
 800403a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	6892      	ldr	r2, [r2, #8]
 8004046:	f041 0101 	orr.w	r1, r1, #1
 800404a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e041      	b.n	80040ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fe f8ac 	bl	80021dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f000 fa96 	bl	80045c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d001      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e04e      	b.n	80041ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a23      	ldr	r2, [pc, #140]	@ (80041bc <HAL_TIM_Base_Start_IT+0xc4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d022      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800413a:	d01d      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1f      	ldr	r2, [pc, #124]	@ (80041c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d018      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1e      	ldr	r2, [pc, #120]	@ (80041c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d013      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1c      	ldr	r2, [pc, #112]	@ (80041c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00e      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1b      	ldr	r2, [pc, #108]	@ (80041cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d009      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a19      	ldr	r2, [pc, #100]	@ (80041d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a18      	ldr	r2, [pc, #96]	@ (80041d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d111      	bne.n	800419c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b06      	cmp	r3, #6
 8004188:	d010      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0201 	orr.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419a:	e007      	b.n	80041ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800
 80041c8:	40000c00 	.word	0x40000c00
 80041cc:	40010400 	.word	0x40010400
 80041d0:	40014000 	.word	0x40014000
 80041d4:	40001800 	.word	0x40001800

080041d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d122      	bne.n	8004234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d11b      	bne.n	8004234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0202 	mvn.w	r2, #2
 8004204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f9b5 	bl	800458a <HAL_TIM_IC_CaptureCallback>
 8004220:	e005      	b.n	800422e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f9a7 	bl	8004576 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f9b8 	bl	800459e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b04      	cmp	r3, #4
 8004240:	d122      	bne.n	8004288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b04      	cmp	r3, #4
 800424e:	d11b      	bne.n	8004288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0204 	mvn.w	r2, #4
 8004258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2202      	movs	r2, #2
 800425e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f98b 	bl	800458a <HAL_TIM_IC_CaptureCallback>
 8004274:	e005      	b.n	8004282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f97d 	bl	8004576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f98e 	bl	800459e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b08      	cmp	r3, #8
 8004294:	d122      	bne.n	80042dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d11b      	bne.n	80042dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0208 	mvn.w	r2, #8
 80042ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2204      	movs	r2, #4
 80042b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f961 	bl	800458a <HAL_TIM_IC_CaptureCallback>
 80042c8:	e005      	b.n	80042d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f953 	bl	8004576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f964 	bl	800459e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d122      	bne.n	8004330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d11b      	bne.n	8004330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0210 	mvn.w	r2, #16
 8004300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2208      	movs	r2, #8
 8004306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f937 	bl	800458a <HAL_TIM_IC_CaptureCallback>
 800431c:	e005      	b.n	800432a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f929 	bl	8004576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f93a 	bl	800459e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b01      	cmp	r3, #1
 800433c:	d10e      	bne.n	800435c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d107      	bne.n	800435c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0201 	mvn.w	r2, #1
 8004354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fd fd86 	bl	8001e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004366:	2b80      	cmp	r3, #128	@ 0x80
 8004368:	d10e      	bne.n	8004388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004374:	2b80      	cmp	r3, #128	@ 0x80
 8004376:	d107      	bne.n	8004388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fae0 	bl	8004948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004392:	2b40      	cmp	r3, #64	@ 0x40
 8004394:	d10e      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a0:	2b40      	cmp	r3, #64	@ 0x40
 80043a2:	d107      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f8ff 	bl	80045b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d10e      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d107      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0220 	mvn.w	r2, #32
 80043d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 faaa 	bl	8004934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_TIM_ConfigClockSource+0x1c>
 8004400:	2302      	movs	r3, #2
 8004402:	e0b4      	b.n	800456e <HAL_TIM_ConfigClockSource+0x186>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800442a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800443c:	d03e      	beq.n	80044bc <HAL_TIM_ConfigClockSource+0xd4>
 800443e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004442:	f200 8087 	bhi.w	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 8004446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800444a:	f000 8086 	beq.w	800455a <HAL_TIM_ConfigClockSource+0x172>
 800444e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004452:	d87f      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 8004454:	2b70      	cmp	r3, #112	@ 0x70
 8004456:	d01a      	beq.n	800448e <HAL_TIM_ConfigClockSource+0xa6>
 8004458:	2b70      	cmp	r3, #112	@ 0x70
 800445a:	d87b      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 800445c:	2b60      	cmp	r3, #96	@ 0x60
 800445e:	d050      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x11a>
 8004460:	2b60      	cmp	r3, #96	@ 0x60
 8004462:	d877      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 8004464:	2b50      	cmp	r3, #80	@ 0x50
 8004466:	d03c      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0xfa>
 8004468:	2b50      	cmp	r3, #80	@ 0x50
 800446a:	d873      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 800446c:	2b40      	cmp	r3, #64	@ 0x40
 800446e:	d058      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0x13a>
 8004470:	2b40      	cmp	r3, #64	@ 0x40
 8004472:	d86f      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	2b30      	cmp	r3, #48	@ 0x30
 8004476:	d064      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x15a>
 8004478:	2b30      	cmp	r3, #48	@ 0x30
 800447a:	d86b      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 800447c:	2b20      	cmp	r3, #32
 800447e:	d060      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x15a>
 8004480:	2b20      	cmp	r3, #32
 8004482:	d867      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d05c      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x15a>
 8004488:	2b10      	cmp	r3, #16
 800448a:	d05a      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x15a>
 800448c:	e062      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6899      	ldr	r1, [r3, #8]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f000 f9ad 	bl	80047fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	609a      	str	r2, [r3, #8]
      break;
 80044ba:	e04f      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	6899      	ldr	r1, [r3, #8]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f000 f996 	bl	80047fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044de:	609a      	str	r2, [r3, #8]
      break;
 80044e0:	e03c      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6859      	ldr	r1, [r3, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f000 f90a 	bl	8004708 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2150      	movs	r1, #80	@ 0x50
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f963 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 8004500:	e02c      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6859      	ldr	r1, [r3, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	461a      	mov	r2, r3
 8004510:	f000 f929 	bl	8004766 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2160      	movs	r1, #96	@ 0x60
 800451a:	4618      	mov	r0, r3
 800451c:	f000 f953 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 8004520:	e01c      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6859      	ldr	r1, [r3, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	461a      	mov	r2, r3
 8004530:	f000 f8ea 	bl	8004708 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2140      	movs	r1, #64	@ 0x40
 800453a:	4618      	mov	r0, r3
 800453c:	f000 f943 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 8004540:	e00c      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4619      	mov	r1, r3
 800454c:	4610      	mov	r0, r2
 800454e:	f000 f93a 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 8004552:	e003      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      break;
 8004558:	e000      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800455a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800456c:	7bfb      	ldrb	r3, [r7, #15]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a40      	ldr	r2, [pc, #256]	@ (80046dc <TIM_Base_SetConfig+0x114>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d013      	beq.n	8004608 <TIM_Base_SetConfig+0x40>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e6:	d00f      	beq.n	8004608 <TIM_Base_SetConfig+0x40>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a3d      	ldr	r2, [pc, #244]	@ (80046e0 <TIM_Base_SetConfig+0x118>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00b      	beq.n	8004608 <TIM_Base_SetConfig+0x40>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a3c      	ldr	r2, [pc, #240]	@ (80046e4 <TIM_Base_SetConfig+0x11c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d007      	beq.n	8004608 <TIM_Base_SetConfig+0x40>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a3b      	ldr	r2, [pc, #236]	@ (80046e8 <TIM_Base_SetConfig+0x120>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_Base_SetConfig+0x40>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a3a      	ldr	r2, [pc, #232]	@ (80046ec <TIM_Base_SetConfig+0x124>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d108      	bne.n	800461a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800460e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a2f      	ldr	r2, [pc, #188]	@ (80046dc <TIM_Base_SetConfig+0x114>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d02b      	beq.n	800467a <TIM_Base_SetConfig+0xb2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004628:	d027      	beq.n	800467a <TIM_Base_SetConfig+0xb2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a2c      	ldr	r2, [pc, #176]	@ (80046e0 <TIM_Base_SetConfig+0x118>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d023      	beq.n	800467a <TIM_Base_SetConfig+0xb2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a2b      	ldr	r2, [pc, #172]	@ (80046e4 <TIM_Base_SetConfig+0x11c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d01f      	beq.n	800467a <TIM_Base_SetConfig+0xb2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a2a      	ldr	r2, [pc, #168]	@ (80046e8 <TIM_Base_SetConfig+0x120>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d01b      	beq.n	800467a <TIM_Base_SetConfig+0xb2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a29      	ldr	r2, [pc, #164]	@ (80046ec <TIM_Base_SetConfig+0x124>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d017      	beq.n	800467a <TIM_Base_SetConfig+0xb2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a28      	ldr	r2, [pc, #160]	@ (80046f0 <TIM_Base_SetConfig+0x128>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <TIM_Base_SetConfig+0xb2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a27      	ldr	r2, [pc, #156]	@ (80046f4 <TIM_Base_SetConfig+0x12c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00f      	beq.n	800467a <TIM_Base_SetConfig+0xb2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a26      	ldr	r2, [pc, #152]	@ (80046f8 <TIM_Base_SetConfig+0x130>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00b      	beq.n	800467a <TIM_Base_SetConfig+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a25      	ldr	r2, [pc, #148]	@ (80046fc <TIM_Base_SetConfig+0x134>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d007      	beq.n	800467a <TIM_Base_SetConfig+0xb2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a24      	ldr	r2, [pc, #144]	@ (8004700 <TIM_Base_SetConfig+0x138>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d003      	beq.n	800467a <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a23      	ldr	r2, [pc, #140]	@ (8004704 <TIM_Base_SetConfig+0x13c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d108      	bne.n	800468c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a0a      	ldr	r2, [pc, #40]	@ (80046dc <TIM_Base_SetConfig+0x114>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d003      	beq.n	80046c0 <TIM_Base_SetConfig+0xf8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a0c      	ldr	r2, [pc, #48]	@ (80046ec <TIM_Base_SetConfig+0x124>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d103      	bne.n	80046c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	615a      	str	r2, [r3, #20]
}
 80046ce:	bf00      	nop
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40010000 	.word	0x40010000
 80046e0:	40000400 	.word	0x40000400
 80046e4:	40000800 	.word	0x40000800
 80046e8:	40000c00 	.word	0x40000c00
 80046ec:	40010400 	.word	0x40010400
 80046f0:	40014000 	.word	0x40014000
 80046f4:	40014400 	.word	0x40014400
 80046f8:	40014800 	.word	0x40014800
 80046fc:	40001800 	.word	0x40001800
 8004700:	40001c00 	.word	0x40001c00
 8004704:	40002000 	.word	0x40002000

08004708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f023 0201 	bic.w	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f023 030a 	bic.w	r3, r3, #10
 8004744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	621a      	str	r2, [r3, #32]
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004766:	b480      	push	{r7}
 8004768:	b087      	sub	sp, #28
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	f023 0210 	bic.w	r2, r3, #16
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004790:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	031b      	lsls	r3, r3, #12
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f043 0307 	orr.w	r3, r3, #7
 80047e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	609a      	str	r2, [r3, #8]
}
 80047f0:	bf00      	nop
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	021a      	lsls	r2, r3, #8
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	431a      	orrs	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4313      	orrs	r3, r2
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	609a      	str	r2, [r3, #8]
}
 8004830:	bf00      	nop
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004850:	2302      	movs	r3, #2
 8004852:	e05a      	b.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a21      	ldr	r2, [pc, #132]	@ (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d022      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a0:	d01d      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1d      	ldr	r2, [pc, #116]	@ (800491c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d018      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00e      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a18      	ldr	r2, [pc, #96]	@ (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d009      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a17      	ldr	r2, [pc, #92]	@ (800492c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a15      	ldr	r2, [pc, #84]	@ (8004930 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d10c      	bne.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40010000 	.word	0x40010000
 800491c:	40000400 	.word	0x40000400
 8004920:	40000800 	.word	0x40000800
 8004924:	40000c00 	.word	0x40000c00
 8004928:	40010400 	.word	0x40010400
 800492c:	40014000 	.word	0x40014000
 8004930:	40001800 	.word	0x40001800

08004934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e03f      	b.n	80049ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fd fc7a 	bl	800227c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2224      	movs	r2, #36	@ 0x24
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800499e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fc7b 	bl	800529c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695a      	ldr	r2, [r3, #20]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b0ba      	sub	sp, #232	@ 0xe8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10f      	bne.n	8004a5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <HAL_UART_IRQHandler+0x66>
 8004a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fb65 	bl	8005126 <UART_Receive_IT>
      return;
 8004a5c:	e256      	b.n	8004f0c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 80de 	beq.w	8004c24 <HAL_UART_IRQHandler+0x22c>
 8004a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80d1 	beq.w	8004c24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00b      	beq.n	8004aa6 <HAL_UART_IRQHandler+0xae>
 8004a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	f043 0201 	orr.w	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00b      	beq.n	8004aca <HAL_UART_IRQHandler+0xd2>
 8004ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	f043 0202 	orr.w	r2, r3, #2
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <HAL_UART_IRQHandler+0xf6>
 8004ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	f043 0204 	orr.w	r2, r3, #4
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d011      	beq.n	8004b1e <HAL_UART_IRQHandler+0x126>
 8004afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d105      	bne.n	8004b12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	f043 0208 	orr.w	r2, r3, #8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 81ed 	beq.w	8004f02 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b2c:	f003 0320 	and.w	r3, r3, #32
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_UART_IRQHandler+0x14e>
 8004b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 faf0 	bl	8005126 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b50:	2b40      	cmp	r3, #64	@ 0x40
 8004b52:	bf0c      	ite	eq
 8004b54:	2301      	moveq	r3, #1
 8004b56:	2300      	movne	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d103      	bne.n	8004b72 <HAL_UART_IRQHandler+0x17a>
 8004b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d04f      	beq.n	8004c12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f9f8 	bl	8004f68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b82:	2b40      	cmp	r3, #64	@ 0x40
 8004b84:	d141      	bne.n	8004c0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3314      	adds	r3, #20
 8004b8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3314      	adds	r3, #20
 8004bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1d9      	bne.n	8004b86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d013      	beq.n	8004c02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bde:	4a7d      	ldr	r2, [pc, #500]	@ (8004dd4 <HAL_UART_IRQHandler+0x3dc>)
 8004be0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fd fdd9 	bl	800279e <HAL_DMA_Abort_IT>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d016      	beq.n	8004c20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c00:	e00e      	b.n	8004c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f99a 	bl	8004f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c08:	e00a      	b.n	8004c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f996 	bl	8004f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c10:	e006      	b.n	8004c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f992 	bl	8004f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8004c1e:	e170      	b.n	8004f02 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c20:	bf00      	nop
    return;
 8004c22:	e16e      	b.n	8004f02 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	f040 814a 	bne.w	8004ec2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c32:	f003 0310 	and.w	r3, r3, #16
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8143 	beq.w	8004ec2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 813c 	beq.w	8004ec2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c6a:	2b40      	cmp	r3, #64	@ 0x40
 8004c6c:	f040 80b4 	bne.w	8004dd8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8140 	beq.w	8004f06 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	f080 8139 	bcs.w	8004f06 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ca6:	f000 8088 	beq.w	8004dba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	330c      	adds	r3, #12
 8004cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cb8:	e853 3f00 	ldrex	r3, [r3]
 8004cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004cd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ce2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ce6:	e841 2300 	strex	r3, r2, [r1]
 8004cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1d9      	bne.n	8004caa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3314      	adds	r3, #20
 8004cfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3314      	adds	r3, #20
 8004d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d26:	e841 2300 	strex	r3, r2, [r1]
 8004d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1e1      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3314      	adds	r3, #20
 8004d38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3314      	adds	r3, #20
 8004d52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e3      	bne.n	8004d32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d8a:	f023 0310 	bic.w	r3, r3, #16
 8004d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	330c      	adds	r3, #12
 8004d98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004da2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e3      	bne.n	8004d78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fd fc82 	bl	80026be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	4619      	mov	r1, r3
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f8c0 	bl	8004f50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dd0:	e099      	b.n	8004f06 <HAL_UART_IRQHandler+0x50e>
 8004dd2:	bf00      	nop
 8004dd4:	0800502f 	.word	0x0800502f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 808b 	beq.w	8004f0a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004df4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8086 	beq.w	8004f0a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	330c      	adds	r3, #12
 8004e1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e22:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e2a:	e841 2300 	strex	r3, r2, [r1]
 8004e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1e3      	bne.n	8004dfe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3314      	adds	r3, #20
 8004e3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	623b      	str	r3, [r7, #32]
   return(result);
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3314      	adds	r3, #20
 8004e56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e3      	bne.n	8004e36 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	330c      	adds	r3, #12
 8004e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	e853 3f00 	ldrex	r3, [r3]
 8004e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0310 	bic.w	r3, r3, #16
 8004e92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	330c      	adds	r3, #12
 8004e9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ea0:	61fa      	str	r2, [r7, #28]
 8004ea2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	69b9      	ldr	r1, [r7, #24]
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	e841 2300 	strex	r3, r2, [r1]
 8004eac:	617b      	str	r3, [r7, #20]
   return(result);
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e3      	bne.n	8004e7c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004eb8:	4619      	mov	r1, r3
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f848 	bl	8004f50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ec0:	e023      	b.n	8004f0a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x4ea>
 8004ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f8bb 	bl	8005056 <UART_Transmit_IT>
    return;
 8004ee0:	e014      	b.n	8004f0c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00e      	beq.n	8004f0c <HAL_UART_IRQHandler+0x514>
 8004eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d008      	beq.n	8004f0c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f8fb 	bl	80050f6 <UART_EndTransmit_IT>
    return;
 8004f00:	e004      	b.n	8004f0c <HAL_UART_IRQHandler+0x514>
    return;
 8004f02:	bf00      	nop
 8004f04:	e002      	b.n	8004f0c <HAL_UART_IRQHandler+0x514>
      return;
 8004f06:	bf00      	nop
 8004f08:	e000      	b.n	8004f0c <HAL_UART_IRQHandler+0x514>
      return;
 8004f0a:	bf00      	nop
  }
}
 8004f0c:	37e8      	adds	r7, #232	@ 0xe8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop

08004f14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b095      	sub	sp, #84	@ 0x54
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	330c      	adds	r3, #12
 8004f76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f90:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e5      	bne.n	8004f70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3314      	adds	r3, #20
 8004faa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3314      	adds	r3, #20
 8004fc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e5      	bne.n	8004fa4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d119      	bne.n	8005014 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	330c      	adds	r3, #12
 8004fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f023 0310 	bic.w	r3, r3, #16
 8004ff6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	330c      	adds	r3, #12
 8004ffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005000:	61ba      	str	r2, [r7, #24]
 8005002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6979      	ldr	r1, [r7, #20]
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	613b      	str	r3, [r7, #16]
   return(result);
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e5      	bne.n	8004fe0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005022:	bf00      	nop
 8005024:	3754      	adds	r7, #84	@ 0x54
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f7ff ff77 	bl	8004f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800504e:	bf00      	nop
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b21      	cmp	r3, #33	@ 0x21
 8005068:	d13e      	bne.n	80050e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005072:	d114      	bne.n	800509e <UART_Transmit_IT+0x48>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d110      	bne.n	800509e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005090:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	1c9a      	adds	r2, r3, #2
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	621a      	str	r2, [r3, #32]
 800509c:	e008      	b.n	80050b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	1c59      	adds	r1, r3, #1
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6211      	str	r1, [r2, #32]
 80050a8:	781a      	ldrb	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	4619      	mov	r1, r3
 80050be:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10f      	bne.n	80050e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e000      	b.n	80050ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050e8:	2302      	movs	r3, #2
  }
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800510c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff fefc 	bl	8004f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b08c      	sub	sp, #48	@ 0x30
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b22      	cmp	r3, #34	@ 0x22
 8005138:	f040 80ab 	bne.w	8005292 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005144:	d117      	bne.n	8005176 <UART_Receive_IT+0x50>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d113      	bne.n	8005176 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005156:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	b29b      	uxth	r3, r3
 8005160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005164:	b29a      	uxth	r2, r3
 8005166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005168:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516e:	1c9a      	adds	r2, r3, #2
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	629a      	str	r2, [r3, #40]	@ 0x28
 8005174:	e026      	b.n	80051c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800517c:	2300      	movs	r3, #0
 800517e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005188:	d007      	beq.n	800519a <UART_Receive_IT+0x74>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <UART_Receive_IT+0x82>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	e008      	b.n	80051ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	4619      	mov	r1, r3
 80051d2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d15a      	bne.n	800528e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0220 	bic.w	r2, r2, #32
 80051e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695a      	ldr	r2, [r3, #20]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0201 	bic.w	r2, r2, #1
 8005206:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005214:	2b01      	cmp	r3, #1
 8005216:	d135      	bne.n	8005284 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	613b      	str	r3, [r7, #16]
   return(result);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f023 0310 	bic.w	r3, r3, #16
 8005234:	627b      	str	r3, [r7, #36]	@ 0x24
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	330c      	adds	r3, #12
 800523c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800523e:	623a      	str	r2, [r7, #32]
 8005240:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	69f9      	ldr	r1, [r7, #28]
 8005244:	6a3a      	ldr	r2, [r7, #32]
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	61bb      	str	r3, [r7, #24]
   return(result);
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e5      	bne.n	800521e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	2b10      	cmp	r3, #16
 800525e:	d10a      	bne.n	8005276 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800527a:	4619      	mov	r1, r3
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff fe67 	bl	8004f50 <HAL_UARTEx_RxEventCallback>
 8005282:	e002      	b.n	800528a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff fe4f 	bl	8004f28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	e002      	b.n	8005294 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	e000      	b.n	8005294 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005292:	2302      	movs	r3, #2
  }
}
 8005294:	4618      	mov	r0, r3
 8005296:	3730      	adds	r7, #48	@ 0x30
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800529c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a0:	b0c0      	sub	sp, #256	@ 0x100
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b8:	68d9      	ldr	r1, [r3, #12]
 80052ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	ea40 0301 	orr.w	r3, r0, r1
 80052c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	431a      	orrs	r2, r3
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80052f4:	f021 010c 	bic.w	r1, r1, #12
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005302:	430b      	orrs	r3, r1
 8005304:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005316:	6999      	ldr	r1, [r3, #24]
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	ea40 0301 	orr.w	r3, r0, r1
 8005322:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b8f      	ldr	r3, [pc, #572]	@ (8005568 <UART_SetConfig+0x2cc>)
 800532c:	429a      	cmp	r2, r3
 800532e:	d005      	beq.n	800533c <UART_SetConfig+0xa0>
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b8d      	ldr	r3, [pc, #564]	@ (800556c <UART_SetConfig+0x2d0>)
 8005338:	429a      	cmp	r2, r3
 800533a:	d104      	bne.n	8005346 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800533c:	f7fe f88c 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 8005340:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005344:	e003      	b.n	800534e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005346:	f7fe f873 	bl	8003430 <HAL_RCC_GetPCLK1Freq>
 800534a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800534e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005358:	f040 810c 	bne.w	8005574 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800535c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005360:	2200      	movs	r2, #0
 8005362:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005366:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800536a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800536e:	4622      	mov	r2, r4
 8005370:	462b      	mov	r3, r5
 8005372:	1891      	adds	r1, r2, r2
 8005374:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005376:	415b      	adcs	r3, r3
 8005378:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800537a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800537e:	4621      	mov	r1, r4
 8005380:	eb12 0801 	adds.w	r8, r2, r1
 8005384:	4629      	mov	r1, r5
 8005386:	eb43 0901 	adc.w	r9, r3, r1
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	f04f 0300 	mov.w	r3, #0
 8005392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800539a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800539e:	4690      	mov	r8, r2
 80053a0:	4699      	mov	r9, r3
 80053a2:	4623      	mov	r3, r4
 80053a4:	eb18 0303 	adds.w	r3, r8, r3
 80053a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053ac:	462b      	mov	r3, r5
 80053ae:	eb49 0303 	adc.w	r3, r9, r3
 80053b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053ca:	460b      	mov	r3, r1
 80053cc:	18db      	adds	r3, r3, r3
 80053ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80053d0:	4613      	mov	r3, r2
 80053d2:	eb42 0303 	adc.w	r3, r2, r3
 80053d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80053d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053e0:	f7fa fef2 	bl	80001c8 <__aeabi_uldivmod>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4b61      	ldr	r3, [pc, #388]	@ (8005570 <UART_SetConfig+0x2d4>)
 80053ea:	fba3 2302 	umull	r2, r3, r3, r2
 80053ee:	095b      	lsrs	r3, r3, #5
 80053f0:	011c      	lsls	r4, r3, #4
 80053f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053f6:	2200      	movs	r2, #0
 80053f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005400:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005404:	4642      	mov	r2, r8
 8005406:	464b      	mov	r3, r9
 8005408:	1891      	adds	r1, r2, r2
 800540a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800540c:	415b      	adcs	r3, r3
 800540e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005410:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005414:	4641      	mov	r1, r8
 8005416:	eb12 0a01 	adds.w	sl, r2, r1
 800541a:	4649      	mov	r1, r9
 800541c:	eb43 0b01 	adc.w	fp, r3, r1
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800542c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005430:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005434:	4692      	mov	sl, r2
 8005436:	469b      	mov	fp, r3
 8005438:	4643      	mov	r3, r8
 800543a:	eb1a 0303 	adds.w	r3, sl, r3
 800543e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005442:	464b      	mov	r3, r9
 8005444:	eb4b 0303 	adc.w	r3, fp, r3
 8005448:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800544c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005458:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800545c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005460:	460b      	mov	r3, r1
 8005462:	18db      	adds	r3, r3, r3
 8005464:	643b      	str	r3, [r7, #64]	@ 0x40
 8005466:	4613      	mov	r3, r2
 8005468:	eb42 0303 	adc.w	r3, r2, r3
 800546c:	647b      	str	r3, [r7, #68]	@ 0x44
 800546e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005472:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005476:	f7fa fea7 	bl	80001c8 <__aeabi_uldivmod>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4611      	mov	r1, r2
 8005480:	4b3b      	ldr	r3, [pc, #236]	@ (8005570 <UART_SetConfig+0x2d4>)
 8005482:	fba3 2301 	umull	r2, r3, r3, r1
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	2264      	movs	r2, #100	@ 0x64
 800548a:	fb02 f303 	mul.w	r3, r2, r3
 800548e:	1acb      	subs	r3, r1, r3
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005496:	4b36      	ldr	r3, [pc, #216]	@ (8005570 <UART_SetConfig+0x2d4>)
 8005498:	fba3 2302 	umull	r2, r3, r3, r2
 800549c:	095b      	lsrs	r3, r3, #5
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054a4:	441c      	add	r4, r3
 80054a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054b8:	4642      	mov	r2, r8
 80054ba:	464b      	mov	r3, r9
 80054bc:	1891      	adds	r1, r2, r2
 80054be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054c0:	415b      	adcs	r3, r3
 80054c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054c8:	4641      	mov	r1, r8
 80054ca:	1851      	adds	r1, r2, r1
 80054cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80054ce:	4649      	mov	r1, r9
 80054d0:	414b      	adcs	r3, r1
 80054d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054e0:	4659      	mov	r1, fp
 80054e2:	00cb      	lsls	r3, r1, #3
 80054e4:	4651      	mov	r1, sl
 80054e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ea:	4651      	mov	r1, sl
 80054ec:	00ca      	lsls	r2, r1, #3
 80054ee:	4610      	mov	r0, r2
 80054f0:	4619      	mov	r1, r3
 80054f2:	4603      	mov	r3, r0
 80054f4:	4642      	mov	r2, r8
 80054f6:	189b      	adds	r3, r3, r2
 80054f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054fc:	464b      	mov	r3, r9
 80054fe:	460a      	mov	r2, r1
 8005500:	eb42 0303 	adc.w	r3, r2, r3
 8005504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005514:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005518:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800551c:	460b      	mov	r3, r1
 800551e:	18db      	adds	r3, r3, r3
 8005520:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005522:	4613      	mov	r3, r2
 8005524:	eb42 0303 	adc.w	r3, r2, r3
 8005528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800552a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800552e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005532:	f7fa fe49 	bl	80001c8 <__aeabi_uldivmod>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	4b0d      	ldr	r3, [pc, #52]	@ (8005570 <UART_SetConfig+0x2d4>)
 800553c:	fba3 1302 	umull	r1, r3, r3, r2
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	2164      	movs	r1, #100	@ 0x64
 8005544:	fb01 f303 	mul.w	r3, r1, r3
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	3332      	adds	r3, #50	@ 0x32
 800554e:	4a08      	ldr	r2, [pc, #32]	@ (8005570 <UART_SetConfig+0x2d4>)
 8005550:	fba2 2303 	umull	r2, r3, r2, r3
 8005554:	095b      	lsrs	r3, r3, #5
 8005556:	f003 0207 	and.w	r2, r3, #7
 800555a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4422      	add	r2, r4
 8005562:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005564:	e106      	b.n	8005774 <UART_SetConfig+0x4d8>
 8005566:	bf00      	nop
 8005568:	40011000 	.word	0x40011000
 800556c:	40011400 	.word	0x40011400
 8005570:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005578:	2200      	movs	r2, #0
 800557a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800557e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005582:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005586:	4642      	mov	r2, r8
 8005588:	464b      	mov	r3, r9
 800558a:	1891      	adds	r1, r2, r2
 800558c:	6239      	str	r1, [r7, #32]
 800558e:	415b      	adcs	r3, r3
 8005590:	627b      	str	r3, [r7, #36]	@ 0x24
 8005592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005596:	4641      	mov	r1, r8
 8005598:	1854      	adds	r4, r2, r1
 800559a:	4649      	mov	r1, r9
 800559c:	eb43 0501 	adc.w	r5, r3, r1
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	00eb      	lsls	r3, r5, #3
 80055aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ae:	00e2      	lsls	r2, r4, #3
 80055b0:	4614      	mov	r4, r2
 80055b2:	461d      	mov	r5, r3
 80055b4:	4643      	mov	r3, r8
 80055b6:	18e3      	adds	r3, r4, r3
 80055b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055bc:	464b      	mov	r3, r9
 80055be:	eb45 0303 	adc.w	r3, r5, r3
 80055c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055e2:	4629      	mov	r1, r5
 80055e4:	008b      	lsls	r3, r1, #2
 80055e6:	4621      	mov	r1, r4
 80055e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ec:	4621      	mov	r1, r4
 80055ee:	008a      	lsls	r2, r1, #2
 80055f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055f4:	f7fa fde8 	bl	80001c8 <__aeabi_uldivmod>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4b60      	ldr	r3, [pc, #384]	@ (8005780 <UART_SetConfig+0x4e4>)
 80055fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	011c      	lsls	r4, r3, #4
 8005606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800560a:	2200      	movs	r2, #0
 800560c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005610:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005614:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005618:	4642      	mov	r2, r8
 800561a:	464b      	mov	r3, r9
 800561c:	1891      	adds	r1, r2, r2
 800561e:	61b9      	str	r1, [r7, #24]
 8005620:	415b      	adcs	r3, r3
 8005622:	61fb      	str	r3, [r7, #28]
 8005624:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005628:	4641      	mov	r1, r8
 800562a:	1851      	adds	r1, r2, r1
 800562c:	6139      	str	r1, [r7, #16]
 800562e:	4649      	mov	r1, r9
 8005630:	414b      	adcs	r3, r1
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	f04f 0300 	mov.w	r3, #0
 800563c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005640:	4659      	mov	r1, fp
 8005642:	00cb      	lsls	r3, r1, #3
 8005644:	4651      	mov	r1, sl
 8005646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800564a:	4651      	mov	r1, sl
 800564c:	00ca      	lsls	r2, r1, #3
 800564e:	4610      	mov	r0, r2
 8005650:	4619      	mov	r1, r3
 8005652:	4603      	mov	r3, r0
 8005654:	4642      	mov	r2, r8
 8005656:	189b      	adds	r3, r3, r2
 8005658:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800565c:	464b      	mov	r3, r9
 800565e:	460a      	mov	r2, r1
 8005660:	eb42 0303 	adc.w	r3, r2, r3
 8005664:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005672:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005680:	4649      	mov	r1, r9
 8005682:	008b      	lsls	r3, r1, #2
 8005684:	4641      	mov	r1, r8
 8005686:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800568a:	4641      	mov	r1, r8
 800568c:	008a      	lsls	r2, r1, #2
 800568e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005692:	f7fa fd99 	bl	80001c8 <__aeabi_uldivmod>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4611      	mov	r1, r2
 800569c:	4b38      	ldr	r3, [pc, #224]	@ (8005780 <UART_SetConfig+0x4e4>)
 800569e:	fba3 2301 	umull	r2, r3, r3, r1
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	2264      	movs	r2, #100	@ 0x64
 80056a6:	fb02 f303 	mul.w	r3, r2, r3
 80056aa:	1acb      	subs	r3, r1, r3
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	3332      	adds	r3, #50	@ 0x32
 80056b0:	4a33      	ldr	r2, [pc, #204]	@ (8005780 <UART_SetConfig+0x4e4>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056bc:	441c      	add	r4, r3
 80056be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056c2:	2200      	movs	r2, #0
 80056c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80056c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80056c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80056cc:	4642      	mov	r2, r8
 80056ce:	464b      	mov	r3, r9
 80056d0:	1891      	adds	r1, r2, r2
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	415b      	adcs	r3, r3
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056dc:	4641      	mov	r1, r8
 80056de:	1851      	adds	r1, r2, r1
 80056e0:	6039      	str	r1, [r7, #0]
 80056e2:	4649      	mov	r1, r9
 80056e4:	414b      	adcs	r3, r1
 80056e6:	607b      	str	r3, [r7, #4]
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056f4:	4659      	mov	r1, fp
 80056f6:	00cb      	lsls	r3, r1, #3
 80056f8:	4651      	mov	r1, sl
 80056fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056fe:	4651      	mov	r1, sl
 8005700:	00ca      	lsls	r2, r1, #3
 8005702:	4610      	mov	r0, r2
 8005704:	4619      	mov	r1, r3
 8005706:	4603      	mov	r3, r0
 8005708:	4642      	mov	r2, r8
 800570a:	189b      	adds	r3, r3, r2
 800570c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800570e:	464b      	mov	r3, r9
 8005710:	460a      	mov	r2, r1
 8005712:	eb42 0303 	adc.w	r3, r2, r3
 8005716:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	663b      	str	r3, [r7, #96]	@ 0x60
 8005722:	667a      	str	r2, [r7, #100]	@ 0x64
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005730:	4649      	mov	r1, r9
 8005732:	008b      	lsls	r3, r1, #2
 8005734:	4641      	mov	r1, r8
 8005736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800573a:	4641      	mov	r1, r8
 800573c:	008a      	lsls	r2, r1, #2
 800573e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005742:	f7fa fd41 	bl	80001c8 <__aeabi_uldivmod>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4b0d      	ldr	r3, [pc, #52]	@ (8005780 <UART_SetConfig+0x4e4>)
 800574c:	fba3 1302 	umull	r1, r3, r3, r2
 8005750:	095b      	lsrs	r3, r3, #5
 8005752:	2164      	movs	r1, #100	@ 0x64
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	3332      	adds	r3, #50	@ 0x32
 800575e:	4a08      	ldr	r2, [pc, #32]	@ (8005780 <UART_SetConfig+0x4e4>)
 8005760:	fba2 2303 	umull	r2, r3, r2, r3
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	f003 020f 	and.w	r2, r3, #15
 800576a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4422      	add	r2, r4
 8005772:	609a      	str	r2, [r3, #8]
}
 8005774:	bf00      	nop
 8005776:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800577a:	46bd      	mov	sp, r7
 800577c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005780:	51eb851f 	.word	0x51eb851f

08005784 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800579c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4b20      	ldr	r3, [pc, #128]	@ (8005824 <FSMC_NORSRAM_Init+0xa0>)
 80057a2:	4013      	ands	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80057ae:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80057b4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80057ba:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80057c0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80057c6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80057cc:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80057d2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 80057d8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 80057de:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 80057e4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 80057ea:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 80057f0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d103      	bne.n	8005808 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005806:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68f9      	ldr	r1, [r7, #12]
 8005810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	fff00080 	.word	0xfff00080

08005828 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005842:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800584a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005856:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800585e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8005866:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	3b01      	subs	r3, #1
 800586e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005870:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	3b02      	subs	r3, #2
 8005878:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800587a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005880:	4313      	orrs	r3, r2
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6979      	ldr	r1, [r7, #20]
 8005890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
	...

080058a4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058bc:	d122      	bne.n	8005904 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4b15      	ldr	r3, [pc, #84]	@ (8005920 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80058da:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80058e2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80058ea:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80058f0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6979      	ldr	r1, [r7, #20]
 80058fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005902:	e005      	b.n	8005910 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800590c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	cff00000 	.word	0xcff00000

08005924 <memset>:
 8005924:	4402      	add	r2, r0
 8005926:	4603      	mov	r3, r0
 8005928:	4293      	cmp	r3, r2
 800592a:	d100      	bne.n	800592e <memset+0xa>
 800592c:	4770      	bx	lr
 800592e:	f803 1b01 	strb.w	r1, [r3], #1
 8005932:	e7f9      	b.n	8005928 <memset+0x4>

08005934 <__libc_init_array>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	4d0d      	ldr	r5, [pc, #52]	@ (800596c <__libc_init_array+0x38>)
 8005938:	4c0d      	ldr	r4, [pc, #52]	@ (8005970 <__libc_init_array+0x3c>)
 800593a:	1b64      	subs	r4, r4, r5
 800593c:	10a4      	asrs	r4, r4, #2
 800593e:	2600      	movs	r6, #0
 8005940:	42a6      	cmp	r6, r4
 8005942:	d109      	bne.n	8005958 <__libc_init_array+0x24>
 8005944:	4d0b      	ldr	r5, [pc, #44]	@ (8005974 <__libc_init_array+0x40>)
 8005946:	4c0c      	ldr	r4, [pc, #48]	@ (8005978 <__libc_init_array+0x44>)
 8005948:	f000 f818 	bl	800597c <_init>
 800594c:	1b64      	subs	r4, r4, r5
 800594e:	10a4      	asrs	r4, r4, #2
 8005950:	2600      	movs	r6, #0
 8005952:	42a6      	cmp	r6, r4
 8005954:	d105      	bne.n	8005962 <__libc_init_array+0x2e>
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	f855 3b04 	ldr.w	r3, [r5], #4
 800595c:	4798      	blx	r3
 800595e:	3601      	adds	r6, #1
 8005960:	e7ee      	b.n	8005940 <__libc_init_array+0xc>
 8005962:	f855 3b04 	ldr.w	r3, [r5], #4
 8005966:	4798      	blx	r3
 8005968:	3601      	adds	r6, #1
 800596a:	e7f2      	b.n	8005952 <__libc_init_array+0x1e>
 800596c:	080089c4 	.word	0x080089c4
 8005970:	080089c4 	.word	0x080089c4
 8005974:	080089c4 	.word	0x080089c4
 8005978:	080089c8 	.word	0x080089c8

0800597c <_init>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	bf00      	nop
 8005980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005982:	bc08      	pop	{r3}
 8005984:	469e      	mov	lr, r3
 8005986:	4770      	bx	lr

08005988 <_fini>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	bf00      	nop
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr
