
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004428  0800a480  0800a480  0000b480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8a8  0800e8a8  000100b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8a8  0800e8a8  0000f8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8b0  0800e8b0  000100b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8b0  0800e8b0  0000f8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8b4  0800e8b4  0000f8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800e8b8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000100b8  2**0
                  CONTENTS
 10 .bss          00000534  200000b8  200000b8  000100b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005ec  200005ec  000100b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000100b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b948  00000000  00000000  000100e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c08  00000000  00000000  0002ba30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001880  00000000  00000000  00030638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012df  00000000  00000000  00031eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000276d1  00000000  00000000  00033197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000234de  00000000  00000000  0005a868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e14b2  00000000  00000000  0007dd46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015f1f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006714  00000000  00000000  0015f23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  00165950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b8 	.word	0x200000b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a468 	.word	0x0800a468

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000bc 	.word	0x200000bc
 80001c4:	0800a468 	.word	0x0800a468

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b96a 	b.w	8000ddc <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9d08      	ldr	r5, [sp, #32]
 8000b26:	460c      	mov	r4, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14e      	bne.n	8000bca <__udivmoddi4+0xaa>
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	458c      	cmp	ip, r1
 8000b30:	4686      	mov	lr, r0
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	d962      	bls.n	8000bfe <__udivmoddi4+0xde>
 8000b38:	b14a      	cbz	r2, 8000b4e <__udivmoddi4+0x2e>
 8000b3a:	f1c2 0320 	rsb	r3, r2, #32
 8000b3e:	4091      	lsls	r1, r2
 8000b40:	fa20 f303 	lsr.w	r3, r0, r3
 8000b44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b48:	4319      	orrs	r1, r3
 8000b4a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b52:	fa1f f68c 	uxth.w	r6, ip
 8000b56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b66:	fb04 f106 	mul.w	r1, r4, r6
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	d90a      	bls.n	8000b84 <__udivmoddi4+0x64>
 8000b6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b72:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b76:	f080 8112 	bcs.w	8000d9e <__udivmoddi4+0x27e>
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	f240 810f 	bls.w	8000d9e <__udivmoddi4+0x27e>
 8000b80:	3c02      	subs	r4, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	1a59      	subs	r1, r3, r1
 8000b86:	fa1f f38e 	uxth.w	r3, lr
 8000b8a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8e:	fb07 1110 	mls	r1, r7, r0, r1
 8000b92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b96:	fb00 f606 	mul.w	r6, r0, r6
 8000b9a:	429e      	cmp	r6, r3
 8000b9c:	d90a      	bls.n	8000bb4 <__udivmoddi4+0x94>
 8000b9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba6:	f080 80fc 	bcs.w	8000da2 <__udivmoddi4+0x282>
 8000baa:	429e      	cmp	r6, r3
 8000bac:	f240 80f9 	bls.w	8000da2 <__udivmoddi4+0x282>
 8000bb0:	4463      	add	r3, ip
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	1b9b      	subs	r3, r3, r6
 8000bb6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bba:	2100      	movs	r1, #0
 8000bbc:	b11d      	cbz	r5, 8000bc6 <__udivmoddi4+0xa6>
 8000bbe:	40d3      	lsrs	r3, r2
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d905      	bls.n	8000bda <__udivmoddi4+0xba>
 8000bce:	b10d      	cbz	r5, 8000bd4 <__udivmoddi4+0xb4>
 8000bd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	e7f5      	b.n	8000bc6 <__udivmoddi4+0xa6>
 8000bda:	fab3 f183 	clz	r1, r3
 8000bde:	2900      	cmp	r1, #0
 8000be0:	d146      	bne.n	8000c70 <__udivmoddi4+0x150>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xcc>
 8000be6:	4290      	cmp	r0, r2
 8000be8:	f0c0 80f0 	bcc.w	8000dcc <__udivmoddi4+0x2ac>
 8000bec:	1a86      	subs	r6, r0, r2
 8000bee:	eb64 0303 	sbc.w	r3, r4, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	2d00      	cmp	r5, #0
 8000bf6:	d0e6      	beq.n	8000bc6 <__udivmoddi4+0xa6>
 8000bf8:	e9c5 6300 	strd	r6, r3, [r5]
 8000bfc:	e7e3      	b.n	8000bc6 <__udivmoddi4+0xa6>
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	f040 8090 	bne.w	8000d24 <__udivmoddi4+0x204>
 8000c04:	eba1 040c 	sub.w	r4, r1, ip
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	fa1f f78c 	uxth.w	r7, ip
 8000c10:	2101      	movs	r1, #1
 8000c12:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c22:	fb07 f006 	mul.w	r0, r7, r6
 8000c26:	4298      	cmp	r0, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x11c>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x11a>
 8000c34:	4298      	cmp	r0, r3
 8000c36:	f200 80cd 	bhi.w	8000dd4 <__udivmoddi4+0x2b4>
 8000c3a:	4626      	mov	r6, r4
 8000c3c:	1a1c      	subs	r4, r3, r0
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c46:	fb08 4410 	mls	r4, r8, r0, r4
 8000c4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4e:	fb00 f707 	mul.w	r7, r0, r7
 8000c52:	429f      	cmp	r7, r3
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x148>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x146>
 8000c60:	429f      	cmp	r7, r3
 8000c62:	f200 80b0 	bhi.w	8000dc6 <__udivmoddi4+0x2a6>
 8000c66:	4620      	mov	r0, r4
 8000c68:	1bdb      	subs	r3, r3, r7
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0x9c>
 8000c70:	f1c1 0620 	rsb	r6, r1, #32
 8000c74:	408b      	lsls	r3, r1
 8000c76:	fa22 f706 	lsr.w	r7, r2, r6
 8000c7a:	431f      	orrs	r7, r3
 8000c7c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c80:	fa04 f301 	lsl.w	r3, r4, r1
 8000c84:	ea43 030c 	orr.w	r3, r3, ip
 8000c88:	40f4      	lsrs	r4, r6
 8000c8a:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8e:	0c38      	lsrs	r0, r7, #16
 8000c90:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c94:	fbb4 fef0 	udiv	lr, r4, r0
 8000c98:	fa1f fc87 	uxth.w	ip, r7
 8000c9c:	fb00 441e 	mls	r4, r0, lr, r4
 8000ca0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca4:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca8:	45a1      	cmp	r9, r4
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	d90a      	bls.n	8000cc6 <__udivmoddi4+0x1a6>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cb6:	f080 8084 	bcs.w	8000dc2 <__udivmoddi4+0x2a2>
 8000cba:	45a1      	cmp	r9, r4
 8000cbc:	f240 8081 	bls.w	8000dc2 <__udivmoddi4+0x2a2>
 8000cc0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc4:	443c      	add	r4, r7
 8000cc6:	eba4 0409 	sub.w	r4, r4, r9
 8000cca:	fa1f f983 	uxth.w	r9, r3
 8000cce:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cd2:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cda:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cde:	45a4      	cmp	ip, r4
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x1d2>
 8000ce2:	193c      	adds	r4, r7, r4
 8000ce4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ce8:	d267      	bcs.n	8000dba <__udivmoddi4+0x29a>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0x29a>
 8000cee:	3b02      	subs	r3, #2
 8000cf0:	443c      	add	r4, r7
 8000cf2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf6:	fba0 9302 	umull	r9, r3, r0, r2
 8000cfa:	eba4 040c 	sub.w	r4, r4, ip
 8000cfe:	429c      	cmp	r4, r3
 8000d00:	46ce      	mov	lr, r9
 8000d02:	469c      	mov	ip, r3
 8000d04:	d351      	bcc.n	8000daa <__udivmoddi4+0x28a>
 8000d06:	d04e      	beq.n	8000da6 <__udivmoddi4+0x286>
 8000d08:	b155      	cbz	r5, 8000d20 <__udivmoddi4+0x200>
 8000d0a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d12:	fa04 f606 	lsl.w	r6, r4, r6
 8000d16:	40cb      	lsrs	r3, r1
 8000d18:	431e      	orrs	r6, r3
 8000d1a:	40cc      	lsrs	r4, r1
 8000d1c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d20:	2100      	movs	r1, #0
 8000d22:	e750      	b.n	8000bc6 <__udivmoddi4+0xa6>
 8000d24:	f1c2 0320 	rsb	r3, r2, #32
 8000d28:	fa20 f103 	lsr.w	r1, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	fa24 f303 	lsr.w	r3, r4, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	430c      	orrs	r4, r1
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d40:	fa1f f78c 	uxth.w	r7, ip
 8000d44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d48:	fb08 3110 	mls	r1, r8, r0, r3
 8000d4c:	0c23      	lsrs	r3, r4, #16
 8000d4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d52:	fb00 f107 	mul.w	r1, r0, r7
 8000d56:	4299      	cmp	r1, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x24c>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d62:	d22c      	bcs.n	8000dbe <__udivmoddi4+0x29e>
 8000d64:	4299      	cmp	r1, r3
 8000d66:	d92a      	bls.n	8000dbe <__udivmoddi4+0x29e>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d74:	fb08 3311 	mls	r3, r8, r1, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb01 f307 	mul.w	r3, r1, r7
 8000d80:	42a3      	cmp	r3, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x276>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d8c:	d213      	bcs.n	8000db6 <__udivmoddi4+0x296>
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	d911      	bls.n	8000db6 <__udivmoddi4+0x296>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	1ae4      	subs	r4, r4, r3
 8000d98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d9c:	e739      	b.n	8000c12 <__udivmoddi4+0xf2>
 8000d9e:	4604      	mov	r4, r0
 8000da0:	e6f0      	b.n	8000b84 <__udivmoddi4+0x64>
 8000da2:	4608      	mov	r0, r1
 8000da4:	e706      	b.n	8000bb4 <__udivmoddi4+0x94>
 8000da6:	45c8      	cmp	r8, r9
 8000da8:	d2ae      	bcs.n	8000d08 <__udivmoddi4+0x1e8>
 8000daa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dae:	eb63 0c07 	sbc.w	ip, r3, r7
 8000db2:	3801      	subs	r0, #1
 8000db4:	e7a8      	b.n	8000d08 <__udivmoddi4+0x1e8>
 8000db6:	4631      	mov	r1, r6
 8000db8:	e7ed      	b.n	8000d96 <__udivmoddi4+0x276>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	e799      	b.n	8000cf2 <__udivmoddi4+0x1d2>
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	e7d4      	b.n	8000d6c <__udivmoddi4+0x24c>
 8000dc2:	46d6      	mov	lr, sl
 8000dc4:	e77f      	b.n	8000cc6 <__udivmoddi4+0x1a6>
 8000dc6:	4463      	add	r3, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e74d      	b.n	8000c68 <__udivmoddi4+0x148>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	4623      	mov	r3, r4
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e70f      	b.n	8000bf4 <__udivmoddi4+0xd4>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	e730      	b.n	8000c3c <__udivmoddi4+0x11c>
 8000dda:	bf00      	nop

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000de6:	463b      	mov	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000df2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000df4:	4a3d      	ldr	r2, [pc, #244]	@ (8000eec <MX_ADC1_Init+0x10c>)
 8000df6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000df8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e04:	4b38      	ldr	r3, [pc, #224]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e0a:	4b37      	ldr	r3, [pc, #220]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e10:	4b35      	ldr	r3, [pc, #212]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e18:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e1e:	4b32      	ldr	r3, [pc, #200]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e20:	4a33      	ldr	r2, [pc, #204]	@ (8000ef0 <MX_ADC1_Init+0x110>)
 8000e22:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e24:	4b30      	ldr	r3, [pc, #192]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e2c:	2205      	movs	r2, #5
 8000e2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e38:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e3e:	482a      	ldr	r0, [pc, #168]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e40:	f003 fc16 	bl	8004670 <HAL_ADC_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e4a:	f001 fe2f 	bl	8002aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e4e:	2308      	movs	r3, #8
 8000e50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4822      	ldr	r0, [pc, #136]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e60:	f003 fc4a 	bl	80046f8 <HAL_ADC_ConfigChannel>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e6a:	f001 fe1f 	bl	8002aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e6e:	2309      	movs	r3, #9
 8000e70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e72:	2302      	movs	r3, #2
 8000e74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e76:	463b      	mov	r3, r7
 8000e78:	4619      	mov	r1, r3
 8000e7a:	481b      	ldr	r0, [pc, #108]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e7c:	f003 fc3c 	bl	80046f8 <HAL_ADC_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e86:	f001 fe11 	bl	8002aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e8a:	230a      	movs	r3, #10
 8000e8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	4619      	mov	r1, r3
 8000e96:	4814      	ldr	r0, [pc, #80]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000e98:	f003 fc2e 	bl	80046f8 <HAL_ADC_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000ea2:	f001 fe03 	bl	8002aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ea6:	230b      	movs	r3, #11
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000eb4:	f003 fc20 	bl	80046f8 <HAL_ADC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ebe:	f001 fdf5 	bl	8002aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ec2:	230c      	movs	r3, #12
 8000ec4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <MX_ADC1_Init+0x108>)
 8000ed0:	f003 fc12 	bl	80046f8 <HAL_ADC_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000eda:	f001 fde7 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000d4 	.word	0x200000d4
 8000eec:	40012000 	.word	0x40012000
 8000ef0:	0f000001 	.word	0x0f000001

08000ef4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	@ 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a3c      	ldr	r2, [pc, #240]	@ (8001004 <HAL_ADC_MspInit+0x110>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d171      	bne.n	8000ffa <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1e:	4a3a      	ldr	r2, [pc, #232]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f26:	4b38      	ldr	r3, [pc, #224]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b34      	ldr	r3, [pc, #208]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a33      	ldr	r2, [pc, #204]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b31      	ldr	r3, [pc, #196]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a2c      	ldr	r2, [pc, #176]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001008 <HAL_ADC_MspInit+0x114>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4823      	ldr	r0, [pc, #140]	@ (800100c <HAL_ADC_MspInit+0x118>)
 8000f7e:	f004 fa67 	bl	8005450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f82:	2303      	movs	r3, #3
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f86:	2303      	movs	r3, #3
 8000f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	481e      	ldr	r0, [pc, #120]	@ (8001010 <HAL_ADC_MspInit+0x11c>)
 8000f96:	f004 fa5b 	bl	8005450 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001018 <HAL_ADC_MspInit+0x124>)
 8000f9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fb8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fc0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fc8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fca:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fd0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fe0:	f003 feba 	bl	8004d58 <HAL_DMA_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fea:	f001 fd5f 	bl	8002aac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a08      	ldr	r2, [pc, #32]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000ff2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ff4:	4a07      	ldr	r2, [pc, #28]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3728      	adds	r7, #40	@ 0x28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40012000 	.word	0x40012000
 8001008:	40023800 	.word	0x40023800
 800100c:	40020800 	.word	0x40020800
 8001010:	40020400 	.word	0x40020400
 8001014:	2000011c 	.word	0x2000011c
 8001018:	40026410 	.word	0x40026410

0800101c <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	at24c_Check();
 8001020:	f000 f83c 	bl	800109c <at24c_Check>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af04      	add	r7, sp, #16
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	230a      	movs	r3, #10
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2301      	movs	r3, #1
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	f107 030f 	add.w	r3, r7, #15
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2310      	movs	r3, #16
 8001048:	21a0      	movs	r1, #160	@ 0xa0
 800104a:	4804      	ldr	r0, [pc, #16]	@ (800105c <at24c_ReadOneByte+0x34>)
 800104c:	f004 fe26 	bl	8005c9c <HAL_I2C_Mem_Read>
	return temp;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000204 	.word	0x20000204

08001060 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af04      	add	r7, sp, #16
 8001066:	4603      	mov	r3, r0
 8001068:	460a      	mov	r2, r1
 800106a:	80fb      	strh	r3, [r7, #6]
 800106c:	4613      	mov	r3, r2
 800106e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 8001070:	88fa      	ldrh	r2, [r7, #6]
 8001072:	230a      	movs	r3, #10
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	2301      	movs	r3, #1
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	1d7b      	adds	r3, r7, #5
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2310      	movs	r3, #16
 8001080:	21a0      	movs	r1, #160	@ 0xa0
 8001082:	4805      	ldr	r0, [pc, #20]	@ (8001098 <at24c_WriteOneByte+0x38>)
 8001084:	f004 fd10 	bl	8005aa8 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001088:	2005      	movs	r0, #5
 800108a:	f003 facd 	bl	8004628 <HAL_Delay>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000204 	.word	0x20000204

0800109c <at24c_Check>:

uint8_t at24c_Check(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 80010a2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80010a6:	f7ff ffbf 	bl	8001028 <at24c_ReadOneByte>
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b55      	cmp	r3, #85	@ 0x55
 80010b2:	d101      	bne.n	80010b8 <at24c_Check+0x1c>
 80010b4:	2300      	movs	r3, #0
 80010b6:	e010      	b.n	80010da <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 80010b8:	2155      	movs	r1, #85	@ 0x55
 80010ba:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80010be:	f7ff ffcf 	bl	8001060 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 80010c2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80010c6:	f7ff ffaf 	bl	8001028 <at24c_ReadOneByte>
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b55      	cmp	r3, #85	@ 0x55
 80010d2:	d101      	bne.n	80010d8 <at24c_Check+0x3c>
 80010d4:	2300      	movs	r3, #0
 80010d6:	e000      	b.n	80010da <at24c_Check+0x3e>
	}
	return 1;
 80010d8:	2301      	movs	r3, #1
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 80010e2:	b590      	push	{r4, r7, lr}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	6039      	str	r1, [r7, #0]
 80010ec:	80fb      	strh	r3, [r7, #6]
 80010ee:	4613      	mov	r3, r2
 80010f0:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80010f2:	e00d      	b.n	8001110 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	80fa      	strh	r2, [r7, #6]
 80010fa:	683c      	ldr	r4, [r7, #0]
 80010fc:	1c62      	adds	r2, r4, #1
 80010fe:	603a      	str	r2, [r7, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff91 	bl	8001028 <at24c_ReadOneByte>
 8001106:	4603      	mov	r3, r0
 8001108:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 800110a:	88bb      	ldrh	r3, [r7, #4]
 800110c:	3b01      	subs	r3, #1
 800110e:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001110:	88bb      	ldrh	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1ee      	bne.n	80010f4 <at24c_Read+0x12>
	}
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}

08001120 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	80fb      	strh	r3, [r7, #6]
 800112c:	4613      	mov	r3, r2
 800112e:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 8001130:	e00c      	b.n	800114c <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	781a      	ldrb	r2, [r3, #0]
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff90 	bl	8001060 <at24c_WriteOneByte>
		WriteAddr++;
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	3301      	adds	r3, #1
 8001144:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 800114c:	88bb      	ldrh	r3, [r7, #4]
 800114e:	1e5a      	subs	r2, r3, #1
 8001150:	80ba      	strh	r2, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1ed      	bne.n	8001132 <at24c_Write+0x12>
	}
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001164:	2201      	movs	r2, #1
 8001166:	2108      	movs	r1, #8
 8001168:	4802      	ldr	r0, [pc, #8]	@ (8001174 <button_init+0x14>)
 800116a:	f004 fb25 	bl	80057b8 <HAL_GPIO_WritePin>
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40020c00 	.word	0x40020c00

08001178 <button_Scan>:

void button_Scan(){
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2108      	movs	r1, #8
 8001182:	482f      	ldr	r0, [pc, #188]	@ (8001240 <button_Scan+0xc8>)
 8001184:	f004 fb18 	bl	80057b8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001188:	2201      	movs	r2, #1
 800118a:	2108      	movs	r1, #8
 800118c:	482c      	ldr	r0, [pc, #176]	@ (8001240 <button_Scan+0xc8>)
 800118e:	f004 fb13 	bl	80057b8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001192:	230a      	movs	r3, #10
 8001194:	2202      	movs	r2, #2
 8001196:	492b      	ldr	r1, [pc, #172]	@ (8001244 <button_Scan+0xcc>)
 8001198:	482b      	ldr	r0, [pc, #172]	@ (8001248 <button_Scan+0xd0>)
 800119a:	f006 faf7 	bl	800778c <HAL_SPI_Receive>
	  int button_index = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80011a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011a6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	e03f      	b.n	800122e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db06      	blt.n	80011c2 <button_Scan+0x4a>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	dc03      	bgt.n	80011c2 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3304      	adds	r3, #4
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	e018      	b.n	80011f4 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	dd07      	ble.n	80011d8 <button_Scan+0x60>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b07      	cmp	r3, #7
 80011cc:	dc04      	bgt.n	80011d8 <button_Scan+0x60>
			  button_index = 7 - i;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f1c3 0307 	rsb	r3, r3, #7
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	e00d      	b.n	80011f4 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b07      	cmp	r3, #7
 80011dc:	dd06      	ble.n	80011ec <button_Scan+0x74>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0b      	cmp	r3, #11
 80011e2:	dc03      	bgt.n	80011ec <button_Scan+0x74>
			  button_index = i + 4;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3304      	adds	r3, #4
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	e003      	b.n	80011f4 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f1c3 0317 	rsb	r3, r3, #23
 80011f2:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80011f4:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <button_Scan+0xcc>)
 80011f6:	881a      	ldrh	r2, [r3, #0]
 80011f8:	897b      	ldrh	r3, [r7, #10]
 80011fa:	4013      	ands	r3, r2
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <button_Scan+0x96>
 8001202:	4a12      	ldr	r2, [pc, #72]	@ (800124c <button_Scan+0xd4>)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2100      	movs	r1, #0
 8001208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800120c:	e009      	b.n	8001222 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800120e:	4a0f      	ldr	r2, [pc, #60]	@ (800124c <button_Scan+0xd4>)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001216:	3301      	adds	r3, #1
 8001218:	b299      	uxth	r1, r3
 800121a:	4a0c      	ldr	r2, [pc, #48]	@ (800124c <button_Scan+0xd4>)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8001222:	897b      	ldrh	r3, [r7, #10]
 8001224:	085b      	lsrs	r3, r3, #1
 8001226:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3301      	adds	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	ddbc      	ble.n	80011ae <button_Scan+0x36>
	  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40020c00 	.word	0x40020c00
 8001244:	2000019c 	.word	0x2000019c
 8001248:	20000288 	.word	0x20000288
 800124c:	2000017c 	.word	0x2000017c

08001250 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001254:	2100      	movs	r1, #0
 8001256:	4802      	ldr	r0, [pc, #8]	@ (8001260 <buzzer_init+0x10>)
 8001258:	f007 f86c 	bl	8008334 <HAL_TIM_PWM_Start>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000370 	.word	0x20000370

08001264 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <MX_DMA_Init+0x3c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a0b      	ldr	r2, [pc, #44]	@ (80012a0 <MX_DMA_Init+0x3c>)
 8001274:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <MX_DMA_Init+0x3c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2038      	movs	r0, #56	@ 0x38
 800128c:	f003 fd2d 	bl	8004cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001290:	2038      	movs	r0, #56	@ 0x38
 8001292:	f003 fd46 	bl	8004d22 <HAL_NVIC_EnableIRQ>

}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <ds3231_init>:

const char* daysOfWeek[7] = {
    "Sat", "Sun", "Mon", "Tue", "Wed", "Thu", "Fri"
};

void ds3231_init(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80012a8:	201e      	movs	r0, #30
 80012aa:	f003 f8fd 	bl	80044a8 <DEC2BCD>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <ds3231_init+0x80>)
 80012b4:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80012b6:	2016      	movs	r0, #22
 80012b8:	f003 f8f6 	bl	80044a8 <DEC2BCD>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <ds3231_init+0x80>)
 80012c2:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80012c4:	2015      	movs	r0, #21
 80012c6:	f003 f8ef 	bl	80044a8 <DEC2BCD>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <ds3231_init+0x80>)
 80012d0:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80012d2:	2006      	movs	r0, #6
 80012d4:	f003 f8e8 	bl	80044a8 <DEC2BCD>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <ds3231_init+0x80>)
 80012de:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80012e0:	200f      	movs	r0, #15
 80012e2:	f003 f8e1 	bl	80044a8 <DEC2BCD>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <ds3231_init+0x80>)
 80012ec:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80012ee:	2009      	movs	r0, #9
 80012f0:	f003 f8da 	bl	80044a8 <DEC2BCD>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <ds3231_init+0x80>)
 80012fa:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80012fc:	2017      	movs	r0, #23
 80012fe:	f003 f8d3 	bl	80044a8 <DEC2BCD>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <ds3231_init+0x80>)
 8001308:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 800130a:	2332      	movs	r3, #50	@ 0x32
 800130c:	2203      	movs	r2, #3
 800130e:	21d0      	movs	r1, #208	@ 0xd0
 8001310:	4805      	ldr	r0, [pc, #20]	@ (8001328 <ds3231_init+0x84>)
 8001312:	f004 fef5 	bl	8006100 <HAL_I2C_IsDeviceReady>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <ds3231_init+0x7c>
		while(1);
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <ds3231_init+0x78>
	};
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200001a0 	.word	0x200001a0
 8001328:	20000204 	.word	0x20000204

0800132c <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af04      	add	r7, sp, #16
 8001332:	4603      	mov	r3, r0
 8001334:	460a      	mov	r2, r1
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	4613      	mov	r3, r2
 800133a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	4618      	mov	r0, r3
 8001340:	f003 f8b2 	bl	80044a8 <DEC2BCD>
 8001344:	4603      	mov	r3, r0
 8001346:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	b29a      	uxth	r2, r3
 800134c:	230a      	movs	r3, #10
 800134e:	9302      	str	r3, [sp, #8]
 8001350:	2301      	movs	r3, #1
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	f107 030f 	add.w	r3, r7, #15
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2301      	movs	r3, #1
 800135c:	21d0      	movs	r1, #208	@ 0xd0
 800135e:	4803      	ldr	r0, [pc, #12]	@ (800136c <ds3231_Write+0x40>)
 8001360:	f004 fba2 	bl	8005aa8 <HAL_I2C_Mem_Write>
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000204 	.word	0x20000204

08001370 <update_Time>:
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
}

void update_Time(uint8_t day, uint8_t date, uint8_t month, uint8_t year, uint8_t sec, uint8_t min, uint8_t hours){
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4604      	mov	r4, r0
 8001378:	4608      	mov	r0, r1
 800137a:	4611      	mov	r1, r2
 800137c:	461a      	mov	r2, r3
 800137e:	4623      	mov	r3, r4
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	4603      	mov	r3, r0
 8001384:	71bb      	strb	r3, [r7, #6]
 8001386:	460b      	mov	r3, r1
 8001388:	717b      	strb	r3, [r7, #5]
 800138a:	4613      	mov	r3, r2
 800138c:	713b      	strb	r3, [r7, #4]
	ds3231_Write(ADDRESS_YEAR, year);
 800138e:	793b      	ldrb	r3, [r7, #4]
 8001390:	4619      	mov	r1, r3
 8001392:	2006      	movs	r0, #6
 8001394:	f7ff ffca 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, month);
 8001398:	797b      	ldrb	r3, [r7, #5]
 800139a:	4619      	mov	r1, r3
 800139c:	2005      	movs	r0, #5
 800139e:	f7ff ffc5 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, date);
 80013a2:	79bb      	ldrb	r3, [r7, #6]
 80013a4:	4619      	mov	r1, r3
 80013a6:	2004      	movs	r0, #4
 80013a8:	f7ff ffc0 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, day);
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4619      	mov	r1, r3
 80013b0:	2003      	movs	r0, #3
 80013b2:	f7ff ffbb 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, hours);
 80013b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013ba:	4619      	mov	r1, r3
 80013bc:	2002      	movs	r0, #2
 80013be:	f7ff ffb5 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, min);
 80013c2:	7f3b      	ldrb	r3, [r7, #28]
 80013c4:	4619      	mov	r1, r3
 80013c6:	2001      	movs	r0, #1
 80013c8:	f7ff ffb0 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, sec);
 80013cc:	7e3b      	ldrb	r3, [r7, #24]
 80013ce:	4619      	mov	r1, r3
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff ffab 	bl	800132c <ds3231_Write>
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd90      	pop	{r4, r7, pc}
	...

080013e0 <ds3231_ReadAlarm>:

void ds3231_ReadAlarm(){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0X08, I2C_MEMADD_SIZE_8BIT, ds3231_alram_buffer, 2, 10);
 80013e6:	230a      	movs	r3, #10
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	2302      	movs	r3, #2
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <ds3231_ReadAlarm+0x48>)
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	2208      	movs	r2, #8
 80013f6:	21d0      	movs	r1, #208	@ 0xd0
 80013f8:	480c      	ldr	r0, [pc, #48]	@ (800142c <ds3231_ReadAlarm+0x4c>)
 80013fa:	f004 fc4f 	bl	8005c9c <HAL_I2C_Mem_Read>
	ds3231_alarm_min = BCD2DEC(ds3231_alram_buffer[0]);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <ds3231_ReadAlarm+0x48>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f003 f836 	bl	8004474 <BCD2DEC>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <ds3231_ReadAlarm+0x50>)
 800140e:	701a      	strb	r2, [r3, #0]
	ds3231_alarm_hour = BCD2DEC(ds3231_alram_buffer[1]);
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <ds3231_ReadAlarm+0x48>)
 8001412:	785b      	ldrb	r3, [r3, #1]
 8001414:	4618      	mov	r0, r3
 8001416:	f003 f82d 	bl	8004474 <BCD2DEC>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <ds3231_ReadAlarm+0x54>)
 8001420:	701a      	strb	r2, [r3, #0]
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200001a8 	.word	0x200001a8
 800142c:	20000204 	.word	0x20000204
 8001430:	200001ab 	.word	0x200001ab
 8001434:	200001aa 	.word	0x200001aa

08001438 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	@ 0x38
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	615a      	str	r2, [r3, #20]
 8001462:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001464:	4b2f      	ldr	r3, [pc, #188]	@ (8001524 <MX_FSMC_Init+0xec>)
 8001466:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800146a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800146c:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <MX_FSMC_Init+0xec>)
 800146e:	4a2e      	ldr	r2, [pc, #184]	@ (8001528 <MX_FSMC_Init+0xf0>)
 8001470:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001472:	4b2c      	ldr	r3, [pc, #176]	@ (8001524 <MX_FSMC_Init+0xec>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001478:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <MX_FSMC_Init+0xec>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800147e:	4b29      	ldr	r3, [pc, #164]	@ (8001524 <MX_FSMC_Init+0xec>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001484:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <MX_FSMC_Init+0xec>)
 8001486:	2210      	movs	r2, #16
 8001488:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800148a:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <MX_FSMC_Init+0xec>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001490:	4b24      	ldr	r3, [pc, #144]	@ (8001524 <MX_FSMC_Init+0xec>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001496:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <MX_FSMC_Init+0xec>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800149c:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <MX_FSMC_Init+0xec>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80014a2:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <MX_FSMC_Init+0xec>)
 80014a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <MX_FSMC_Init+0xec>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80014b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <MX_FSMC_Init+0xec>)
 80014b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_FSMC_Init+0xec>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80014be:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <MX_FSMC_Init+0xec>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80014c4:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <MX_FSMC_Init+0xec>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80014ca:	230f      	movs	r3, #15
 80014cc:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80014ce:	230f      	movs	r3, #15
 80014d0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80014d2:	233c      	movs	r3, #60	@ 0x3c
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80014da:	2310      	movs	r3, #16
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80014de:	2311      	movs	r3, #17
 80014e0:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80014e2:	2300      	movs	r3, #0
 80014e4:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80014e6:	2308      	movs	r3, #8
 80014e8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80014ea:	230f      	movs	r3, #15
 80014ec:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80014ee:	2309      	movs	r3, #9
 80014f0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80014f6:	2310      	movs	r3, #16
 80014f8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80014fa:	2311      	movs	r3, #17
 80014fc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001502:	463a      	mov	r2, r7
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	@ (8001524 <MX_FSMC_Init+0xec>)
 800150c:	f006 fd48 	bl	8007fa0 <HAL_SRAM_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001516:	f001 fac9 	bl	8002aac <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800151a:	bf00      	nop
 800151c:	3738      	adds	r7, #56	@ 0x38
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200001b0 	.word	0x200001b0
 8001528:	a0000104 	.word	0xa0000104

0800152c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001540:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <HAL_FSMC_MspInit+0x88>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d131      	bne.n	80015ac <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001548:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <HAL_FSMC_MspInit+0x88>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_FSMC_MspInit+0x8c>)
 8001554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001556:	4a18      	ldr	r2, [pc, #96]	@ (80015b8 <HAL_FSMC_MspInit+0x8c>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6393      	str	r3, [r2, #56]	@ 0x38
 800155e:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <HAL_FSMC_MspInit+0x8c>)
 8001560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800156a:	f64f 7388 	movw	r3, #65416	@ 0xff88
 800156e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800157c:	230c      	movs	r3, #12
 800157e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4619      	mov	r1, r3
 8001584:	480d      	ldr	r0, [pc, #52]	@ (80015bc <HAL_FSMC_MspInit+0x90>)
 8001586:	f003 ff63 	bl	8005450 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800158a:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 800158e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800159c:	230c      	movs	r3, #12
 800159e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4806      	ldr	r0, [pc, #24]	@ (80015c0 <HAL_FSMC_MspInit+0x94>)
 80015a6:	f003 ff53 	bl	8005450 <HAL_GPIO_Init>
 80015aa:	e000      	b.n	80015ae <HAL_FSMC_MspInit+0x82>
    return;
 80015ac:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000200 	.word	0x20000200
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40020c00 	.word	0x40020c00

080015c4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80015cc:	f7ff ffae 	bl	800152c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08e      	sub	sp, #56	@ 0x38
 80015dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
 80015f2:	4b8f      	ldr	r3, [pc, #572]	@ (8001830 <MX_GPIO_Init+0x258>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a8e      	ldr	r2, [pc, #568]	@ (8001830 <MX_GPIO_Init+0x258>)
 80015f8:	f043 0310 	orr.w	r3, r3, #16
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b8c      	ldr	r3, [pc, #560]	@ (8001830 <MX_GPIO_Init+0x258>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	623b      	str	r3, [r7, #32]
 8001608:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	4b88      	ldr	r3, [pc, #544]	@ (8001830 <MX_GPIO_Init+0x258>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a87      	ldr	r2, [pc, #540]	@ (8001830 <MX_GPIO_Init+0x258>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b85      	ldr	r3, [pc, #532]	@ (8001830 <MX_GPIO_Init+0x258>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	4b81      	ldr	r3, [pc, #516]	@ (8001830 <MX_GPIO_Init+0x258>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a80      	ldr	r2, [pc, #512]	@ (8001830 <MX_GPIO_Init+0x258>)
 8001630:	f043 0320 	orr.w	r3, r3, #32
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b7e      	ldr	r3, [pc, #504]	@ (8001830 <MX_GPIO_Init+0x258>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0320 	and.w	r3, r3, #32
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	4b7a      	ldr	r3, [pc, #488]	@ (8001830 <MX_GPIO_Init+0x258>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a79      	ldr	r2, [pc, #484]	@ (8001830 <MX_GPIO_Init+0x258>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b77      	ldr	r3, [pc, #476]	@ (8001830 <MX_GPIO_Init+0x258>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b73      	ldr	r3, [pc, #460]	@ (8001830 <MX_GPIO_Init+0x258>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a72      	ldr	r2, [pc, #456]	@ (8001830 <MX_GPIO_Init+0x258>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b70      	ldr	r3, [pc, #448]	@ (8001830 <MX_GPIO_Init+0x258>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b6c      	ldr	r3, [pc, #432]	@ (8001830 <MX_GPIO_Init+0x258>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a6b      	ldr	r2, [pc, #428]	@ (8001830 <MX_GPIO_Init+0x258>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b69      	ldr	r3, [pc, #420]	@ (8001830 <MX_GPIO_Init+0x258>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	4b65      	ldr	r3, [pc, #404]	@ (8001830 <MX_GPIO_Init+0x258>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4a64      	ldr	r2, [pc, #400]	@ (8001830 <MX_GPIO_Init+0x258>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	4b62      	ldr	r3, [pc, #392]	@ (8001830 <MX_GPIO_Init+0x258>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	4b5e      	ldr	r3, [pc, #376]	@ (8001830 <MX_GPIO_Init+0x258>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	4a5d      	ldr	r2, [pc, #372]	@ (8001830 <MX_GPIO_Init+0x258>)
 80016bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001830 <MX_GPIO_Init+0x258>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2170      	movs	r1, #112	@ 0x70
 80016d2:	4858      	ldr	r0, [pc, #352]	@ (8001834 <MX_GPIO_Init+0x25c>)
 80016d4:	f004 f870 	bl	80057b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 80016de:	4856      	ldr	r0, [pc, #344]	@ (8001838 <MX_GPIO_Init+0x260>)
 80016e0:	f004 f86a 	bl	80057b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016ea:	4854      	ldr	r0, [pc, #336]	@ (800183c <MX_GPIO_Init+0x264>)
 80016ec:	f004 f864 	bl	80057b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80016f6:	4852      	ldr	r0, [pc, #328]	@ (8001840 <MX_GPIO_Init+0x268>)
 80016f8:	f004 f85e 	bl	80057b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001702:	4850      	ldr	r0, [pc, #320]	@ (8001844 <MX_GPIO_Init+0x26c>)
 8001704:	f004 f858 	bl	80057b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	2108      	movs	r1, #8
 800170c:	484e      	ldr	r0, [pc, #312]	@ (8001848 <MX_GPIO_Init+0x270>)
 800170e:	f004 f853 	bl	80057b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001712:	2370      	movs	r3, #112	@ 0x70
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001726:	4619      	mov	r1, r3
 8001728:	4842      	ldr	r0, [pc, #264]	@ (8001834 <MX_GPIO_Init+0x25c>)
 800172a:	f003 fe91 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 800172e:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001740:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001744:	4619      	mov	r1, r3
 8001746:	483c      	ldr	r0, [pc, #240]	@ (8001838 <MX_GPIO_Init+0x260>)
 8001748:	f003 fe82 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 800174c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001752:	2300      	movs	r3, #0
 8001754:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175e:	4619      	mov	r1, r3
 8001760:	4836      	ldr	r0, [pc, #216]	@ (800183c <MX_GPIO_Init+0x264>)
 8001762:	f003 fe75 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8001766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	482f      	ldr	r0, [pc, #188]	@ (800183c <MX_GPIO_Init+0x264>)
 8001780:	f003 fe66 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001784:	23c0      	movs	r3, #192	@ 0xc0
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	482b      	ldr	r0, [pc, #172]	@ (8001844 <MX_GPIO_Init+0x26c>)
 8001798:	f003 fe5a 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800179c:	2330      	movs	r3, #48	@ 0x30
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4822      	ldr	r0, [pc, #136]	@ (8001838 <MX_GPIO_Init+0x260>)
 80017b0:	f003 fe4e 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 80017b4:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	481c      	ldr	r0, [pc, #112]	@ (8001840 <MX_GPIO_Init+0x268>)
 80017ce:	f003 fe3f 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 80017d2:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017dc:	2301      	movs	r3, #1
 80017de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e4:	4619      	mov	r1, r3
 80017e6:	4814      	ldr	r0, [pc, #80]	@ (8001838 <MX_GPIO_Init+0x260>)
 80017e8:	f003 fe32 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80017ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001802:	4619      	mov	r1, r3
 8001804:	480f      	ldr	r0, [pc, #60]	@ (8001844 <MX_GPIO_Init+0x26c>)
 8001806:	f003 fe23 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800180a:	2308      	movs	r3, #8
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	2301      	movs	r3, #1
 8001810:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181e:	4619      	mov	r1, r3
 8001820:	4809      	ldr	r0, [pc, #36]	@ (8001848 <MX_GPIO_Init+0x270>)
 8001822:	f003 fe15 	bl	8005450 <HAL_GPIO_Init>

}
 8001826:	bf00      	nop
 8001828:	3738      	adds	r7, #56	@ 0x38
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40021000 	.word	0x40021000
 8001838:	40020800 	.word	0x40020800
 800183c:	40021400 	.word	0x40021400
 8001840:	40021800 	.word	0x40021800
 8001844:	40020000 	.word	0x40020000
 8001848:	40020c00 	.word	0x40020c00

0800184c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <MX_I2C1_Init+0x50>)
 8001852:	4a13      	ldr	r2, [pc, #76]	@ (80018a0 <MX_I2C1_Init+0x54>)
 8001854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001856:	4b11      	ldr	r3, [pc, #68]	@ (800189c <MX_I2C1_Init+0x50>)
 8001858:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <MX_I2C1_Init+0x58>)
 800185a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800185c:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <MX_I2C1_Init+0x50>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <MX_I2C1_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <MX_I2C1_Init+0x50>)
 800186a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800186e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001870:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <MX_I2C1_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <MX_I2C1_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187c:	4b07      	ldr	r3, [pc, #28]	@ (800189c <MX_I2C1_Init+0x50>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <MX_I2C1_Init+0x50>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001888:	4804      	ldr	r0, [pc, #16]	@ (800189c <MX_I2C1_Init+0x50>)
 800188a:	f003 ffc9 	bl	8005820 <HAL_I2C_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001894:	f001 f90a 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000204 	.word	0x20000204
 80018a0:	40005400 	.word	0x40005400
 80018a4:	000186a0 	.word	0x000186a0

080018a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	@ 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a19      	ldr	r2, [pc, #100]	@ (800192c <HAL_I2C_MspInit+0x84>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d12b      	bne.n	8001922 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <HAL_I2C_MspInit+0x88>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a17      	ldr	r2, [pc, #92]	@ (8001930 <HAL_I2C_MspInit+0x88>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <HAL_I2C_MspInit+0x88>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e6:	23c0      	movs	r3, #192	@ 0xc0
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ea:	2312      	movs	r3, #18
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018f6:	2304      	movs	r3, #4
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	480c      	ldr	r0, [pc, #48]	@ (8001934 <HAL_I2C_MspInit+0x8c>)
 8001902:	f003 fda5 	bl	8005450 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <HAL_I2C_MspInit+0x88>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	4a08      	ldr	r2, [pc, #32]	@ (8001930 <HAL_I2C_MspInit+0x88>)
 8001910:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001914:	6413      	str	r3, [r2, #64]	@ 0x40
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_I2C_MspInit+0x88>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	@ 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40005400 	.word	0x40005400
 8001930:	40023800 	.word	0x40023800
 8001934:	40020400 	.word	0x40020400

08001938 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001942:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <LCD_WR_REG+0x1c>)
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	8013      	strh	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	600ffffe 	.word	0x600ffffe

08001958 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001962:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <LCD_WR_DATA+0x1c>)
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	8053      	strh	r3, [r2, #2]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	600ffffe 	.word	0x600ffffe

08001978 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <LCD_RD_DATA+0x20>)
 8001980:	885b      	ldrh	r3, [r3, #2]
 8001982:	b29b      	uxth	r3, r3
 8001984:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	b29b      	uxth	r3, r3
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	600ffffe 	.word	0x600ffffe

0800199c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4604      	mov	r4, r0
 80019a4:	4608      	mov	r0, r1
 80019a6:	4611      	mov	r1, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	4623      	mov	r3, r4
 80019ac:	80fb      	strh	r3, [r7, #6]
 80019ae:	4603      	mov	r3, r0
 80019b0:	80bb      	strh	r3, [r7, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	807b      	strh	r3, [r7, #2]
 80019b6:	4613      	mov	r3, r2
 80019b8:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 80019ba:	202a      	movs	r0, #42	@ 0x2a
 80019bc:	f7ff ffbc 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(x1>>8);
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ffc6 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(x1&0xff);
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ffc0 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(x2>>8);
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ffba 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(x2&0xff);
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ffb4 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 80019f0:	202b      	movs	r0, #43	@ 0x2b
 80019f2:	f7ff ffa1 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(y1>>8);
 80019f6:	88bb      	ldrh	r3, [r7, #4]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ffab 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(y1&0xff);
 8001a02:	88bb      	ldrh	r3, [r7, #4]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ffa5 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(y2>>8);
 8001a0e:	883b      	ldrh	r3, [r7, #0]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff9f 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(y2&0xff);
 8001a1a:	883b      	ldrh	r3, [r7, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff99 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8001a26:	202c      	movs	r0, #44	@ 0x2c
 8001a28:	f7ff ff86 	bl	8001938 <LCD_WR_REG>
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}

08001a34 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <lcd_Clear+0x70>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <lcd_Clear+0x70>)
 8001a58:	885b      	ldrh	r3, [r3, #2]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff ff9b 	bl	800199c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	81fb      	strh	r3, [r7, #14]
 8001a6a:	e011      	b.n	8001a90 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	81bb      	strh	r3, [r7, #12]
 8001a70:	e006      	b.n	8001a80 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff6f 	bl	8001958 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001a7a:	89bb      	ldrh	r3, [r7, #12]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	81bb      	strh	r3, [r7, #12]
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <lcd_Clear+0x70>)
 8001a82:	885b      	ldrh	r3, [r3, #2]
 8001a84:	89ba      	ldrh	r2, [r7, #12]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d3f3      	bcc.n	8001a72 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8001a8a:	89fb      	ldrh	r3, [r7, #14]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	81fb      	strh	r3, [r7, #14]
 8001a90:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <lcd_Clear+0x70>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	89fa      	ldrh	r2, [r7, #14]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d3e8      	bcc.n	8001a6c <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000258 	.word	0x20000258

08001aa8 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4604      	mov	r4, r0
 8001ab0:	4608      	mov	r0, r1
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	80fb      	strh	r3, [r7, #6]
 8001aba:	4603      	mov	r3, r0
 8001abc:	80bb      	strh	r3, [r7, #4]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	807b      	strh	r3, [r7, #2]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	883b      	ldrh	r3, [r7, #0]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	88b9      	ldrh	r1, [r7, #4]
 8001ad4:	88f8      	ldrh	r0, [r7, #6]
 8001ad6:	f7ff ff61 	bl	800199c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001ada:	88bb      	ldrh	r3, [r7, #4]
 8001adc:	81fb      	strh	r3, [r7, #14]
 8001ade:	e010      	b.n	8001b02 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	81bb      	strh	r3, [r7, #12]
 8001ae4:	e006      	b.n	8001af4 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001ae6:	8c3b      	ldrh	r3, [r7, #32]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff35 	bl	8001958 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001aee:	89bb      	ldrh	r3, [r7, #12]
 8001af0:	3301      	adds	r3, #1
 8001af2:	81bb      	strh	r3, [r7, #12]
 8001af4:	89ba      	ldrh	r2, [r7, #12]
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d3f4      	bcc.n	8001ae6 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001afc:	89fb      	ldrh	r3, [r7, #14]
 8001afe:	3301      	adds	r3, #1
 8001b00:	81fb      	strh	r3, [r7, #14]
 8001b02:	89fa      	ldrh	r2, [r7, #14]
 8001b04:	883b      	ldrh	r3, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d3ea      	bcc.n	8001ae0 <lcd_Fill+0x38>
		}
	}
}
 8001b0a:	bf00      	nop
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd90      	pop	{r4, r7, pc}

08001b14 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80fb      	strh	r3, [r7, #6]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	80bb      	strh	r3, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001b26:	88bb      	ldrh	r3, [r7, #4]
 8001b28:	88fa      	ldrh	r2, [r7, #6]
 8001b2a:	88b9      	ldrh	r1, [r7, #4]
 8001b2c:	88f8      	ldrh	r0, [r7, #6]
 8001b2e:	f7ff ff35 	bl	800199c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff0f 	bl	8001958 <LCD_WR_DATA>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <lcd_DrawLine>:

void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001b42:	b590      	push	{r4, r7, lr}
 8001b44:	b08d      	sub	sp, #52	@ 0x34
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4604      	mov	r4, r0
 8001b4a:	4608      	mov	r0, r1
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4623      	mov	r3, r4
 8001b52:	80fb      	strh	r3, [r7, #6]
 8001b54:	4603      	mov	r3, r0
 8001b56:	80bb      	strh	r3, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001b68:	887a      	ldrh	r2, [r7, #2]
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001b70:	883a      	ldrh	r2, [r7, #0]
 8001b72:	88bb      	ldrh	r3, [r7, #4]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001b7c:	88bb      	ldrh	r3, [r7, #4]
 8001b7e:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	dd02      	ble.n	8001b8c <lcd_DrawLine+0x4a>
 8001b86:	2301      	movs	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e00b      	b.n	8001ba4 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d102      	bne.n	8001b98 <lcd_DrawLine+0x56>
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e005      	b.n	8001ba4 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	425b      	negs	r3, r3
 8001ba2:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	dd02      	ble.n	8001bb0 <lcd_DrawLine+0x6e>
 8001baa:	2301      	movs	r3, #1
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	e00b      	b.n	8001bc8 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <lcd_DrawLine+0x7a>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	e005      	b.n	8001bc8 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	425b      	negs	r3, r3
 8001bc6:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001bc8:	6a3a      	ldr	r2, [r7, #32]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	dd02      	ble.n	8001bd6 <lcd_DrawLine+0x94>
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	e001      	b.n	8001bda <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001bde:	e02b      	b.n	8001c38 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	b291      	uxth	r1, r2
 8001be8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff91 	bl	8001b14 <lcd_DrawPoint>
		xerr+=delta_x;
 8001bf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y;
 8001bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	4413      	add	r3, r2
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 8001c02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	dd07      	ble.n	8001c1a <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001c0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dd07      	ble.n	8001c32 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001c32:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001c34:	3301      	adds	r3, #1
 8001c36:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001c38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	dacf      	bge.n	8001be0 <lcd_DrawLine+0x9e>
		}
	}
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3734      	adds	r7, #52	@ 0x34
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}
	...

08001c4c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4604      	mov	r4, r0
 8001c54:	4608      	mov	r0, r1
 8001c56:	4611      	mov	r1, r2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	80fb      	strh	r3, [r7, #6]
 8001c5e:	4603      	mov	r3, r0
 8001c60:	80bb      	strh	r3, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	70fb      	strb	r3, [r7, #3]
 8001c66:	4613      	mov	r3, r2
 8001c68:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001c72:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c76:	085b      	lsrs	r3, r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	bf14      	ite	ne
 8001c8e:	2301      	movne	r3, #1
 8001c90:	2300      	moveq	r3, #0
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	fb12 f303 	smulbb	r3, r2, r3
 8001ca2:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	3b20      	subs	r3, #32
 8001ca8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29c      	uxth	r4, r3
 8001cb8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	88bb      	ldrh	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	88b9      	ldrh	r1, [r7, #4]
 8001cca:	88f8      	ldrh	r0, [r7, #6]
 8001ccc:	4622      	mov	r2, r4
 8001cce:	f7ff fe65 	bl	800199c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	827b      	strh	r3, [r7, #18]
 8001cd6:	e07a      	b.n	8001dce <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001cd8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cdc:	2b0c      	cmp	r3, #12
 8001cde:	d028      	beq.n	8001d32 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8001ce0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ce4:	2b10      	cmp	r3, #16
 8001ce6:	d108      	bne.n	8001cfa <lcd_ShowChar+0xae>
 8001ce8:	78fa      	ldrb	r2, [r7, #3]
 8001cea:	8a7b      	ldrh	r3, [r7, #18]
 8001cec:	493c      	ldr	r1, [pc, #240]	@ (8001de0 <lcd_ShowChar+0x194>)
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	440a      	add	r2, r1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	75fb      	strb	r3, [r7, #23]
 8001cf8:	e01b      	b.n	8001d32 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8001cfa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cfe:	2b18      	cmp	r3, #24
 8001d00:	d10b      	bne.n	8001d1a <lcd_ShowChar+0xce>
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	8a79      	ldrh	r1, [r7, #18]
 8001d06:	4837      	ldr	r0, [pc, #220]	@ (8001de4 <lcd_ShowChar+0x198>)
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	4403      	add	r3, r0
 8001d12:	440b      	add	r3, r1
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	75fb      	strb	r3, [r7, #23]
 8001d18:	e00b      	b.n	8001d32 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8001d1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d1e:	2b20      	cmp	r3, #32
 8001d20:	d15a      	bne.n	8001dd8 <lcd_ShowChar+0x18c>
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	8a7b      	ldrh	r3, [r7, #18]
 8001d26:	4930      	ldr	r1, [pc, #192]	@ (8001de8 <lcd_ShowChar+0x19c>)
 8001d28:	0192      	lsls	r2, r2, #6
 8001d2a:	440a      	add	r2, r1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	75bb      	strb	r3, [r7, #22]
 8001d36:	e044      	b.n	8001dc2 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001d38:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d120      	bne.n	8001d82 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001d40:	7dfa      	ldrb	r2, [r7, #23]
 8001d42:	7dbb      	ldrb	r3, [r7, #22]
 8001d44:	fa42 f303 	asr.w	r3, r2, r3
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d004      	beq.n	8001d5a <lcd_ShowChar+0x10e>
 8001d50:	883b      	ldrh	r3, [r7, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fe00 	bl	8001958 <LCD_WR_DATA>
 8001d58:	e003      	b.n	8001d62 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001d5a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fdfb 	bl	8001958 <LCD_WR_DATA>
				m++;
 8001d62:	7d7b      	ldrb	r3, [r7, #21]
 8001d64:	3301      	adds	r3, #1
 8001d66:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001d68:	7d7b      	ldrb	r3, [r7, #21]
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d70:	fb01 f202 	mul.w	r2, r1, r2
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d11f      	bne.n	8001dbc <lcd_ShowChar+0x170>
				{
					m=0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	757b      	strb	r3, [r7, #21]
					break;
 8001d80:	e022      	b.n	8001dc8 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001d82:	7dfa      	ldrb	r2, [r7, #23]
 8001d84:	7dbb      	ldrb	r3, [r7, #22]
 8001d86:	fa42 f303 	asr.w	r3, r2, r3
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <lcd_ShowChar+0x152>
 8001d92:	883a      	ldrh	r2, [r7, #0]
 8001d94:	88b9      	ldrh	r1, [r7, #4]
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff febb 	bl	8001b14 <lcd_DrawPoint>
				x++;
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	3301      	adds	r3, #1
 8001da2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001da4:	88fa      	ldrh	r2, [r7, #6]
 8001da6:	8a3b      	ldrh	r3, [r7, #16]
 8001da8:	1ad2      	subs	r2, r2, r3
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d105      	bne.n	8001dbc <lcd_ShowChar+0x170>
				{
					x=x0;
 8001db0:	8a3b      	ldrh	r3, [r7, #16]
 8001db2:	80fb      	strh	r3, [r7, #6]
					y++;
 8001db4:	88bb      	ldrh	r3, [r7, #4]
 8001db6:	3301      	adds	r3, #1
 8001db8:	80bb      	strh	r3, [r7, #4]
					break;
 8001dba:	e005      	b.n	8001dc8 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001dbc:	7dbb      	ldrb	r3, [r7, #22]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	75bb      	strb	r3, [r7, #22]
 8001dc2:	7dbb      	ldrb	r3, [r7, #22]
 8001dc4:	2b07      	cmp	r3, #7
 8001dc6:	d9b7      	bls.n	8001d38 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001dc8:	8a7b      	ldrh	r3, [r7, #18]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	827b      	strh	r3, [r7, #18]
 8001dce:	8a7a      	ldrh	r2, [r7, #18]
 8001dd0:	89bb      	ldrh	r3, [r7, #12]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d380      	bcc.n	8001cd8 <lcd_ShowChar+0x8c>
 8001dd6:	e000      	b.n	8001dda <lcd_ShowChar+0x18e>
		else return;
 8001dd8:	bf00      	nop
				}
			}
		}
	}
}
 8001dda:	371c      	adds	r7, #28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd90      	pop	{r4, r7, pc}
 8001de0:	0800b908 	.word	0x0800b908
 8001de4:	0800bef8 	.word	0x0800bef8
 8001de8:	0800d0c8 	.word	0x0800d0c8

08001dec <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4604      	mov	r4, r0
 8001df4:	4608      	mov	r0, r1
 8001df6:	4611      	mov	r1, r2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	80fb      	strh	r3, [r7, #6]
 8001dfe:	4603      	mov	r3, r0
 8001e00:	80bb      	strh	r3, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	807b      	strh	r3, [r7, #2]
 8001e06:	4613      	mov	r3, r2
 8001e08:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8001e0e:	88fa      	ldrh	r2, [r7, #6]
 8001e10:	887b      	ldrh	r3, [r7, #2]
 8001e12:	4413      	add	r3, r2
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29c      	uxth	r4, r3
 8001e1a:	88ba      	ldrh	r2, [r7, #4]
 8001e1c:	883b      	ldrh	r3, [r7, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	88b9      	ldrh	r1, [r7, #4]
 8001e28:	88f8      	ldrh	r0, [r7, #6]
 8001e2a:	4622      	mov	r2, r4
 8001e2c:	f7ff fdb6 	bl	800199c <lcd_AddressSet>
	for(i=0;i<length;i++)
 8001e30:	2300      	movs	r3, #0
 8001e32:	82fb      	strh	r3, [r7, #22]
 8001e34:	e027      	b.n	8001e86 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	82bb      	strh	r3, [r7, #20]
 8001e3a:	e01d      	b.n	8001e78 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e42:	4413      	add	r3, r2
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e50:	4413      	add	r3, r2
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	b21a      	sxth	r2, r3
 8001e5c:	7bbb      	ldrb	r3, [r7, #14]
 8001e5e:	b21b      	sxth	r3, r3
 8001e60:	4313      	orrs	r3, r2
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fd76 	bl	8001958 <LCD_WR_DATA>
			k++;
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8001e72:	8abb      	ldrh	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	82bb      	strh	r3, [r7, #20]
 8001e78:	8aba      	ldrh	r2, [r7, #20]
 8001e7a:	883b      	ldrh	r3, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d3dd      	bcc.n	8001e3c <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8001e80:	8afb      	ldrh	r3, [r7, #22]
 8001e82:	3301      	adds	r3, #1
 8001e84:	82fb      	strh	r3, [r7, #22]
 8001e86:	8afa      	ldrh	r2, [r7, #22]
 8001e88:	887b      	ldrh	r3, [r7, #2]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d3d3      	bcc.n	8001e36 <lcd_ShowPicture+0x4a>
		}
	}
}
 8001e8e:	bf00      	nop
 8001e90:	bf00      	nop
 8001e92:	371c      	adds	r7, #28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd90      	pop	{r4, r7, pc}

08001e98 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <lcd_SetDir+0x44>)
 8001eb4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001eb8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <lcd_SetDir+0x44>)
 8001ebc:	22f0      	movs	r2, #240	@ 0xf0
 8001ebe:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001ec0:	e006      	b.n	8001ed0 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <lcd_SetDir+0x44>)
 8001ec4:	22f0      	movs	r2, #240	@ 0xf0
 8001ec6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001ec8:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <lcd_SetDir+0x44>)
 8001eca:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001ece:	805a      	strh	r2, [r3, #2]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	20000258 	.word	0x20000258

08001ee0 <lcd_init>:


void lcd_init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eea:	48aa      	ldr	r0, [pc, #680]	@ (8002194 <lcd_init+0x2b4>)
 8001eec:	f003 fc64 	bl	80057b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001ef0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ef4:	f002 fb98 	bl	8004628 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001efe:	48a5      	ldr	r0, [pc, #660]	@ (8002194 <lcd_init+0x2b4>)
 8001f00:	f003 fc5a 	bl	80057b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f04:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f08:	f002 fb8e 	bl	8004628 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff ffc3 	bl	8001e98 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001f12:	20d3      	movs	r0, #211	@ 0xd3
 8001f14:	f7ff fd10 	bl	8001938 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001f18:	f7ff fd2e 	bl	8001978 <LCD_RD_DATA>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b9d      	ldr	r3, [pc, #628]	@ (8002198 <lcd_init+0x2b8>)
 8001f22:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001f24:	f7ff fd28 	bl	8001978 <LCD_RD_DATA>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b9a      	ldr	r3, [pc, #616]	@ (8002198 <lcd_init+0x2b8>)
 8001f2e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001f30:	f7ff fd22 	bl	8001978 <LCD_RD_DATA>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b97      	ldr	r3, [pc, #604]	@ (8002198 <lcd_init+0x2b8>)
 8001f3a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001f3c:	4b96      	ldr	r3, [pc, #600]	@ (8002198 <lcd_init+0x2b8>)
 8001f3e:	889b      	ldrh	r3, [r3, #4]
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b94      	ldr	r3, [pc, #592]	@ (8002198 <lcd_init+0x2b8>)
 8001f46:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001f48:	f7ff fd16 	bl	8001978 <LCD_RD_DATA>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b91      	ldr	r3, [pc, #580]	@ (8002198 <lcd_init+0x2b8>)
 8001f52:	889b      	ldrh	r3, [r3, #4]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	4b8f      	ldr	r3, [pc, #572]	@ (8002198 <lcd_init+0x2b8>)
 8001f5a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001f5c:	20cf      	movs	r0, #207	@ 0xcf
 8001f5e:	f7ff fceb 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7ff fcf8 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001f68:	20c1      	movs	r0, #193	@ 0xc1
 8001f6a:	f7ff fcf5 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001f6e:	2030      	movs	r0, #48	@ 0x30
 8001f70:	f7ff fcf2 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001f74:	20ed      	movs	r0, #237	@ 0xed
 8001f76:	f7ff fcdf 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001f7a:	2064      	movs	r0, #100	@ 0x64
 8001f7c:	f7ff fcec 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001f80:	2003      	movs	r0, #3
 8001f82:	f7ff fce9 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001f86:	2012      	movs	r0, #18
 8001f88:	f7ff fce6 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001f8c:	2081      	movs	r0, #129	@ 0x81
 8001f8e:	f7ff fce3 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001f92:	20e8      	movs	r0, #232	@ 0xe8
 8001f94:	f7ff fcd0 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001f98:	2085      	movs	r0, #133	@ 0x85
 8001f9a:	f7ff fcdd 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f9e:	2010      	movs	r0, #16
 8001fa0:	f7ff fcda 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001fa4:	207a      	movs	r0, #122	@ 0x7a
 8001fa6:	f7ff fcd7 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001faa:	20cb      	movs	r0, #203	@ 0xcb
 8001fac:	f7ff fcc4 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001fb0:	2039      	movs	r0, #57	@ 0x39
 8001fb2:	f7ff fcd1 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001fb6:	202c      	movs	r0, #44	@ 0x2c
 8001fb8:	f7ff fcce 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7ff fccb 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001fc2:	2034      	movs	r0, #52	@ 0x34
 8001fc4:	f7ff fcc8 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001fc8:	2002      	movs	r0, #2
 8001fca:	f7ff fcc5 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001fce:	20f7      	movs	r0, #247	@ 0xf7
 8001fd0:	f7ff fcb2 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001fd4:	2020      	movs	r0, #32
 8001fd6:	f7ff fcbf 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001fda:	20ea      	movs	r0, #234	@ 0xea
 8001fdc:	f7ff fcac 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff fcb9 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff fcb6 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001fec:	20c0      	movs	r0, #192	@ 0xc0
 8001fee:	f7ff fca3 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001ff2:	201b      	movs	r0, #27
 8001ff4:	f7ff fcb0 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001ff8:	20c1      	movs	r0, #193	@ 0xc1
 8001ffa:	f7ff fc9d 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001ffe:	2001      	movs	r0, #1
 8002000:	f7ff fcaa 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002004:	20c5      	movs	r0, #197	@ 0xc5
 8002006:	f7ff fc97 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800200a:	2030      	movs	r0, #48	@ 0x30
 800200c:	f7ff fca4 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002010:	2030      	movs	r0, #48	@ 0x30
 8002012:	f7ff fca1 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002016:	20c7      	movs	r0, #199	@ 0xc7
 8002018:	f7ff fc8e 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800201c:	20b7      	movs	r0, #183	@ 0xb7
 800201e:	f7ff fc9b 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002022:	2036      	movs	r0, #54	@ 0x36
 8002024:	f7ff fc88 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8002028:	2008      	movs	r0, #8
 800202a:	f7ff fc95 	bl	8001958 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 800202e:	203a      	movs	r0, #58	@ 0x3a
 8002030:	f7ff fc82 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002034:	2055      	movs	r0, #85	@ 0x55
 8002036:	f7ff fc8f 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800203a:	20b1      	movs	r0, #177	@ 0xb1
 800203c:	f7ff fc7c 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff fc89 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002046:	201a      	movs	r0, #26
 8002048:	f7ff fc86 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800204c:	20b6      	movs	r0, #182	@ 0xb6
 800204e:	f7ff fc73 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002052:	200a      	movs	r0, #10
 8002054:	f7ff fc80 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002058:	20a2      	movs	r0, #162	@ 0xa2
 800205a:	f7ff fc7d 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800205e:	20f2      	movs	r0, #242	@ 0xf2
 8002060:	f7ff fc6a 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff fc77 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800206a:	2026      	movs	r0, #38	@ 0x26
 800206c:	f7ff fc64 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002070:	2001      	movs	r0, #1
 8002072:	f7ff fc71 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002076:	20e0      	movs	r0, #224	@ 0xe0
 8002078:	f7ff fc5e 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800207c:	200f      	movs	r0, #15
 800207e:	f7ff fc6b 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002082:	202a      	movs	r0, #42	@ 0x2a
 8002084:	f7ff fc68 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002088:	2028      	movs	r0, #40	@ 0x28
 800208a:	f7ff fc65 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800208e:	2008      	movs	r0, #8
 8002090:	f7ff fc62 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002094:	200e      	movs	r0, #14
 8002096:	f7ff fc5f 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800209a:	2008      	movs	r0, #8
 800209c:	f7ff fc5c 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80020a0:	2054      	movs	r0, #84	@ 0x54
 80020a2:	f7ff fc59 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80020a6:	20a9      	movs	r0, #169	@ 0xa9
 80020a8:	f7ff fc56 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80020ac:	2043      	movs	r0, #67	@ 0x43
 80020ae:	f7ff fc53 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80020b2:	200a      	movs	r0, #10
 80020b4:	f7ff fc50 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020b8:	200f      	movs	r0, #15
 80020ba:	f7ff fc4d 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020be:	2000      	movs	r0, #0
 80020c0:	f7ff fc4a 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff fc47 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7ff fc44 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7ff fc41 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80020d6:	20e1      	movs	r0, #225	@ 0xe1
 80020d8:	f7ff fc2e 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020dc:	2000      	movs	r0, #0
 80020de:	f7ff fc3b 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80020e2:	2015      	movs	r0, #21
 80020e4:	f7ff fc38 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80020e8:	2017      	movs	r0, #23
 80020ea:	f7ff fc35 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80020ee:	2007      	movs	r0, #7
 80020f0:	f7ff fc32 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80020f4:	2011      	movs	r0, #17
 80020f6:	f7ff fc2f 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80020fa:	2006      	movs	r0, #6
 80020fc:	f7ff fc2c 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002100:	202b      	movs	r0, #43	@ 0x2b
 8002102:	f7ff fc29 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002106:	2056      	movs	r0, #86	@ 0x56
 8002108:	f7ff fc26 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800210c:	203c      	movs	r0, #60	@ 0x3c
 800210e:	f7ff fc23 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002112:	2005      	movs	r0, #5
 8002114:	f7ff fc20 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002118:	2010      	movs	r0, #16
 800211a:	f7ff fc1d 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800211e:	200f      	movs	r0, #15
 8002120:	f7ff fc1a 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002124:	203f      	movs	r0, #63	@ 0x3f
 8002126:	f7ff fc17 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800212a:	203f      	movs	r0, #63	@ 0x3f
 800212c:	f7ff fc14 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002130:	200f      	movs	r0, #15
 8002132:	f7ff fc11 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002136:	202b      	movs	r0, #43	@ 0x2b
 8002138:	f7ff fbfe 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800213c:	2000      	movs	r0, #0
 800213e:	f7ff fc0b 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002142:	2000      	movs	r0, #0
 8002144:	f7ff fc08 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002148:	2001      	movs	r0, #1
 800214a:	f7ff fc05 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800214e:	203f      	movs	r0, #63	@ 0x3f
 8002150:	f7ff fc02 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002154:	202a      	movs	r0, #42	@ 0x2a
 8002156:	f7ff fbef 	bl	8001938 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800215a:	2000      	movs	r0, #0
 800215c:	f7ff fbfc 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff fbf9 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff fbf6 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800216c:	20ef      	movs	r0, #239	@ 0xef
 800216e:	f7ff fbf3 	bl	8001958 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002172:	2011      	movs	r0, #17
 8002174:	f7ff fbe0 	bl	8001938 <LCD_WR_REG>
	HAL_Delay(120);
 8002178:	2078      	movs	r0, #120	@ 0x78
 800217a:	f002 fa55 	bl	8004628 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800217e:	2029      	movs	r0, #41	@ 0x29
 8002180:	f7ff fbda 	bl	8001938 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002184:	2201      	movs	r2, #1
 8002186:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800218a:	4804      	ldr	r0, [pc, #16]	@ (800219c <lcd_init+0x2bc>)
 800218c:	f003 fb14 	bl	80057b8 <HAL_GPIO_WritePin>
}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40020800 	.word	0x40020800
 8002198:	20000258 	.word	0x20000258
 800219c:	40020000 	.word	0x40020000

080021a0 <_draw_circle_8>:

void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	b298      	uxth	r0, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	8b3a      	ldrh	r2, [r7, #24]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7ff fca3 	bl	8001b14 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	b298      	uxth	r0, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	b29a      	uxth	r2, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	8b3a      	ldrh	r2, [r7, #24]
 80021e8:	4619      	mov	r1, r3
 80021ea:	f7ff fc93 	bl	8001b14 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	b298      	uxth	r0, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	b29b      	uxth	r3, r3
 8002206:	8b3a      	ldrh	r2, [r7, #24]
 8002208:	4619      	mov	r1, r3
 800220a:	f7ff fc83 	bl	8001b14 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	b29a      	uxth	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	b29b      	uxth	r3, r3
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	b298      	uxth	r0, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	b29a      	uxth	r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	b29b      	uxth	r3, r3
 8002226:	8b3a      	ldrh	r2, [r7, #24]
 8002228:	4619      	mov	r1, r3
 800222a:	f7ff fc73 	bl	8001b14 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	b29a      	uxth	r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4413      	add	r3, r2
 8002238:	b298      	uxth	r0, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	b29a      	uxth	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	b29b      	uxth	r3, r3
 8002242:	4413      	add	r3, r2
 8002244:	b29b      	uxth	r3, r3
 8002246:	8b3a      	ldrh	r2, [r7, #24]
 8002248:	4619      	mov	r1, r3
 800224a:	f7ff fc63 	bl	8001b14 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	b29a      	uxth	r2, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	b298      	uxth	r0, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	b29a      	uxth	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	b29b      	uxth	r3, r3
 8002262:	4413      	add	r3, r2
 8002264:	b29b      	uxth	r3, r3
 8002266:	8b3a      	ldrh	r2, [r7, #24]
 8002268:	4619      	mov	r1, r3
 800226a:	f7ff fc53 	bl	8001b14 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	4413      	add	r3, r2
 8002278:	b298      	uxth	r0, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	b29a      	uxth	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	b29b      	uxth	r3, r3
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	b29b      	uxth	r3, r3
 8002286:	8b3a      	ldrh	r2, [r7, #24]
 8002288:	4619      	mov	r1, r3
 800228a:	f7ff fc43 	bl	8001b14 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	b29a      	uxth	r2, r3
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	b298      	uxth	r0, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	b29a      	uxth	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	8b3a      	ldrh	r2, [r7, #24]
 80022a8:	4619      	mov	r1, r3
 80022aa:	f7ff fc33 	bl	8001b14 <lcd_DrawPoint>
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b08a      	sub	sp, #40	@ 0x28
 80022ba:	af02      	add	r7, sp, #8
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	4613      	mov	r3, r2
 80022c4:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	f1c3 0303 	rsb	r3, r3, #3
 80022d6:	613b      	str	r3, [r7, #16]


	if (fill)
 80022d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d04f      	beq.n	800237e <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80022de:	e029      	b.n	8002334 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e00a      	b.n	80022fc <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f7ff ff55 	bl	80021a0 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	429a      	cmp	r2, r3
 8002302:	ddf0      	ble.n	80022e6 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	da06      	bge.n	8002318 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	009a      	lsls	r2, r3, #2
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4413      	add	r3, r2
 8002312:	3306      	adds	r3, #6
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	e00a      	b.n	800232e <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	009a      	lsls	r2, r3, #2
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	330a      	adds	r3, #10
 8002326:	613b      	str	r3, [r7, #16]
				y--;
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	3b01      	subs	r3, #1
 800232c:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3301      	adds	r3, #1
 8002332:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	429a      	cmp	r2, r3
 800233a:	ddd1      	ble.n	80022e0 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 800233c:	e023      	b.n	8002386 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f7ff ff29 	bl	80021a0 <_draw_circle_8>
			if (d < 0) {
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	da06      	bge.n	8002362 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	009a      	lsls	r2, r3, #2
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	3306      	adds	r3, #6
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	e00a      	b.n	8002378 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	009a      	lsls	r2, r3, #2
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	330a      	adds	r3, #10
 8002370:	613b      	str	r3, [r7, #16]
				y--;
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	3b01      	subs	r3, #1
 8002376:	61bb      	str	r3, [r7, #24]
			x++;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	3301      	adds	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	429a      	cmp	r2, r3
 8002384:	dddb      	ble.n	800233e <lcd_DrawCircle+0x88>
}
 8002386:	bf00      	nop
 8002388:	3720      	adds	r7, #32
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b08b      	sub	sp, #44	@ 0x2c
 8002394:	af04      	add	r7, sp, #16
 8002396:	60ba      	str	r2, [r7, #8]
 8002398:	461a      	mov	r2, r3
 800239a:	4603      	mov	r3, r0
 800239c:	81fb      	strh	r3, [r7, #14]
 800239e:	460b      	mov	r3, r1
 80023a0:	81bb      	strh	r3, [r7, #12]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80023a6:	89fb      	ldrh	r3, [r7, #14]
 80023a8:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80023ae:	e048      	b.n	8002442 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d145      	bne.n	8002442 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80023b6:	89fa      	ldrh	r2, [r7, #14]
 80023b8:	4b26      	ldr	r3, [pc, #152]	@ (8002454 <lcd_ShowStr+0xc4>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	1acb      	subs	r3, r1, r3
 80023c8:	429a      	cmp	r2, r3
 80023ca:	dc3f      	bgt.n	800244c <lcd_ShowStr+0xbc>
 80023cc:	89ba      	ldrh	r2, [r7, #12]
 80023ce:	4b21      	ldr	r3, [pc, #132]	@ (8002454 <lcd_ShowStr+0xc4>)
 80023d0:	885b      	ldrh	r3, [r3, #2]
 80023d2:	4619      	mov	r1, r3
 80023d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023d8:	1acb      	subs	r3, r1, r3
 80023da:	429a      	cmp	r2, r3
 80023dc:	dc36      	bgt.n	800244c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b80      	cmp	r3, #128	@ 0x80
 80023e4:	d902      	bls.n	80023ec <lcd_ShowStr+0x5c>
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
 80023ea:	e02a      	b.n	8002442 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b0d      	cmp	r3, #13
 80023f2:	d10b      	bne.n	800240c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80023f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	89bb      	ldrh	r3, [r7, #12]
 80023fc:	4413      	add	r3, r2
 80023fe:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002400:	8abb      	ldrh	r3, [r7, #20]
 8002402:	81fb      	strh	r3, [r7, #14]
					str++;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	3301      	adds	r3, #1
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	e017      	b.n	800243c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	781a      	ldrb	r2, [r3, #0]
 8002410:	88fc      	ldrh	r4, [r7, #6]
 8002412:	89b9      	ldrh	r1, [r7, #12]
 8002414:	89f8      	ldrh	r0, [r7, #14]
 8002416:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800241a:	9302      	str	r3, [sp, #8]
 800241c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	4623      	mov	r3, r4
 8002428:	f7ff fc10 	bl	8001c4c <lcd_ShowChar>
					x+=sizey/2;
 800242c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002430:	085b      	lsrs	r3, r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	89fb      	ldrh	r3, [r7, #14]
 8002438:	4413      	add	r3, r2
 800243a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	3301      	adds	r3, #1
 8002440:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1b2      	bne.n	80023b0 <lcd_ShowStr+0x20>
 800244a:	e000      	b.n	800244e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800244c:	bf00      	nop
			}
		}
	}
}
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	bd90      	pop	{r4, r7, pc}
 8002454:	20000258 	.word	0x20000258

08002458 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af04      	add	r7, sp, #16
 800245e:	60ba      	str	r2, [r7, #8]
 8002460:	461a      	mov	r2, r3
 8002462:	4603      	mov	r3, r0
 8002464:	81fb      	strh	r3, [r7, #14]
 8002466:	460b      	mov	r3, r1
 8002468:	81bb      	strh	r3, [r7, #12]
 800246a:	4613      	mov	r3, r2
 800246c:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800246e:	68b8      	ldr	r0, [r7, #8]
 8002470:	f7fd feaa 	bl	80001c8 <strlen>
 8002474:	4603      	mov	r3, r0
 8002476:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8002478:	4b0f      	ldr	r3, [pc, #60]	@ (80024b8 <lcd_StrCenter+0x60>)
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	8afb      	ldrh	r3, [r7, #22]
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	0fda      	lsrs	r2, r3, #31
 8002486:	4413      	add	r3, r2
 8002488:	105b      	asrs	r3, r3, #1
 800248a:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 800248c:	89fa      	ldrh	r2, [r7, #14]
 800248e:	8abb      	ldrh	r3, [r7, #20]
 8002490:	4413      	add	r3, r2
 8002492:	b298      	uxth	r0, r3
 8002494:	88fa      	ldrh	r2, [r7, #6]
 8002496:	89b9      	ldrh	r1, [r7, #12]
 8002498:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800249c:	9302      	str	r3, [sp, #8]
 800249e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	8c3b      	ldrh	r3, [r7, #32]
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	4613      	mov	r3, r2
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f7ff ff70 	bl	8002390 <lcd_ShowStr>
}
 80024b0:	bf00      	nop
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000258 	.word	0x20000258

080024bc <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80024c0:	2201      	movs	r2, #1
 80024c2:	2140      	movs	r1, #64	@ 0x40
 80024c4:	4802      	ldr	r0, [pc, #8]	@ (80024d0 <led7_init+0x14>)
 80024c6:	f003 f977 	bl	80057b8 <HAL_GPIO_WritePin>
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40021800 	.word	0x40021800

080024d4 <led7_Scan>:

void led7_Scan(){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80024d8:	4b3f      	ldr	r3, [pc, #252]	@ (80025d8 <led7_Scan+0x104>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	b29a      	uxth	r2, r3
 80024e0:	4b3d      	ldr	r3, [pc, #244]	@ (80025d8 <led7_Scan+0x104>)
 80024e2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80024e4:	4b3d      	ldr	r3, [pc, #244]	@ (80025dc <led7_Scan+0x108>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a3d      	ldr	r2, [pc, #244]	@ (80025e0 <led7_Scan+0x10c>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	b21a      	sxth	r2, r3
 80024f0:	4b39      	ldr	r3, [pc, #228]	@ (80025d8 <led7_Scan+0x104>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b21b      	sxth	r3, r3
 80024f6:	4313      	orrs	r3, r2
 80024f8:	b21b      	sxth	r3, r3
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	4b36      	ldr	r3, [pc, #216]	@ (80025d8 <led7_Scan+0x104>)
 80024fe:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002500:	4b36      	ldr	r3, [pc, #216]	@ (80025dc <led7_Scan+0x108>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b03      	cmp	r3, #3
 8002506:	d847      	bhi.n	8002598 <led7_Scan+0xc4>
 8002508:	a201      	add	r2, pc, #4	@ (adr r2, 8002510 <led7_Scan+0x3c>)
 800250a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250e:	bf00      	nop
 8002510:	08002521 	.word	0x08002521
 8002514:	0800253f 	.word	0x0800253f
 8002518:	0800255d 	.word	0x0800255d
 800251c:	0800257b 	.word	0x0800257b
	case 0:
		spi_buffer |= 0x00b0;
 8002520:	4b2d      	ldr	r3, [pc, #180]	@ (80025d8 <led7_Scan+0x104>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002528:	b29a      	uxth	r2, r3
 800252a:	4b2b      	ldr	r3, [pc, #172]	@ (80025d8 <led7_Scan+0x104>)
 800252c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800252e:	4b2a      	ldr	r3, [pc, #168]	@ (80025d8 <led7_Scan+0x104>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002536:	b29a      	uxth	r2, r3
 8002538:	4b27      	ldr	r3, [pc, #156]	@ (80025d8 <led7_Scan+0x104>)
 800253a:	801a      	strh	r2, [r3, #0]
		break;
 800253c:	e02d      	b.n	800259a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800253e:	4b26      	ldr	r3, [pc, #152]	@ (80025d8 <led7_Scan+0x104>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b23      	ldr	r3, [pc, #140]	@ (80025d8 <led7_Scan+0x104>)
 800254a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800254c:	4b22      	ldr	r3, [pc, #136]	@ (80025d8 <led7_Scan+0x104>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	f023 0320 	bic.w	r3, r3, #32
 8002554:	b29a      	uxth	r2, r3
 8002556:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <led7_Scan+0x104>)
 8002558:	801a      	strh	r2, [r3, #0]
		break;
 800255a:	e01e      	b.n	800259a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800255c:	4b1e      	ldr	r3, [pc, #120]	@ (80025d8 <led7_Scan+0x104>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8002564:	b29a      	uxth	r2, r3
 8002566:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <led7_Scan+0x104>)
 8002568:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800256a:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <led7_Scan+0x104>)
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	f023 0310 	bic.w	r3, r3, #16
 8002572:	b29a      	uxth	r2, r3
 8002574:	4b18      	ldr	r3, [pc, #96]	@ (80025d8 <led7_Scan+0x104>)
 8002576:	801a      	strh	r2, [r3, #0]
		break;
 8002578:	e00f      	b.n	800259a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800257a:	4b17      	ldr	r3, [pc, #92]	@ (80025d8 <led7_Scan+0x104>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002582:	b29a      	uxth	r2, r3
 8002584:	4b14      	ldr	r3, [pc, #80]	@ (80025d8 <led7_Scan+0x104>)
 8002586:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002588:	4b13      	ldr	r3, [pc, #76]	@ (80025d8 <led7_Scan+0x104>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002590:	b29a      	uxth	r2, r3
 8002592:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <led7_Scan+0x104>)
 8002594:	801a      	strh	r2, [r3, #0]
		break;
 8002596:	e000      	b.n	800259a <led7_Scan+0xc6>
	default:
		break;
 8002598:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800259a:	4b10      	ldr	r3, [pc, #64]	@ (80025dc <led7_Scan+0x108>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3301      	adds	r3, #1
 80025a0:	425a      	negs	r2, r3
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	f002 0203 	and.w	r2, r2, #3
 80025aa:	bf58      	it	pl
 80025ac:	4253      	negpl	r3, r2
 80025ae:	4a0b      	ldr	r2, [pc, #44]	@ (80025dc <led7_Scan+0x108>)
 80025b0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2140      	movs	r1, #64	@ 0x40
 80025b6:	480b      	ldr	r0, [pc, #44]	@ (80025e4 <led7_Scan+0x110>)
 80025b8:	f003 f8fe 	bl	80057b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80025bc:	2301      	movs	r3, #1
 80025be:	2202      	movs	r2, #2
 80025c0:	4905      	ldr	r1, [pc, #20]	@ (80025d8 <led7_Scan+0x104>)
 80025c2:	4809      	ldr	r0, [pc, #36]	@ (80025e8 <led7_Scan+0x114>)
 80025c4:	f004 ff9f 	bl	8007506 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80025c8:	2201      	movs	r2, #1
 80025ca:	2140      	movs	r1, #64	@ 0x40
 80025cc:	4805      	ldr	r0, [pc, #20]	@ (80025e4 <led7_Scan+0x110>)
 80025ce:	f003 f8f3 	bl	80057b8 <HAL_GPIO_WritePin>
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	2000000e 	.word	0x2000000e
 80025dc:	20000260 	.word	0x20000260
 80025e0:	20000000 	.word	0x20000000
 80025e4:	40021800 	.word	0x40021800
 80025e8:	20000288 	.word	0x20000288

080025ec <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	4613      	mov	r3, r2
 80025f8:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db0e      	blt.n	800261e <led7_SetDigit+0x32>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b09      	cmp	r3, #9
 8002604:	dc0b      	bgt.n	800261e <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8002606:	4a09      	ldr	r2, [pc, #36]	@ (800262c <led7_SetDigit+0x40>)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4413      	add	r3, r2
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	b2d9      	uxtb	r1, r3
 8002614:	4a06      	ldr	r2, [pc, #24]	@ (8002630 <led7_SetDigit+0x44>)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4413      	add	r3, r2
 800261a:	460a      	mov	r2, r1
 800261c:	701a      	strb	r2, [r3, #0]
	}
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000004 	.word	0x20000004
 8002630:	20000000 	.word	0x20000000

08002634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002634:	b598      	push	{r3, r4, r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002638:	f001 ff84 	bl	8004544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800263c:	f000 f84a 	bl	80026d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002640:	f7fe ffca 	bl	80015d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002644:	f7fe fe0e 	bl	8001264 <MX_DMA_Init>
  MX_SPI1_Init();
 8002648:	f000 fb8a 	bl	8002d60 <MX_SPI1_Init>
  MX_FSMC_Init();
 800264c:	f7fe fef4 	bl	8001438 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002650:	f7ff f8fc 	bl	800184c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002654:	f001 fe58 	bl	8004308 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002658:	f000 fcec 	bl	8003034 <MX_TIM2_Init>
  MX_ADC1_Init();
 800265c:	f7fe fbc0 	bl	8000de0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002660:	f001 fe28 	bl	80042b4 <MX_USART1_UART_Init>
  MX_TIM13_Init();
 8002664:	f000 fd32 	bl	80030cc <MX_TIM13_Init>
  MX_TIM1_Init();
 8002668:	f000 fc94 	bl	8002f94 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800266c:	f000 f89c 	bl	80027a8 <system_init>
  touch_Adjust();
 8002670:	f001 f8d2 	bl	8003818 <touch_Adjust>
  lcd_Clear(BLACK);
 8002674:	2000      	movs	r0, #0
 8002676:	f7ff f9dd 	bl	8001a34 <lcd_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //scan touch screen
	  touch_Scan();
 800267a:	f001 fcaf 	bl	8003fdc <touch_Scan>
	  //check if touch screen is touched
	  if(touch_IsTouched() && draw_Status == DRAW){
 800267e:	f001 fcb7 	bl	8003ff0 <touch_IsTouched>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d010      	beq.n	80026aa <main+0x76>
 8002688:	4b10      	ldr	r3, [pc, #64]	@ (80026cc <main+0x98>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d10c      	bne.n	80026aa <main+0x76>
            //draw a point at the touch position
		  lcd_DrawPoint(touch_GetX(), touch_GetY(), RED);
 8002690:	f001 fcc0 	bl	8004014 <touch_GetX>
 8002694:	4603      	mov	r3, r0
 8002696:	461c      	mov	r4, r3
 8002698:	f001 fcc8 	bl	800402c <touch_GetY>
 800269c:	4603      	mov	r3, r0
 800269e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80026a2:	4619      	mov	r1, r3
 80026a4:	4620      	mov	r0, r4
 80026a6:	f7ff fa35 	bl	8001b14 <lcd_DrawPoint>
	  }
//	  // 50ms task
	  if(flag_timer2 == 1){
 80026aa:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <main+0x9c>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d1e3      	bne.n	800267a <main+0x46>
		  flag_timer2 = 0;
 80026b2:	4b07      	ldr	r3, [pc, #28]	@ (80026d0 <main+0x9c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	801a      	strh	r2, [r3, #0]
		  touchProcess();
 80026b8:	f000 f992 	bl	80029e0 <touchProcess>
		  test_LedDebug();
 80026bc:	f000 f8f0 	bl	80028a0 <test_LedDebug>
//		  led7_SetDigit(isButtonClear(), 0, 0);
		  button_Scan();
 80026c0:	f7fe fd5a 	bl	8001178 <button_Scan>
//		  fsm_machine_mode(mode);
		  test_button();
 80026c4:	f000 f910 	bl	80028e8 <test_button>
	  touch_Scan();
 80026c8:	e7d7      	b.n	800267a <main+0x46>
 80026ca:	bf00      	nop
 80026cc:	20000268 	.word	0x20000268
 80026d0:	2000026c 	.word	0x2000026c

080026d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b094      	sub	sp, #80	@ 0x50
 80026d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026da:	f107 0320 	add.w	r3, r7, #32
 80026de:	2230      	movs	r2, #48	@ 0x30
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f007 fd88 	bl	800a1f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e8:	f107 030c 	add.w	r3, r7, #12
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	4b28      	ldr	r3, [pc, #160]	@ (80027a0 <SystemClock_Config+0xcc>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	4a27      	ldr	r2, [pc, #156]	@ (80027a0 <SystemClock_Config+0xcc>)
 8002702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002706:	6413      	str	r3, [r2, #64]	@ 0x40
 8002708:	4b25      	ldr	r3, [pc, #148]	@ (80027a0 <SystemClock_Config+0xcc>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002714:	2300      	movs	r3, #0
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	4b22      	ldr	r3, [pc, #136]	@ (80027a4 <SystemClock_Config+0xd0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a21      	ldr	r2, [pc, #132]	@ (80027a4 <SystemClock_Config+0xd0>)
 800271e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b1f      	ldr	r3, [pc, #124]	@ (80027a4 <SystemClock_Config+0xd0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002730:	2302      	movs	r3, #2
 8002732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002734:	2301      	movs	r3, #1
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002738:	2310      	movs	r3, #16
 800273a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800273c:	2302      	movs	r3, #2
 800273e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002740:	2300      	movs	r3, #0
 8002742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002744:	2308      	movs	r3, #8
 8002746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002748:	23a8      	movs	r3, #168	@ 0xa8
 800274a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800274c:	2302      	movs	r3, #2
 800274e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002750:	2304      	movs	r3, #4
 8002752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002754:	f107 0320 	add.w	r3, r7, #32
 8002758:	4618      	mov	r0, r3
 800275a:	f004 f9b3 	bl	8006ac4 <HAL_RCC_OscConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002764:	f000 f9a2 	bl	8002aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002768:	230f      	movs	r3, #15
 800276a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800276c:	2302      	movs	r3, #2
 800276e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002774:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800277a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800277e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002780:	f107 030c 	add.w	r3, r7, #12
 8002784:	2105      	movs	r1, #5
 8002786:	4618      	mov	r0, r3
 8002788:	f004 fc14 	bl	8006fb4 <HAL_RCC_ClockConfig>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002792:	f000 f98b 	bl	8002aac <Error_Handler>
  }
}
 8002796:	bf00      	nop
 8002798:	3750      	adds	r7, #80	@ 0x50
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40007000 	.word	0x40007000

080027a8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af04      	add	r7, sp, #16
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2120      	movs	r1, #32
 80027b2:	4834      	ldr	r0, [pc, #208]	@ (8002884 <system_init+0xdc>)
 80027b4:	f003 f800 	bl	80057b8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80027b8:	2200      	movs	r2, #0
 80027ba:	2140      	movs	r1, #64	@ 0x40
 80027bc:	4831      	ldr	r0, [pc, #196]	@ (8002884 <system_init+0xdc>)
 80027be:	f002 fffb 	bl	80057b8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2110      	movs	r1, #16
 80027c6:	482f      	ldr	r0, [pc, #188]	@ (8002884 <system_init+0xdc>)
 80027c8:	f002 fff6 	bl	80057b8 <HAL_GPIO_WritePin>
	  timer_init();
 80027cc:	f000 f974 	bl	8002ab8 <timer_init>
	  led7_init();
 80027d0:	f7ff fe74 	bl	80024bc <led7_init>
	  button_init();
 80027d4:	f7fe fcc4 	bl	8001160 <button_init>
	  lcd_init();
 80027d8:	f7ff fb82 	bl	8001ee0 <lcd_init>
	  touch_init();
 80027dc:	f001 fbee 	bl	8003fbc <touch_init>
	  ds3231_init();
 80027e0:	f7fe fd60 	bl	80012a4 <ds3231_init>
	  buzzer_init();
 80027e4:	f7fe fd34 	bl	8001250 <buzzer_init>
	  setTimer2(50);
 80027e8:	2032      	movs	r0, #50	@ 0x32
 80027ea:	f000 f973 	bl	8002ad4 <setTimer2>
	  uart_init_esp();
 80027ee:	f001 fc95 	bl	800411c <uart_init_esp>
	  lcd_Clear(BLACK);
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7ff f91e 	bl	8001a34 <lcd_Clear>
	  updateTime();
 80027f8:	f000 f8ae 	bl	8002958 <updateTime>
	  mode = NORMAL_MODE;
 80027fc:	4b22      	ldr	r3, [pc, #136]	@ (8002888 <system_init+0xe0>)
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
	  setTimer3(50);
 8002802:	2032      	movs	r0, #50	@ 0x32
 8002804:	f000 f982 	bl	8002b0c <setTimer3>
	  setTimer4(50);
 8002808:	2032      	movs	r0, #50	@ 0x32
 800280a:	f000 f995 	bl	8002b38 <setTimer4>
	  setTimer5(50);
 800280e:	2032      	movs	r0, #50	@ 0x32
 8002810:	f000 f9a8 	bl	8002b64 <setTimer5>
	  setTimer6(50);
 8002814:	2032      	movs	r0, #50	@ 0x32
 8002816:	f000 f9bb 	bl	8002b90 <setTimer6>
	  setTimerAlarm(50);
 800281a:	2032      	movs	r0, #50	@ 0x32
 800281c:	f000 f9ce 	bl	8002bbc <setTimerAlarm>
	  ds3231_ReadAlarm();
 8002820:	f7fe fdde 	bl	80013e0 <ds3231_ReadAlarm>
	  flag_colon = 0;
 8002824:	4b19      	ldr	r3, [pc, #100]	@ (800288c <system_init+0xe4>)
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
	  lcd_StrCenter(0,2,"NORMAL_MODE",WHITE,BLUE,16,1);
 800282a:	2301      	movs	r3, #1
 800282c:	9302      	str	r3, [sp, #8]
 800282e:	2310      	movs	r3, #16
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	231f      	movs	r3, #31
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800283a:	4a15      	ldr	r2, [pc, #84]	@ (8002890 <system_init+0xe8>)
 800283c:	2102      	movs	r1, #2
 800283e:	2000      	movs	r0, #0
 8002840:	f7ff fe0a 	bl	8002458 <lcd_StrCenter>
	  lcd_ShowPicture(20, 235, 50, 50, bell_sign);
 8002844:	4b13      	ldr	r3, [pc, #76]	@ (8002894 <system_init+0xec>)
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2332      	movs	r3, #50	@ 0x32
 800284a:	2232      	movs	r2, #50	@ 0x32
 800284c:	21eb      	movs	r1, #235	@ 0xeb
 800284e:	2014      	movs	r0, #20
 8002850:	f7ff facc 	bl	8001dec <lcd_ShowPicture>
	  lcd_ShowStr(0, 280, "Alarm OFF", WHITE, BLACK, 24, 0);
 8002854:	2300      	movs	r3, #0
 8002856:	9302      	str	r3, [sp, #8]
 8002858:	2318      	movs	r3, #24
 800285a:	9301      	str	r3, [sp, #4]
 800285c:	2300      	movs	r3, #0
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002864:	4a0c      	ldr	r2, [pc, #48]	@ (8002898 <system_init+0xf0>)
 8002866:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800286a:	2000      	movs	r0, #0
 800286c:	f7ff fd90 	bl	8002390 <lcd_ShowStr>
	  lcd_Clear(BLACK);
 8002870:	2000      	movs	r0, #0
 8002872:	f7ff f8df 	bl	8001a34 <lcd_Clear>
	  alarm_state = 0;
 8002876:	4b09      	ldr	r3, [pc, #36]	@ (800289c <system_init+0xf4>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	200001ac 	.word	0x200001ac
 800288c:	200001ae 	.word	0x200001ae
 8002890:	0800a480 	.word	0x0800a480
 8002894:	0800a580 	.word	0x0800a580
 8002898:	0800a48c 	.word	0x0800a48c
 800289c:	200001ad 	.word	0x200001ad

080028a0 <test_LedDebug>:

void test_LedDebug(){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80028a4:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <test_LedDebug+0x3c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	4b0d      	ldr	r3, [pc, #52]	@ (80028e0 <test_LedDebug+0x40>)
 80028ac:	fb83 1302 	smull	r1, r3, r3, r2
 80028b0:	10d9      	asrs	r1, r3, #3
 80028b2:	17d3      	asrs	r3, r2, #31
 80028b4:	1ac9      	subs	r1, r1, r3
 80028b6:	460b      	mov	r3, r1
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	1ad1      	subs	r1, r2, r3
 80028c0:	b2ca      	uxtb	r2, r1
 80028c2:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <test_LedDebug+0x3c>)
 80028c4:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 80028c6:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <test_LedDebug+0x3c>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d103      	bne.n	80028d6 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80028ce:	2110      	movs	r1, #16
 80028d0:	4804      	ldr	r0, [pc, #16]	@ (80028e4 <test_LedDebug+0x44>)
 80028d2:	f002 ff8a 	bl	80057ea <HAL_GPIO_TogglePin>
	}
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000264 	.word	0x20000264
 80028e0:	66666667 	.word	0x66666667
 80028e4:	40021000 	.word	0x40021000

080028e8 <test_button>:
	led7_SetDigit(0, 0, 0);
	led7_SetDigit(5, 1, 0);
	led7_SetDigit(4, 2, 0);
	led7_SetDigit(7, 3, 0);
}
void test_button(){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
	for(int i = 0; i < 16; i++){
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	e024      	b.n	800293e <test_button+0x56>
		if(button_count[i] == 1){
 80028f4:	4a16      	ldr	r2, [pc, #88]	@ (8002950 <test_button+0x68>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d11b      	bne.n	8002938 <test_button+0x50>
			led7_SetDigit(i/10, 2, 0);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a14      	ldr	r2, [pc, #80]	@ (8002954 <test_button+0x6c>)
 8002904:	fb82 1203 	smull	r1, r2, r2, r3
 8002908:	1092      	asrs	r2, r2, #2
 800290a:	17db      	asrs	r3, r3, #31
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2200      	movs	r2, #0
 8002910:	2102      	movs	r1, #2
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fe6a 	bl	80025ec <led7_SetDigit>
			led7_SetDigit(i%10, 3, 0);
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	4b0e      	ldr	r3, [pc, #56]	@ (8002954 <test_button+0x6c>)
 800291c:	fb83 1302 	smull	r1, r3, r3, r2
 8002920:	1099      	asrs	r1, r3, #2
 8002922:	17d3      	asrs	r3, r2, #31
 8002924:	1ac8      	subs	r0, r1, r3
 8002926:	4603      	mov	r3, r0
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4403      	add	r3, r0
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	1ad0      	subs	r0, r2, r3
 8002930:	2200      	movs	r2, #0
 8002932:	2103      	movs	r1, #3
 8002934:	f7ff fe5a 	bl	80025ec <led7_SetDigit>
	for(int i = 0; i < 16; i++){
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3301      	adds	r3, #1
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b0f      	cmp	r3, #15
 8002942:	ddd7      	ble.n	80028f4 <test_button+0xc>
		}
	}
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	2000017c 	.word	0x2000017c
 8002954:	66666667 	.word	0x66666667

08002958 <updateTime>:

void updateTime(){
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 800295c:	2117      	movs	r1, #23
 800295e:	2006      	movs	r0, #6
 8002960:	f7fe fce4 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 10);
 8002964:	210a      	movs	r1, #10
 8002966:	2005      	movs	r0, #5
 8002968:	f7fe fce0 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 20);
 800296c:	2114      	movs	r1, #20
 800296e:	2004      	movs	r0, #4
 8002970:	f7fe fcdc 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8002974:	2106      	movs	r1, #6
 8002976:	2003      	movs	r0, #3
 8002978:	f7fe fcd8 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 20);
 800297c:	2114      	movs	r1, #20
 800297e:	2002      	movs	r0, #2
 8002980:	f7fe fcd4 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 11);
 8002984:	210b      	movs	r1, #11
 8002986:	2001      	movs	r0, #1
 8002988:	f7fe fcd0 	bl	800132c <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 23);
 800298c:	2117      	movs	r1, #23
 800298e:	2000      	movs	r0, #0
 8002990:	f7fe fccc 	bl	800132c <ds3231_Write>
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}

08002998 <isButtonClear>:

uint8_t isButtonClear(){
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 800299c:	f001 fb28 	bl	8003ff0 <touch_IsTouched>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <isButtonClear+0x12>
 80029a6:	2300      	movs	r3, #0
 80029a8:	e017      	b.n	80029da <isButtonClear+0x42>
	return touch_GetX() > 60 && touch_GetX() < 180 && touch_GetY() > 10 && touch_GetY() < 60;
 80029aa:	f001 fb33 	bl	8004014 <touch_GetX>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b3c      	cmp	r3, #60	@ 0x3c
 80029b2:	d910      	bls.n	80029d6 <isButtonClear+0x3e>
 80029b4:	f001 fb2e 	bl	8004014 <touch_GetX>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2bb3      	cmp	r3, #179	@ 0xb3
 80029bc:	d80b      	bhi.n	80029d6 <isButtonClear+0x3e>
 80029be:	f001 fb35 	bl	800402c <touch_GetY>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b0a      	cmp	r3, #10
 80029c6:	d906      	bls.n	80029d6 <isButtonClear+0x3e>
 80029c8:	f001 fb30 	bl	800402c <touch_GetY>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b3b      	cmp	r3, #59	@ 0x3b
 80029d0:	d801      	bhi.n	80029d6 <isButtonClear+0x3e>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <isButtonClear+0x40>
 80029d6:	2300      	movs	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
}
 80029da:	4618      	mov	r0, r3
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <touchProcess>:

void touchProcess(){
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af04      	add	r7, sp, #16
	switch (draw_Status) {
 80029e6:	4b2f      	ldr	r3, [pc, #188]	@ (8002aa4 <touchProcess+0xc4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d048      	beq.n	8002a80 <touchProcess+0xa0>
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	dc4f      	bgt.n	8002a92 <touchProcess+0xb2>
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <touchProcess+0x1c>
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d01a      	beq.n	8002a30 <touchProcess+0x50>
			break;
		case CLEAR:
			if(!touch_IsTouched()) draw_Status = INIT;
			break;
		default:
			break;
 80029fa:	e04a      	b.n	8002a92 <touchProcess+0xb2>
			lcd_Fill(60, 10, 180, 60, GBLUE);
 80029fc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	233c      	movs	r3, #60	@ 0x3c
 8002a04:	22b4      	movs	r2, #180	@ 0xb4
 8002a06:	210a      	movs	r1, #10
 8002a08:	203c      	movs	r0, #60	@ 0x3c
 8002a0a:	f7ff f84d 	bl	8001aa8 <lcd_Fill>
			lcd_ShowStr(90, 20, "CLEAR", RED, BLACK, 24, 1);
 8002a0e:	2301      	movs	r3, #1
 8002a10:	9302      	str	r3, [sp, #8]
 8002a12:	2318      	movs	r3, #24
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	2300      	movs	r3, #0
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002a1e:	4a22      	ldr	r2, [pc, #136]	@ (8002aa8 <touchProcess+0xc8>)
 8002a20:	2114      	movs	r1, #20
 8002a22:	205a      	movs	r0, #90	@ 0x5a
 8002a24:	f7ff fcb4 	bl	8002390 <lcd_ShowStr>
			draw_Status = DRAW;
 8002a28:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa4 <touchProcess+0xc4>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
			break;
 8002a2e:	e035      	b.n	8002a9c <touchProcess+0xbc>
			if(isButtonClear()){
 8002a30:	f7ff ffb2 	bl	8002998 <isButtonClear>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d02d      	beq.n	8002a96 <touchProcess+0xb6>
				draw_Status = CLEAR;
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <touchProcess+0xc4>)
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	601a      	str	r2, [r3, #0]
				lcd_Fill(0, 60, 240, 320, BLACK);
 8002a40:	2300      	movs	r3, #0
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002a48:	22f0      	movs	r2, #240	@ 0xf0
 8002a4a:	213c      	movs	r1, #60	@ 0x3c
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7ff f82b 	bl	8001aa8 <lcd_Fill>
				lcd_Fill(60, 10, 180, 60, GREEN);
 8002a52:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	233c      	movs	r3, #60	@ 0x3c
 8002a5a:	22b4      	movs	r2, #180	@ 0xb4
 8002a5c:	210a      	movs	r1, #10
 8002a5e:	203c      	movs	r0, #60	@ 0x3c
 8002a60:	f7ff f822 	bl	8001aa8 <lcd_Fill>
				lcd_ShowStr(90, 20, "CLEAR", RED, BLACK, 24, 1);
 8002a64:	2301      	movs	r3, #1
 8002a66:	9302      	str	r3, [sp, #8]
 8002a68:	2318      	movs	r3, #24
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002a74:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa8 <touchProcess+0xc8>)
 8002a76:	2114      	movs	r1, #20
 8002a78:	205a      	movs	r0, #90	@ 0x5a
 8002a7a:	f7ff fc89 	bl	8002390 <lcd_ShowStr>
			break;
 8002a7e:	e00a      	b.n	8002a96 <touchProcess+0xb6>
			if(!touch_IsTouched()) draw_Status = INIT;
 8002a80:	f001 fab6 	bl	8003ff0 <touch_IsTouched>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d107      	bne.n	8002a9a <touchProcess+0xba>
 8002a8a:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <touchProcess+0xc4>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
			break;
 8002a90:	e003      	b.n	8002a9a <touchProcess+0xba>
			break;
 8002a92:	bf00      	nop
 8002a94:	e002      	b.n	8002a9c <touchProcess+0xbc>
			break;
 8002a96:	bf00      	nop
 8002a98:	e000      	b.n	8002a9c <touchProcess+0xbc>
			break;
 8002a9a:	bf00      	nop
	}
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000268 	.word	0x20000268
 8002aa8:	0800a498 	.word	0x0800a498

08002aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab0:	b672      	cpsid	i
}
 8002ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ab4:	bf00      	nop
 8002ab6:	e7fd      	b.n	8002ab4 <Error_Handler+0x8>

08002ab8 <timer_init>:
uint16_t timer6_counter = 0;

uint16_t flag_timer_alarm = 0;
uint16_t timer_alarm = 0;

void timer_init(){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002abc:	4803      	ldr	r0, [pc, #12]	@ (8002acc <timer_init+0x14>)
 8002abe:	f005 fb6f 	bl	80081a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002ac2:	4803      	ldr	r0, [pc, #12]	@ (8002ad0 <timer_init+0x18>)
 8002ac4:	f005 fb04 	bl	80080d0 <HAL_TIM_Base_Start>
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000328 	.word	0x20000328
 8002ad0:	200002e0 	.word	0x200002e0

08002ad4 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002ade:	4a08      	ldr	r2, [pc, #32]	@ (8002b00 <setTimer2+0x2c>)
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <setTimer2+0x2c>)
 8002ae6:	881a      	ldrh	r2, [r3, #0]
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <setTimer2+0x30>)
 8002aea:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002aec:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <setTimer2+0x34>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	801a      	strh	r2, [r3, #0]
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000270 	.word	0x20000270
 8002b04:	2000026e 	.word	0x2000026e
 8002b08:	2000026c 	.word	0x2000026c

08002b0c <setTimer3>:

void setTimer3(uint16_t duration){
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
	timer3_counter = duration;
 8002b16:	4a06      	ldr	r2, [pc, #24]	@ (8002b30 <setTimer3+0x24>)
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	8013      	strh	r3, [r2, #0]
	flag_timer3 = 0;
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <setTimer3+0x28>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	801a      	strh	r2, [r3, #0]
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000274 	.word	0x20000274
 8002b34:	20000272 	.word	0x20000272

08002b38 <setTimer4>:

void setTimer4(uint16_t duration){
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	80fb      	strh	r3, [r7, #6]
	timer4_counter = duration;
 8002b42:	4a06      	ldr	r2, [pc, #24]	@ (8002b5c <setTimer4+0x24>)
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	8013      	strh	r3, [r2, #0]
	flag_timer4 = 0;
 8002b48:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <setTimer4+0x28>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	801a      	strh	r2, [r3, #0]
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20000278 	.word	0x20000278
 8002b60:	20000276 	.word	0x20000276

08002b64 <setTimer5>:

void setTimer5(uint16_t duration){
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80fb      	strh	r3, [r7, #6]
	timer5_counter = duration;
 8002b6e:	4a06      	ldr	r2, [pc, #24]	@ (8002b88 <setTimer5+0x24>)
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	8013      	strh	r3, [r2, #0]
	flag_timer5 = 0;
 8002b74:	4b05      	ldr	r3, [pc, #20]	@ (8002b8c <setTimer5+0x28>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	801a      	strh	r2, [r3, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	2000027c 	.word	0x2000027c
 8002b8c:	2000027a 	.word	0x2000027a

08002b90 <setTimer6>:

void setTimer6(uint16_t duration){
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	80fb      	strh	r3, [r7, #6]
	timer6_counter = duration;
 8002b9a:	4a06      	ldr	r2, [pc, #24]	@ (8002bb4 <setTimer6+0x24>)
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	8013      	strh	r3, [r2, #0]
	flag_timer6 = 0;
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <setTimer6+0x28>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	801a      	strh	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000280 	.word	0x20000280
 8002bb8:	2000027e 	.word	0x2000027e

08002bbc <setTimerAlarm>:

void setTimerAlarm(uint16_t duration){
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	80fb      	strh	r3, [r7, #6]
	flag_timer_alarm = 0;
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <setTimerAlarm+0x24>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	801a      	strh	r2, [r3, #0]
	timer_alarm = duration;
 8002bcc:	4a05      	ldr	r2, [pc, #20]	@ (8002be4 <setTimerAlarm+0x28>)
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	8013      	strh	r3, [r2, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20000282 	.word	0x20000282
 8002be4:	20000284 	.word	0x20000284

08002be8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf8:	d17a      	bne.n	8002cf0 <HAL_TIM_PeriodElapsedCallback+0x108>
		if(timer2_counter > 0){
 8002bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d010      	beq.n	8002c24 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002c02:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002c0c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002c16:	4b39      	ldr	r3, [pc, #228]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002c1c:	4b38      	ldr	r3, [pc, #224]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002c1e:	881a      	ldrh	r2, [r3, #0]
 8002c20:	4b35      	ldr	r3, [pc, #212]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002c22:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8002c24:	4b37      	ldr	r3, [pc, #220]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00f      	beq.n	8002c4c <HAL_TIM_PeriodElapsedCallback+0x64>
			timer3_counter--;
 8002c2c:	4b35      	ldr	r3, [pc, #212]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	4b33      	ldr	r3, [pc, #204]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002c36:	801a      	strh	r2, [r3, #0]
			if(timer3_counter <= 0){
 8002c38:	4b32      	ldr	r3, [pc, #200]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <HAL_TIM_PeriodElapsedCallback+0x64>
				flag_timer3 = 1;
 8002c40:	4b31      	ldr	r3, [pc, #196]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	801a      	strh	r2, [r3, #0]
				timer3_counter = 0;
 8002c46:	4b2f      	ldr	r3, [pc, #188]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 8002c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00f      	beq.n	8002c74 <HAL_TIM_PeriodElapsedCallback+0x8c>
			timer4_counter--;
 8002c54:	4b2d      	ldr	r3, [pc, #180]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002c5e:	801a      	strh	r2, [r3, #0]
			if(timer4_counter <= 0){
 8002c60:	4b2a      	ldr	r3, [pc, #168]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <HAL_TIM_PeriodElapsedCallback+0x8c>
				flag_timer4 = 1;
 8002c68:	4b29      	ldr	r3, [pc, #164]	@ (8002d10 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	801a      	strh	r2, [r3, #0]
				timer4_counter = 0;
 8002c6e:	4b27      	ldr	r3, [pc, #156]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer5_counter > 0){
 8002c74:	4b27      	ldr	r3, [pc, #156]	@ (8002d14 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00f      	beq.n	8002c9c <HAL_TIM_PeriodElapsedCallback+0xb4>
			timer5_counter--;
 8002c7c:	4b25      	ldr	r3, [pc, #148]	@ (8002d14 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	4b23      	ldr	r3, [pc, #140]	@ (8002d14 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002c86:	801a      	strh	r2, [r3, #0]
			if(timer5_counter <= 0){
 8002c88:	4b22      	ldr	r3, [pc, #136]	@ (8002d14 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_TIM_PeriodElapsedCallback+0xb4>
				flag_timer5 = 1;
 8002c90:	4b21      	ldr	r3, [pc, #132]	@ (8002d18 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	801a      	strh	r2, [r3, #0]
				timer5_counter = 0;
 8002c96:	4b1f      	ldr	r3, [pc, #124]	@ (8002d14 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer6_counter > 0){
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002d1c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00f      	beq.n	8002cc4 <HAL_TIM_PeriodElapsedCallback+0xdc>
			timer6_counter--;
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d1c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	4b1b      	ldr	r3, [pc, #108]	@ (8002d1c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002cae:	801a      	strh	r2, [r3, #0]
			if(timer6_counter <= 0){
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d1c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <HAL_TIM_PeriodElapsedCallback+0xdc>
				flag_timer6 = 1;
 8002cb8:	4b19      	ldr	r3, [pc, #100]	@ (8002d20 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	801a      	strh	r2, [r3, #0]
				timer6_counter = 0;
 8002cbe:	4b17      	ldr	r3, [pc, #92]	@ (8002d1c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer_alarm > 0){
 8002cc4:	4b17      	ldr	r3, [pc, #92]	@ (8002d24 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00f      	beq.n	8002cec <HAL_TIM_PeriodElapsedCallback+0x104>
			timer_alarm--;
 8002ccc:	4b15      	ldr	r3, [pc, #84]	@ (8002d24 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	4b13      	ldr	r3, [pc, #76]	@ (8002d24 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002cd6:	801a      	strh	r2, [r3, #0]
			if(timer_alarm <= 0){
 8002cd8:	4b12      	ldr	r3, [pc, #72]	@ (8002d24 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <HAL_TIM_PeriodElapsedCallback+0x104>
				flag_timer_alarm = 1;
 8002ce0:	4b11      	ldr	r3, [pc, #68]	@ (8002d28 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	801a      	strh	r2, [r3, #0]
				timer_alarm = 0;
 8002ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002cec:	f7ff fbf2 	bl	80024d4 <led7_Scan>
	}
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	2000026e 	.word	0x2000026e
 8002cfc:	2000026c 	.word	0x2000026c
 8002d00:	20000270 	.word	0x20000270
 8002d04:	20000274 	.word	0x20000274
 8002d08:	20000272 	.word	0x20000272
 8002d0c:	20000278 	.word	0x20000278
 8002d10:	20000276 	.word	0x20000276
 8002d14:	2000027c 	.word	0x2000027c
 8002d18:	2000027a 	.word	0x2000027a
 8002d1c:	20000280 	.word	0x20000280
 8002d20:	2000027e 	.word	0x2000027e
 8002d24:	20000284 	.word	0x20000284
 8002d28:	20000282 	.word	0x20000282

08002d2c <delay_us>:

void delay_us (uint16_t us)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8002d36:	4b09      	ldr	r3, [pc, #36]	@ (8002d5c <delay_us+0x30>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8002d3e:	bf00      	nop
 8002d40:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <delay_us+0x30>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d3f9      	bcc.n	8002d40 <delay_us+0x14>
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	200002e0 	.word	0x200002e0

08002d60 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002d64:	4b17      	ldr	r3, [pc, #92]	@ (8002dc4 <MX_SPI1_Init+0x64>)
 8002d66:	4a18      	ldr	r2, [pc, #96]	@ (8002dc8 <MX_SPI1_Init+0x68>)
 8002d68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d6a:	4b16      	ldr	r3, [pc, #88]	@ (8002dc4 <MX_SPI1_Init+0x64>)
 8002d6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d72:	4b14      	ldr	r3, [pc, #80]	@ (8002dc4 <MX_SPI1_Init+0x64>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d78:	4b12      	ldr	r3, [pc, #72]	@ (8002dc4 <MX_SPI1_Init+0x64>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d7e:	4b11      	ldr	r3, [pc, #68]	@ (8002dc4 <MX_SPI1_Init+0x64>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d84:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc4 <MX_SPI1_Init+0x64>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc4 <MX_SPI1_Init+0x64>)
 8002d8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d92:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <MX_SPI1_Init+0x64>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d98:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <MX_SPI1_Init+0x64>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d9e:	4b09      	ldr	r3, [pc, #36]	@ (8002dc4 <MX_SPI1_Init+0x64>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da4:	4b07      	ldr	r3, [pc, #28]	@ (8002dc4 <MX_SPI1_Init+0x64>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002daa:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <MX_SPI1_Init+0x64>)
 8002dac:	220a      	movs	r2, #10
 8002dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002db0:	4804      	ldr	r0, [pc, #16]	@ (8002dc4 <MX_SPI1_Init+0x64>)
 8002db2:	f004 fb1f 	bl	80073f4 <HAL_SPI_Init>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002dbc:	f7ff fe76 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000288 	.word	0x20000288
 8002dc8:	40013000 	.word	0x40013000

08002dcc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	@ 0x28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a19      	ldr	r2, [pc, #100]	@ (8002e50 <HAL_SPI_MspInit+0x84>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d12b      	bne.n	8002e46 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	4b18      	ldr	r3, [pc, #96]	@ (8002e54 <HAL_SPI_MspInit+0x88>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	4a17      	ldr	r2, [pc, #92]	@ (8002e54 <HAL_SPI_MspInit+0x88>)
 8002df8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dfe:	4b15      	ldr	r3, [pc, #84]	@ (8002e54 <HAL_SPI_MspInit+0x88>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <HAL_SPI_MspInit+0x88>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	4a10      	ldr	r2, [pc, #64]	@ (8002e54 <HAL_SPI_MspInit+0x88>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <HAL_SPI_MspInit+0x88>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002e26:	2338      	movs	r3, #56	@ 0x38
 8002e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e32:	2303      	movs	r3, #3
 8002e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e36:	2305      	movs	r3, #5
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4805      	ldr	r0, [pc, #20]	@ (8002e58 <HAL_SPI_MspInit+0x8c>)
 8002e42:	f002 fb05 	bl	8005450 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002e46:	bf00      	nop
 8002e48:	3728      	adds	r7, #40	@ 0x28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40013000 	.word	0x40013000
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020400 	.word	0x40020400

08002e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <HAL_MspInit+0x4c>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ea8 <HAL_MspInit+0x4c>)
 8002e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea8 <HAL_MspInit+0x4c>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	603b      	str	r3, [r7, #0]
 8002e82:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <HAL_MspInit+0x4c>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	4a08      	ldr	r2, [pc, #32]	@ (8002ea8 <HAL_MspInit+0x4c>)
 8002e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <HAL_MspInit+0x4c>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800

08002eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002eb0:	bf00      	nop
 8002eb2:	e7fd      	b.n	8002eb0 <NMI_Handler+0x4>

08002eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eb8:	bf00      	nop
 8002eba:	e7fd      	b.n	8002eb8 <HardFault_Handler+0x4>

08002ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <MemManage_Handler+0x4>

08002ec4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <BusFault_Handler+0x4>

08002ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <UsageFault_Handler+0x4>

08002ed4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f02:	f001 fb71 	bl	80045e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f10:	4802      	ldr	r0, [pc, #8]	@ (8002f1c <TIM2_IRQHandler+0x10>)
 8002f12:	f005 fad7 	bl	80084c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000328 	.word	0x20000328

08002f20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f24:	4802      	ldr	r0, [pc, #8]	@ (8002f30 <USART1_IRQHandler+0x10>)
 8002f26:	f006 f991 	bl	800924c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000420 	.word	0x20000420

08002f34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f38:	4802      	ldr	r0, [pc, #8]	@ (8002f44 <USART2_IRQHandler+0x10>)
 8002f3a:	f006 f987 	bl	800924c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000468 	.word	0x20000468

08002f48 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002f4c:	4802      	ldr	r0, [pc, #8]	@ (8002f58 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002f4e:	f005 fab9 	bl	80084c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000370 	.word	0x20000370

08002f5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f60:	4802      	ldr	r0, [pc, #8]	@ (8002f6c <DMA2_Stream0_IRQHandler+0x10>)
 8002f62:	f002 f839 	bl	8004fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	2000011c 	.word	0x2000011c

08002f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f74:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <SystemInit+0x20>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7a:	4a05      	ldr	r2, [pc, #20]	@ (8002f90 <SystemInit+0x20>)
 8002f7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f9a:	f107 0308 	add.w	r3, r7, #8
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fa8:	463b      	mov	r3, r7
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800302c <MX_TIM1_Init+0x98>)
 8002fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8003030 <MX_TIM1_Init+0x9c>)
 8002fb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8002fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800302c <MX_TIM1_Init+0x98>)
 8002fb8:	2253      	movs	r2, #83	@ 0x53
 8002fba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800302c <MX_TIM1_Init+0x98>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <MX_TIM1_Init+0x98>)
 8002fc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fca:	4b18      	ldr	r3, [pc, #96]	@ (800302c <MX_TIM1_Init+0x98>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fd0:	4b16      	ldr	r3, [pc, #88]	@ (800302c <MX_TIM1_Init+0x98>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd6:	4b15      	ldr	r3, [pc, #84]	@ (800302c <MX_TIM1_Init+0x98>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002fdc:	4813      	ldr	r0, [pc, #76]	@ (800302c <MX_TIM1_Init+0x98>)
 8002fde:	f005 f827 	bl	8008030 <HAL_TIM_Base_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002fe8:	f7ff fd60 	bl	8002aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ff2:	f107 0308 	add.w	r3, r7, #8
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	480c      	ldr	r0, [pc, #48]	@ (800302c <MX_TIM1_Init+0x98>)
 8002ffa:	f005 fc15 	bl	8008828 <HAL_TIM_ConfigClockSource>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003004:	f7ff fd52 	bl	8002aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003008:	2300      	movs	r3, #0
 800300a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800300c:	2300      	movs	r3, #0
 800300e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003010:	463b      	mov	r3, r7
 8003012:	4619      	mov	r1, r3
 8003014:	4805      	ldr	r0, [pc, #20]	@ (800302c <MX_TIM1_Init+0x98>)
 8003016:	f006 f813 	bl	8009040 <HAL_TIMEx_MasterConfigSynchronization>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003020:	f7ff fd44 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003024:	bf00      	nop
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	200002e0 	.word	0x200002e0
 8003030:	40010000 	.word	0x40010000

08003034 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800303a:	f107 0308 	add.w	r3, r7, #8
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	605a      	str	r2, [r3, #4]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003048:	463b      	mov	r3, r7
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003050:	4b1d      	ldr	r3, [pc, #116]	@ (80030c8 <MX_TIM2_Init+0x94>)
 8003052:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003056:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003058:	4b1b      	ldr	r3, [pc, #108]	@ (80030c8 <MX_TIM2_Init+0x94>)
 800305a:	f240 3247 	movw	r2, #839	@ 0x347
 800305e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003060:	4b19      	ldr	r3, [pc, #100]	@ (80030c8 <MX_TIM2_Init+0x94>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003066:	4b18      	ldr	r3, [pc, #96]	@ (80030c8 <MX_TIM2_Init+0x94>)
 8003068:	2263      	movs	r2, #99	@ 0x63
 800306a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800306c:	4b16      	ldr	r3, [pc, #88]	@ (80030c8 <MX_TIM2_Init+0x94>)
 800306e:	2200      	movs	r2, #0
 8003070:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003072:	4b15      	ldr	r3, [pc, #84]	@ (80030c8 <MX_TIM2_Init+0x94>)
 8003074:	2200      	movs	r2, #0
 8003076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003078:	4813      	ldr	r0, [pc, #76]	@ (80030c8 <MX_TIM2_Init+0x94>)
 800307a:	f004 ffd9 	bl	8008030 <HAL_TIM_Base_Init>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003084:	f7ff fd12 	bl	8002aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003088:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800308c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800308e:	f107 0308 	add.w	r3, r7, #8
 8003092:	4619      	mov	r1, r3
 8003094:	480c      	ldr	r0, [pc, #48]	@ (80030c8 <MX_TIM2_Init+0x94>)
 8003096:	f005 fbc7 	bl	8008828 <HAL_TIM_ConfigClockSource>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80030a0:	f7ff fd04 	bl	8002aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030a4:	2300      	movs	r3, #0
 80030a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030ac:	463b      	mov	r3, r7
 80030ae:	4619      	mov	r1, r3
 80030b0:	4805      	ldr	r0, [pc, #20]	@ (80030c8 <MX_TIM2_Init+0x94>)
 80030b2:	f005 ffc5 	bl	8009040 <HAL_TIMEx_MasterConfigSynchronization>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80030bc:	f7ff fcf6 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030c0:	bf00      	nop
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20000328 	.word	0x20000328

080030cc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
 80030e0:	615a      	str	r2, [r3, #20]
 80030e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80030e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003160 <MX_TIM13_Init+0x94>)
 80030e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003164 <MX_TIM13_Init+0x98>)
 80030e8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80030ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003160 <MX_TIM13_Init+0x94>)
 80030ec:	f240 3247 	movw	r2, #839	@ 0x347
 80030f0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003160 <MX_TIM13_Init+0x94>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80030f8:	4b19      	ldr	r3, [pc, #100]	@ (8003160 <MX_TIM13_Init+0x94>)
 80030fa:	2263      	movs	r2, #99	@ 0x63
 80030fc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030fe:	4b18      	ldr	r3, [pc, #96]	@ (8003160 <MX_TIM13_Init+0x94>)
 8003100:	2200      	movs	r2, #0
 8003102:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003104:	4b16      	ldr	r3, [pc, #88]	@ (8003160 <MX_TIM13_Init+0x94>)
 8003106:	2200      	movs	r2, #0
 8003108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800310a:	4815      	ldr	r0, [pc, #84]	@ (8003160 <MX_TIM13_Init+0x94>)
 800310c:	f004 ff90 	bl	8008030 <HAL_TIM_Base_Init>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8003116:	f7ff fcc9 	bl	8002aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800311a:	4811      	ldr	r0, [pc, #68]	@ (8003160 <MX_TIM13_Init+0x94>)
 800311c:	f005 f8b0 	bl	8008280 <HAL_TIM_PWM_Init>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8003126:	f7ff fcc1 	bl	8002aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800312a:	2360      	movs	r3, #96	@ 0x60
 800312c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	2200      	movs	r2, #0
 800313e:	4619      	mov	r1, r3
 8003140:	4807      	ldr	r0, [pc, #28]	@ (8003160 <MX_TIM13_Init+0x94>)
 8003142:	f005 faaf 	bl	80086a4 <HAL_TIM_PWM_ConfigChannel>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800314c:	f7ff fcae 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003150:	4803      	ldr	r0, [pc, #12]	@ (8003160 <MX_TIM13_Init+0x94>)
 8003152:	f000 f863 	bl	800321c <HAL_TIM_MspPostInit>

}
 8003156:	bf00      	nop
 8003158:	3720      	adds	r7, #32
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000370 	.word	0x20000370
 8003164:	40001c00 	.word	0x40001c00

08003168 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a26      	ldr	r2, [pc, #152]	@ (8003210 <HAL_TIM_Base_MspInit+0xa8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d10e      	bne.n	8003198 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	4b25      	ldr	r3, [pc, #148]	@ (8003214 <HAL_TIM_Base_MspInit+0xac>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	4a24      	ldr	r2, [pc, #144]	@ (8003214 <HAL_TIM_Base_MspInit+0xac>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6453      	str	r3, [r2, #68]	@ 0x44
 800318a:	4b22      	ldr	r3, [pc, #136]	@ (8003214 <HAL_TIM_Base_MspInit+0xac>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003196:	e036      	b.n	8003206 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a0:	d116      	bne.n	80031d0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003214 <HAL_TIM_Base_MspInit+0xac>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003214 <HAL_TIM_Base_MspInit+0xac>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031b2:	4b18      	ldr	r3, [pc, #96]	@ (8003214 <HAL_TIM_Base_MspInit+0xac>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2100      	movs	r1, #0
 80031c2:	201c      	movs	r0, #28
 80031c4:	f001 fd91 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031c8:	201c      	movs	r0, #28
 80031ca:	f001 fdaa 	bl	8004d22 <HAL_NVIC_EnableIRQ>
}
 80031ce:	e01a      	b.n	8003206 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM13)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a10      	ldr	r2, [pc, #64]	@ (8003218 <HAL_TIM_Base_MspInit+0xb0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d115      	bne.n	8003206 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	4b0d      	ldr	r3, [pc, #52]	@ (8003214 <HAL_TIM_Base_MspInit+0xac>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003214 <HAL_TIM_Base_MspInit+0xac>)
 80031e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003214 <HAL_TIM_Base_MspInit+0xac>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	202c      	movs	r0, #44	@ 0x2c
 80031fc:	f001 fd75 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003200:	202c      	movs	r0, #44	@ 0x2c
 8003202:	f001 fd8e 	bl	8004d22 <HAL_NVIC_EnableIRQ>
}
 8003206:	bf00      	nop
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40010000 	.word	0x40010000
 8003214:	40023800 	.word	0x40023800
 8003218:	40001c00 	.word	0x40001c00

0800321c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 030c 	add.w	r3, r7, #12
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a12      	ldr	r2, [pc, #72]	@ (8003284 <HAL_TIM_MspPostInit+0x68>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d11e      	bne.n	800327c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <HAL_TIM_MspPostInit+0x6c>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	4a10      	ldr	r2, [pc, #64]	@ (8003288 <HAL_TIM_MspPostInit+0x6c>)
 8003248:	f043 0320 	orr.w	r3, r3, #32
 800324c:	6313      	str	r3, [r2, #48]	@ 0x30
 800324e:	4b0e      	ldr	r3, [pc, #56]	@ (8003288 <HAL_TIM_MspPostInit+0x6c>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800325a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800325e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003260:	2302      	movs	r3, #2
 8003262:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800326c:	2309      	movs	r3, #9
 800326e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003270:	f107 030c 	add.w	r3, r7, #12
 8003274:	4619      	mov	r1, r3
 8003276:	4805      	ldr	r0, [pc, #20]	@ (800328c <HAL_TIM_MspPostInit+0x70>)
 8003278:	f002 f8ea 	bl	8005450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800327c:	bf00      	nop
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40001c00 	.word	0x40001c00
 8003288:	40023800 	.word	0x40023800
 800328c:	40021400 	.word	0x40021400

08003290 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 800329e:	2300      	movs	r3, #0
 80032a0:	73fb      	strb	r3, [r7, #15]
 80032a2:	e025      	b.n	80032f0 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 80032a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da06      	bge.n	80032ba <TP_Write_Byte+0x2a>
 80032ac:	2201      	movs	r2, #1
 80032ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032b2:	4813      	ldr	r0, [pc, #76]	@ (8003300 <TP_Write_Byte+0x70>)
 80032b4:	f002 fa80 	bl	80057b8 <HAL_GPIO_WritePin>
 80032b8:	e005      	b.n	80032c6 <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032c0:	480f      	ldr	r0, [pc, #60]	@ (8003300 <TP_Write_Byte+0x70>)
 80032c2:	f002 fa79 	bl	80057b8 <HAL_GPIO_WritePin>
		num<<=1;
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80032cc:	2200      	movs	r2, #0
 80032ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032d2:	480c      	ldr	r0, [pc, #48]	@ (8003304 <TP_Write_Byte+0x74>)
 80032d4:	f002 fa70 	bl	80057b8 <HAL_GPIO_WritePin>
		delay_us(1);
 80032d8:	2001      	movs	r0, #1
 80032da:	f7ff fd27 	bl	8002d2c <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80032de:	2201      	movs	r2, #1
 80032e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032e4:	4807      	ldr	r0, [pc, #28]	@ (8003304 <TP_Write_Byte+0x74>)
 80032e6:	f002 fa67 	bl	80057b8 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	3301      	adds	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b07      	cmp	r3, #7
 80032f4:	d9d6      	bls.n	80032a4 <TP_Write_Byte+0x14>
	}
}
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40020800 	.word	0x40020800
 8003304:	40021800 	.word	0x40021800

08003308 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8003312:	2300      	movs	r3, #0
 8003314:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 8003316:	2300      	movs	r3, #0
 8003318:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003320:	482f      	ldr	r0, [pc, #188]	@ (80033e0 <TP_Read_AD+0xd8>)
 8003322:	f002 fa49 	bl	80057b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8003326:	2200      	movs	r2, #0
 8003328:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800332c:	482d      	ldr	r0, [pc, #180]	@ (80033e4 <TP_Read_AD+0xdc>)
 800332e:	f002 fa43 	bl	80057b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	2180      	movs	r1, #128	@ 0x80
 8003336:	482a      	ldr	r0, [pc, #168]	@ (80033e0 <TP_Read_AD+0xd8>)
 8003338:	f002 fa3e 	bl	80057b8 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ffa6 	bl	8003290 <TP_Write_Byte>
	delay_us(6);
 8003344:	2006      	movs	r0, #6
 8003346:	f7ff fcf1 	bl	8002d2c <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800334a:	2200      	movs	r2, #0
 800334c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003350:	4823      	ldr	r0, [pc, #140]	@ (80033e0 <TP_Read_AD+0xd8>)
 8003352:	f002 fa31 	bl	80057b8 <HAL_GPIO_WritePin>
	delay_us(1);
 8003356:	2001      	movs	r0, #1
 8003358:	f7ff fce8 	bl	8002d2c <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 800335c:	2201      	movs	r2, #1
 800335e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003362:	481f      	ldr	r0, [pc, #124]	@ (80033e0 <TP_Read_AD+0xd8>)
 8003364:	f002 fa28 	bl	80057b8 <HAL_GPIO_WritePin>
	delay_us(1);
 8003368:	2001      	movs	r0, #1
 800336a:	f7ff fcdf 	bl	8002d2c <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800336e:	2200      	movs	r2, #0
 8003370:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003374:	481a      	ldr	r0, [pc, #104]	@ (80033e0 <TP_Read_AD+0xd8>)
 8003376:	f002 fa1f 	bl	80057b8 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
 800337e:	e01f      	b.n	80033c0 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8003380:	89bb      	ldrh	r3, [r7, #12]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003386:	2200      	movs	r2, #0
 8003388:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800338c:	4814      	ldr	r0, [pc, #80]	@ (80033e0 <TP_Read_AD+0xd8>)
 800338e:	f002 fa13 	bl	80057b8 <HAL_GPIO_WritePin>
		delay_us(1);
 8003392:	2001      	movs	r0, #1
 8003394:	f7ff fcca 	bl	8002d2c <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8003398:	2201      	movs	r2, #1
 800339a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800339e:	4810      	ldr	r0, [pc, #64]	@ (80033e0 <TP_Read_AD+0xd8>)
 80033a0:	f002 fa0a 	bl	80057b8 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 80033a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033a8:	480e      	ldr	r0, [pc, #56]	@ (80033e4 <TP_Read_AD+0xdc>)
 80033aa:	f002 f9ed 	bl	8005788 <HAL_GPIO_ReadPin>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <TP_Read_AD+0xb2>
 80033b4:	89bb      	ldrh	r3, [r7, #12]
 80033b6:	3301      	adds	r3, #1
 80033b8:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	3301      	adds	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b0f      	cmp	r3, #15
 80033c4:	d9dc      	bls.n	8003380 <TP_Read_AD+0x78>
	}
	Num>>=4;
 80033c6:	89bb      	ldrh	r3, [r7, #12]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 80033cc:	2201      	movs	r2, #1
 80033ce:	2180      	movs	r1, #128	@ 0x80
 80033d0:	4803      	ldr	r0, [pc, #12]	@ (80033e0 <TP_Read_AD+0xd8>)
 80033d2:	f002 f9f1 	bl	80057b8 <HAL_GPIO_WritePin>
	return(Num);
 80033d6:	89bb      	ldrh	r3, [r7, #12]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021800 	.word	0x40021800
 80033e4:	40020800 	.word	0x40020800

080033e8 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b089      	sub	sp, #36	@ 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 80033f6:	2300      	movs	r3, #0
 80033f8:	83fb      	strh	r3, [r7, #30]
 80033fa:	e00e      	b.n	800341a <TP_Read_XOY+0x32>
 80033fc:	8bfc      	ldrh	r4, [r7, #30]
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff81 	bl	8003308 <TP_Read_AD>
 8003406:	4603      	mov	r3, r0
 8003408:	461a      	mov	r2, r3
 800340a:	0063      	lsls	r3, r4, #1
 800340c:	3320      	adds	r3, #32
 800340e:	443b      	add	r3, r7
 8003410:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003414:	8bfb      	ldrh	r3, [r7, #30]
 8003416:	3301      	adds	r3, #1
 8003418:	83fb      	strh	r3, [r7, #30]
 800341a:	8bfb      	ldrh	r3, [r7, #30]
 800341c:	2b04      	cmp	r3, #4
 800341e:	d9ed      	bls.n	80033fc <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8003420:	2300      	movs	r3, #0
 8003422:	83fb      	strh	r3, [r7, #30]
 8003424:	e035      	b.n	8003492 <TP_Read_XOY+0xaa>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8003426:	8bfb      	ldrh	r3, [r7, #30]
 8003428:	3301      	adds	r3, #1
 800342a:	83bb      	strh	r3, [r7, #28]
 800342c:	e02b      	b.n	8003486 <TP_Read_XOY+0x9e>
		{
			if(buf[i]>buf[j])
 800342e:	8bfb      	ldrh	r3, [r7, #30]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	3320      	adds	r3, #32
 8003434:	443b      	add	r3, r7
 8003436:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800343a:	8bbb      	ldrh	r3, [r7, #28]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	3320      	adds	r3, #32
 8003440:	443b      	add	r3, r7
 8003442:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003446:	429a      	cmp	r2, r3
 8003448:	d91a      	bls.n	8003480 <TP_Read_XOY+0x98>
			{
				temp=buf[i];
 800344a:	8bfb      	ldrh	r3, [r7, #30]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	3320      	adds	r3, #32
 8003450:	443b      	add	r3, r7
 8003452:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003456:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8003458:	8bbb      	ldrh	r3, [r7, #28]
 800345a:	8bfa      	ldrh	r2, [r7, #30]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	3320      	adds	r3, #32
 8003460:	443b      	add	r3, r7
 8003462:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8003466:	0053      	lsls	r3, r2, #1
 8003468:	3320      	adds	r3, #32
 800346a:	443b      	add	r3, r7
 800346c:	460a      	mov	r2, r1
 800346e:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8003472:	8bbb      	ldrh	r3, [r7, #28]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	3320      	adds	r3, #32
 8003478:	443b      	add	r3, r7
 800347a:	8b3a      	ldrh	r2, [r7, #24]
 800347c:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8003480:	8bbb      	ldrh	r3, [r7, #28]
 8003482:	3301      	adds	r3, #1
 8003484:	83bb      	strh	r3, [r7, #28]
 8003486:	8bbb      	ldrh	r3, [r7, #28]
 8003488:	2b04      	cmp	r3, #4
 800348a:	d9d0      	bls.n	800342e <TP_Read_XOY+0x46>
	for(i=0;i<READ_TIMES-1; i++)
 800348c:	8bfb      	ldrh	r3, [r7, #30]
 800348e:	3301      	adds	r3, #1
 8003490:	83fb      	strh	r3, [r7, #30]
 8003492:	8bfb      	ldrh	r3, [r7, #30]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d9c6      	bls.n	8003426 <TP_Read_XOY+0x3e>
			}
		}
	}
	sum=0;
 8003498:	2300      	movs	r3, #0
 800349a:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 800349c:	2301      	movs	r3, #1
 800349e:	83fb      	strh	r3, [r7, #30]
 80034a0:	e00b      	b.n	80034ba <TP_Read_XOY+0xd2>
 80034a2:	8bfb      	ldrh	r3, [r7, #30]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	3320      	adds	r3, #32
 80034a8:	443b      	add	r3, r7
 80034aa:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80034ae:	8b7b      	ldrh	r3, [r7, #26]
 80034b0:	4413      	add	r3, r2
 80034b2:	837b      	strh	r3, [r7, #26]
 80034b4:	8bfb      	ldrh	r3, [r7, #30]
 80034b6:	3301      	adds	r3, #1
 80034b8:	83fb      	strh	r3, [r7, #30]
 80034ba:	8bfb      	ldrh	r3, [r7, #30]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d9f0      	bls.n	80034a2 <TP_Read_XOY+0xba>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 80034c0:	8b7b      	ldrh	r3, [r7, #26]
 80034c2:	4a05      	ldr	r2, [pc, #20]	@ (80034d8 <TP_Read_XOY+0xf0>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	085b      	lsrs	r3, r3, #1
 80034ca:	833b      	strh	r3, [r7, #24]
	return temp;
 80034cc:	8b3b      	ldrh	r3, [r7, #24]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3724      	adds	r7, #36	@ 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd90      	pop	{r4, r7, pc}
 80034d6:	bf00      	nop
 80034d8:	aaaaaaab 	.word	0xaaaaaaab

080034dc <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 80034e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003518 <TP_Read_XY+0x3c>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff ff7c 	bl	80033e8 <TP_Read_XOY>
 80034f0:	4603      	mov	r3, r0
 80034f2:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 80034f4:	4b09      	ldr	r3, [pc, #36]	@ (800351c <TP_Read_XY+0x40>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff75 	bl	80033e8 <TP_Read_XOY>
 80034fe:	4603      	mov	r3, r0
 8003500:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	89fa      	ldrh	r2, [r7, #14]
 8003506:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	89ba      	ldrh	r2, [r7, #12]
 800350c:	801a      	strh	r2, [r3, #0]
	return 1;
 800350e:	2301      	movs	r3, #1
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000048 	.word	0x20000048
 800351c:	20000049 	.word	0x20000049

08003520 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 800352a:	f107 0212 	add.w	r2, r7, #18
 800352e:	f107 0314 	add.w	r3, r7, #20
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ffd1 	bl	80034dc <TP_Read_XY>
 800353a:	4603      	mov	r3, r0
 800353c:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <TP_Read_XY2+0x28>
 8003544:	2300      	movs	r3, #0
 8003546:	e049      	b.n	80035dc <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8003548:	f107 020e 	add.w	r2, r7, #14
 800354c:	f107 0310 	add.w	r3, r7, #16
 8003550:	4611      	mov	r1, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff ffc2 	bl	80034dc <TP_Read_XY>
 8003558:	4603      	mov	r3, r0
 800355a:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <TP_Read_XY2+0x46>
 8003562:	2300      	movs	r3, #0
 8003564:	e03a      	b.n	80035dc <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8003566:	8a3a      	ldrh	r2, [r7, #16]
 8003568:	8abb      	ldrh	r3, [r7, #20]
 800356a:	429a      	cmp	r2, r3
 800356c:	d804      	bhi.n	8003578 <TP_Read_XY2+0x58>
 800356e:	8a3b      	ldrh	r3, [r7, #16]
 8003570:	3363      	adds	r3, #99	@ 0x63
 8003572:	8aba      	ldrh	r2, [r7, #20]
 8003574:	4293      	cmp	r3, r2
 8003576:	da08      	bge.n	800358a <TP_Read_XY2+0x6a>
 8003578:	8aba      	ldrh	r2, [r7, #20]
 800357a:	8a3b      	ldrh	r3, [r7, #16]
 800357c:	429a      	cmp	r2, r3
 800357e:	d82c      	bhi.n	80035da <TP_Read_XY2+0xba>
 8003580:	8abb      	ldrh	r3, [r7, #20]
 8003582:	3363      	adds	r3, #99	@ 0x63
 8003584:	8a3a      	ldrh	r2, [r7, #16]
 8003586:	4293      	cmp	r3, r2
 8003588:	db27      	blt.n	80035da <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 800358a:	89fa      	ldrh	r2, [r7, #14]
 800358c:	8a7b      	ldrh	r3, [r7, #18]
 800358e:	429a      	cmp	r2, r3
 8003590:	d804      	bhi.n	800359c <TP_Read_XY2+0x7c>
 8003592:	89fb      	ldrh	r3, [r7, #14]
 8003594:	3363      	adds	r3, #99	@ 0x63
 8003596:	8a7a      	ldrh	r2, [r7, #18]
 8003598:	4293      	cmp	r3, r2
 800359a:	da08      	bge.n	80035ae <TP_Read_XY2+0x8e>
 800359c:	8a7a      	ldrh	r2, [r7, #18]
 800359e:	89fb      	ldrh	r3, [r7, #14]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d81a      	bhi.n	80035da <TP_Read_XY2+0xba>
 80035a4:	8a7b      	ldrh	r3, [r7, #18]
 80035a6:	3363      	adds	r3, #99	@ 0x63
 80035a8:	89fa      	ldrh	r2, [r7, #14]
 80035aa:	4293      	cmp	r3, r2
 80035ac:	db15      	blt.n	80035da <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 80035ae:	8abb      	ldrh	r3, [r7, #20]
 80035b0:	461a      	mov	r2, r3
 80035b2:	8a3b      	ldrh	r3, [r7, #16]
 80035b4:	4413      	add	r3, r2
 80035b6:	0fda      	lsrs	r2, r3, #31
 80035b8:	4413      	add	r3, r2
 80035ba:	105b      	asrs	r3, r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 80035c2:	8a7b      	ldrh	r3, [r7, #18]
 80035c4:	461a      	mov	r2, r3
 80035c6:	89fb      	ldrh	r3, [r7, #14]
 80035c8:	4413      	add	r3, r2
 80035ca:	0fda      	lsrs	r2, r3, #31
 80035cc:	4413      	add	r3, r2
 80035ce:	105b      	asrs	r3, r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	801a      	strh	r2, [r3, #0]
		return 1;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <TP_Read_XY2+0xbc>
	}else return 0;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	4603      	mov	r3, r0
 80035ec:	80fb      	strh	r3, [r7, #6]
 80035ee:	460b      	mov	r3, r1
 80035f0:	80bb      	strh	r3, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	3b0c      	subs	r3, #12
 80035fa:	b298      	uxth	r0, r3
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	330d      	adds	r3, #13
 8003600:	b29a      	uxth	r2, r3
 8003602:	88bc      	ldrh	r4, [r7, #4]
 8003604:	88b9      	ldrh	r1, [r7, #4]
 8003606:	887b      	ldrh	r3, [r7, #2]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	4623      	mov	r3, r4
 800360c:	f7fe fa99 	bl	8001b42 <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8003610:	88bb      	ldrh	r3, [r7, #4]
 8003612:	3b0c      	subs	r3, #12
 8003614:	b299      	uxth	r1, r3
 8003616:	88bb      	ldrh	r3, [r7, #4]
 8003618:	330d      	adds	r3, #13
 800361a:	b29c      	uxth	r4, r3
 800361c:	88fa      	ldrh	r2, [r7, #6]
 800361e:	88f8      	ldrh	r0, [r7, #6]
 8003620:	887b      	ldrh	r3, [r7, #2]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	4623      	mov	r3, r4
 8003626:	f7fe fa8c 	bl	8001b42 <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	3301      	adds	r3, #1
 800362e:	b298      	uxth	r0, r3
 8003630:	88bb      	ldrh	r3, [r7, #4]
 8003632:	3301      	adds	r3, #1
 8003634:	b29b      	uxth	r3, r3
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	4619      	mov	r1, r3
 800363a:	f7fe fa6b 	bl	8001b14 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	3b01      	subs	r3, #1
 8003642:	b298      	uxth	r0, r3
 8003644:	88bb      	ldrh	r3, [r7, #4]
 8003646:	3301      	adds	r3, #1
 8003648:	b29b      	uxth	r3, r3
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	4619      	mov	r1, r3
 800364e:	f7fe fa61 	bl	8001b14 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8003652:	88fb      	ldrh	r3, [r7, #6]
 8003654:	3301      	adds	r3, #1
 8003656:	b298      	uxth	r0, r3
 8003658:	88bb      	ldrh	r3, [r7, #4]
 800365a:	3b01      	subs	r3, #1
 800365c:	b29b      	uxth	r3, r3
 800365e:	887a      	ldrh	r2, [r7, #2]
 8003660:	4619      	mov	r1, r3
 8003662:	f7fe fa57 	bl	8001b14 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	3b01      	subs	r3, #1
 800366a:	b298      	uxth	r0, r3
 800366c:	88bb      	ldrh	r3, [r7, #4]
 800366e:	3b01      	subs	r3, #1
 8003670:	b29b      	uxth	r3, r3
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	4619      	mov	r1, r3
 8003676:	f7fe fa4d 	bl	8001b14 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 800367a:	88f8      	ldrh	r0, [r7, #6]
 800367c:	88b9      	ldrh	r1, [r7, #4]
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	2300      	movs	r3, #0
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2306      	movs	r3, #6
 8003686:	f7fe fe16 	bl	80022b6 <lcd_DrawCircle>
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	bd90      	pop	{r4, r7, pc}
	...

08003694 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 800369e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036a2:	4843      	ldr	r0, [pc, #268]	@ (80037b0 <TP_Scan+0x11c>)
 80036a4:	f002 f870 	bl	8005788 <HAL_GPIO_ReadPin>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d157      	bne.n	800375e <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d004      	beq.n	80036be <TP_Scan+0x2a>
 80036b4:	493f      	ldr	r1, [pc, #252]	@ (80037b4 <TP_Scan+0x120>)
 80036b6:	4840      	ldr	r0, [pc, #256]	@ (80037b8 <TP_Scan+0x124>)
 80036b8:	f7ff ff32 	bl	8003520 <TP_Read_XY2>
 80036bc:	e03c      	b.n	8003738 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 80036be:	493d      	ldr	r1, [pc, #244]	@ (80037b4 <TP_Scan+0x120>)
 80036c0:	483d      	ldr	r0, [pc, #244]	@ (80037b8 <TP_Scan+0x124>)
 80036c2:	f7ff ff2d 	bl	8003520 <TP_Read_XY2>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d035      	beq.n	8003738 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 80036cc:	4b3b      	ldr	r3, [pc, #236]	@ (80037bc <TP_Scan+0x128>)
 80036ce:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80036d2:	4b3a      	ldr	r3, [pc, #232]	@ (80037bc <TP_Scan+0x128>)
 80036d4:	899b      	ldrh	r3, [r3, #12]
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036e2:	4b36      	ldr	r3, [pc, #216]	@ (80037bc <TP_Scan+0x128>)
 80036e4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f8:	ee17 3a90 	vmov	r3, s15
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	4b2f      	ldr	r3, [pc, #188]	@ (80037bc <TP_Scan+0x128>)
 8003700:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8003702:	4b2e      	ldr	r3, [pc, #184]	@ (80037bc <TP_Scan+0x128>)
 8003704:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003708:	4b2c      	ldr	r3, [pc, #176]	@ (80037bc <TP_Scan+0x128>)
 800370a:	8adb      	ldrh	r3, [r3, #22]
 800370c:	ee07 3a90 	vmov	s15, r3
 8003710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003718:	4b28      	ldr	r3, [pc, #160]	@ (80037bc <TP_Scan+0x128>)
 800371a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800372a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800372e:	ee17 3a90 	vmov	r3, s15
 8003732:	b29a      	uxth	r2, r3
 8003734:	4b21      	ldr	r3, [pc, #132]	@ (80037bc <TP_Scan+0x128>)
 8003736:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8003738:	4b20      	ldr	r3, [pc, #128]	@ (80037bc <TP_Scan+0x128>)
 800373a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800373e:	b25b      	sxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	db2a      	blt.n	800379a <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8003744:	4b1d      	ldr	r3, [pc, #116]	@ (80037bc <TP_Scan+0x128>)
 8003746:	22c0      	movs	r2, #192	@ 0xc0
 8003748:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 800374c:	4b1b      	ldr	r3, [pc, #108]	@ (80037bc <TP_Scan+0x128>)
 800374e:	899a      	ldrh	r2, [r3, #12]
 8003750:	4b1a      	ldr	r3, [pc, #104]	@ (80037bc <TP_Scan+0x128>)
 8003752:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8003754:	4b19      	ldr	r3, [pc, #100]	@ (80037bc <TP_Scan+0x128>)
 8003756:	8ada      	ldrh	r2, [r3, #22]
 8003758:	4b18      	ldr	r3, [pc, #96]	@ (80037bc <TP_Scan+0x128>)
 800375a:	83da      	strh	r2, [r3, #30]
 800375c:	e01d      	b.n	800379a <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 800375e:	4b17      	ldr	r3, [pc, #92]	@ (80037bc <TP_Scan+0x128>)
 8003760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003764:	b25b      	sxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	da09      	bge.n	800377e <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 800376a:	4b14      	ldr	r3, [pc, #80]	@ (80037bc <TP_Scan+0x128>)
 800376c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4b11      	ldr	r3, [pc, #68]	@ (80037bc <TP_Scan+0x128>)
 8003778:	f883 2020 	strb.w	r2, [r3, #32]
 800377c:	e00d      	b.n	800379a <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 800377e:	4b0f      	ldr	r3, [pc, #60]	@ (80037bc <TP_Scan+0x128>)
 8003780:	2200      	movs	r2, #0
 8003782:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8003784:	4b0d      	ldr	r3, [pc, #52]	@ (80037bc <TP_Scan+0x128>)
 8003786:	2200      	movs	r2, #0
 8003788:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 800378a:	4b0c      	ldr	r3, [pc, #48]	@ (80037bc <TP_Scan+0x128>)
 800378c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003790:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8003792:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <TP_Scan+0x128>)
 8003794:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003798:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 800379a:	4b08      	ldr	r3, [pc, #32]	@ (80037bc <TP_Scan+0x128>)
 800379c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80037a4:	b2db      	uxtb	r3, r3
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40020800 	.word	0x40020800
 80037b4:	2000002a 	.word	0x2000002a
 80037b8:	20000020 	.word	0x20000020
 80037bc:	20000014 	.word	0x20000014

080037c0 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 80037c4:	220e      	movs	r2, #14
 80037c6:	4905      	ldr	r1, [pc, #20]	@ (80037dc <TP_Save_Adjdata+0x1c>)
 80037c8:	2000      	movs	r0, #0
 80037ca:	f7fd fca9 	bl	8001120 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 80037ce:	2160      	movs	r1, #96	@ 0x60
 80037d0:	200e      	movs	r0, #14
 80037d2:	f7fd fc45 	bl	8001060 <at24c_WriteOneByte>
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000038 	.word	0x20000038

080037e0 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 80037ea:	200e      	movs	r0, #14
 80037ec:	f7fd fc1c 	bl	8001028 <at24c_ReadOneByte>
 80037f0:	4603      	mov	r3, r0
 80037f2:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	2b60      	cmp	r3, #96	@ 0x60
 80037f8:	d106      	bne.n	8003808 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 80037fa:	220e      	movs	r2, #14
 80037fc:	4905      	ldr	r1, [pc, #20]	@ (8003814 <TP_Get_Adjdata+0x34>)
 80037fe:	2000      	movs	r0, #0
 8003800:	f7fd fc6f 	bl	80010e2 <at24c_Read>
		return 1;
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000038 	.word	0x20000038

08003818 <touch_Adjust>:


void touch_Adjust(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08e      	sub	sp, #56	@ 0x38
 800381c:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 800381e:	2300      	movs	r3, #0
 8003820:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 8003824:	2300      	movs	r3, #0
 8003826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 800382a:	4b5f      	ldr	r3, [pc, #380]	@ (80039a8 <touch_Adjust+0x190>)
 800382c:	881a      	ldrh	r2, [r3, #0]
 800382e:	4b5e      	ldr	r3, [pc, #376]	@ (80039a8 <touch_Adjust+0x190>)
 8003830:	885b      	ldrh	r3, [r3, #2]
 8003832:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003836:	9100      	str	r1, [sp, #0]
 8003838:	2100      	movs	r1, #0
 800383a:	2000      	movs	r0, #0
 800383c:	f7fe f934 	bl	8001aa8 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8003840:	2300      	movs	r3, #0
 8003842:	9302      	str	r3, [sp, #8]
 8003844:	2310      	movs	r3, #16
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003852:	4a56      	ldr	r2, [pc, #344]	@ (80039ac <touch_Adjust+0x194>)
 8003854:	2128      	movs	r1, #40	@ 0x28
 8003856:	2005      	movs	r0, #5
 8003858:	f7fe fd9a 	bl	8002390 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 800385c:	2300      	movs	r3, #0
 800385e:	9302      	str	r3, [sp, #8]
 8003860:	2310      	movs	r3, #16
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800386e:	4a50      	ldr	r2, [pc, #320]	@ (80039b0 <touch_Adjust+0x198>)
 8003870:	2141      	movs	r1, #65	@ 0x41
 8003872:	2005      	movs	r0, #5
 8003874:	f7fe fd8c 	bl	8002390 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8003878:	2300      	movs	r3, #0
 800387a:	9302      	str	r3, [sp, #8]
 800387c:	2310      	movs	r3, #16
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800388a:	4a4a      	ldr	r2, [pc, #296]	@ (80039b4 <touch_Adjust+0x19c>)
 800388c:	215a      	movs	r1, #90	@ 0x5a
 800388e:	2005      	movs	r0, #5
 8003890:	f7fe fd7e 	bl	8002390 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 8003894:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003898:	2114      	movs	r1, #20
 800389a:	2014      	movs	r0, #20
 800389c:	f7ff fea2 	bl	80035e4 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 80038a0:	4b45      	ldr	r3, [pc, #276]	@ (80039b8 <touch_Adjust+0x1a0>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 80038a8:	4b43      	ldr	r3, [pc, #268]	@ (80039b8 <touch_Adjust+0x1a0>)
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	625a      	str	r2, [r3, #36]	@ 0x24
	while(1)
	{
		HAL_Delay(50);
 80038b0:	2032      	movs	r0, #50	@ 0x32
 80038b2:	f000 feb9 	bl	8004628 <HAL_Delay>
		tp_dev.scan(1);
 80038b6:	4b40      	ldr	r3, [pc, #256]	@ (80039b8 <touch_Adjust+0x1a0>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2001      	movs	r0, #1
 80038bc:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 80038be:	4b3e      	ldr	r3, [pc, #248]	@ (80039b8 <touch_Adjust+0x1a0>)
 80038c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038c4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038c8:	2b40      	cmp	r3, #64	@ 0x40
 80038ca:	d1f1      	bne.n	80038b0 <touch_Adjust+0x98>
		{
			tp_dev.sta&=~(1<<6);
 80038cc:	4b3a      	ldr	r3, [pc, #232]	@ (80039b8 <touch_Adjust+0x1a0>)
 80038ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	4b37      	ldr	r3, [pc, #220]	@ (80039b8 <touch_Adjust+0x1a0>)
 80038da:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 80038de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038e2:	4a35      	ldr	r2, [pc, #212]	@ (80039b8 <touch_Adjust+0x1a0>)
 80038e4:	8992      	ldrh	r2, [r2, #12]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	3328      	adds	r3, #40	@ 0x28
 80038ea:	443b      	add	r3, r7
 80038ec:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 80038f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038f4:	4a30      	ldr	r2, [pc, #192]	@ (80039b8 <touch_Adjust+0x1a0>)
 80038f6:	8ad2      	ldrh	r2, [r2, #22]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	3328      	adds	r3, #40	@ 0x28
 80038fc:	443b      	add	r3, r7
 80038fe:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8003902:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003906:	3301      	adds	r3, #1
 8003908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			switch(cnt)
 800390c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003910:	3b01      	subs	r3, #1
 8003912:	2b03      	cmp	r3, #3
 8003914:	d8cc      	bhi.n	80038b0 <touch_Adjust+0x98>
 8003916:	a201      	add	r2, pc, #4	@ (adr r2, 800391c <touch_Adjust+0x104>)
 8003918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391c:	0800392d 	.word	0x0800392d
 8003920:	0800394f 	.word	0x0800394f
 8003924:	08003979 	.word	0x08003979
 8003928:	080039bd 	.word	0x080039bd
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 800392c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003930:	2114      	movs	r1, #20
 8003932:	2014      	movs	r0, #20
 8003934:	f7ff fe56 	bl	80035e4 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8003938:	4b1b      	ldr	r3, [pc, #108]	@ (80039a8 <touch_Adjust+0x190>)
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	3b14      	subs	r3, #20
 800393e:	b29b      	uxth	r3, r3
 8003940:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003944:	2114      	movs	r1, #20
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff fe4c 	bl	80035e4 <TP_Drow_Touch_Point>
					break;
 800394c:	e319      	b.n	8003f82 <touch_Adjust+0x76a>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 800394e:	4b16      	ldr	r3, [pc, #88]	@ (80039a8 <touch_Adjust+0x190>)
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	3b14      	subs	r3, #20
 8003954:	b29b      	uxth	r3, r3
 8003956:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800395a:	2114      	movs	r1, #20
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff fe41 	bl	80035e4 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 8003962:	4b11      	ldr	r3, [pc, #68]	@ (80039a8 <touch_Adjust+0x190>)
 8003964:	885b      	ldrh	r3, [r3, #2]
 8003966:	3b14      	subs	r3, #20
 8003968:	b29b      	uxth	r3, r3
 800396a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800396e:	4619      	mov	r1, r3
 8003970:	2014      	movs	r0, #20
 8003972:	f7ff fe37 	bl	80035e4 <TP_Drow_Touch_Point>
					break;
 8003976:	e304      	b.n	8003f82 <touch_Adjust+0x76a>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8003978:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <touch_Adjust+0x190>)
 800397a:	885b      	ldrh	r3, [r3, #2]
 800397c:	3b14      	subs	r3, #20
 800397e:	b29b      	uxth	r3, r3
 8003980:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003984:	4619      	mov	r1, r3
 8003986:	2014      	movs	r0, #20
 8003988:	f7ff fe2c 	bl	80035e4 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 800398c:	4b06      	ldr	r3, [pc, #24]	@ (80039a8 <touch_Adjust+0x190>)
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	3b14      	subs	r3, #20
 8003992:	b298      	uxth	r0, r3
 8003994:	4b04      	ldr	r3, [pc, #16]	@ (80039a8 <touch_Adjust+0x190>)
 8003996:	885b      	ldrh	r3, [r3, #2]
 8003998:	3b14      	subs	r3, #20
 800399a:	b29b      	uxth	r3, r3
 800399c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80039a0:	4619      	mov	r1, r3
 80039a2:	f7ff fe1f 	bl	80035e4 <TP_Drow_Touch_Point>
					break;
 80039a6:	e2ec      	b.n	8003f82 <touch_Adjust+0x76a>
 80039a8:	20000258 	.word	0x20000258
 80039ac:	0800a4a0 	.word	0x0800a4a0
 80039b0:	0800a4bc 	.word	0x0800a4bc
 80039b4:	0800a4d4 	.word	0x0800a4d4
 80039b8:	20000014 	.word	0x20000014
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 80039bc:	883b      	ldrh	r3, [r7, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	88bb      	ldrh	r3, [r7, #4]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bfb8      	it	lt
 80039c8:	425b      	neglt	r3, r3
 80039ca:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 80039cc:	887b      	ldrh	r3, [r7, #2]
 80039ce:	461a      	mov	r2, r3
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bfb8      	it	lt
 80039d8:	425b      	neglt	r3, r3
 80039da:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	fb03 f303 	mul.w	r3, r3, r3
 80039e2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	fb03 f303 	mul.w	r3, r3, r3
 80039ea:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80039ec:	6a3a      	ldr	r2, [r7, #32]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4413      	add	r3, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fc fd32 	bl	800045c <__aeabi_ui2d>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	ec43 2b10 	vmov	d0, r2, r3
 8003a00:	f006 fc2c 	bl	800a25c <sqrt>
 8003a04:	ec53 2b10 	vmov	r2, r3, d0
 8003a08:	4610      	mov	r0, r2
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f7fd f850 	bl	8000ab0 <__aeabi_d2uiz>
 8003a10:	4603      	mov	r3, r0
 8003a12:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 8003a14:	893b      	ldrh	r3, [r7, #8]
 8003a16:	461a      	mov	r2, r3
 8003a18:	89bb      	ldrh	r3, [r7, #12]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bfb8      	it	lt
 8003a20:	425b      	neglt	r3, r3
 8003a22:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 8003a24:	897b      	ldrh	r3, [r7, #10]
 8003a26:	461a      	mov	r2, r3
 8003a28:	89fb      	ldrh	r3, [r7, #14]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bfb8      	it	lt
 8003a30:	425b      	neglt	r3, r3
 8003a32:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	fb03 f303 	mul.w	r3, r3, r3
 8003a3a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	fb03 f303 	mul.w	r3, r3, r3
 8003a42:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fc fd06 	bl	800045c <__aeabi_ui2d>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	ec43 2b10 	vmov	d0, r2, r3
 8003a58:	f006 fc00 	bl	800a25c <sqrt>
 8003a5c:	ec53 2b10 	vmov	r2, r3, d0
 8003a60:	4610      	mov	r0, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	f7fd f824 	bl	8000ab0 <__aeabi_d2uiz>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003a6c:	8b7b      	ldrh	r3, [r7, #26]
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a76:	8b3b      	ldrh	r3, [r7, #24]
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a84:	ee16 0a90 	vmov	r0, s13
 8003a88:	f7fc fd0a 	bl	80004a0 <__aeabi_f2d>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 8003a94:	a384      	add	r3, pc, #528	@ (adr r3, 8003ca8 <touch_Adjust+0x490>)
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a9e:	f7fc ffc9 	bl	8000a34 <__aeabi_dcmplt>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10f      	bne.n	8003ac8 <touch_Adjust+0x2b0>
 8003aa8:	a381      	add	r3, pc, #516	@ (adr r3, 8003cb0 <touch_Adjust+0x498>)
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ab2:	f7fc ffdd 	bl	8000a70 <__aeabi_dcmpgt>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d105      	bne.n	8003ac8 <touch_Adjust+0x2b0>
 8003abc:	8b7b      	ldrh	r3, [r7, #26]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <touch_Adjust+0x2b0>
 8003ac2:	8b3b      	ldrh	r3, [r7, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d136      	bne.n	8003b36 <touch_Adjust+0x31e>
					{
						cnt=0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003ace:	4b7a      	ldr	r3, [pc, #488]	@ (8003cb8 <touch_Adjust+0x4a0>)
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	3b14      	subs	r3, #20
 8003ad4:	b298      	uxth	r0, r3
 8003ad6:	4b78      	ldr	r3, [pc, #480]	@ (8003cb8 <touch_Adjust+0x4a0>)
 8003ad8:	885b      	ldrh	r3, [r3, #2]
 8003ada:	3b14      	subs	r3, #20
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f7ff fd7e 	bl	80035e4 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003ae8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003aec:	2114      	movs	r1, #20
 8003aee:	2014      	movs	r0, #20
 8003af0:	f7ff fd78 	bl	80035e4 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003af4:	2300      	movs	r3, #0
 8003af6:	9302      	str	r3, [sp, #8]
 8003af8:	2310      	movs	r3, #16
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003b06:	4a6d      	ldr	r2, [pc, #436]	@ (8003cbc <touch_Adjust+0x4a4>)
 8003b08:	2128      	movs	r1, #40	@ 0x28
 8003b0a:	2005      	movs	r0, #5
 8003b0c:	f7fe fc40 	bl	8002390 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003b10:	2300      	movs	r3, #0
 8003b12:	9302      	str	r3, [sp, #8]
 8003b14:	2310      	movs	r3, #16
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003b22:	4a67      	ldr	r2, [pc, #412]	@ (8003cc0 <touch_Adjust+0x4a8>)
 8003b24:	213c      	movs	r1, #60	@ 0x3c
 8003b26:	2005      	movs	r0, #5
 8003b28:	f7fe fc32 	bl	8002390 <lcd_ShowStr>
						HAL_Delay(1000);
 8003b2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b30:	f000 fd7a 	bl	8004628 <HAL_Delay>
 						continue;
 8003b34:	e225      	b.n	8003f82 <touch_Adjust+0x76a>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8003b36:	883b      	ldrh	r3, [r7, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	893b      	ldrh	r3, [r7, #8]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bfb8      	it	lt
 8003b42:	425b      	neglt	r3, r3
 8003b44:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	897b      	ldrh	r3, [r7, #10]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	bfb8      	it	lt
 8003b52:	425b      	neglt	r3, r3
 8003b54:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	fb03 f303 	mul.w	r3, r3, r3
 8003b5c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	fb03 f303 	mul.w	r3, r3, r3
 8003b64:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003b66:	6a3a      	ldr	r2, [r7, #32]
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fc fc75 	bl	800045c <__aeabi_ui2d>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	ec43 2b10 	vmov	d0, r2, r3
 8003b7a:	f006 fb6f 	bl	800a25c <sqrt>
 8003b7e:	ec53 2b10 	vmov	r2, r3, d0
 8003b82:	4610      	mov	r0, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	f7fc ff93 	bl	8000ab0 <__aeabi_d2uiz>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8003b8e:	88bb      	ldrh	r3, [r7, #4]
 8003b90:	461a      	mov	r2, r3
 8003b92:	89bb      	ldrh	r3, [r7, #12]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bfb8      	it	lt
 8003b9a:	425b      	neglt	r3, r3
 8003b9c:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	89fb      	ldrh	r3, [r7, #14]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	bfb8      	it	lt
 8003baa:	425b      	neglt	r3, r3
 8003bac:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	fb03 f303 	mul.w	r3, r3, r3
 8003bb4:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	fb03 f303 	mul.w	r3, r3, r3
 8003bbc:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003bbe:	6a3a      	ldr	r2, [r7, #32]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fc fc49 	bl	800045c <__aeabi_ui2d>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	ec43 2b10 	vmov	d0, r2, r3
 8003bd2:	f006 fb43 	bl	800a25c <sqrt>
 8003bd6:	ec53 2b10 	vmov	r2, r3, d0
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f7fc ff67 	bl	8000ab0 <__aeabi_d2uiz>
 8003be2:	4603      	mov	r3, r0
 8003be4:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003be6:	8b7b      	ldrh	r3, [r7, #26]
 8003be8:	ee07 3a90 	vmov	s15, r3
 8003bec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bf0:	8b3b      	ldrh	r3, [r7, #24]
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bfa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003bfe:	ee16 0a90 	vmov	r0, s13
 8003c02:	f7fc fc4d 	bl	80004a0 <__aeabi_f2d>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8003c0e:	a326      	add	r3, pc, #152	@ (adr r3, 8003ca8 <touch_Adjust+0x490>)
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c18:	f7fc ff0c 	bl	8000a34 <__aeabi_dcmplt>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <touch_Adjust+0x41e>
 8003c22:	a323      	add	r3, pc, #140	@ (adr r3, 8003cb0 <touch_Adjust+0x498>)
 8003c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c2c:	f7fc ff20 	bl	8000a70 <__aeabi_dcmpgt>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d046      	beq.n	8003cc4 <touch_Adjust+0x4ac>
					{
						cnt=0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb8 <touch_Adjust+0x4a0>)
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	3b14      	subs	r3, #20
 8003c42:	b298      	uxth	r0, r3
 8003c44:	4b1c      	ldr	r3, [pc, #112]	@ (8003cb8 <touch_Adjust+0x4a0>)
 8003c46:	885b      	ldrh	r3, [r3, #2]
 8003c48:	3b14      	subs	r3, #20
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c50:	4619      	mov	r1, r3
 8003c52:	f7ff fcc7 	bl	80035e4 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003c56:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003c5a:	2114      	movs	r1, #20
 8003c5c:	2014      	movs	r0, #20
 8003c5e:	f7ff fcc1 	bl	80035e4 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003c62:	2300      	movs	r3, #0
 8003c64:	9302      	str	r3, [sp, #8]
 8003c66:	2310      	movs	r3, #16
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003c74:	4a11      	ldr	r2, [pc, #68]	@ (8003cbc <touch_Adjust+0x4a4>)
 8003c76:	2128      	movs	r1, #40	@ 0x28
 8003c78:	2005      	movs	r0, #5
 8003c7a:	f7fe fb89 	bl	8002390 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	9302      	str	r3, [sp, #8]
 8003c82:	2310      	movs	r3, #16
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003c90:	4a0b      	ldr	r2, [pc, #44]	@ (8003cc0 <touch_Adjust+0x4a8>)
 8003c92:	213c      	movs	r1, #60	@ 0x3c
 8003c94:	2005      	movs	r0, #5
 8003c96:	f7fe fb7b 	bl	8002390 <lcd_ShowStr>
						HAL_Delay(1000);
 8003c9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c9e:	f000 fcc3 	bl	8004628 <HAL_Delay>
						continue;
 8003ca2:	e16e      	b.n	8003f82 <touch_Adjust+0x76a>
 8003ca4:	f3af 8000 	nop.w
 8003ca8:	66666666 	.word	0x66666666
 8003cac:	3fee6666 	.word	0x3fee6666
 8003cb0:	cccccccd 	.word	0xcccccccd
 8003cb4:	3ff0cccc 	.word	0x3ff0cccc
 8003cb8:	20000258 	.word	0x20000258
 8003cbc:	0800a4e8 	.word	0x0800a4e8
 8003cc0:	0800a508 	.word	0x0800a508
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8003cc4:	88bb      	ldrh	r3, [r7, #4]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	893b      	ldrh	r3, [r7, #8]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bfb8      	it	lt
 8003cd0:	425b      	neglt	r3, r3
 8003cd2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	897b      	ldrh	r3, [r7, #10]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bfb8      	it	lt
 8003ce0:	425b      	neglt	r3, r3
 8003ce2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	fb03 f303 	mul.w	r3, r3, r3
 8003cea:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	fb03 f303 	mul.w	r3, r3, r3
 8003cf2:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003cf4:	6a3a      	ldr	r2, [r7, #32]
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fc fbae 	bl	800045c <__aeabi_ui2d>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	ec43 2b10 	vmov	d0, r2, r3
 8003d08:	f006 faa8 	bl	800a25c <sqrt>
 8003d0c:	ec53 2b10 	vmov	r2, r3, d0
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	f7fc fecc 	bl	8000ab0 <__aeabi_d2uiz>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8003d1c:	883b      	ldrh	r3, [r7, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	89bb      	ldrh	r3, [r7, #12]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bfb8      	it	lt
 8003d28:	425b      	neglt	r3, r3
 8003d2a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8003d2c:	887b      	ldrh	r3, [r7, #2]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	89fb      	ldrh	r3, [r7, #14]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bfb8      	it	lt
 8003d38:	425b      	neglt	r3, r3
 8003d3a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	fb03 f303 	mul.w	r3, r3, r3
 8003d42:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	fb03 f303 	mul.w	r3, r3, r3
 8003d4a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003d4c:	6a3a      	ldr	r2, [r7, #32]
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fc fb82 	bl	800045c <__aeabi_ui2d>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	ec43 2b10 	vmov	d0, r2, r3
 8003d60:	f006 fa7c 	bl	800a25c <sqrt>
 8003d64:	ec53 2b10 	vmov	r2, r3, d0
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f7fc fea0 	bl	8000ab0 <__aeabi_d2uiz>
 8003d70:	4603      	mov	r3, r0
 8003d72:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003d74:	8b7b      	ldrh	r3, [r7, #26]
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d7e:	8b3b      	ldrh	r3, [r7, #24]
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d8c:	ee16 0a90 	vmov	r0, s13
 8003d90:	f7fc fb86 	bl	80004a0 <__aeabi_f2d>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8003d9c:	a383      	add	r3, pc, #524	@ (adr r3, 8003fac <touch_Adjust+0x794>)
 8003d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003da6:	f7fc fe45 	bl	8000a34 <__aeabi_dcmplt>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d109      	bne.n	8003dc4 <touch_Adjust+0x5ac>
 8003db0:	a380      	add	r3, pc, #512	@ (adr r3, 8003fb4 <touch_Adjust+0x79c>)
 8003db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003dba:	f7fc fe59 	bl	8000a70 <__aeabi_dcmpgt>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d036      	beq.n	8003e32 <touch_Adjust+0x61a>
					{
						cnt=0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003dca:	4b71      	ldr	r3, [pc, #452]	@ (8003f90 <touch_Adjust+0x778>)
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	3b14      	subs	r3, #20
 8003dd0:	b298      	uxth	r0, r3
 8003dd2:	4b6f      	ldr	r3, [pc, #444]	@ (8003f90 <touch_Adjust+0x778>)
 8003dd4:	885b      	ldrh	r3, [r3, #2]
 8003dd6:	3b14      	subs	r3, #20
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003dde:	4619      	mov	r1, r3
 8003de0:	f7ff fc00 	bl	80035e4 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003de4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003de8:	2114      	movs	r1, #20
 8003dea:	2014      	movs	r0, #20
 8003dec:	f7ff fbfa 	bl	80035e4 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003df0:	2300      	movs	r3, #0
 8003df2:	9302      	str	r3, [sp, #8]
 8003df4:	2310      	movs	r3, #16
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003e02:	4a64      	ldr	r2, [pc, #400]	@ (8003f94 <touch_Adjust+0x77c>)
 8003e04:	2128      	movs	r1, #40	@ 0x28
 8003e06:	2005      	movs	r0, #5
 8003e08:	f7fe fac2 	bl	8002390 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	9302      	str	r3, [sp, #8]
 8003e10:	2310      	movs	r3, #16
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003e1e:	4a5e      	ldr	r2, [pc, #376]	@ (8003f98 <touch_Adjust+0x780>)
 8003e20:	213c      	movs	r1, #60	@ 0x3c
 8003e22:	2005      	movs	r0, #5
 8003e24:	f7fe fab4 	bl	8002390 <lcd_ShowStr>

						HAL_Delay(1000);
 8003e28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e2c:	f000 fbfc 	bl	8004628 <HAL_Delay>
 							continue;
 8003e30:	e0a7      	b.n	8003f82 <touch_Adjust+0x76a>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8003e32:	4b57      	ldr	r3, [pc, #348]	@ (8003f90 <touch_Adjust+0x778>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	3b28      	subs	r3, #40	@ 0x28
 8003e38:	ee07 3a90 	vmov	s15, r3
 8003e3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e40:	88bb      	ldrh	r3, [r7, #4]
 8003e42:	461a      	mov	r2, r3
 8003e44:	883b      	ldrh	r3, [r7, #0]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	ee07 3a90 	vmov	s15, r3
 8003e4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e54:	4b51      	ldr	r3, [pc, #324]	@ (8003f9c <touch_Adjust+0x784>)
 8003e56:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8003e5a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f90 <touch_Adjust+0x778>)
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e66:	4b4d      	ldr	r3, [pc, #308]	@ (8003f9c <touch_Adjust+0x784>)
 8003e68:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8003e6c:	88bb      	ldrh	r3, [r7, #4]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	883b      	ldrh	r3, [r7, #0]
 8003e72:	4413      	add	r3, r2
 8003e74:	ee07 3a90 	vmov	s15, r3
 8003e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e84:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003e88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e90:	ee17 3a90 	vmov	r3, s15
 8003e94:	b21a      	sxth	r2, r3
 8003e96:	4b41      	ldr	r3, [pc, #260]	@ (8003f9c <touch_Adjust+0x784>)
 8003e98:	859a      	strh	r2, [r3, #44]	@ 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8003e9a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f90 <touch_Adjust+0x778>)
 8003e9c:	885b      	ldrh	r3, [r3, #2]
 8003e9e:	3b28      	subs	r3, #40	@ 0x28
 8003ea0:	ee07 3a90 	vmov	s15, r3
 8003ea4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ea8:	897b      	ldrh	r3, [r7, #10]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	887b      	ldrh	r3, [r7, #2]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	ee07 3a90 	vmov	s15, r3
 8003eb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ebc:	4b37      	ldr	r3, [pc, #220]	@ (8003f9c <touch_Adjust+0x784>)
 8003ebe:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 8003ec2:	4b33      	ldr	r3, [pc, #204]	@ (8003f90 <touch_Adjust+0x778>)
 8003ec4:	885b      	ldrh	r3, [r3, #2]
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ece:	4b33      	ldr	r3, [pc, #204]	@ (8003f9c <touch_Adjust+0x784>)
 8003ed0:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8003ed4:	897b      	ldrh	r3, [r7, #10]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	4413      	add	r3, r2
 8003edc:	ee07 3a90 	vmov	s15, r3
 8003ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ee8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003eec:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003ef0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ef8:	ee17 3a90 	vmov	r3, s15
 8003efc:	b21a      	sxth	r2, r3
 8003efe:	4b27      	ldr	r3, [pc, #156]	@ (8003f9c <touch_Adjust+0x784>)
 8003f00:	85da      	strh	r2, [r3, #46]	@ 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003f02:	4b23      	ldr	r3, [pc, #140]	@ (8003f90 <touch_Adjust+0x778>)
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	3b14      	subs	r3, #20
 8003f08:	b298      	uxth	r0, r3
 8003f0a:	4b21      	ldr	r3, [pc, #132]	@ (8003f90 <touch_Adjust+0x778>)
 8003f0c:	885b      	ldrh	r3, [r3, #2]
 8003f0e:	3b14      	subs	r3, #20
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f16:	4619      	mov	r1, r3
 8003f18:	f7ff fb64 	bl	80035e4 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9302      	str	r3, [sp, #8]
 8003f20:	2310      	movs	r3, #16
 8003f22:	9301      	str	r3, [sp, #4]
 8003f24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003fa0 <touch_Adjust+0x788>)
 8003f30:	2128      	movs	r1, #40	@ 0x28
 8003f32:	2005      	movs	r0, #5
 8003f34:	f7fe fa2c 	bl	8002390 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8003f38:	2300      	movs	r3, #0
 8003f3a:	9302      	str	r3, [sp, #8]
 8003f3c:	2310      	movs	r3, #16
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003f4a:	4a16      	ldr	r2, [pc, #88]	@ (8003fa4 <touch_Adjust+0x78c>)
 8003f4c:	213c      	movs	r1, #60	@ 0x3c
 8003f4e:	2005      	movs	r0, #5
 8003f50:	f7fe fa1e 	bl	8002390 <lcd_ShowStr>
					HAL_Delay(1000);
 8003f54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003f58:	f000 fb66 	bl	8004628 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9302      	str	r3, [sp, #8]
 8003f60:	2310      	movs	r3, #16
 8003f62:	9301      	str	r3, [sp, #4]
 8003f64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8003fa8 <touch_Adjust+0x790>)
 8003f70:	2128      	movs	r1, #40	@ 0x28
 8003f72:	2005      	movs	r0, #5
 8003f74:	f7fe fa0c 	bl	8002390 <lcd_ShowStr>
					TP_Save_Adjdata();
 8003f78:	f7ff fc22 	bl	80037c0 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8003f7c:	f7ff fc30 	bl	80037e0 <TP_Get_Adjdata>
					return;
 8003f80:	e000      	b.n	8003f84 <touch_Adjust+0x76c>
		HAL_Delay(50);
 8003f82:	e495      	b.n	80038b0 <touch_Adjust+0x98>
			}
		}
 	}
}
 8003f84:	3728      	adds	r7, #40	@ 0x28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	f3af 8000 	nop.w
 8003f90:	20000258 	.word	0x20000258
 8003f94:	0800a4e8 	.word	0x0800a4e8
 8003f98:	0800a508 	.word	0x0800a508
 8003f9c:	20000014 	.word	0x20000014
 8003fa0:	0800a528 	.word	0x0800a528
 8003fa4:	0800a548 	.word	0x0800a548
 8003fa8:	0800a568 	.word	0x0800a568
 8003fac:	66666666 	.word	0x66666666
 8003fb0:	3fee6666 	.word	0x3fee6666
 8003fb4:	cccccccd 	.word	0xcccccccd
 8003fb8:	3ff0cccc 	.word	0x3ff0cccc

08003fbc <touch_init>:

void touch_init(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8003fc0:	4904      	ldr	r1, [pc, #16]	@ (8003fd4 <touch_init+0x18>)
 8003fc2:	4805      	ldr	r0, [pc, #20]	@ (8003fd8 <touch_init+0x1c>)
 8003fc4:	f7ff fa8a 	bl	80034dc <TP_Read_XY>
	at24c_init();
 8003fc8:	f7fd f828 	bl	800101c <at24c_init>
	TP_Get_Adjdata();
 8003fcc:	f7ff fc08 	bl	80037e0 <TP_Get_Adjdata>
}
 8003fd0:	bf00      	nop
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	2000002a 	.word	0x2000002a
 8003fd8:	20000020 	.word	0x20000020

08003fdc <touch_Scan>:

void touch_Scan(){
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8003fe0:	4b02      	ldr	r3, [pc, #8]	@ (8003fec <touch_Scan+0x10>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	4798      	blx	r3
}
 8003fe8:	bf00      	nop
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000014 	.word	0x20000014

08003ff0 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 8003ff4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ff8:	4805      	ldr	r0, [pc, #20]	@ (8004010 <touch_IsTouched+0x20>)
 8003ffa:	f001 fbc5 	bl	8005788 <HAL_GPIO_ReadPin>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
}
 800400a:	4618      	mov	r0, r3
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40020800 	.word	0x40020800

08004014 <touch_GetX>:

uint16_t touch_GetX(){
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8004018:	4b03      	ldr	r3, [pc, #12]	@ (8004028 <touch_GetX+0x14>)
 800401a:	899b      	ldrh	r3, [r3, #12]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000014 	.word	0x20000014

0800402c <touch_GetY>:

uint16_t touch_GetY(){
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8004030:	4b03      	ldr	r3, [pc, #12]	@ (8004040 <touch_GetY+0x14>)
 8004032:	8adb      	ldrh	r3, [r3, #22]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000014 	.word	0x20000014

08004044 <getDayOfWeek>:
//
//void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
//	HAL_UART_Transmit(&huart1, bytes, size, 10);
//}

int getDayOfWeek(int day, int month, int year) {
 8004044:	b480      	push	{r7}
 8004046:	b089      	sub	sp, #36	@ 0x24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
    // Zeller's Congruence algorithm to find the day of the week
    if (month < 3) {
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b02      	cmp	r3, #2
 8004054:	dc05      	bgt.n	8004062 <getDayOfWeek+0x1e>
        month += 12;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	330c      	adds	r3, #12
 800405a:	60bb      	str	r3, [r7, #8]
        year -= 1;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3b01      	subs	r3, #1
 8004060:	607b      	str	r3, [r7, #4]
    }

    int K = year % 100;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2a      	ldr	r2, [pc, #168]	@ (8004110 <getDayOfWeek+0xcc>)
 8004066:	fb82 1203 	smull	r1, r2, r2, r3
 800406a:	1151      	asrs	r1, r2, #5
 800406c:	17da      	asrs	r2, r3, #31
 800406e:	1a8a      	subs	r2, r1, r2
 8004070:	2164      	movs	r1, #100	@ 0x64
 8004072:	fb01 f202 	mul.w	r2, r1, r2
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	61fb      	str	r3, [r7, #28]
    int J = year / 100;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a24      	ldr	r2, [pc, #144]	@ (8004110 <getDayOfWeek+0xcc>)
 800407e:	fb82 1203 	smull	r1, r2, r2, r3
 8004082:	1152      	asrs	r2, r2, #5
 8004084:	17db      	asrs	r3, r3, #31
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	61bb      	str	r3, [r7, #24]
    int f = day + ((13 * (month + 1)) / 5) + K + (K / 4) + (J / 4) - (2 * J);
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	4613      	mov	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	4a1e      	ldr	r2, [pc, #120]	@ (8004114 <getDayOfWeek+0xd0>)
 800409a:	fb82 1203 	smull	r1, r2, r2, r3
 800409e:	1052      	asrs	r2, r2, #1
 80040a0:	17db      	asrs	r3, r3, #31
 80040a2:	1ad2      	subs	r2, r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	441a      	add	r2, r3
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	441a      	add	r2, r3
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	da00      	bge.n	80040b4 <getDayOfWeek+0x70>
 80040b2:	3303      	adds	r3, #3
 80040b4:	109b      	asrs	r3, r3, #2
 80040b6:	441a      	add	r2, r3
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	da00      	bge.n	80040c0 <getDayOfWeek+0x7c>
 80040be:	3303      	adds	r3, #3
 80040c0:	109b      	asrs	r3, r3, #2
 80040c2:	441a      	add	r2, r3
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	617b      	str	r3, [r7, #20]
    int dayOfWeek = ((f % 7) + 7) % 7 + 1;  // Ensure dayOfWeek is non-negative
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4b12      	ldr	r3, [pc, #72]	@ (8004118 <getDayOfWeek+0xd4>)
 80040d0:	fb83 1302 	smull	r1, r3, r3, r2
 80040d4:	4413      	add	r3, r2
 80040d6:	1099      	asrs	r1, r3, #2
 80040d8:	17d3      	asrs	r3, r2, #31
 80040da:	1ac9      	subs	r1, r1, r3
 80040dc:	460b      	mov	r3, r1
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	1a5b      	subs	r3, r3, r1
 80040e2:	1ad1      	subs	r1, r2, r3
 80040e4:	1dca      	adds	r2, r1, #7
 80040e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004118 <getDayOfWeek+0xd4>)
 80040e8:	fb83 1302 	smull	r1, r3, r3, r2
 80040ec:	4413      	add	r3, r2
 80040ee:	1099      	asrs	r1, r3, #2
 80040f0:	17d3      	asrs	r3, r2, #31
 80040f2:	1ac9      	subs	r1, r1, r3
 80040f4:	460b      	mov	r3, r1
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	1a5b      	subs	r3, r3, r1
 80040fa:	1ad1      	subs	r1, r2, r3
 80040fc:	1c4b      	adds	r3, r1, #1
 80040fe:	613b      	str	r3, [r7, #16]

    // Mapping dayOfWeek to the name of the day
    return dayOfWeek;
 8004100:	693b      	ldr	r3, [r7, #16]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3724      	adds	r7, #36	@ 0x24
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	51eb851f 	.word	0x51eb851f
 8004114:	66666667 	.word	0x66666667
 8004118:	92492493 	.word	0x92492493

0800411c <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8004120:	2201      	movs	r2, #1
 8004122:	4906      	ldr	r1, [pc, #24]	@ (800413c <uart_init_esp+0x20>)
 8004124:	4806      	ldr	r0, [pc, #24]	@ (8004140 <uart_init_esp+0x24>)
 8004126:	f005 f86b 	bl	8009200 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 800412a:	2201      	movs	r2, #1
 800412c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004130:	4804      	ldr	r0, [pc, #16]	@ (8004144 <uart_init_esp+0x28>)
 8004132:	f001 fb41 	bl	80057b8 <HAL_GPIO_WritePin>
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	2000041c 	.word	0x2000041c
 8004140:	20000468 	.word	0x20000468
 8004144:	40021400 	.word	0x40021400

08004148 <HAL_UART_RxCpltCallback>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart2, bytes, size, 10);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004148:	b590      	push	{r4, r7, lr}
 800414a:	b089      	sub	sp, #36	@ 0x24
 800414c:	af04      	add	r7, sp, #16
 800414e:	6078      	str	r0, [r7, #4]
//
//		// turn on the receive interrupt
//		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
//	}

	if(huart->Instance == USART2){
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a50      	ldr	r2, [pc, #320]	@ (8004298 <HAL_UART_RxCpltCallback+0x150>)
 8004156:	4293      	cmp	r3, r2
 8004158:	f040 809a 	bne.w	8004290 <HAL_UART_RxCpltCallback+0x148>
//		if(receive_buffer2 == 'O') check_esp = 1;
//		else if(receive_buffer2 == 'a') light_status = 0;
//		else if(receive_buffer2 == 'A') light_status = 1;
		if(receive_buffer2 == 'O'){
 800415c:	4b4f      	ldr	r3, [pc, #316]	@ (800429c <HAL_UART_RxCpltCallback+0x154>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b4f      	cmp	r3, #79	@ 0x4f
 8004162:	d10a      	bne.n	800417a <HAL_UART_RxCpltCallback+0x32>
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8004164:	2110      	movs	r1, #16
 8004166:	484e      	ldr	r0, [pc, #312]	@ (80042a0 <HAL_UART_RxCpltCallback+0x158>)
 8004168:	f001 fb3f 	bl	80057ea <HAL_GPIO_TogglePin>
//			lcd_ShowIntNum(10, 200, receive_buffer2, 10, WHITE, BLACK, 24);
			flag_receive_time = 1 - flag_receive_time;
 800416c:	4b4d      	ldr	r3, [pc, #308]	@ (80042a4 <HAL_UART_RxCpltCallback+0x15c>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	f1c3 0301 	rsb	r3, r3, #1
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4b4b      	ldr	r3, [pc, #300]	@ (80042a4 <HAL_UART_RxCpltCallback+0x15c>)
 8004178:	701a      	strb	r2, [r3, #0]
		}
		if(flag_receive_time == 1){
 800417a:	4b4a      	ldr	r3, [pc, #296]	@ (80042a4 <HAL_UART_RxCpltCallback+0x15c>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b01      	cmp	r3, #1
 8004180:	f040 8081 	bne.w	8004286 <HAL_UART_RxCpltCallback+0x13e>
			if(receive_buffer2 == 'K'){
 8004184:	4b45      	ldr	r3, [pc, #276]	@ (800429c <HAL_UART_RxCpltCallback+0x154>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b4b      	cmp	r3, #75	@ 0x4b
 800418a:	d16d      	bne.n	8004268 <HAL_UART_RxCpltCallback+0x120>
				flag_receive_time = 1 - flag_receive_time;
 800418c:	4b45      	ldr	r3, [pc, #276]	@ (80042a4 <HAL_UART_RxCpltCallback+0x15c>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	f1c3 0301 	rsb	r3, r3, #1
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4b43      	ldr	r3, [pc, #268]	@ (80042a4 <HAL_UART_RxCpltCallback+0x15c>)
 8004198:	701a      	strb	r2, [r3, #0]
				id = 0;
 800419a:	4b43      	ldr	r3, [pc, #268]	@ (80042a8 <HAL_UART_RxCpltCallback+0x160>)
 800419c:	2200      	movs	r2, #0
 800419e:	801a      	strh	r2, [r3, #0]
//				lcd_ShowStr(0, 200, msg_time, WHITE, BLACK, 24, 0);
//				lcd_ShowChar(0, 270, msg_time[9], WHITE, BLACK, 24, 1);
				uint8_t _sec = msg_time[18] - '0' + (msg_time[17] - '0')*10;
 80041a0:	4b42      	ldr	r3, [pc, #264]	@ (80042ac <HAL_UART_RxCpltCallback+0x164>)
 80041a2:	7c9a      	ldrb	r2, [r3, #18]
 80041a4:	4b41      	ldr	r3, [pc, #260]	@ (80042ac <HAL_UART_RxCpltCallback+0x164>)
 80041a6:	7c5b      	ldrb	r3, [r3, #17]
 80041a8:	4619      	mov	r1, r3
 80041aa:	0089      	lsls	r1, r1, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	3b10      	subs	r3, #16
 80041b8:	73fb      	strb	r3, [r7, #15]
				uint8_t _min = msg_time[15] - '0' + (msg_time[14] - '0')*10;
 80041ba:	4b3c      	ldr	r3, [pc, #240]	@ (80042ac <HAL_UART_RxCpltCallback+0x164>)
 80041bc:	7bda      	ldrb	r2, [r3, #15]
 80041be:	4b3b      	ldr	r3, [pc, #236]	@ (80042ac <HAL_UART_RxCpltCallback+0x164>)
 80041c0:	7b9b      	ldrb	r3, [r3, #14]
 80041c2:	4619      	mov	r1, r3
 80041c4:	0089      	lsls	r1, r1, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	4413      	add	r3, r2
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	3b10      	subs	r3, #16
 80041d2:	73bb      	strb	r3, [r7, #14]
				uint8_t _hours = msg_time[12] - '0' + (msg_time[11] - '0')*10;
 80041d4:	4b35      	ldr	r3, [pc, #212]	@ (80042ac <HAL_UART_RxCpltCallback+0x164>)
 80041d6:	7b1a      	ldrb	r2, [r3, #12]
 80041d8:	4b34      	ldr	r3, [pc, #208]	@ (80042ac <HAL_UART_RxCpltCallback+0x164>)
 80041da:	7adb      	ldrb	r3, [r3, #11]
 80041dc:	4619      	mov	r1, r3
 80041de:	0089      	lsls	r1, r1, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	3b10      	subs	r3, #16
 80041ec:	737b      	strb	r3, [r7, #13]
				uint8_t _month = msg_time[6] - '0' + (msg_time[5] - '0')*10;
 80041ee:	4b2f      	ldr	r3, [pc, #188]	@ (80042ac <HAL_UART_RxCpltCallback+0x164>)
 80041f0:	799a      	ldrb	r2, [r3, #6]
 80041f2:	4b2e      	ldr	r3, [pc, #184]	@ (80042ac <HAL_UART_RxCpltCallback+0x164>)
 80041f4:	795b      	ldrb	r3, [r3, #5]
 80041f6:	4619      	mov	r1, r3
 80041f8:	0089      	lsls	r1, r1, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	4413      	add	r3, r2
 8004202:	b2db      	uxtb	r3, r3
 8004204:	3b10      	subs	r3, #16
 8004206:	733b      	strb	r3, [r7, #12]
				uint8_t _year = msg_time[3] - '0' + (msg_time[2] - '0')*10;
 8004208:	4b28      	ldr	r3, [pc, #160]	@ (80042ac <HAL_UART_RxCpltCallback+0x164>)
 800420a:	78da      	ldrb	r2, [r3, #3]
 800420c:	4b27      	ldr	r3, [pc, #156]	@ (80042ac <HAL_UART_RxCpltCallback+0x164>)
 800420e:	789b      	ldrb	r3, [r3, #2]
 8004210:	4619      	mov	r1, r3
 8004212:	0089      	lsls	r1, r1, #2
 8004214:	440b      	add	r3, r1
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	b2db      	uxtb	r3, r3
 800421a:	4413      	add	r3, r2
 800421c:	b2db      	uxtb	r3, r3
 800421e:	3b10      	subs	r3, #16
 8004220:	72fb      	strb	r3, [r7, #11]
				uint8_t _date = msg_time[9] - '0' + (msg_time[8] - '0')*10;
 8004222:	4b22      	ldr	r3, [pc, #136]	@ (80042ac <HAL_UART_RxCpltCallback+0x164>)
 8004224:	7a5a      	ldrb	r2, [r3, #9]
 8004226:	4b21      	ldr	r3, [pc, #132]	@ (80042ac <HAL_UART_RxCpltCallback+0x164>)
 8004228:	7a1b      	ldrb	r3, [r3, #8]
 800422a:	4619      	mov	r1, r3
 800422c:	0089      	lsls	r1, r1, #2
 800422e:	440b      	add	r3, r1
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	b2db      	uxtb	r3, r3
 8004234:	4413      	add	r3, r2
 8004236:	b2db      	uxtb	r3, r3
 8004238:	3b10      	subs	r3, #16
 800423a:	72bb      	strb	r3, [r7, #10]

				uint8_t _day = getDayOfWeek(_date, _month, _year);
 800423c:	7abb      	ldrb	r3, [r7, #10]
 800423e:	7b39      	ldrb	r1, [r7, #12]
 8004240:	7afa      	ldrb	r2, [r7, #11]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fefe 	bl	8004044 <getDayOfWeek>
 8004248:	4603      	mov	r3, r0
 800424a:	727b      	strb	r3, [r7, #9]

//				lcd_ShowIntNum(0, 220, _hours, 2, WHITE, BLACK, 24);
				update_Time(_day, _date, _month, _year, _sec, _min, _hours);
 800424c:	7afc      	ldrb	r4, [r7, #11]
 800424e:	7b3a      	ldrb	r2, [r7, #12]
 8004250:	7ab9      	ldrb	r1, [r7, #10]
 8004252:	7a78      	ldrb	r0, [r7, #9]
 8004254:	7b7b      	ldrb	r3, [r7, #13]
 8004256:	9302      	str	r3, [sp, #8]
 8004258:	7bbb      	ldrb	r3, [r7, #14]
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	4623      	mov	r3, r4
 8004262:	f7fd f885 	bl	8001370 <update_Time>
 8004266:	e00e      	b.n	8004286 <HAL_UART_RxCpltCallback+0x13e>
//					lcd_ShowStr(0, 200, "Null 0", WHITE, BLACK, 24, 0);
//				if(msg[1] == '\0')
//					lcd_ShowStr(0, 250, "Null 1", WHITE, BLACK, 24, 0);4

			}else{
				if(receive_buffer2 != 'O'){
 8004268:	4b0c      	ldr	r3, [pc, #48]	@ (800429c <HAL_UART_RxCpltCallback+0x154>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b4f      	cmp	r3, #79	@ 0x4f
 800426e:	d00a      	beq.n	8004286 <HAL_UART_RxCpltCallback+0x13e>
					msg_time[id++] = receive_buffer2;
 8004270:	4b0d      	ldr	r3, [pc, #52]	@ (80042a8 <HAL_UART_RxCpltCallback+0x160>)
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	b291      	uxth	r1, r2
 8004278:	4a0b      	ldr	r2, [pc, #44]	@ (80042a8 <HAL_UART_RxCpltCallback+0x160>)
 800427a:	8011      	strh	r1, [r2, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	4b07      	ldr	r3, [pc, #28]	@ (800429c <HAL_UART_RxCpltCallback+0x154>)
 8004280:	7819      	ldrb	r1, [r3, #0]
 8004282:	4b0a      	ldr	r3, [pc, #40]	@ (80042ac <HAL_UART_RxCpltCallback+0x164>)
 8004284:	5499      	strb	r1, [r3, r2]
				}
			}
		}
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8004286:	2201      	movs	r2, #1
 8004288:	4904      	ldr	r1, [pc, #16]	@ (800429c <HAL_UART_RxCpltCallback+0x154>)
 800428a:	4809      	ldr	r0, [pc, #36]	@ (80042b0 <HAL_UART_RxCpltCallback+0x168>)
 800428c:	f004 ffb8 	bl	8009200 <HAL_UART_Receive_IT>
	}
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	bd90      	pop	{r4, r7, pc}
 8004298:	40004400 	.word	0x40004400
 800429c:	2000041c 	.word	0x2000041c
 80042a0:	40021000 	.word	0x40021000
 80042a4:	2000041d 	.word	0x2000041d
 80042a8:	2000041e 	.word	0x2000041e
 80042ac:	200003b8 	.word	0x200003b8
 80042b0:	20000468 	.word	0x20000468

080042b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80042b8:	4b11      	ldr	r3, [pc, #68]	@ (8004300 <MX_USART1_UART_Init+0x4c>)
 80042ba:	4a12      	ldr	r2, [pc, #72]	@ (8004304 <MX_USART1_UART_Init+0x50>)
 80042bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80042be:	4b10      	ldr	r3, [pc, #64]	@ (8004300 <MX_USART1_UART_Init+0x4c>)
 80042c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80042c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004300 <MX_USART1_UART_Init+0x4c>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80042cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004300 <MX_USART1_UART_Init+0x4c>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80042d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004300 <MX_USART1_UART_Init+0x4c>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80042d8:	4b09      	ldr	r3, [pc, #36]	@ (8004300 <MX_USART1_UART_Init+0x4c>)
 80042da:	220c      	movs	r2, #12
 80042dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042de:	4b08      	ldr	r3, [pc, #32]	@ (8004300 <MX_USART1_UART_Init+0x4c>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042e4:	4b06      	ldr	r3, [pc, #24]	@ (8004300 <MX_USART1_UART_Init+0x4c>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80042ea:	4805      	ldr	r0, [pc, #20]	@ (8004300 <MX_USART1_UART_Init+0x4c>)
 80042ec:	f004 ff38 	bl	8009160 <HAL_UART_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80042f6:	f7fe fbd9 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042fa:	bf00      	nop
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000420 	.word	0x20000420
 8004304:	40011000 	.word	0x40011000

08004308 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800430c:	4b11      	ldr	r3, [pc, #68]	@ (8004354 <MX_USART2_UART_Init+0x4c>)
 800430e:	4a12      	ldr	r2, [pc, #72]	@ (8004358 <MX_USART2_UART_Init+0x50>)
 8004310:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004312:	4b10      	ldr	r3, [pc, #64]	@ (8004354 <MX_USART2_UART_Init+0x4c>)
 8004314:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004318:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800431a:	4b0e      	ldr	r3, [pc, #56]	@ (8004354 <MX_USART2_UART_Init+0x4c>)
 800431c:	2200      	movs	r2, #0
 800431e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004320:	4b0c      	ldr	r3, [pc, #48]	@ (8004354 <MX_USART2_UART_Init+0x4c>)
 8004322:	2200      	movs	r2, #0
 8004324:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004326:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <MX_USART2_UART_Init+0x4c>)
 8004328:	2200      	movs	r2, #0
 800432a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800432c:	4b09      	ldr	r3, [pc, #36]	@ (8004354 <MX_USART2_UART_Init+0x4c>)
 800432e:	220c      	movs	r2, #12
 8004330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004332:	4b08      	ldr	r3, [pc, #32]	@ (8004354 <MX_USART2_UART_Init+0x4c>)
 8004334:	2200      	movs	r2, #0
 8004336:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004338:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <MX_USART2_UART_Init+0x4c>)
 800433a:	2200      	movs	r2, #0
 800433c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800433e:	4805      	ldr	r0, [pc, #20]	@ (8004354 <MX_USART2_UART_Init+0x4c>)
 8004340:	f004 ff0e 	bl	8009160 <HAL_UART_Init>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800434a:	f7fe fbaf 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000468 	.word	0x20000468
 8004358:	40004400 	.word	0x40004400

0800435c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08c      	sub	sp, #48	@ 0x30
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004364:	f107 031c 	add.w	r3, r7, #28
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a3a      	ldr	r2, [pc, #232]	@ (8004464 <HAL_UART_MspInit+0x108>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d135      	bne.n	80043ea <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	4b39      	ldr	r3, [pc, #228]	@ (8004468 <HAL_UART_MspInit+0x10c>)
 8004384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004386:	4a38      	ldr	r2, [pc, #224]	@ (8004468 <HAL_UART_MspInit+0x10c>)
 8004388:	f043 0310 	orr.w	r3, r3, #16
 800438c:	6453      	str	r3, [r2, #68]	@ 0x44
 800438e:	4b36      	ldr	r3, [pc, #216]	@ (8004468 <HAL_UART_MspInit+0x10c>)
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	4b32      	ldr	r3, [pc, #200]	@ (8004468 <HAL_UART_MspInit+0x10c>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a2:	4a31      	ldr	r2, [pc, #196]	@ (8004468 <HAL_UART_MspInit+0x10c>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004468 <HAL_UART_MspInit+0x10c>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80043ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043bc:	2302      	movs	r3, #2
 80043be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c4:	2303      	movs	r3, #3
 80043c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043c8:	2307      	movs	r3, #7
 80043ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043cc:	f107 031c 	add.w	r3, r7, #28
 80043d0:	4619      	mov	r1, r3
 80043d2:	4826      	ldr	r0, [pc, #152]	@ (800446c <HAL_UART_MspInit+0x110>)
 80043d4:	f001 f83c 	bl	8005450 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80043d8:	2200      	movs	r2, #0
 80043da:	2100      	movs	r1, #0
 80043dc:	2025      	movs	r0, #37	@ 0x25
 80043de:	f000 fc84 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043e2:	2025      	movs	r0, #37	@ 0x25
 80043e4:	f000 fc9d 	bl	8004d22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80043e8:	e038      	b.n	800445c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a20      	ldr	r2, [pc, #128]	@ (8004470 <HAL_UART_MspInit+0x114>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d133      	bne.n	800445c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004468 <HAL_UART_MspInit+0x10c>)
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004468 <HAL_UART_MspInit+0x10c>)
 80043fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004402:	6413      	str	r3, [r2, #64]	@ 0x40
 8004404:	4b18      	ldr	r3, [pc, #96]	@ (8004468 <HAL_UART_MspInit+0x10c>)
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	4b14      	ldr	r3, [pc, #80]	@ (8004468 <HAL_UART_MspInit+0x10c>)
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004418:	4a13      	ldr	r2, [pc, #76]	@ (8004468 <HAL_UART_MspInit+0x10c>)
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004420:	4b11      	ldr	r3, [pc, #68]	@ (8004468 <HAL_UART_MspInit+0x10c>)
 8004422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800442c:	230c      	movs	r3, #12
 800442e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004430:	2302      	movs	r3, #2
 8004432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004434:	2300      	movs	r3, #0
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004438:	2303      	movs	r3, #3
 800443a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800443c:	2307      	movs	r3, #7
 800443e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004440:	f107 031c 	add.w	r3, r7, #28
 8004444:	4619      	mov	r1, r3
 8004446:	4809      	ldr	r0, [pc, #36]	@ (800446c <HAL_UART_MspInit+0x110>)
 8004448:	f001 f802 	bl	8005450 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800444c:	2200      	movs	r2, #0
 800444e:	2100      	movs	r1, #0
 8004450:	2026      	movs	r0, #38	@ 0x26
 8004452:	f000 fc4a 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004456:	2026      	movs	r0, #38	@ 0x26
 8004458:	f000 fc63 	bl	8004d22 <HAL_NVIC_EnableIRQ>
}
 800445c:	bf00      	nop
 800445e:	3730      	adds	r7, #48	@ 0x30
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40011000 	.word	0x40011000
 8004468:	40023800 	.word	0x40023800
 800446c:	40020000 	.word	0x40020000
 8004470:	40004400 	.word	0x40004400

08004474 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	0092      	lsls	r2, r2, #2
 8004488:	4413      	add	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	b2da      	uxtb	r2, r3
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	b2db      	uxtb	r3, r3
 8004496:	4413      	add	r3, r2
 8004498:	b2db      	uxtb	r3, r3
}
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	4a0d      	ldr	r2, [pc, #52]	@ (80044ec <DEC2BCD+0x44>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	08db      	lsrs	r3, r3, #3
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	b258      	sxtb	r0, r3
 80044c2:	79fa      	ldrb	r2, [r7, #7]
 80044c4:	4b09      	ldr	r3, [pc, #36]	@ (80044ec <DEC2BCD+0x44>)
 80044c6:	fba3 1302 	umull	r1, r3, r3, r2
 80044ca:	08d9      	lsrs	r1, r3, #3
 80044cc:	460b      	mov	r3, r1
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	b25b      	sxtb	r3, r3
 80044da:	4303      	orrs	r3, r0
 80044dc:	b25b      	sxtb	r3, r3
 80044de:	b2db      	uxtb	r3, r3
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	cccccccd 	.word	0xcccccccd

080044f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004528 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044f4:	480d      	ldr	r0, [pc, #52]	@ (800452c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044f6:	490e      	ldr	r1, [pc, #56]	@ (8004530 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044fc:	e002      	b.n	8004504 <LoopCopyDataInit>

080044fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004502:	3304      	adds	r3, #4

08004504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004508:	d3f9      	bcc.n	80044fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800450a:	4a0b      	ldr	r2, [pc, #44]	@ (8004538 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800450c:	4c0b      	ldr	r4, [pc, #44]	@ (800453c <LoopFillZerobss+0x26>)
  movs r3, #0
 800450e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004510:	e001      	b.n	8004516 <LoopFillZerobss>

08004512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004514:	3204      	adds	r2, #4

08004516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004518:	d3fb      	bcc.n	8004512 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800451a:	f7fe fd29 	bl	8002f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800451e:	f005 fe79 	bl	800a214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004522:	f7fe f887 	bl	8002634 <main>
  bx  lr    
 8004526:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004528:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800452c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004530:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8004534:	0800e8b8 	.word	0x0800e8b8
  ldr r2, =_sbss
 8004538:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 800453c:	200005ec 	.word	0x200005ec

08004540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004540:	e7fe      	b.n	8004540 <ADC_IRQHandler>
	...

08004544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004548:	4b0e      	ldr	r3, [pc, #56]	@ (8004584 <HAL_Init+0x40>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a0d      	ldr	r2, [pc, #52]	@ (8004584 <HAL_Init+0x40>)
 800454e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004554:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <HAL_Init+0x40>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a0a      	ldr	r2, [pc, #40]	@ (8004584 <HAL_Init+0x40>)
 800455a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800455e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004560:	4b08      	ldr	r3, [pc, #32]	@ (8004584 <HAL_Init+0x40>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a07      	ldr	r2, [pc, #28]	@ (8004584 <HAL_Init+0x40>)
 8004566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800456a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800456c:	2003      	movs	r0, #3
 800456e:	f000 fbb1 	bl	8004cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004572:	200f      	movs	r0, #15
 8004574:	f000 f808 	bl	8004588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004578:	f7fe fc70 	bl	8002e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40023c00 	.word	0x40023c00

08004588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004590:	4b12      	ldr	r3, [pc, #72]	@ (80045dc <HAL_InitTick+0x54>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	4b12      	ldr	r3, [pc, #72]	@ (80045e0 <HAL_InitTick+0x58>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	4619      	mov	r1, r3
 800459a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800459e:	fbb3 f3f1 	udiv	r3, r3, r1
 80045a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fbc9 	bl	8004d3e <HAL_SYSTICK_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e00e      	b.n	80045d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b0f      	cmp	r3, #15
 80045ba:	d80a      	bhi.n	80045d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045bc:	2200      	movs	r2, #0
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	f000 fb91 	bl	8004cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045c8:	4a06      	ldr	r2, [pc, #24]	@ (80045e4 <HAL_InitTick+0x5c>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000010 	.word	0x20000010
 80045e0:	20000050 	.word	0x20000050
 80045e4:	2000004c 	.word	0x2000004c

080045e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045ec:	4b06      	ldr	r3, [pc, #24]	@ (8004608 <HAL_IncTick+0x20>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	4b06      	ldr	r3, [pc, #24]	@ (800460c <HAL_IncTick+0x24>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4413      	add	r3, r2
 80045f8:	4a04      	ldr	r2, [pc, #16]	@ (800460c <HAL_IncTick+0x24>)
 80045fa:	6013      	str	r3, [r2, #0]
}
 80045fc:	bf00      	nop
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20000050 	.word	0x20000050
 800460c:	200004b0 	.word	0x200004b0

08004610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return uwTick;
 8004614:	4b03      	ldr	r3, [pc, #12]	@ (8004624 <HAL_GetTick+0x14>)
 8004616:	681b      	ldr	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	200004b0 	.word	0x200004b0

08004628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004630:	f7ff ffee 	bl	8004610 <HAL_GetTick>
 8004634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d005      	beq.n	800464e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004642:	4b0a      	ldr	r3, [pc, #40]	@ (800466c <HAL_Delay+0x44>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800464e:	bf00      	nop
 8004650:	f7ff ffde 	bl	8004610 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	429a      	cmp	r2, r3
 800465e:	d8f7      	bhi.n	8004650 <HAL_Delay+0x28>
  {
  }
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000050 	.word	0x20000050

08004670 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e033      	b.n	80046ee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fc fc30 	bl	8000ef4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	f003 0310 	and.w	r3, r3, #16
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d118      	bne.n	80046e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80046b6:	f023 0302 	bic.w	r3, r3, #2
 80046ba:	f043 0202 	orr.w	r2, r3, #2
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f93a 	bl	800493c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	f023 0303 	bic.w	r3, r3, #3
 80046d6:	f043 0201 	orr.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80046de:	e001      	b.n	80046e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x1c>
 8004710:	2302      	movs	r3, #2
 8004712:	e105      	b.n	8004920 <HAL_ADC_ConfigChannel+0x228>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b09      	cmp	r3, #9
 8004722:	d925      	bls.n	8004770 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68d9      	ldr	r1, [r3, #12]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	b29b      	uxth	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	4613      	mov	r3, r2
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	4413      	add	r3, r2
 8004738:	3b1e      	subs	r3, #30
 800473a:	2207      	movs	r2, #7
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43da      	mvns	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	400a      	ands	r2, r1
 8004748:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68d9      	ldr	r1, [r3, #12]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	4618      	mov	r0, r3
 800475c:	4603      	mov	r3, r0
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	4403      	add	r3, r0
 8004762:	3b1e      	subs	r3, #30
 8004764:	409a      	lsls	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	e022      	b.n	80047b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6919      	ldr	r1, [r3, #16]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	4613      	mov	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	4413      	add	r3, r2
 8004784:	2207      	movs	r2, #7
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43da      	mvns	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	400a      	ands	r2, r1
 8004792:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6919      	ldr	r1, [r3, #16]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	4618      	mov	r0, r3
 80047a6:	4603      	mov	r3, r0
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	4403      	add	r3, r0
 80047ac:	409a      	lsls	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b06      	cmp	r3, #6
 80047bc:	d824      	bhi.n	8004808 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	3b05      	subs	r3, #5
 80047d0:	221f      	movs	r2, #31
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	43da      	mvns	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	400a      	ands	r2, r1
 80047de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	4618      	mov	r0, r3
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	3b05      	subs	r3, #5
 80047fa:	fa00 f203 	lsl.w	r2, r0, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	635a      	str	r2, [r3, #52]	@ 0x34
 8004806:	e04c      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	d824      	bhi.n	800485a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	3b23      	subs	r3, #35	@ 0x23
 8004822:	221f      	movs	r2, #31
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	43da      	mvns	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	400a      	ands	r2, r1
 8004830:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	4618      	mov	r0, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	3b23      	subs	r3, #35	@ 0x23
 800484c:	fa00 f203 	lsl.w	r2, r0, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	631a      	str	r2, [r3, #48]	@ 0x30
 8004858:	e023      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	3b41      	subs	r3, #65	@ 0x41
 800486c:	221f      	movs	r2, #31
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43da      	mvns	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	400a      	ands	r2, r1
 800487a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	4618      	mov	r0, r3
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	3b41      	subs	r3, #65	@ 0x41
 8004896:	fa00 f203 	lsl.w	r2, r0, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048a2:	4b22      	ldr	r3, [pc, #136]	@ (800492c <HAL_ADC_ConfigChannel+0x234>)
 80048a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a21      	ldr	r2, [pc, #132]	@ (8004930 <HAL_ADC_ConfigChannel+0x238>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d109      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x1cc>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b12      	cmp	r3, #18
 80048b6:	d105      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a19      	ldr	r2, [pc, #100]	@ (8004930 <HAL_ADC_ConfigChannel+0x238>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d123      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x21e>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b10      	cmp	r3, #16
 80048d4:	d003      	beq.n	80048de <HAL_ADC_ConfigChannel+0x1e6>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b11      	cmp	r3, #17
 80048dc:	d11b      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b10      	cmp	r3, #16
 80048f0:	d111      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048f2:	4b10      	ldr	r3, [pc, #64]	@ (8004934 <HAL_ADC_ConfigChannel+0x23c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a10      	ldr	r2, [pc, #64]	@ (8004938 <HAL_ADC_ConfigChannel+0x240>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	0c9a      	lsrs	r2, r3, #18
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004908:	e002      	b.n	8004910 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	3b01      	subs	r3, #1
 800490e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f9      	bne.n	800490a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	40012300 	.word	0x40012300
 8004930:	40012000 	.word	0x40012000
 8004934:	20000010 	.word	0x20000010
 8004938:	431bde83 	.word	0x431bde83

0800493c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004944:	4b79      	ldr	r3, [pc, #484]	@ (8004b2c <ADC_Init+0x1f0>)
 8004946:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	431a      	orrs	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004970:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6859      	ldr	r1, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	021a      	lsls	r2, r3, #8
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6859      	ldr	r1, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6899      	ldr	r1, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ce:	4a58      	ldr	r2, [pc, #352]	@ (8004b30 <ADC_Init+0x1f4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d022      	beq.n	8004a1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80049e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6899      	ldr	r1, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6899      	ldr	r1, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	609a      	str	r2, [r3, #8]
 8004a18:	e00f      	b.n	8004a3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004a38:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0202 	bic.w	r2, r2, #2
 8004a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6899      	ldr	r1, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	7e1b      	ldrb	r3, [r3, #24]
 8004a54:	005a      	lsls	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01b      	beq.n	8004aa0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a76:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004a86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6859      	ldr	r1, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a92:	3b01      	subs	r3, #1
 8004a94:	035a      	lsls	r2, r3, #13
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	e007      	b.n	8004ab0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004abe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	051a      	lsls	r2, r3, #20
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6899      	ldr	r1, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004af2:	025a      	lsls	r2, r3, #9
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6899      	ldr	r1, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	029a      	lsls	r2, r3, #10
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	609a      	str	r2, [r3, #8]
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	40012300 	.word	0x40012300
 8004b30:	0f000001 	.word	0x0f000001

08004b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b44:	4b0c      	ldr	r3, [pc, #48]	@ (8004b78 <__NVIC_SetPriorityGrouping+0x44>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b50:	4013      	ands	r3, r2
 8004b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b66:	4a04      	ldr	r2, [pc, #16]	@ (8004b78 <__NVIC_SetPriorityGrouping+0x44>)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	60d3      	str	r3, [r2, #12]
}
 8004b6c:	bf00      	nop
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	e000ed00 	.word	0xe000ed00

08004b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b80:	4b04      	ldr	r3, [pc, #16]	@ (8004b94 <__NVIC_GetPriorityGrouping+0x18>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	0a1b      	lsrs	r3, r3, #8
 8004b86:	f003 0307 	and.w	r3, r3, #7
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	e000ed00 	.word	0xe000ed00

08004b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	db0b      	blt.n	8004bc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	f003 021f 	and.w	r2, r3, #31
 8004bb0:	4907      	ldr	r1, [pc, #28]	@ (8004bd0 <__NVIC_EnableIRQ+0x38>)
 8004bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	2001      	movs	r0, #1
 8004bba:	fa00 f202 	lsl.w	r2, r0, r2
 8004bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	e000e100 	.word	0xe000e100

08004bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	6039      	str	r1, [r7, #0]
 8004bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	db0a      	blt.n	8004bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	490c      	ldr	r1, [pc, #48]	@ (8004c20 <__NVIC_SetPriority+0x4c>)
 8004bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf2:	0112      	lsls	r2, r2, #4
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bfc:	e00a      	b.n	8004c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	4908      	ldr	r1, [pc, #32]	@ (8004c24 <__NVIC_SetPriority+0x50>)
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	3b04      	subs	r3, #4
 8004c0c:	0112      	lsls	r2, r2, #4
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	440b      	add	r3, r1
 8004c12:	761a      	strb	r2, [r3, #24]
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	e000e100 	.word	0xe000e100
 8004c24:	e000ed00 	.word	0xe000ed00

08004c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b089      	sub	sp, #36	@ 0x24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f1c3 0307 	rsb	r3, r3, #7
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	bf28      	it	cs
 8004c46:	2304      	movcs	r3, #4
 8004c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	2b06      	cmp	r3, #6
 8004c50:	d902      	bls.n	8004c58 <NVIC_EncodePriority+0x30>
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	3b03      	subs	r3, #3
 8004c56:	e000      	b.n	8004c5a <NVIC_EncodePriority+0x32>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	43da      	mvns	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c70:	f04f 31ff 	mov.w	r1, #4294967295
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7a:	43d9      	mvns	r1, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c80:	4313      	orrs	r3, r2
         );
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3724      	adds	r7, #36	@ 0x24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
	...

08004c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ca0:	d301      	bcc.n	8004ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e00f      	b.n	8004cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd0 <SysTick_Config+0x40>)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cae:	210f      	movs	r1, #15
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	f7ff ff8e 	bl	8004bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cb8:	4b05      	ldr	r3, [pc, #20]	@ (8004cd0 <SysTick_Config+0x40>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cbe:	4b04      	ldr	r3, [pc, #16]	@ (8004cd0 <SysTick_Config+0x40>)
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	e000e010 	.word	0xe000e010

08004cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff ff29 	bl	8004b34 <__NVIC_SetPriorityGrouping>
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b086      	sub	sp, #24
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
 8004cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cfc:	f7ff ff3e 	bl	8004b7c <__NVIC_GetPriorityGrouping>
 8004d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	6978      	ldr	r0, [r7, #20]
 8004d08:	f7ff ff8e 	bl	8004c28 <NVIC_EncodePriority>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff ff5d 	bl	8004bd4 <__NVIC_SetPriority>
}
 8004d1a:	bf00      	nop
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	4603      	mov	r3, r0
 8004d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff ff31 	bl	8004b98 <__NVIC_EnableIRQ>
}
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff ffa2 	bl	8004c90 <SysTick_Config>
 8004d4c:	4603      	mov	r3, r0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d64:	f7ff fc54 	bl	8004610 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e099      	b.n	8004ea8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d94:	e00f      	b.n	8004db6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d96:	f7ff fc3b 	bl	8004610 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b05      	cmp	r3, #5
 8004da2:	d908      	bls.n	8004db6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2203      	movs	r2, #3
 8004dae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e078      	b.n	8004ea8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e8      	bne.n	8004d96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	4b38      	ldr	r3, [pc, #224]	@ (8004eb0 <HAL_DMA_Init+0x158>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d107      	bne.n	8004e20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f023 0307 	bic.w	r3, r3, #7
 8004e36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d117      	bne.n	8004e7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00e      	beq.n	8004e7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fa7b 	bl	8005358 <DMA_CheckFifoParam>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d008      	beq.n	8004e7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2240      	movs	r2, #64	@ 0x40
 8004e6c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e76:	2301      	movs	r3, #1
 8004e78:	e016      	b.n	8004ea8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fa32 	bl	80052ec <DMA_CalcBaseAndBitshift>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e90:	223f      	movs	r2, #63	@ 0x3f
 8004e92:	409a      	lsls	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	f010803f 	.word	0xf010803f

08004eb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ec2:	f7ff fba5 	bl	8004610 <HAL_GetTick>
 8004ec6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d008      	beq.n	8004ee6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2280      	movs	r2, #128	@ 0x80
 8004ed8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e052      	b.n	8004f8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0216 	bic.w	r2, r2, #22
 8004ef4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695a      	ldr	r2, [r3, #20]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d103      	bne.n	8004f16 <HAL_DMA_Abort+0x62>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d007      	beq.n	8004f26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0208 	bic.w	r2, r2, #8
 8004f24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0201 	bic.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f36:	e013      	b.n	8004f60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f38:	f7ff fb6a 	bl	8004610 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b05      	cmp	r3, #5
 8004f44:	d90c      	bls.n	8004f60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2203      	movs	r2, #3
 8004f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e015      	b.n	8004f8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e4      	bne.n	8004f38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f72:	223f      	movs	r2, #63	@ 0x3f
 8004f74:	409a      	lsls	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d004      	beq.n	8004fb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2280      	movs	r2, #128	@ 0x80
 8004fac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e00c      	b.n	8004fcc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2205      	movs	r2, #5
 8004fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0201 	bic.w	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fe4:	4b8e      	ldr	r3, [pc, #568]	@ (8005220 <HAL_DMA_IRQHandler+0x248>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a8e      	ldr	r2, [pc, #568]	@ (8005224 <HAL_DMA_IRQHandler+0x24c>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	0a9b      	lsrs	r3, r3, #10
 8004ff0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005002:	2208      	movs	r2, #8
 8005004:	409a      	lsls	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4013      	ands	r3, r2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d01a      	beq.n	8005044 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d013      	beq.n	8005044 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0204 	bic.w	r2, r2, #4
 800502a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005030:	2208      	movs	r2, #8
 8005032:	409a      	lsls	r2, r3
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503c:	f043 0201 	orr.w	r2, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005048:	2201      	movs	r2, #1
 800504a:	409a      	lsls	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4013      	ands	r3, r2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d012      	beq.n	800507a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005066:	2201      	movs	r2, #1
 8005068:	409a      	lsls	r2, r3
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005072:	f043 0202 	orr.w	r2, r3, #2
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507e:	2204      	movs	r2, #4
 8005080:	409a      	lsls	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4013      	ands	r3, r2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d012      	beq.n	80050b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00b      	beq.n	80050b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800509c:	2204      	movs	r2, #4
 800509e:	409a      	lsls	r2, r3
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a8:	f043 0204 	orr.w	r2, r3, #4
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b4:	2210      	movs	r2, #16
 80050b6:	409a      	lsls	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d043      	beq.n	8005148 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d03c      	beq.n	8005148 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d2:	2210      	movs	r2, #16
 80050d4:	409a      	lsls	r2, r3
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d018      	beq.n	800511a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d108      	bne.n	8005108 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d024      	beq.n	8005148 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	4798      	blx	r3
 8005106:	e01f      	b.n	8005148 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01b      	beq.n	8005148 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	4798      	blx	r3
 8005118:	e016      	b.n	8005148 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005124:	2b00      	cmp	r3, #0
 8005126:	d107      	bne.n	8005138 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0208 	bic.w	r2, r2, #8
 8005136:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800514c:	2220      	movs	r2, #32
 800514e:	409a      	lsls	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4013      	ands	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 808f 	beq.w	8005278 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 8087 	beq.w	8005278 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516e:	2220      	movs	r2, #32
 8005170:	409a      	lsls	r2, r3
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b05      	cmp	r3, #5
 8005180:	d136      	bne.n	80051f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0216 	bic.w	r2, r2, #22
 8005190:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <HAL_DMA_IRQHandler+0x1da>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d007      	beq.n	80051c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0208 	bic.w	r2, r2, #8
 80051c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c6:	223f      	movs	r2, #63	@ 0x3f
 80051c8:	409a      	lsls	r2, r3
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d07e      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	4798      	blx	r3
        }
        return;
 80051ee:	e079      	b.n	80052e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01d      	beq.n	800523a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10d      	bne.n	8005228 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005210:	2b00      	cmp	r3, #0
 8005212:	d031      	beq.n	8005278 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	4798      	blx	r3
 800521c:	e02c      	b.n	8005278 <HAL_DMA_IRQHandler+0x2a0>
 800521e:	bf00      	nop
 8005220:	20000010 	.word	0x20000010
 8005224:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d023      	beq.n	8005278 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	4798      	blx	r3
 8005238:	e01e      	b.n	8005278 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10f      	bne.n	8005268 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0210 	bic.w	r2, r2, #16
 8005256:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527c:	2b00      	cmp	r3, #0
 800527e:	d032      	beq.n	80052e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d022      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2205      	movs	r2, #5
 8005290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	3301      	adds	r3, #1
 80052a8:	60bb      	str	r3, [r7, #8]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d307      	bcc.n	80052c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f2      	bne.n	80052a4 <HAL_DMA_IRQHandler+0x2cc>
 80052be:	e000      	b.n	80052c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80052c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	4798      	blx	r3
 80052e2:	e000      	b.n	80052e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80052e4:	bf00      	nop
    }
  }
}
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	3b10      	subs	r3, #16
 80052fc:	4a14      	ldr	r2, [pc, #80]	@ (8005350 <DMA_CalcBaseAndBitshift+0x64>)
 80052fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005302:	091b      	lsrs	r3, r3, #4
 8005304:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005306:	4a13      	ldr	r2, [pc, #76]	@ (8005354 <DMA_CalcBaseAndBitshift+0x68>)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b03      	cmp	r3, #3
 8005318:	d909      	bls.n	800532e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005322:	f023 0303 	bic.w	r3, r3, #3
 8005326:	1d1a      	adds	r2, r3, #4
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	659a      	str	r2, [r3, #88]	@ 0x58
 800532c:	e007      	b.n	800533e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005336:	f023 0303 	bic.w	r3, r3, #3
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	aaaaaaab 	.word	0xaaaaaaab
 8005354:	0800e8a0 	.word	0x0800e8a0

08005358 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d11f      	bne.n	80053b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b03      	cmp	r3, #3
 8005376:	d856      	bhi.n	8005426 <DMA_CheckFifoParam+0xce>
 8005378:	a201      	add	r2, pc, #4	@ (adr r2, 8005380 <DMA_CheckFifoParam+0x28>)
 800537a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537e:	bf00      	nop
 8005380:	08005391 	.word	0x08005391
 8005384:	080053a3 	.word	0x080053a3
 8005388:	08005391 	.word	0x08005391
 800538c:	08005427 	.word	0x08005427
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d046      	beq.n	800542a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053a0:	e043      	b.n	800542a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053aa:	d140      	bne.n	800542e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053b0:	e03d      	b.n	800542e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ba:	d121      	bne.n	8005400 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d837      	bhi.n	8005432 <DMA_CheckFifoParam+0xda>
 80053c2:	a201      	add	r2, pc, #4	@ (adr r2, 80053c8 <DMA_CheckFifoParam+0x70>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	080053d9 	.word	0x080053d9
 80053cc:	080053df 	.word	0x080053df
 80053d0:	080053d9 	.word	0x080053d9
 80053d4:	080053f1 	.word	0x080053f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
      break;
 80053dc:	e030      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d025      	beq.n	8005436 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ee:	e022      	b.n	8005436 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053f8:	d11f      	bne.n	800543a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053fe:	e01c      	b.n	800543a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d903      	bls.n	800540e <DMA_CheckFifoParam+0xb6>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b03      	cmp	r3, #3
 800540a:	d003      	beq.n	8005414 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800540c:	e018      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	73fb      	strb	r3, [r7, #15]
      break;
 8005412:	e015      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005418:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00e      	beq.n	800543e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	73fb      	strb	r3, [r7, #15]
      break;
 8005424:	e00b      	b.n	800543e <DMA_CheckFifoParam+0xe6>
      break;
 8005426:	bf00      	nop
 8005428:	e00a      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      break;
 800542a:	bf00      	nop
 800542c:	e008      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      break;
 800542e:	bf00      	nop
 8005430:	e006      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      break;
 8005432:	bf00      	nop
 8005434:	e004      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      break;
 8005436:	bf00      	nop
 8005438:	e002      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      break;   
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
      break;
 800543e:	bf00      	nop
    }
  } 
  
  return status; 
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop

08005450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005450:	b480      	push	{r7}
 8005452:	b089      	sub	sp, #36	@ 0x24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800545e:	2300      	movs	r3, #0
 8005460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005462:	2300      	movs	r3, #0
 8005464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	e16b      	b.n	8005744 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800546c:	2201      	movs	r2, #1
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4013      	ands	r3, r2
 800547e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	429a      	cmp	r2, r3
 8005486:	f040 815a 	bne.w	800573e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b01      	cmp	r3, #1
 8005494:	d005      	beq.n	80054a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d130      	bne.n	8005504 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	2203      	movs	r2, #3
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	43db      	mvns	r3, r3
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	4013      	ands	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054d8:	2201      	movs	r2, #1
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f003 0201 	and.w	r2, r3, #1
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 0303 	and.w	r3, r3, #3
 800550c:	2b03      	cmp	r3, #3
 800550e:	d017      	beq.n	8005540 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	2203      	movs	r2, #3
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	43db      	mvns	r3, r3
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	4013      	ands	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	4313      	orrs	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f003 0303 	and.w	r3, r3, #3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d123      	bne.n	8005594 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	08da      	lsrs	r2, r3, #3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3208      	adds	r2, #8
 8005554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005558:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	220f      	movs	r2, #15
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	43db      	mvns	r3, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4013      	ands	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4313      	orrs	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	08da      	lsrs	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3208      	adds	r2, #8
 800558e:	69b9      	ldr	r1, [r7, #24]
 8005590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	2203      	movs	r2, #3
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	43db      	mvns	r3, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4013      	ands	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f003 0203 	and.w	r2, r3, #3
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80b4 	beq.w	800573e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	4b60      	ldr	r3, [pc, #384]	@ (800575c <HAL_GPIO_Init+0x30c>)
 80055dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055de:	4a5f      	ldr	r2, [pc, #380]	@ (800575c <HAL_GPIO_Init+0x30c>)
 80055e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80055e6:	4b5d      	ldr	r3, [pc, #372]	@ (800575c <HAL_GPIO_Init+0x30c>)
 80055e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005760 <HAL_GPIO_Init+0x310>)
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	089b      	lsrs	r3, r3, #2
 80055f8:	3302      	adds	r3, #2
 80055fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	220f      	movs	r2, #15
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	43db      	mvns	r3, r3
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	4013      	ands	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a52      	ldr	r2, [pc, #328]	@ (8005764 <HAL_GPIO_Init+0x314>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d02b      	beq.n	8005676 <HAL_GPIO_Init+0x226>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a51      	ldr	r2, [pc, #324]	@ (8005768 <HAL_GPIO_Init+0x318>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d025      	beq.n	8005672 <HAL_GPIO_Init+0x222>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a50      	ldr	r2, [pc, #320]	@ (800576c <HAL_GPIO_Init+0x31c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d01f      	beq.n	800566e <HAL_GPIO_Init+0x21e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a4f      	ldr	r2, [pc, #316]	@ (8005770 <HAL_GPIO_Init+0x320>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d019      	beq.n	800566a <HAL_GPIO_Init+0x21a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a4e      	ldr	r2, [pc, #312]	@ (8005774 <HAL_GPIO_Init+0x324>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <HAL_GPIO_Init+0x216>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a4d      	ldr	r2, [pc, #308]	@ (8005778 <HAL_GPIO_Init+0x328>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00d      	beq.n	8005662 <HAL_GPIO_Init+0x212>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a4c      	ldr	r2, [pc, #304]	@ (800577c <HAL_GPIO_Init+0x32c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d007      	beq.n	800565e <HAL_GPIO_Init+0x20e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a4b      	ldr	r2, [pc, #300]	@ (8005780 <HAL_GPIO_Init+0x330>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d101      	bne.n	800565a <HAL_GPIO_Init+0x20a>
 8005656:	2307      	movs	r3, #7
 8005658:	e00e      	b.n	8005678 <HAL_GPIO_Init+0x228>
 800565a:	2308      	movs	r3, #8
 800565c:	e00c      	b.n	8005678 <HAL_GPIO_Init+0x228>
 800565e:	2306      	movs	r3, #6
 8005660:	e00a      	b.n	8005678 <HAL_GPIO_Init+0x228>
 8005662:	2305      	movs	r3, #5
 8005664:	e008      	b.n	8005678 <HAL_GPIO_Init+0x228>
 8005666:	2304      	movs	r3, #4
 8005668:	e006      	b.n	8005678 <HAL_GPIO_Init+0x228>
 800566a:	2303      	movs	r3, #3
 800566c:	e004      	b.n	8005678 <HAL_GPIO_Init+0x228>
 800566e:	2302      	movs	r3, #2
 8005670:	e002      	b.n	8005678 <HAL_GPIO_Init+0x228>
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <HAL_GPIO_Init+0x228>
 8005676:	2300      	movs	r3, #0
 8005678:	69fa      	ldr	r2, [r7, #28]
 800567a:	f002 0203 	and.w	r2, r2, #3
 800567e:	0092      	lsls	r2, r2, #2
 8005680:	4093      	lsls	r3, r2
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	4313      	orrs	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005688:	4935      	ldr	r1, [pc, #212]	@ (8005760 <HAL_GPIO_Init+0x310>)
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	089b      	lsrs	r3, r3, #2
 800568e:	3302      	adds	r3, #2
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005696:	4b3b      	ldr	r3, [pc, #236]	@ (8005784 <HAL_GPIO_Init+0x334>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	43db      	mvns	r3, r3
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	4013      	ands	r3, r2
 80056a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056ba:	4a32      	ldr	r2, [pc, #200]	@ (8005784 <HAL_GPIO_Init+0x334>)
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056c0:	4b30      	ldr	r3, [pc, #192]	@ (8005784 <HAL_GPIO_Init+0x334>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	43db      	mvns	r3, r3
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	4013      	ands	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056e4:	4a27      	ldr	r2, [pc, #156]	@ (8005784 <HAL_GPIO_Init+0x334>)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056ea:	4b26      	ldr	r3, [pc, #152]	@ (8005784 <HAL_GPIO_Init+0x334>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	43db      	mvns	r3, r3
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	4013      	ands	r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800570e:	4a1d      	ldr	r2, [pc, #116]	@ (8005784 <HAL_GPIO_Init+0x334>)
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005714:	4b1b      	ldr	r3, [pc, #108]	@ (8005784 <HAL_GPIO_Init+0x334>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	43db      	mvns	r3, r3
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	4013      	ands	r3, r2
 8005722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005738:	4a12      	ldr	r2, [pc, #72]	@ (8005784 <HAL_GPIO_Init+0x334>)
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	3301      	adds	r3, #1
 8005742:	61fb      	str	r3, [r7, #28]
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	2b0f      	cmp	r3, #15
 8005748:	f67f ae90 	bls.w	800546c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800574c:	bf00      	nop
 800574e:	bf00      	nop
 8005750:	3724      	adds	r7, #36	@ 0x24
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40023800 	.word	0x40023800
 8005760:	40013800 	.word	0x40013800
 8005764:	40020000 	.word	0x40020000
 8005768:	40020400 	.word	0x40020400
 800576c:	40020800 	.word	0x40020800
 8005770:	40020c00 	.word	0x40020c00
 8005774:	40021000 	.word	0x40021000
 8005778:	40021400 	.word	0x40021400
 800577c:	40021800 	.word	0x40021800
 8005780:	40021c00 	.word	0x40021c00
 8005784:	40013c00 	.word	0x40013c00

08005788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	887b      	ldrh	r3, [r7, #2]
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057a0:	2301      	movs	r3, #1
 80057a2:	73fb      	strb	r3, [r7, #15]
 80057a4:	e001      	b.n	80057aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	807b      	strh	r3, [r7, #2]
 80057c4:	4613      	mov	r3, r2
 80057c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057c8:	787b      	ldrb	r3, [r7, #1]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057ce:	887a      	ldrh	r2, [r7, #2]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057d4:	e003      	b.n	80057de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057d6:	887b      	ldrh	r3, [r7, #2]
 80057d8:	041a      	lsls	r2, r3, #16
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	619a      	str	r2, [r3, #24]
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	460b      	mov	r3, r1
 80057f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057fc:	887a      	ldrh	r2, [r7, #2]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4013      	ands	r3, r2
 8005802:	041a      	lsls	r2, r3, #16
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	43d9      	mvns	r1, r3
 8005808:	887b      	ldrh	r3, [r7, #2]
 800580a:	400b      	ands	r3, r1
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	619a      	str	r2, [r3, #24]
}
 8005812:	bf00      	nop
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e12b      	b.n	8005a8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fc f82e 	bl	80018a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2224      	movs	r2, #36	@ 0x24
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0201 	bic.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005872:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005882:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005884:	f001 fd8e 	bl	80073a4 <HAL_RCC_GetPCLK1Freq>
 8005888:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	4a81      	ldr	r2, [pc, #516]	@ (8005a94 <HAL_I2C_Init+0x274>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d807      	bhi.n	80058a4 <HAL_I2C_Init+0x84>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4a80      	ldr	r2, [pc, #512]	@ (8005a98 <HAL_I2C_Init+0x278>)
 8005898:	4293      	cmp	r3, r2
 800589a:	bf94      	ite	ls
 800589c:	2301      	movls	r3, #1
 800589e:	2300      	movhi	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	e006      	b.n	80058b2 <HAL_I2C_Init+0x92>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4a7d      	ldr	r2, [pc, #500]	@ (8005a9c <HAL_I2C_Init+0x27c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	bf94      	ite	ls
 80058ac:	2301      	movls	r3, #1
 80058ae:	2300      	movhi	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e0e7      	b.n	8005a8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4a78      	ldr	r2, [pc, #480]	@ (8005aa0 <HAL_I2C_Init+0x280>)
 80058be:	fba2 2303 	umull	r2, r3, r2, r3
 80058c2:	0c9b      	lsrs	r3, r3, #18
 80058c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	4a6a      	ldr	r2, [pc, #424]	@ (8005a94 <HAL_I2C_Init+0x274>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d802      	bhi.n	80058f4 <HAL_I2C_Init+0xd4>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	3301      	adds	r3, #1
 80058f2:	e009      	b.n	8005908 <HAL_I2C_Init+0xe8>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80058fa:	fb02 f303 	mul.w	r3, r2, r3
 80058fe:	4a69      	ldr	r2, [pc, #420]	@ (8005aa4 <HAL_I2C_Init+0x284>)
 8005900:	fba2 2303 	umull	r2, r3, r2, r3
 8005904:	099b      	lsrs	r3, r3, #6
 8005906:	3301      	adds	r3, #1
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6812      	ldr	r2, [r2, #0]
 800590c:	430b      	orrs	r3, r1
 800590e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800591a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	495c      	ldr	r1, [pc, #368]	@ (8005a94 <HAL_I2C_Init+0x274>)
 8005924:	428b      	cmp	r3, r1
 8005926:	d819      	bhi.n	800595c <HAL_I2C_Init+0x13c>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	1e59      	subs	r1, r3, #1
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	fbb1 f3f3 	udiv	r3, r1, r3
 8005936:	1c59      	adds	r1, r3, #1
 8005938:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800593c:	400b      	ands	r3, r1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <HAL_I2C_Init+0x138>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1e59      	subs	r1, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005950:	3301      	adds	r3, #1
 8005952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005956:	e051      	b.n	80059fc <HAL_I2C_Init+0x1dc>
 8005958:	2304      	movs	r3, #4
 800595a:	e04f      	b.n	80059fc <HAL_I2C_Init+0x1dc>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d111      	bne.n	8005988 <HAL_I2C_Init+0x168>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	1e58      	subs	r0, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6859      	ldr	r1, [r3, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	440b      	add	r3, r1
 8005972:	fbb0 f3f3 	udiv	r3, r0, r3
 8005976:	3301      	adds	r3, #1
 8005978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597c:	2b00      	cmp	r3, #0
 800597e:	bf0c      	ite	eq
 8005980:	2301      	moveq	r3, #1
 8005982:	2300      	movne	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	e012      	b.n	80059ae <HAL_I2C_Init+0x18e>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	1e58      	subs	r0, r3, #1
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6859      	ldr	r1, [r3, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	440b      	add	r3, r1
 8005996:	0099      	lsls	r1, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	fbb0 f3f3 	udiv	r3, r0, r3
 800599e:	3301      	adds	r3, #1
 80059a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bf0c      	ite	eq
 80059a8:	2301      	moveq	r3, #1
 80059aa:	2300      	movne	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_I2C_Init+0x196>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e022      	b.n	80059fc <HAL_I2C_Init+0x1dc>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10e      	bne.n	80059dc <HAL_I2C_Init+0x1bc>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	1e58      	subs	r0, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6859      	ldr	r1, [r3, #4]
 80059c6:	460b      	mov	r3, r1
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	440b      	add	r3, r1
 80059cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80059d0:	3301      	adds	r3, #1
 80059d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059da:	e00f      	b.n	80059fc <HAL_I2C_Init+0x1dc>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	1e58      	subs	r0, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6859      	ldr	r1, [r3, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	0099      	lsls	r1, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80059f2:	3301      	adds	r3, #1
 80059f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	6809      	ldr	r1, [r1, #0]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69da      	ldr	r2, [r3, #28]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005a2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6911      	ldr	r1, [r2, #16]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	68d2      	ldr	r2, [r2, #12]
 8005a36:	4311      	orrs	r1, r2
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6812      	ldr	r2, [r2, #0]
 8005a3c:	430b      	orrs	r3, r1
 8005a3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0201 	orr.w	r2, r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	000186a0 	.word	0x000186a0
 8005a98:	001e847f 	.word	0x001e847f
 8005a9c:	003d08ff 	.word	0x003d08ff
 8005aa0:	431bde83 	.word	0x431bde83
 8005aa4:	10624dd3 	.word	0x10624dd3

08005aa8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af02      	add	r7, sp, #8
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	817b      	strh	r3, [r7, #10]
 8005aba:	460b      	mov	r3, r1
 8005abc:	813b      	strh	r3, [r7, #8]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ac2:	f7fe fda5 	bl	8004610 <HAL_GetTick>
 8005ac6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	f040 80d9 	bne.w	8005c88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	2319      	movs	r3, #25
 8005adc:	2201      	movs	r2, #1
 8005ade:	496d      	ldr	r1, [pc, #436]	@ (8005c94 <HAL_I2C_Mem_Write+0x1ec>)
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fdb9 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005aec:	2302      	movs	r3, #2
 8005aee:	e0cc      	b.n	8005c8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d101      	bne.n	8005afe <HAL_I2C_Mem_Write+0x56>
 8005afa:	2302      	movs	r3, #2
 8005afc:	e0c5      	b.n	8005c8a <HAL_I2C_Mem_Write+0x1e2>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d007      	beq.n	8005b24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2221      	movs	r2, #33	@ 0x21
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2240      	movs	r2, #64	@ 0x40
 8005b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a3a      	ldr	r2, [r7, #32]
 8005b4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4a4d      	ldr	r2, [pc, #308]	@ (8005c98 <HAL_I2C_Mem_Write+0x1f0>)
 8005b64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b66:	88f8      	ldrh	r0, [r7, #6]
 8005b68:	893a      	ldrh	r2, [r7, #8]
 8005b6a:	8979      	ldrh	r1, [r7, #10]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	9301      	str	r3, [sp, #4]
 8005b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	4603      	mov	r3, r0
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 fbf0 	bl	800635c <I2C_RequestMemoryWrite>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d052      	beq.n	8005c28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e081      	b.n	8005c8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fe7e 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00d      	beq.n	8005bb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d107      	bne.n	8005bae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e06b      	b.n	8005c8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb6:	781a      	ldrb	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d11b      	bne.n	8005c28 <HAL_I2C_Mem_Write+0x180>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d017      	beq.n	8005c28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfc:	781a      	ldrb	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1aa      	bne.n	8005b86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 fe71 	bl	800691c <I2C_WaitOnBTFFlagUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00d      	beq.n	8005c5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d107      	bne.n	8005c58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e016      	b.n	8005c8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e000      	b.n	8005c8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c88:	2302      	movs	r3, #2
  }
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	00100002 	.word	0x00100002
 8005c98:	ffff0000 	.word	0xffff0000

08005c9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08c      	sub	sp, #48	@ 0x30
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4603      	mov	r3, r0
 8005cac:	817b      	strh	r3, [r7, #10]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	813b      	strh	r3, [r7, #8]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cb6:	f7fe fcab 	bl	8004610 <HAL_GetTick>
 8005cba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b20      	cmp	r3, #32
 8005cc6:	f040 8214 	bne.w	80060f2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	2319      	movs	r3, #25
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	497b      	ldr	r1, [pc, #492]	@ (8005ec0 <HAL_I2C_Mem_Read+0x224>)
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 fcbf 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e207      	b.n	80060f4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d101      	bne.n	8005cf2 <HAL_I2C_Mem_Read+0x56>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e200      	b.n	80060f4 <HAL_I2C_Mem_Read+0x458>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d007      	beq.n	8005d18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2222      	movs	r2, #34	@ 0x22
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2240      	movs	r2, #64	@ 0x40
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4a5b      	ldr	r2, [pc, #364]	@ (8005ec4 <HAL_I2C_Mem_Read+0x228>)
 8005d58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d5a:	88f8      	ldrh	r0, [r7, #6]
 8005d5c:	893a      	ldrh	r2, [r7, #8]
 8005d5e:	8979      	ldrh	r1, [r7, #10]
 8005d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	4603      	mov	r3, r0
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 fb8c 	bl	8006488 <I2C_RequestMemoryRead>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e1bc      	b.n	80060f4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d113      	bne.n	8005daa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d82:	2300      	movs	r3, #0
 8005d84:	623b      	str	r3, [r7, #32]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	623b      	str	r3, [r7, #32]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	623b      	str	r3, [r7, #32]
 8005d96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	e190      	b.n	80060cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d11b      	bne.n	8005dea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	61fb      	str	r3, [r7, #28]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	61fb      	str	r3, [r7, #28]
 8005dd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	e170      	b.n	80060cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d11b      	bne.n	8005e2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e12:	2300      	movs	r3, #0
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	61bb      	str	r3, [r7, #24]
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	e150      	b.n	80060cc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e40:	e144      	b.n	80060cc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	f200 80f1 	bhi.w	800602e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d123      	bne.n	8005e9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 fda7 	bl	80069ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e145      	b.n	80060f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691a      	ldr	r2, [r3, #16]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e9a:	e117      	b.n	80060cc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d14e      	bne.n	8005f42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eaa:	2200      	movs	r2, #0
 8005eac:	4906      	ldr	r1, [pc, #24]	@ (8005ec8 <HAL_I2C_Mem_Read+0x22c>)
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 fbd2 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d008      	beq.n	8005ecc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e11a      	b.n	80060f4 <HAL_I2C_Mem_Read+0x458>
 8005ebe:	bf00      	nop
 8005ec0:	00100002 	.word	0x00100002
 8005ec4:	ffff0000 	.word	0xffff0000
 8005ec8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3b01      	subs	r3, #1
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f40:	e0c4      	b.n	80060cc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f48:	2200      	movs	r2, #0
 8005f4a:	496c      	ldr	r1, [pc, #432]	@ (80060fc <HAL_I2C_Mem_Read+0x460>)
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fb83 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e0cb      	b.n	80060f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691a      	ldr	r2, [r3, #16]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	4955      	ldr	r1, [pc, #340]	@ (80060fc <HAL_I2C_Mem_Read+0x460>)
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 fb55 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e09d      	b.n	80060f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691a      	ldr	r2, [r3, #16]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006004:	b2d2      	uxtb	r2, r2
 8006006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800602c:	e04e      	b.n	80060cc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800602e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006030:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 fcba 	bl	80069ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e058      	b.n	80060f4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691a      	ldr	r2, [r3, #16]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604c:	b2d2      	uxtb	r2, r2
 800604e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b04      	cmp	r3, #4
 8006080:	d124      	bne.n	80060cc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006086:	2b03      	cmp	r3, #3
 8006088:	d107      	bne.n	800609a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006098:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f47f aeb6 	bne.w	8005e42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	e000      	b.n	80060f4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80060f2:	2302      	movs	r3, #2
  }
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3728      	adds	r7, #40	@ 0x28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	00010004 	.word	0x00010004

08006100 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08a      	sub	sp, #40	@ 0x28
 8006104:	af02      	add	r7, sp, #8
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	607a      	str	r2, [r7, #4]
 800610a:	603b      	str	r3, [r7, #0]
 800610c:	460b      	mov	r3, r1
 800610e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006110:	f7fe fa7e 	bl	8004610 <HAL_GetTick>
 8006114:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b20      	cmp	r3, #32
 8006124:	f040 8111 	bne.w	800634a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	2319      	movs	r3, #25
 800612e:	2201      	movs	r2, #1
 8006130:	4988      	ldr	r1, [pc, #544]	@ (8006354 <HAL_I2C_IsDeviceReady+0x254>)
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 fa90 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800613e:	2302      	movs	r3, #2
 8006140:	e104      	b.n	800634c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_I2C_IsDeviceReady+0x50>
 800614c:	2302      	movs	r3, #2
 800614e:	e0fd      	b.n	800634c <HAL_I2C_IsDeviceReady+0x24c>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b01      	cmp	r3, #1
 8006164:	d007      	beq.n	8006176 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0201 	orr.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006184:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2224      	movs	r2, #36	@ 0x24
 800618a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4a70      	ldr	r2, [pc, #448]	@ (8006358 <HAL_I2C_IsDeviceReady+0x258>)
 8006198:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061a8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 fa4e 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00d      	beq.n	80061de <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061d0:	d103      	bne.n	80061da <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061d8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e0b6      	b.n	800634c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061de:	897b      	ldrh	r3, [r7, #10]
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	461a      	mov	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80061ec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80061ee:	f7fe fa0f 	bl	8004610 <HAL_GetTick>
 80061f2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b02      	cmp	r3, #2
 8006200:	bf0c      	ite	eq
 8006202:	2301      	moveq	r3, #1
 8006204:	2300      	movne	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006218:	bf0c      	ite	eq
 800621a:	2301      	moveq	r3, #1
 800621c:	2300      	movne	r3, #0
 800621e:	b2db      	uxtb	r3, r3
 8006220:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006222:	e025      	b.n	8006270 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006224:	f7fe f9f4 	bl	8004610 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d302      	bcc.n	800623a <HAL_I2C_IsDeviceReady+0x13a>
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d103      	bne.n	8006242 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	22a0      	movs	r2, #160	@ 0xa0
 800623e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b02      	cmp	r3, #2
 800624e:	bf0c      	ite	eq
 8006250:	2301      	moveq	r3, #1
 8006252:	2300      	movne	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006266:	bf0c      	ite	eq
 8006268:	2301      	moveq	r3, #1
 800626a:	2300      	movne	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2ba0      	cmp	r3, #160	@ 0xa0
 800627a:	d005      	beq.n	8006288 <HAL_I2C_IsDeviceReady+0x188>
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d102      	bne.n	8006288 <HAL_I2C_IsDeviceReady+0x188>
 8006282:	7dbb      	ldrb	r3, [r7, #22]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0cd      	beq.n	8006224 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b02      	cmp	r3, #2
 800629c:	d129      	bne.n	80062f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ae:	2300      	movs	r3, #0
 80062b0:	613b      	str	r3, [r7, #16]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	2319      	movs	r3, #25
 80062ca:	2201      	movs	r2, #1
 80062cc:	4921      	ldr	r1, [pc, #132]	@ (8006354 <HAL_I2C_IsDeviceReady+0x254>)
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 f9c2 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e036      	b.n	800634c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	e02c      	b.n	800634c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006300:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800630a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	2319      	movs	r3, #25
 8006312:	2201      	movs	r2, #1
 8006314:	490f      	ldr	r1, [pc, #60]	@ (8006354 <HAL_I2C_IsDeviceReady+0x254>)
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 f99e 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e012      	b.n	800634c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	3301      	adds	r3, #1
 800632a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	429a      	cmp	r2, r3
 8006332:	f4ff af32 	bcc.w	800619a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2220      	movs	r2, #32
 800633a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800634a:	2302      	movs	r3, #2
  }
}
 800634c:	4618      	mov	r0, r3
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	00100002 	.word	0x00100002
 8006358:	ffff0000 	.word	0xffff0000

0800635c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	4608      	mov	r0, r1
 8006366:	4611      	mov	r1, r2
 8006368:	461a      	mov	r2, r3
 800636a:	4603      	mov	r3, r0
 800636c:	817b      	strh	r3, [r7, #10]
 800636e:	460b      	mov	r3, r1
 8006370:	813b      	strh	r3, [r7, #8]
 8006372:	4613      	mov	r3, r2
 8006374:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006384:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	2200      	movs	r2, #0
 800638e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f960 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00d      	beq.n	80063ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ac:	d103      	bne.n	80063b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e05f      	b.n	800647a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063ba:	897b      	ldrh	r3, [r7, #10]
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	461a      	mov	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80063c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	6a3a      	ldr	r2, [r7, #32]
 80063ce:	492d      	ldr	r1, [pc, #180]	@ (8006484 <I2C_RequestMemoryWrite+0x128>)
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 f9bb 	bl	800674c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e04c      	b.n	800647a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063e0:	2300      	movs	r3, #0
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f8:	6a39      	ldr	r1, [r7, #32]
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 fa46 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00d      	beq.n	8006422 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640a:	2b04      	cmp	r3, #4
 800640c:	d107      	bne.n	800641e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800641c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e02b      	b.n	800647a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006422:	88fb      	ldrh	r3, [r7, #6]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d105      	bne.n	8006434 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006428:	893b      	ldrh	r3, [r7, #8]
 800642a:	b2da      	uxtb	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	611a      	str	r2, [r3, #16]
 8006432:	e021      	b.n	8006478 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006434:	893b      	ldrh	r3, [r7, #8]
 8006436:	0a1b      	lsrs	r3, r3, #8
 8006438:	b29b      	uxth	r3, r3
 800643a:	b2da      	uxtb	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006444:	6a39      	ldr	r1, [r7, #32]
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 fa20 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00d      	beq.n	800646e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006456:	2b04      	cmp	r3, #4
 8006458:	d107      	bne.n	800646a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006468:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e005      	b.n	800647a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800646e:	893b      	ldrh	r3, [r7, #8]
 8006470:	b2da      	uxtb	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	00010002 	.word	0x00010002

08006488 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af02      	add	r7, sp, #8
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	4608      	mov	r0, r1
 8006492:	4611      	mov	r1, r2
 8006494:	461a      	mov	r2, r3
 8006496:	4603      	mov	r3, r0
 8006498:	817b      	strh	r3, [r7, #10]
 800649a:	460b      	mov	r3, r1
 800649c:	813b      	strh	r3, [r7, #8]
 800649e:	4613      	mov	r3, r2
 80064a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80064b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f8c2 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00d      	beq.n	80064f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064e8:	d103      	bne.n	80064f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e0aa      	b.n	800664c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064f6:	897b      	ldrh	r3, [r7, #10]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006504:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	6a3a      	ldr	r2, [r7, #32]
 800650a:	4952      	ldr	r1, [pc, #328]	@ (8006654 <I2C_RequestMemoryRead+0x1cc>)
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f91d 	bl	800674c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e097      	b.n	800664c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800651c:	2300      	movs	r3, #0
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006534:	6a39      	ldr	r1, [r7, #32]
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 f9a8 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00d      	beq.n	800655e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006546:	2b04      	cmp	r3, #4
 8006548:	d107      	bne.n	800655a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006558:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e076      	b.n	800664c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d105      	bne.n	8006570 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006564:	893b      	ldrh	r3, [r7, #8]
 8006566:	b2da      	uxtb	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	611a      	str	r2, [r3, #16]
 800656e:	e021      	b.n	80065b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006570:	893b      	ldrh	r3, [r7, #8]
 8006572:	0a1b      	lsrs	r3, r3, #8
 8006574:	b29b      	uxth	r3, r3
 8006576:	b2da      	uxtb	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800657e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006580:	6a39      	ldr	r1, [r7, #32]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f982 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00d      	beq.n	80065aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006592:	2b04      	cmp	r3, #4
 8006594:	d107      	bne.n	80065a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e050      	b.n	800664c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065aa:	893b      	ldrh	r3, [r7, #8]
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b6:	6a39      	ldr	r1, [r7, #32]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f967 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00d      	beq.n	80065e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d107      	bne.n	80065dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e035      	b.n	800664c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 f82b 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00d      	beq.n	8006624 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006616:	d103      	bne.n	8006620 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800661e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e013      	b.n	800664c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006624:	897b      	ldrh	r3, [r7, #10]
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	b2da      	uxtb	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006636:	6a3a      	ldr	r2, [r7, #32]
 8006638:	4906      	ldr	r1, [pc, #24]	@ (8006654 <I2C_RequestMemoryRead+0x1cc>)
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f886 	bl	800674c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	00010002 	.word	0x00010002

08006658 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	4613      	mov	r3, r2
 8006666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006668:	e048      	b.n	80066fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d044      	beq.n	80066fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006672:	f7fd ffcd 	bl	8004610 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d302      	bcc.n	8006688 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d139      	bne.n	80066fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	0c1b      	lsrs	r3, r3, #16
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b01      	cmp	r3, #1
 8006690:	d10d      	bne.n	80066ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	43da      	mvns	r2, r3
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	4013      	ands	r3, r2
 800669e:	b29b      	uxth	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	bf0c      	ite	eq
 80066a4:	2301      	moveq	r3, #1
 80066a6:	2300      	movne	r3, #0
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	e00c      	b.n	80066c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	43da      	mvns	r2, r3
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	4013      	ands	r3, r2
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	bf0c      	ite	eq
 80066c0:	2301      	moveq	r3, #1
 80066c2:	2300      	movne	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	461a      	mov	r2, r3
 80066c8:	79fb      	ldrb	r3, [r7, #7]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d116      	bne.n	80066fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e8:	f043 0220 	orr.w	r2, r3, #32
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e023      	b.n	8006744 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	0c1b      	lsrs	r3, r3, #16
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b01      	cmp	r3, #1
 8006704:	d10d      	bne.n	8006722 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	43da      	mvns	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4013      	ands	r3, r2
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	bf0c      	ite	eq
 8006718:	2301      	moveq	r3, #1
 800671a:	2300      	movne	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	461a      	mov	r2, r3
 8006720:	e00c      	b.n	800673c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	43da      	mvns	r2, r3
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4013      	ands	r3, r2
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	bf0c      	ite	eq
 8006734:	2301      	moveq	r3, #1
 8006736:	2300      	movne	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	461a      	mov	r2, r3
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	429a      	cmp	r2, r3
 8006740:	d093      	beq.n	800666a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800675a:	e071      	b.n	8006840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800676a:	d123      	bne.n	80067b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800677a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006784:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a0:	f043 0204 	orr.w	r2, r3, #4
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e067      	b.n	8006884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ba:	d041      	beq.n	8006840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067bc:	f7fd ff28 	bl	8004610 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d302      	bcc.n	80067d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d136      	bne.n	8006840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	0c1b      	lsrs	r3, r3, #16
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d10c      	bne.n	80067f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	43da      	mvns	r2, r3
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4013      	ands	r3, r2
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	bf14      	ite	ne
 80067ee:	2301      	movne	r3, #1
 80067f0:	2300      	moveq	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	e00b      	b.n	800680e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	43da      	mvns	r2, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	4013      	ands	r3, r2
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	bf14      	ite	ne
 8006808:	2301      	movne	r3, #1
 800680a:	2300      	moveq	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d016      	beq.n	8006840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682c:	f043 0220 	orr.w	r2, r3, #32
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e021      	b.n	8006884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	0c1b      	lsrs	r3, r3, #16
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b01      	cmp	r3, #1
 8006848:	d10c      	bne.n	8006864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	43da      	mvns	r2, r3
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	4013      	ands	r3, r2
 8006856:	b29b      	uxth	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	bf14      	ite	ne
 800685c:	2301      	movne	r3, #1
 800685e:	2300      	moveq	r3, #0
 8006860:	b2db      	uxtb	r3, r3
 8006862:	e00b      	b.n	800687c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	43da      	mvns	r2, r3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	4013      	ands	r3, r2
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	bf14      	ite	ne
 8006876:	2301      	movne	r3, #1
 8006878:	2300      	moveq	r3, #0
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	f47f af6d 	bne.w	800675c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006898:	e034      	b.n	8006904 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 f8e3 	bl	8006a66 <I2C_IsAcknowledgeFailed>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e034      	b.n	8006914 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b0:	d028      	beq.n	8006904 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b2:	f7fd fead 	bl	8004610 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d302      	bcc.n	80068c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d11d      	bne.n	8006904 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068d2:	2b80      	cmp	r3, #128	@ 0x80
 80068d4:	d016      	beq.n	8006904 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e007      	b.n	8006914 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800690e:	2b80      	cmp	r3, #128	@ 0x80
 8006910:	d1c3      	bne.n	800689a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006928:	e034      	b.n	8006994 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 f89b 	bl	8006a66 <I2C_IsAcknowledgeFailed>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e034      	b.n	80069a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006940:	d028      	beq.n	8006994 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006942:	f7fd fe65 	bl	8004610 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	429a      	cmp	r2, r3
 8006950:	d302      	bcc.n	8006958 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d11d      	bne.n	8006994 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	f003 0304 	and.w	r3, r3, #4
 8006962:	2b04      	cmp	r3, #4
 8006964:	d016      	beq.n	8006994 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006980:	f043 0220 	orr.w	r2, r3, #32
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e007      	b.n	80069a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	f003 0304 	and.w	r3, r3, #4
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d1c3      	bne.n	800692a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069b8:	e049      	b.n	8006a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d119      	bne.n	80069fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f06f 0210 	mvn.w	r2, #16
 80069d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e030      	b.n	8006a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069fc:	f7fd fe08 	bl	8004610 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d302      	bcc.n	8006a12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d11d      	bne.n	8006a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a1c:	2b40      	cmp	r3, #64	@ 0x40
 8006a1e:	d016      	beq.n	8006a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3a:	f043 0220 	orr.w	r2, r3, #32
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e007      	b.n	8006a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a58:	2b40      	cmp	r3, #64	@ 0x40
 8006a5a:	d1ae      	bne.n	80069ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a7c:	d11b      	bne.n	8006ab6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a86:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa2:	f043 0204 	orr.w	r2, r3, #4
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e000      	b.n	8006ab8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e267      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d075      	beq.n	8006bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ae2:	4b88      	ldr	r3, [pc, #544]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f003 030c 	and.w	r3, r3, #12
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d00c      	beq.n	8006b08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aee:	4b85      	ldr	r3, [pc, #532]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d112      	bne.n	8006b20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006afa:	4b82      	ldr	r3, [pc, #520]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b06:	d10b      	bne.n	8006b20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b08:	4b7e      	ldr	r3, [pc, #504]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d05b      	beq.n	8006bcc <HAL_RCC_OscConfig+0x108>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d157      	bne.n	8006bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e242      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b28:	d106      	bne.n	8006b38 <HAL_RCC_OscConfig+0x74>
 8006b2a:	4b76      	ldr	r3, [pc, #472]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a75      	ldr	r2, [pc, #468]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	e01d      	b.n	8006b74 <HAL_RCC_OscConfig+0xb0>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b40:	d10c      	bne.n	8006b5c <HAL_RCC_OscConfig+0x98>
 8006b42:	4b70      	ldr	r3, [pc, #448]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a6f      	ldr	r2, [pc, #444]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	4b6d      	ldr	r3, [pc, #436]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a6c      	ldr	r2, [pc, #432]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	e00b      	b.n	8006b74 <HAL_RCC_OscConfig+0xb0>
 8006b5c:	4b69      	ldr	r3, [pc, #420]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a68      	ldr	r2, [pc, #416]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006b62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b66:	6013      	str	r3, [r2, #0]
 8006b68:	4b66      	ldr	r3, [pc, #408]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a65      	ldr	r2, [pc, #404]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006b6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d013      	beq.n	8006ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b7c:	f7fd fd48 	bl	8004610 <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b84:	f7fd fd44 	bl	8004610 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b64      	cmp	r3, #100	@ 0x64
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e207      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b96:	4b5b      	ldr	r3, [pc, #364]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0f0      	beq.n	8006b84 <HAL_RCC_OscConfig+0xc0>
 8006ba2:	e014      	b.n	8006bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba4:	f7fd fd34 	bl	8004610 <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bac:	f7fd fd30 	bl	8004610 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b64      	cmp	r3, #100	@ 0x64
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e1f3      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bbe:	4b51      	ldr	r3, [pc, #324]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1f0      	bne.n	8006bac <HAL_RCC_OscConfig+0xe8>
 8006bca:	e000      	b.n	8006bce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d063      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bda:	4b4a      	ldr	r3, [pc, #296]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 030c 	and.w	r3, r3, #12
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00b      	beq.n	8006bfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006be6:	4b47      	ldr	r3, [pc, #284]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bee:	2b08      	cmp	r3, #8
 8006bf0:	d11c      	bne.n	8006c2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bf2:	4b44      	ldr	r3, [pc, #272]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d116      	bne.n	8006c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bfe:	4b41      	ldr	r3, [pc, #260]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d005      	beq.n	8006c16 <HAL_RCC_OscConfig+0x152>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d001      	beq.n	8006c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e1c7      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c16:	4b3b      	ldr	r3, [pc, #236]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	4937      	ldr	r1, [pc, #220]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c2a:	e03a      	b.n	8006ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d020      	beq.n	8006c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c34:	4b34      	ldr	r3, [pc, #208]	@ (8006d08 <HAL_RCC_OscConfig+0x244>)
 8006c36:	2201      	movs	r2, #1
 8006c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3a:	f7fd fce9 	bl	8004610 <HAL_GetTick>
 8006c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c40:	e008      	b.n	8006c54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c42:	f7fd fce5 	bl	8004610 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d901      	bls.n	8006c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e1a8      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c54:	4b2b      	ldr	r3, [pc, #172]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d0f0      	beq.n	8006c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c60:	4b28      	ldr	r3, [pc, #160]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	00db      	lsls	r3, r3, #3
 8006c6e:	4925      	ldr	r1, [pc, #148]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	600b      	str	r3, [r1, #0]
 8006c74:	e015      	b.n	8006ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c76:	4b24      	ldr	r3, [pc, #144]	@ (8006d08 <HAL_RCC_OscConfig+0x244>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c7c:	f7fd fcc8 	bl	8004610 <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c82:	e008      	b.n	8006c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c84:	f7fd fcc4 	bl	8004610 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e187      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c96:	4b1b      	ldr	r3, [pc, #108]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1f0      	bne.n	8006c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d036      	beq.n	8006d1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d016      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cb6:	4b15      	ldr	r3, [pc, #84]	@ (8006d0c <HAL_RCC_OscConfig+0x248>)
 8006cb8:	2201      	movs	r2, #1
 8006cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cbc:	f7fd fca8 	bl	8004610 <HAL_GetTick>
 8006cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cc2:	e008      	b.n	8006cd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cc4:	f7fd fca4 	bl	8004610 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e167      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d04 <HAL_RCC_OscConfig+0x240>)
 8006cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0f0      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x200>
 8006ce2:	e01b      	b.n	8006d1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ce4:	4b09      	ldr	r3, [pc, #36]	@ (8006d0c <HAL_RCC_OscConfig+0x248>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cea:	f7fd fc91 	bl	8004610 <HAL_GetTick>
 8006cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cf0:	e00e      	b.n	8006d10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cf2:	f7fd fc8d 	bl	8004610 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d907      	bls.n	8006d10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e150      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
 8006d04:	40023800 	.word	0x40023800
 8006d08:	42470000 	.word	0x42470000
 8006d0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d10:	4b88      	ldr	r3, [pc, #544]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1ea      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 8097 	beq.w	8006e58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d2e:	4b81      	ldr	r3, [pc, #516]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10f      	bne.n	8006d5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	4b7d      	ldr	r3, [pc, #500]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d42:	4a7c      	ldr	r2, [pc, #496]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d4a:	4b7a      	ldr	r3, [pc, #488]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d52:	60bb      	str	r3, [r7, #8]
 8006d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d56:	2301      	movs	r3, #1
 8006d58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d5a:	4b77      	ldr	r3, [pc, #476]	@ (8006f38 <HAL_RCC_OscConfig+0x474>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d118      	bne.n	8006d98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d66:	4b74      	ldr	r3, [pc, #464]	@ (8006f38 <HAL_RCC_OscConfig+0x474>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a73      	ldr	r2, [pc, #460]	@ (8006f38 <HAL_RCC_OscConfig+0x474>)
 8006d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d72:	f7fd fc4d 	bl	8004610 <HAL_GetTick>
 8006d76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d78:	e008      	b.n	8006d8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d7a:	f7fd fc49 	bl	8004610 <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d901      	bls.n	8006d8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e10c      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8006f38 <HAL_RCC_OscConfig+0x474>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d0f0      	beq.n	8006d7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d106      	bne.n	8006dae <HAL_RCC_OscConfig+0x2ea>
 8006da0:	4b64      	ldr	r3, [pc, #400]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da4:	4a63      	ldr	r2, [pc, #396]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006da6:	f043 0301 	orr.w	r3, r3, #1
 8006daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dac:	e01c      	b.n	8006de8 <HAL_RCC_OscConfig+0x324>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	2b05      	cmp	r3, #5
 8006db4:	d10c      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x30c>
 8006db6:	4b5f      	ldr	r3, [pc, #380]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dba:	4a5e      	ldr	r2, [pc, #376]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006dbc:	f043 0304 	orr.w	r3, r3, #4
 8006dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc6:	4a5b      	ldr	r2, [pc, #364]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006dc8:	f043 0301 	orr.w	r3, r3, #1
 8006dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dce:	e00b      	b.n	8006de8 <HAL_RCC_OscConfig+0x324>
 8006dd0:	4b58      	ldr	r3, [pc, #352]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd4:	4a57      	ldr	r2, [pc, #348]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006dd6:	f023 0301 	bic.w	r3, r3, #1
 8006dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ddc:	4b55      	ldr	r3, [pc, #340]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de0:	4a54      	ldr	r2, [pc, #336]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006de2:	f023 0304 	bic.w	r3, r3, #4
 8006de6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d015      	beq.n	8006e1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df0:	f7fd fc0e 	bl	8004610 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df6:	e00a      	b.n	8006e0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006df8:	f7fd fc0a 	bl	8004610 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e0cb      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e0e:	4b49      	ldr	r3, [pc, #292]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d0ee      	beq.n	8006df8 <HAL_RCC_OscConfig+0x334>
 8006e1a:	e014      	b.n	8006e46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e1c:	f7fd fbf8 	bl	8004610 <HAL_GetTick>
 8006e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e22:	e00a      	b.n	8006e3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e24:	f7fd fbf4 	bl	8004610 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e0b5      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1ee      	bne.n	8006e24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d105      	bne.n	8006e58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e4c:	4b39      	ldr	r3, [pc, #228]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e50:	4a38      	ldr	r2, [pc, #224]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 80a1 	beq.w	8006fa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e62:	4b34      	ldr	r3, [pc, #208]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 030c 	and.w	r3, r3, #12
 8006e6a:	2b08      	cmp	r3, #8
 8006e6c:	d05c      	beq.n	8006f28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d141      	bne.n	8006efa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e76:	4b31      	ldr	r3, [pc, #196]	@ (8006f3c <HAL_RCC_OscConfig+0x478>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e7c:	f7fd fbc8 	bl	8004610 <HAL_GetTick>
 8006e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e82:	e008      	b.n	8006e96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e84:	f7fd fbc4 	bl	8004610 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d901      	bls.n	8006e96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e087      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e96:	4b27      	ldr	r3, [pc, #156]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1f0      	bne.n	8006e84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	69da      	ldr	r2, [r3, #28]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb0:	019b      	lsls	r3, r3, #6
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb8:	085b      	lsrs	r3, r3, #1
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	041b      	lsls	r3, r3, #16
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec4:	061b      	lsls	r3, r3, #24
 8006ec6:	491b      	ldr	r1, [pc, #108]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8006f3c <HAL_RCC_OscConfig+0x478>)
 8006ece:	2201      	movs	r2, #1
 8006ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed2:	f7fd fb9d 	bl	8004610 <HAL_GetTick>
 8006ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ed8:	e008      	b.n	8006eec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eda:	f7fd fb99 	bl	8004610 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d901      	bls.n	8006eec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e05c      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eec:	4b11      	ldr	r3, [pc, #68]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d0f0      	beq.n	8006eda <HAL_RCC_OscConfig+0x416>
 8006ef8:	e054      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006efa:	4b10      	ldr	r3, [pc, #64]	@ (8006f3c <HAL_RCC_OscConfig+0x478>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f00:	f7fd fb86 	bl	8004610 <HAL_GetTick>
 8006f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f06:	e008      	b.n	8006f1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f08:	f7fd fb82 	bl	8004610 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e045      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f1a:	4b06      	ldr	r3, [pc, #24]	@ (8006f34 <HAL_RCC_OscConfig+0x470>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1f0      	bne.n	8006f08 <HAL_RCC_OscConfig+0x444>
 8006f26:	e03d      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d107      	bne.n	8006f40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e038      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
 8006f34:	40023800 	.word	0x40023800
 8006f38:	40007000 	.word	0x40007000
 8006f3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f40:	4b1b      	ldr	r3, [pc, #108]	@ (8006fb0 <HAL_RCC_OscConfig+0x4ec>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d028      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d121      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d11a      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f70:	4013      	ands	r3, r2
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d111      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f86:	085b      	lsrs	r3, r3, #1
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d107      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d001      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	40023800 	.word	0x40023800

08006fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e0cc      	b.n	8007162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fc8:	4b68      	ldr	r3, [pc, #416]	@ (800716c <HAL_RCC_ClockConfig+0x1b8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0307 	and.w	r3, r3, #7
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d90c      	bls.n	8006ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd6:	4b65      	ldr	r3, [pc, #404]	@ (800716c <HAL_RCC_ClockConfig+0x1b8>)
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fde:	4b63      	ldr	r3, [pc, #396]	@ (800716c <HAL_RCC_ClockConfig+0x1b8>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0307 	and.w	r3, r3, #7
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d001      	beq.n	8006ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e0b8      	b.n	8007162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d020      	beq.n	800703e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b00      	cmp	r3, #0
 8007006:	d005      	beq.n	8007014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007008:	4b59      	ldr	r3, [pc, #356]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	4a58      	ldr	r2, [pc, #352]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 800700e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0308 	and.w	r3, r3, #8
 800701c:	2b00      	cmp	r3, #0
 800701e:	d005      	beq.n	800702c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007020:	4b53      	ldr	r3, [pc, #332]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	4a52      	ldr	r2, [pc, #328]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 8007026:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800702a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800702c:	4b50      	ldr	r3, [pc, #320]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	494d      	ldr	r1, [pc, #308]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 800703a:	4313      	orrs	r3, r2
 800703c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d044      	beq.n	80070d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d107      	bne.n	8007062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007052:	4b47      	ldr	r3, [pc, #284]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d119      	bne.n	8007092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e07f      	b.n	8007162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	2b02      	cmp	r3, #2
 8007068:	d003      	beq.n	8007072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800706e:	2b03      	cmp	r3, #3
 8007070:	d107      	bne.n	8007082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007072:	4b3f      	ldr	r3, [pc, #252]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d109      	bne.n	8007092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e06f      	b.n	8007162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007082:	4b3b      	ldr	r3, [pc, #236]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e067      	b.n	8007162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007092:	4b37      	ldr	r3, [pc, #220]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f023 0203 	bic.w	r2, r3, #3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	4934      	ldr	r1, [pc, #208]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070a4:	f7fd fab4 	bl	8004610 <HAL_GetTick>
 80070a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070aa:	e00a      	b.n	80070c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070ac:	f7fd fab0 	bl	8004610 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e04f      	b.n	8007162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070c2:	4b2b      	ldr	r3, [pc, #172]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f003 020c 	and.w	r2, r3, #12
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d1eb      	bne.n	80070ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070d4:	4b25      	ldr	r3, [pc, #148]	@ (800716c <HAL_RCC_ClockConfig+0x1b8>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d20c      	bcs.n	80070fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070e2:	4b22      	ldr	r3, [pc, #136]	@ (800716c <HAL_RCC_ClockConfig+0x1b8>)
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	b2d2      	uxtb	r2, r2
 80070e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ea:	4b20      	ldr	r3, [pc, #128]	@ (800716c <HAL_RCC_ClockConfig+0x1b8>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0307 	and.w	r3, r3, #7
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d001      	beq.n	80070fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e032      	b.n	8007162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b00      	cmp	r3, #0
 8007106:	d008      	beq.n	800711a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007108:	4b19      	ldr	r3, [pc, #100]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	4916      	ldr	r1, [pc, #88]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 8007116:	4313      	orrs	r3, r2
 8007118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0308 	and.w	r3, r3, #8
 8007122:	2b00      	cmp	r3, #0
 8007124:	d009      	beq.n	800713a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007126:	4b12      	ldr	r3, [pc, #72]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	490e      	ldr	r1, [pc, #56]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 8007136:	4313      	orrs	r3, r2
 8007138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800713a:	f000 f821 	bl	8007180 <HAL_RCC_GetSysClockFreq>
 800713e:	4602      	mov	r2, r0
 8007140:	4b0b      	ldr	r3, [pc, #44]	@ (8007170 <HAL_RCC_ClockConfig+0x1bc>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	091b      	lsrs	r3, r3, #4
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	490a      	ldr	r1, [pc, #40]	@ (8007174 <HAL_RCC_ClockConfig+0x1c0>)
 800714c:	5ccb      	ldrb	r3, [r1, r3]
 800714e:	fa22 f303 	lsr.w	r3, r2, r3
 8007152:	4a09      	ldr	r2, [pc, #36]	@ (8007178 <HAL_RCC_ClockConfig+0x1c4>)
 8007154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007156:	4b09      	ldr	r3, [pc, #36]	@ (800717c <HAL_RCC_ClockConfig+0x1c8>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4618      	mov	r0, r3
 800715c:	f7fd fa14 	bl	8004588 <HAL_InitTick>

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	40023c00 	.word	0x40023c00
 8007170:	40023800 	.word	0x40023800
 8007174:	0800e888 	.word	0x0800e888
 8007178:	20000010 	.word	0x20000010
 800717c:	2000004c 	.word	0x2000004c

08007180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007184:	b094      	sub	sp, #80	@ 0x50
 8007186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007188:	2300      	movs	r3, #0
 800718a:	647b      	str	r3, [r7, #68]	@ 0x44
 800718c:	2300      	movs	r3, #0
 800718e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007190:	2300      	movs	r3, #0
 8007192:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007198:	4b79      	ldr	r3, [pc, #484]	@ (8007380 <HAL_RCC_GetSysClockFreq+0x200>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 030c 	and.w	r3, r3, #12
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d00d      	beq.n	80071c0 <HAL_RCC_GetSysClockFreq+0x40>
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	f200 80e1 	bhi.w	800736c <HAL_RCC_GetSysClockFreq+0x1ec>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <HAL_RCC_GetSysClockFreq+0x34>
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	d003      	beq.n	80071ba <HAL_RCC_GetSysClockFreq+0x3a>
 80071b2:	e0db      	b.n	800736c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071b4:	4b73      	ldr	r3, [pc, #460]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x204>)
 80071b6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80071b8:	e0db      	b.n	8007372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071ba:	4b73      	ldr	r3, [pc, #460]	@ (8007388 <HAL_RCC_GetSysClockFreq+0x208>)
 80071bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80071be:	e0d8      	b.n	8007372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071c0:	4b6f      	ldr	r3, [pc, #444]	@ (8007380 <HAL_RCC_GetSysClockFreq+0x200>)
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071ca:	4b6d      	ldr	r3, [pc, #436]	@ (8007380 <HAL_RCC_GetSysClockFreq+0x200>)
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d063      	beq.n	800729e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071d6:	4b6a      	ldr	r3, [pc, #424]	@ (8007380 <HAL_RCC_GetSysClockFreq+0x200>)
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	099b      	lsrs	r3, r3, #6
 80071dc:	2200      	movs	r2, #0
 80071de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80071e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80071ea:	2300      	movs	r3, #0
 80071ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80071f2:	4622      	mov	r2, r4
 80071f4:	462b      	mov	r3, r5
 80071f6:	f04f 0000 	mov.w	r0, #0
 80071fa:	f04f 0100 	mov.w	r1, #0
 80071fe:	0159      	lsls	r1, r3, #5
 8007200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007204:	0150      	lsls	r0, r2, #5
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4621      	mov	r1, r4
 800720c:	1a51      	subs	r1, r2, r1
 800720e:	6139      	str	r1, [r7, #16]
 8007210:	4629      	mov	r1, r5
 8007212:	eb63 0301 	sbc.w	r3, r3, r1
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	f04f 0300 	mov.w	r3, #0
 8007220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007224:	4659      	mov	r1, fp
 8007226:	018b      	lsls	r3, r1, #6
 8007228:	4651      	mov	r1, sl
 800722a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800722e:	4651      	mov	r1, sl
 8007230:	018a      	lsls	r2, r1, #6
 8007232:	4651      	mov	r1, sl
 8007234:	ebb2 0801 	subs.w	r8, r2, r1
 8007238:	4659      	mov	r1, fp
 800723a:	eb63 0901 	sbc.w	r9, r3, r1
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	f04f 0300 	mov.w	r3, #0
 8007246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800724a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800724e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007252:	4690      	mov	r8, r2
 8007254:	4699      	mov	r9, r3
 8007256:	4623      	mov	r3, r4
 8007258:	eb18 0303 	adds.w	r3, r8, r3
 800725c:	60bb      	str	r3, [r7, #8]
 800725e:	462b      	mov	r3, r5
 8007260:	eb49 0303 	adc.w	r3, r9, r3
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	f04f 0200 	mov.w	r2, #0
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007272:	4629      	mov	r1, r5
 8007274:	024b      	lsls	r3, r1, #9
 8007276:	4621      	mov	r1, r4
 8007278:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800727c:	4621      	mov	r1, r4
 800727e:	024a      	lsls	r2, r1, #9
 8007280:	4610      	mov	r0, r2
 8007282:	4619      	mov	r1, r3
 8007284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007286:	2200      	movs	r2, #0
 8007288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800728a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800728c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007290:	f7f9 fc2e 	bl	8000af0 <__aeabi_uldivmod>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	4613      	mov	r3, r2
 800729a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800729c:	e058      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800729e:	4b38      	ldr	r3, [pc, #224]	@ (8007380 <HAL_RCC_GetSysClockFreq+0x200>)
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	099b      	lsrs	r3, r3, #6
 80072a4:	2200      	movs	r2, #0
 80072a6:	4618      	mov	r0, r3
 80072a8:	4611      	mov	r1, r2
 80072aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80072ae:	623b      	str	r3, [r7, #32]
 80072b0:	2300      	movs	r3, #0
 80072b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80072b8:	4642      	mov	r2, r8
 80072ba:	464b      	mov	r3, r9
 80072bc:	f04f 0000 	mov.w	r0, #0
 80072c0:	f04f 0100 	mov.w	r1, #0
 80072c4:	0159      	lsls	r1, r3, #5
 80072c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072ca:	0150      	lsls	r0, r2, #5
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	4641      	mov	r1, r8
 80072d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80072d6:	4649      	mov	r1, r9
 80072d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80072dc:	f04f 0200 	mov.w	r2, #0
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80072e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80072ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80072f0:	ebb2 040a 	subs.w	r4, r2, sl
 80072f4:	eb63 050b 	sbc.w	r5, r3, fp
 80072f8:	f04f 0200 	mov.w	r2, #0
 80072fc:	f04f 0300 	mov.w	r3, #0
 8007300:	00eb      	lsls	r3, r5, #3
 8007302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007306:	00e2      	lsls	r2, r4, #3
 8007308:	4614      	mov	r4, r2
 800730a:	461d      	mov	r5, r3
 800730c:	4643      	mov	r3, r8
 800730e:	18e3      	adds	r3, r4, r3
 8007310:	603b      	str	r3, [r7, #0]
 8007312:	464b      	mov	r3, r9
 8007314:	eb45 0303 	adc.w	r3, r5, r3
 8007318:	607b      	str	r3, [r7, #4]
 800731a:	f04f 0200 	mov.w	r2, #0
 800731e:	f04f 0300 	mov.w	r3, #0
 8007322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007326:	4629      	mov	r1, r5
 8007328:	028b      	lsls	r3, r1, #10
 800732a:	4621      	mov	r1, r4
 800732c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007330:	4621      	mov	r1, r4
 8007332:	028a      	lsls	r2, r1, #10
 8007334:	4610      	mov	r0, r2
 8007336:	4619      	mov	r1, r3
 8007338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800733a:	2200      	movs	r2, #0
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	61fa      	str	r2, [r7, #28]
 8007340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007344:	f7f9 fbd4 	bl	8000af0 <__aeabi_uldivmod>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4613      	mov	r3, r2
 800734e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007350:	4b0b      	ldr	r3, [pc, #44]	@ (8007380 <HAL_RCC_GetSysClockFreq+0x200>)
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	0c1b      	lsrs	r3, r3, #16
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	3301      	adds	r3, #1
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007360:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007364:	fbb2 f3f3 	udiv	r3, r2, r3
 8007368:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800736a:	e002      	b.n	8007372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800736c:	4b05      	ldr	r3, [pc, #20]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x204>)
 800736e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007374:	4618      	mov	r0, r3
 8007376:	3750      	adds	r7, #80	@ 0x50
 8007378:	46bd      	mov	sp, r7
 800737a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800737e:	bf00      	nop
 8007380:	40023800 	.word	0x40023800
 8007384:	00f42400 	.word	0x00f42400
 8007388:	007a1200 	.word	0x007a1200

0800738c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007390:	4b03      	ldr	r3, [pc, #12]	@ (80073a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007392:	681b      	ldr	r3, [r3, #0]
}
 8007394:	4618      	mov	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	20000010 	.word	0x20000010

080073a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073a8:	f7ff fff0 	bl	800738c <HAL_RCC_GetHCLKFreq>
 80073ac:	4602      	mov	r2, r0
 80073ae:	4b05      	ldr	r3, [pc, #20]	@ (80073c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	0a9b      	lsrs	r3, r3, #10
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	4903      	ldr	r1, [pc, #12]	@ (80073c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073ba:	5ccb      	ldrb	r3, [r1, r3]
 80073bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	40023800 	.word	0x40023800
 80073c8:	0800e898 	.word	0x0800e898

080073cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073d0:	f7ff ffdc 	bl	800738c <HAL_RCC_GetHCLKFreq>
 80073d4:	4602      	mov	r2, r0
 80073d6:	4b05      	ldr	r3, [pc, #20]	@ (80073ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	0b5b      	lsrs	r3, r3, #13
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	4903      	ldr	r1, [pc, #12]	@ (80073f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073e2:	5ccb      	ldrb	r3, [r1, r3]
 80073e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	40023800 	.word	0x40023800
 80073f0:	0800e898 	.word	0x0800e898

080073f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e07b      	b.n	80074fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740a:	2b00      	cmp	r3, #0
 800740c:	d108      	bne.n	8007420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007416:	d009      	beq.n	800742c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	61da      	str	r2, [r3, #28]
 800741e:	e005      	b.n	800742c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d106      	bne.n	800744c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7fb fcc0 	bl	8002dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007462:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007474:	431a      	orrs	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	431a      	orrs	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800749c:	431a      	orrs	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b0:	ea42 0103 	orr.w	r1, r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	0c1b      	lsrs	r3, r3, #16
 80074ca:	f003 0104 	and.w	r1, r3, #4
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d2:	f003 0210 	and.w	r2, r3, #16
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69da      	ldr	r2, [r3, #28]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b088      	sub	sp, #32
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	603b      	str	r3, [r7, #0]
 8007512:	4613      	mov	r3, r2
 8007514:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007520:	2b01      	cmp	r3, #1
 8007522:	d101      	bne.n	8007528 <HAL_SPI_Transmit+0x22>
 8007524:	2302      	movs	r3, #2
 8007526:	e12d      	b.n	8007784 <HAL_SPI_Transmit+0x27e>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007530:	f7fd f86e 	bl	8004610 <HAL_GetTick>
 8007534:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007536:	88fb      	ldrh	r3, [r7, #6]
 8007538:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b01      	cmp	r3, #1
 8007544:	d002      	beq.n	800754c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007546:	2302      	movs	r3, #2
 8007548:	77fb      	strb	r3, [r7, #31]
    goto error;
 800754a:	e116      	b.n	800777a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d002      	beq.n	8007558 <HAL_SPI_Transmit+0x52>
 8007552:	88fb      	ldrh	r3, [r7, #6]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800755c:	e10d      	b.n	800777a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2203      	movs	r2, #3
 8007562:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	88fa      	ldrh	r2, [r7, #6]
 8007576:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	88fa      	ldrh	r2, [r7, #6]
 800757c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075a4:	d10f      	bne.n	80075c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d0:	2b40      	cmp	r3, #64	@ 0x40
 80075d2:	d007      	beq.n	80075e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075ec:	d14f      	bne.n	800768e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <HAL_SPI_Transmit+0xf6>
 80075f6:	8afb      	ldrh	r3, [r7, #22]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d142      	bne.n	8007682 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007600:	881a      	ldrh	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800760c:	1c9a      	adds	r2, r3, #2
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007616:	b29b      	uxth	r3, r3
 8007618:	3b01      	subs	r3, #1
 800761a:	b29a      	uxth	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007620:	e02f      	b.n	8007682 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b02      	cmp	r3, #2
 800762e:	d112      	bne.n	8007656 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007634:	881a      	ldrh	r2, [r3, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007640:	1c9a      	adds	r2, r3, #2
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800764a:	b29b      	uxth	r3, r3
 800764c:	3b01      	subs	r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007654:	e015      	b.n	8007682 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007656:	f7fc ffdb 	bl	8004610 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d803      	bhi.n	800766e <HAL_SPI_Transmit+0x168>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766c:	d102      	bne.n	8007674 <HAL_SPI_Transmit+0x16e>
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d106      	bne.n	8007682 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007680:	e07b      	b.n	800777a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007686:	b29b      	uxth	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1ca      	bne.n	8007622 <HAL_SPI_Transmit+0x11c>
 800768c:	e050      	b.n	8007730 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <HAL_SPI_Transmit+0x196>
 8007696:	8afb      	ldrh	r3, [r7, #22]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d144      	bne.n	8007726 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	330c      	adds	r3, #12
 80076a6:	7812      	ldrb	r2, [r2, #0]
 80076a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	3b01      	subs	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076c2:	e030      	b.n	8007726 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d113      	bne.n	80076fa <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	330c      	adds	r3, #12
 80076dc:	7812      	ldrb	r2, [r2, #0]
 80076de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80076f8:	e015      	b.n	8007726 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076fa:	f7fc ff89 	bl	8004610 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d803      	bhi.n	8007712 <HAL_SPI_Transmit+0x20c>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007710:	d102      	bne.n	8007718 <HAL_SPI_Transmit+0x212>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d106      	bne.n	8007726 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007724:	e029      	b.n	800777a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1c9      	bne.n	80076c4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 fbdf 	bl	8007ef8 <SPI_EndRxTxTransaction>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2220      	movs	r2, #32
 8007744:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10a      	bne.n	8007764 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800774e:	2300      	movs	r3, #0
 8007750:	613b      	str	r3, [r7, #16]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	613b      	str	r3, [r7, #16]
 8007762:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	77fb      	strb	r3, [r7, #31]
 8007770:	e003      	b.n	800777a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007782:	7ffb      	ldrb	r3, [r7, #31]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b088      	sub	sp, #32
 8007790:	af02      	add	r7, sp, #8
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	603b      	str	r3, [r7, #0]
 8007798:	4613      	mov	r3, r2
 800779a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800779c:	2300      	movs	r3, #0
 800779e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d002      	beq.n	80077b2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80077ac:	2302      	movs	r3, #2
 80077ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077b0:	e0fb      	b.n	80079aa <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077ba:	d112      	bne.n	80077e2 <HAL_SPI_Receive+0x56>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10e      	bne.n	80077e2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2204      	movs	r2, #4
 80077c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80077cc:	88fa      	ldrh	r2, [r7, #6]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	4613      	mov	r3, r2
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	68b9      	ldr	r1, [r7, #8]
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 f8ef 	bl	80079bc <HAL_SPI_TransmitReceive>
 80077de:	4603      	mov	r3, r0
 80077e0:	e0e8      	b.n	80079b4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d101      	bne.n	80077f0 <HAL_SPI_Receive+0x64>
 80077ec:	2302      	movs	r3, #2
 80077ee:	e0e1      	b.n	80079b4 <HAL_SPI_Receive+0x228>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077f8:	f7fc ff0a 	bl	8004610 <HAL_GetTick>
 80077fc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <HAL_SPI_Receive+0x7e>
 8007804:	88fb      	ldrh	r3, [r7, #6]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d102      	bne.n	8007810 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800780e:	e0cc      	b.n	80079aa <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2204      	movs	r2, #4
 8007814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	88fa      	ldrh	r2, [r7, #6]
 8007828:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	88fa      	ldrh	r2, [r7, #6]
 800782e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007856:	d10f      	bne.n	8007878 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007866:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007876:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007882:	2b40      	cmp	r3, #64	@ 0x40
 8007884:	d007      	beq.n	8007896 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007894:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d16a      	bne.n	8007974 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800789e:	e032      	b.n	8007906 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d115      	bne.n	80078da <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f103 020c 	add.w	r2, r3, #12
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ba:	7812      	ldrb	r2, [r2, #0]
 80078bc:	b2d2      	uxtb	r2, r2
 80078be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	3b01      	subs	r3, #1
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80078d8:	e015      	b.n	8007906 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078da:	f7fc fe99 	bl	8004610 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d803      	bhi.n	80078f2 <HAL_SPI_Receive+0x166>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f0:	d102      	bne.n	80078f8 <HAL_SPI_Receive+0x16c>
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d106      	bne.n	8007906 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007904:	e051      	b.n	80079aa <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800790a:	b29b      	uxth	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1c7      	bne.n	80078a0 <HAL_SPI_Receive+0x114>
 8007910:	e035      	b.n	800797e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b01      	cmp	r3, #1
 800791e:	d113      	bne.n	8007948 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792a:	b292      	uxth	r2, r2
 800792c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007932:	1c9a      	adds	r2, r3, #2
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800793c:	b29b      	uxth	r3, r3
 800793e:	3b01      	subs	r3, #1
 8007940:	b29a      	uxth	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007946:	e015      	b.n	8007974 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007948:	f7fc fe62 	bl	8004610 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	d803      	bhi.n	8007960 <HAL_SPI_Receive+0x1d4>
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795e:	d102      	bne.n	8007966 <HAL_SPI_Receive+0x1da>
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d106      	bne.n	8007974 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007972:	e01a      	b.n	80079aa <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007978:	b29b      	uxth	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1c9      	bne.n	8007912 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 fa52 	bl	8007e2c <SPI_EndRxTransaction>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2220      	movs	r2, #32
 8007992:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	75fb      	strb	r3, [r7, #23]
 80079a0:	e003      	b.n	80079aa <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08c      	sub	sp, #48	@ 0x30
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079ca:	2301      	movs	r3, #1
 80079cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d101      	bne.n	80079e2 <HAL_SPI_TransmitReceive+0x26>
 80079de:	2302      	movs	r3, #2
 80079e0:	e198      	b.n	8007d14 <HAL_SPI_TransmitReceive+0x358>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079ea:	f7fc fe11 	bl	8004610 <HAL_GetTick>
 80079ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a00:	887b      	ldrh	r3, [r7, #2]
 8007a02:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d00f      	beq.n	8007a2c <HAL_SPI_TransmitReceive+0x70>
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a12:	d107      	bne.n	8007a24 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d103      	bne.n	8007a24 <HAL_SPI_TransmitReceive+0x68>
 8007a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d003      	beq.n	8007a2c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a24:	2302      	movs	r3, #2
 8007a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007a2a:	e16d      	b.n	8007d08 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <HAL_SPI_TransmitReceive+0x82>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <HAL_SPI_TransmitReceive+0x82>
 8007a38:	887b      	ldrh	r3, [r7, #2]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d103      	bne.n	8007a46 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007a44:	e160      	b.n	8007d08 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d003      	beq.n	8007a5a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2205      	movs	r2, #5
 8007a56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	887a      	ldrh	r2, [r7, #2]
 8007a6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	887a      	ldrh	r2, [r7, #2]
 8007a70:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	887a      	ldrh	r2, [r7, #2]
 8007a7c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	887a      	ldrh	r2, [r7, #2]
 8007a82:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a9a:	2b40      	cmp	r3, #64	@ 0x40
 8007a9c:	d007      	beq.n	8007aae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007aac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ab6:	d17c      	bne.n	8007bb2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <HAL_SPI_TransmitReceive+0x10a>
 8007ac0:	8b7b      	ldrh	r3, [r7, #26]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d16a      	bne.n	8007b9c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aca:	881a      	ldrh	r2, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad6:	1c9a      	adds	r2, r3, #2
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aea:	e057      	b.n	8007b9c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d11b      	bne.n	8007b32 <HAL_SPI_TransmitReceive+0x176>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d016      	beq.n	8007b32 <HAL_SPI_TransmitReceive+0x176>
 8007b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d113      	bne.n	8007b32 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0e:	881a      	ldrh	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b1a:	1c9a      	adds	r2, r3, #2
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	3b01      	subs	r3, #1
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d119      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x1b8>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d014      	beq.n	8007b74 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b54:	b292      	uxth	r2, r2
 8007b56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b5c:	1c9a      	adds	r2, r3, #2
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b70:	2301      	movs	r3, #1
 8007b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b74:	f7fc fd4c 	bl	8004610 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d80b      	bhi.n	8007b9c <HAL_SPI_TransmitReceive+0x1e0>
 8007b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8a:	d007      	beq.n	8007b9c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007b9a:	e0b5      	b.n	8007d08 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1a2      	bne.n	8007aec <HAL_SPI_TransmitReceive+0x130>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d19d      	bne.n	8007aec <HAL_SPI_TransmitReceive+0x130>
 8007bb0:	e080      	b.n	8007cb4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <HAL_SPI_TransmitReceive+0x204>
 8007bba:	8b7b      	ldrh	r3, [r7, #26]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d16f      	bne.n	8007ca0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	330c      	adds	r3, #12
 8007bca:	7812      	ldrb	r2, [r2, #0]
 8007bcc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007be6:	e05b      	b.n	8007ca0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d11c      	bne.n	8007c30 <HAL_SPI_TransmitReceive+0x274>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d017      	beq.n	8007c30 <HAL_SPI_TransmitReceive+0x274>
 8007c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d114      	bne.n	8007c30 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	330c      	adds	r3, #12
 8007c10:	7812      	ldrb	r2, [r2, #0]
 8007c12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	3b01      	subs	r3, #1
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d119      	bne.n	8007c72 <HAL_SPI_TransmitReceive+0x2b6>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d014      	beq.n	8007c72 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c72:	f7fc fccd 	bl	8004610 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d803      	bhi.n	8007c8a <HAL_SPI_TransmitReceive+0x2ce>
 8007c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c88:	d102      	bne.n	8007c90 <HAL_SPI_TransmitReceive+0x2d4>
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d107      	bne.n	8007ca0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007c9e:	e033      	b.n	8007d08 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d19e      	bne.n	8007be8 <HAL_SPI_TransmitReceive+0x22c>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d199      	bne.n	8007be8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cb6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 f91d 	bl	8007ef8 <SPI_EndRxTxTransaction>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d006      	beq.n	8007cd2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007cd0:	e01a      	b.n	8007d08 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10a      	bne.n	8007cf0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	617b      	str	r3, [r7, #20]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	617b      	str	r3, [r7, #20]
 8007cee:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cfe:	e003      	b.n	8007d08 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007d10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3730      	adds	r7, #48	@ 0x30
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	603b      	str	r3, [r7, #0]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d2c:	f7fc fc70 	bl	8004610 <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d34:	1a9b      	subs	r3, r3, r2
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	4413      	add	r3, r2
 8007d3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d3c:	f7fc fc68 	bl	8004610 <HAL_GetTick>
 8007d40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d42:	4b39      	ldr	r3, [pc, #228]	@ (8007e28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	015b      	lsls	r3, r3, #5
 8007d48:	0d1b      	lsrs	r3, r3, #20
 8007d4a:	69fa      	ldr	r2, [r7, #28]
 8007d4c:	fb02 f303 	mul.w	r3, r2, r3
 8007d50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d52:	e054      	b.n	8007dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5a:	d050      	beq.n	8007dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d5c:	f7fc fc58 	bl	8004610 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d902      	bls.n	8007d72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d13d      	bne.n	8007dee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007d80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d8a:	d111      	bne.n	8007db0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d94:	d004      	beq.n	8007da0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d9e:	d107      	bne.n	8007db0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007dae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007db8:	d10f      	bne.n	8007dda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007dd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e017      	b.n	8007e1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	4013      	ands	r3, r2
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	bf0c      	ite	eq
 8007e0e:	2301      	moveq	r3, #1
 8007e10:	2300      	movne	r3, #0
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d19b      	bne.n	8007d54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3720      	adds	r7, #32
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20000010 	.word	0x20000010

08007e2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e40:	d111      	bne.n	8007e66 <SPI_EndRxTransaction+0x3a>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e4a:	d004      	beq.n	8007e56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e54:	d107      	bne.n	8007e66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e64:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e6e:	d12a      	bne.n	8007ec6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e78:	d012      	beq.n	8007ea0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2200      	movs	r2, #0
 8007e82:	2180      	movs	r1, #128	@ 0x80
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f7ff ff49 	bl	8007d1c <SPI_WaitFlagStateUntilTimeout>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d02d      	beq.n	8007eec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e94:	f043 0220 	orr.w	r2, r3, #32
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e026      	b.n	8007eee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f7ff ff36 	bl	8007d1c <SPI_WaitFlagStateUntilTimeout>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d01a      	beq.n	8007eec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eba:	f043 0220 	orr.w	r2, r3, #32
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e013      	b.n	8007eee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2101      	movs	r1, #1
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7ff ff23 	bl	8007d1c <SPI_WaitFlagStateUntilTimeout>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d007      	beq.n	8007eec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ee0:	f043 0220 	orr.w	r2, r3, #32
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e000      	b.n	8007eee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	2102      	movs	r1, #2
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7ff ff04 	bl	8007d1c <SPI_WaitFlagStateUntilTimeout>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d007      	beq.n	8007f2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f1e:	f043 0220 	orr.w	r2, r3, #32
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e032      	b.n	8007f90 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8007f98 <SPI_EndRxTxTransaction+0xa0>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8007f9c <SPI_EndRxTxTransaction+0xa4>)
 8007f30:	fba2 2303 	umull	r2, r3, r2, r3
 8007f34:	0d5b      	lsrs	r3, r3, #21
 8007f36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007f3a:	fb02 f303 	mul.w	r3, r2, r3
 8007f3e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f48:	d112      	bne.n	8007f70 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2200      	movs	r2, #0
 8007f52:	2180      	movs	r1, #128	@ 0x80
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f7ff fee1 	bl	8007d1c <SPI_WaitFlagStateUntilTimeout>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d016      	beq.n	8007f8e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f64:	f043 0220 	orr.w	r2, r3, #32
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e00f      	b.n	8007f90 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00a      	beq.n	8007f8c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f86:	2b80      	cmp	r3, #128	@ 0x80
 8007f88:	d0f2      	beq.n	8007f70 <SPI_EndRxTxTransaction+0x78>
 8007f8a:	e000      	b.n	8007f8e <SPI_EndRxTxTransaction+0x96>
        break;
 8007f8c:	bf00      	nop
  }

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	20000010 	.word	0x20000010
 8007f9c:	165e9f81 	.word	0x165e9f81

08007fa0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e038      	b.n	8008028 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d106      	bne.n	8007fd0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f7f9 fafa 	bl	80015c4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4610      	mov	r0, r2
 8007fdc:	f002 f834 	bl	800a048 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	68b9      	ldr	r1, [r7, #8]
 8007fec:	f002 f896 	bl	800a11c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6858      	ldr	r0, [r3, #4]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	689a      	ldr	r2, [r3, #8]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	f002 f8c3 	bl	800a188 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	6892      	ldr	r2, [r2, #8]
 800800a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	6892      	ldr	r2, [r2, #8]
 8008016:	f041 0101 	orr.w	r1, r1, #1
 800801a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e041      	b.n	80080c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d106      	bne.n	800805c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7fb f886 	bl	8003168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3304      	adds	r3, #4
 800806c:	4619      	mov	r1, r3
 800806e:	4610      	mov	r0, r2
 8008070:	f000 fcca 	bl	8008a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d001      	beq.n	80080e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e046      	b.n	8008176 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a23      	ldr	r2, [pc, #140]	@ (8008184 <HAL_TIM_Base_Start+0xb4>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d022      	beq.n	8008140 <HAL_TIM_Base_Start+0x70>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008102:	d01d      	beq.n	8008140 <HAL_TIM_Base_Start+0x70>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a1f      	ldr	r2, [pc, #124]	@ (8008188 <HAL_TIM_Base_Start+0xb8>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d018      	beq.n	8008140 <HAL_TIM_Base_Start+0x70>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a1e      	ldr	r2, [pc, #120]	@ (800818c <HAL_TIM_Base_Start+0xbc>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d013      	beq.n	8008140 <HAL_TIM_Base_Start+0x70>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a1c      	ldr	r2, [pc, #112]	@ (8008190 <HAL_TIM_Base_Start+0xc0>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d00e      	beq.n	8008140 <HAL_TIM_Base_Start+0x70>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a1b      	ldr	r2, [pc, #108]	@ (8008194 <HAL_TIM_Base_Start+0xc4>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d009      	beq.n	8008140 <HAL_TIM_Base_Start+0x70>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a19      	ldr	r2, [pc, #100]	@ (8008198 <HAL_TIM_Base_Start+0xc8>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d004      	beq.n	8008140 <HAL_TIM_Base_Start+0x70>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a18      	ldr	r2, [pc, #96]	@ (800819c <HAL_TIM_Base_Start+0xcc>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d111      	bne.n	8008164 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f003 0307 	and.w	r3, r3, #7
 800814a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b06      	cmp	r3, #6
 8008150:	d010      	beq.n	8008174 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f042 0201 	orr.w	r2, r2, #1
 8008160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008162:	e007      	b.n	8008174 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f042 0201 	orr.w	r2, r2, #1
 8008172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	40010000 	.word	0x40010000
 8008188:	40000400 	.word	0x40000400
 800818c:	40000800 	.word	0x40000800
 8008190:	40000c00 	.word	0x40000c00
 8008194:	40010400 	.word	0x40010400
 8008198:	40014000 	.word	0x40014000
 800819c:	40001800 	.word	0x40001800

080081a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d001      	beq.n	80081b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e04e      	b.n	8008256 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0201 	orr.w	r2, r2, #1
 80081ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a23      	ldr	r2, [pc, #140]	@ (8008264 <HAL_TIM_Base_Start_IT+0xc4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d022      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e2:	d01d      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a1f      	ldr	r2, [pc, #124]	@ (8008268 <HAL_TIM_Base_Start_IT+0xc8>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d018      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a1e      	ldr	r2, [pc, #120]	@ (800826c <HAL_TIM_Base_Start_IT+0xcc>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d013      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008270 <HAL_TIM_Base_Start_IT+0xd0>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d00e      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a1b      	ldr	r2, [pc, #108]	@ (8008274 <HAL_TIM_Base_Start_IT+0xd4>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d009      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a19      	ldr	r2, [pc, #100]	@ (8008278 <HAL_TIM_Base_Start_IT+0xd8>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d004      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x80>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a18      	ldr	r2, [pc, #96]	@ (800827c <HAL_TIM_Base_Start_IT+0xdc>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d111      	bne.n	8008244 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f003 0307 	and.w	r3, r3, #7
 800822a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b06      	cmp	r3, #6
 8008230:	d010      	beq.n	8008254 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f042 0201 	orr.w	r2, r2, #1
 8008240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008242:	e007      	b.n	8008254 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f042 0201 	orr.w	r2, r2, #1
 8008252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	40010000 	.word	0x40010000
 8008268:	40000400 	.word	0x40000400
 800826c:	40000800 	.word	0x40000800
 8008270:	40000c00 	.word	0x40000c00
 8008274:	40010400 	.word	0x40010400
 8008278:	40014000 	.word	0x40014000
 800827c:	40001800 	.word	0x40001800

08008280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e041      	b.n	8008316 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d106      	bne.n	80082ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f839 	bl	800831e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	f000 fba2 	bl	8008a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
	...

08008334 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d109      	bne.n	8008358 <HAL_TIM_PWM_Start+0x24>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b01      	cmp	r3, #1
 800834e:	bf14      	ite	ne
 8008350:	2301      	movne	r3, #1
 8008352:	2300      	moveq	r3, #0
 8008354:	b2db      	uxtb	r3, r3
 8008356:	e022      	b.n	800839e <HAL_TIM_PWM_Start+0x6a>
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	2b04      	cmp	r3, #4
 800835c:	d109      	bne.n	8008372 <HAL_TIM_PWM_Start+0x3e>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b01      	cmp	r3, #1
 8008368:	bf14      	ite	ne
 800836a:	2301      	movne	r3, #1
 800836c:	2300      	moveq	r3, #0
 800836e:	b2db      	uxtb	r3, r3
 8008370:	e015      	b.n	800839e <HAL_TIM_PWM_Start+0x6a>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b08      	cmp	r3, #8
 8008376:	d109      	bne.n	800838c <HAL_TIM_PWM_Start+0x58>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b01      	cmp	r3, #1
 8008382:	bf14      	ite	ne
 8008384:	2301      	movne	r3, #1
 8008386:	2300      	moveq	r3, #0
 8008388:	b2db      	uxtb	r3, r3
 800838a:	e008      	b.n	800839e <HAL_TIM_PWM_Start+0x6a>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b01      	cmp	r3, #1
 8008396:	bf14      	ite	ne
 8008398:	2301      	movne	r3, #1
 800839a:	2300      	moveq	r3, #0
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e07c      	b.n	80084a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d104      	bne.n	80083b6 <HAL_TIM_PWM_Start+0x82>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083b4:	e013      	b.n	80083de <HAL_TIM_PWM_Start+0xaa>
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d104      	bne.n	80083c6 <HAL_TIM_PWM_Start+0x92>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2202      	movs	r2, #2
 80083c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083c4:	e00b      	b.n	80083de <HAL_TIM_PWM_Start+0xaa>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d104      	bne.n	80083d6 <HAL_TIM_PWM_Start+0xa2>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2202      	movs	r2, #2
 80083d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083d4:	e003      	b.n	80083de <HAL_TIM_PWM_Start+0xaa>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2202      	movs	r2, #2
 80083da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2201      	movs	r2, #1
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 fe04 	bl	8008ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a2d      	ldr	r2, [pc, #180]	@ (80084a8 <HAL_TIM_PWM_Start+0x174>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d004      	beq.n	8008400 <HAL_TIM_PWM_Start+0xcc>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a2c      	ldr	r2, [pc, #176]	@ (80084ac <HAL_TIM_PWM_Start+0x178>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d101      	bne.n	8008404 <HAL_TIM_PWM_Start+0xd0>
 8008400:	2301      	movs	r3, #1
 8008402:	e000      	b.n	8008406 <HAL_TIM_PWM_Start+0xd2>
 8008404:	2300      	movs	r3, #0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d007      	beq.n	800841a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008418:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a22      	ldr	r2, [pc, #136]	@ (80084a8 <HAL_TIM_PWM_Start+0x174>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d022      	beq.n	800846a <HAL_TIM_PWM_Start+0x136>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800842c:	d01d      	beq.n	800846a <HAL_TIM_PWM_Start+0x136>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a1f      	ldr	r2, [pc, #124]	@ (80084b0 <HAL_TIM_PWM_Start+0x17c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d018      	beq.n	800846a <HAL_TIM_PWM_Start+0x136>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a1d      	ldr	r2, [pc, #116]	@ (80084b4 <HAL_TIM_PWM_Start+0x180>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d013      	beq.n	800846a <HAL_TIM_PWM_Start+0x136>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a1c      	ldr	r2, [pc, #112]	@ (80084b8 <HAL_TIM_PWM_Start+0x184>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d00e      	beq.n	800846a <HAL_TIM_PWM_Start+0x136>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a16      	ldr	r2, [pc, #88]	@ (80084ac <HAL_TIM_PWM_Start+0x178>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d009      	beq.n	800846a <HAL_TIM_PWM_Start+0x136>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a18      	ldr	r2, [pc, #96]	@ (80084bc <HAL_TIM_PWM_Start+0x188>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d004      	beq.n	800846a <HAL_TIM_PWM_Start+0x136>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a16      	ldr	r2, [pc, #88]	@ (80084c0 <HAL_TIM_PWM_Start+0x18c>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d111      	bne.n	800848e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f003 0307 	and.w	r3, r3, #7
 8008474:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2b06      	cmp	r3, #6
 800847a:	d010      	beq.n	800849e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0201 	orr.w	r2, r2, #1
 800848a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800848c:	e007      	b.n	800849e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f042 0201 	orr.w	r2, r2, #1
 800849c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	40010000 	.word	0x40010000
 80084ac:	40010400 	.word	0x40010400
 80084b0:	40000400 	.word	0x40000400
 80084b4:	40000800 	.word	0x40000800
 80084b8:	40000c00 	.word	0x40000c00
 80084bc:	40014000 	.word	0x40014000
 80084c0:	40001800 	.word	0x40001800

080084c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d020      	beq.n	8008528 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d01b      	beq.n	8008528 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f06f 0202 	mvn.w	r2, #2
 80084f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	f003 0303 	and.w	r3, r3, #3
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fa5b 	bl	80089ca <HAL_TIM_IC_CaptureCallback>
 8008514:	e005      	b.n	8008522 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fa4d 	bl	80089b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fa5e 	bl	80089de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f003 0304 	and.w	r3, r3, #4
 800852e:	2b00      	cmp	r3, #0
 8008530:	d020      	beq.n	8008574 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b00      	cmp	r3, #0
 800853a:	d01b      	beq.n	8008574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f06f 0204 	mvn.w	r2, #4
 8008544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2202      	movs	r2, #2
 800854a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa35 	bl	80089ca <HAL_TIM_IC_CaptureCallback>
 8008560:	e005      	b.n	800856e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fa27 	bl	80089b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fa38 	bl	80089de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f003 0308 	and.w	r3, r3, #8
 800857a:	2b00      	cmp	r3, #0
 800857c:	d020      	beq.n	80085c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b00      	cmp	r3, #0
 8008586:	d01b      	beq.n	80085c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f06f 0208 	mvn.w	r2, #8
 8008590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2204      	movs	r2, #4
 8008596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	f003 0303 	and.w	r3, r3, #3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fa0f 	bl	80089ca <HAL_TIM_IC_CaptureCallback>
 80085ac:	e005      	b.n	80085ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fa01 	bl	80089b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fa12 	bl	80089de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f003 0310 	and.w	r3, r3, #16
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d020      	beq.n	800860c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f003 0310 	and.w	r3, r3, #16
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d01b      	beq.n	800860c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f06f 0210 	mvn.w	r2, #16
 80085dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2208      	movs	r2, #8
 80085e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f9e9 	bl	80089ca <HAL_TIM_IC_CaptureCallback>
 80085f8:	e005      	b.n	8008606 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f9db 	bl	80089b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f9ec 	bl	80089de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00c      	beq.n	8008630 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d007      	beq.n	8008630 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f06f 0201 	mvn.w	r2, #1
 8008628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7fa fadc 	bl	8002be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00c      	beq.n	8008654 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008640:	2b00      	cmp	r3, #0
 8008642:	d007      	beq.n	8008654 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800864c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fd7c 	bl	800914c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00c      	beq.n	8008678 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d007      	beq.n	8008678 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f9bd 	bl	80089f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00c      	beq.n	800869c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f003 0320 	and.w	r3, r3, #32
 8008688:	2b00      	cmp	r3, #0
 800868a:	d007      	beq.n	800869c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f06f 0220 	mvn.w	r2, #32
 8008694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fd4e 	bl	8009138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800869c:	bf00      	nop
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d101      	bne.n	80086c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086be:	2302      	movs	r3, #2
 80086c0:	e0ae      	b.n	8008820 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b0c      	cmp	r3, #12
 80086ce:	f200 809f 	bhi.w	8008810 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80086d2:	a201      	add	r2, pc, #4	@ (adr r2, 80086d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80086d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d8:	0800870d 	.word	0x0800870d
 80086dc:	08008811 	.word	0x08008811
 80086e0:	08008811 	.word	0x08008811
 80086e4:	08008811 	.word	0x08008811
 80086e8:	0800874d 	.word	0x0800874d
 80086ec:	08008811 	.word	0x08008811
 80086f0:	08008811 	.word	0x08008811
 80086f4:	08008811 	.word	0x08008811
 80086f8:	0800878f 	.word	0x0800878f
 80086fc:	08008811 	.word	0x08008811
 8008700:	08008811 	.word	0x08008811
 8008704:	08008811 	.word	0x08008811
 8008708:	080087cf 	.word	0x080087cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68b9      	ldr	r1, [r7, #8]
 8008712:	4618      	mov	r0, r3
 8008714:	f000 fa24 	bl	8008b60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	699a      	ldr	r2, [r3, #24]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f042 0208 	orr.w	r2, r2, #8
 8008726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	699a      	ldr	r2, [r3, #24]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 0204 	bic.w	r2, r2, #4
 8008736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6999      	ldr	r1, [r3, #24]
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	691a      	ldr	r2, [r3, #16]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	430a      	orrs	r2, r1
 8008748:	619a      	str	r2, [r3, #24]
      break;
 800874a:	e064      	b.n	8008816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68b9      	ldr	r1, [r7, #8]
 8008752:	4618      	mov	r0, r3
 8008754:	f000 fa74 	bl	8008c40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699a      	ldr	r2, [r3, #24]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	699a      	ldr	r2, [r3, #24]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6999      	ldr	r1, [r3, #24]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	021a      	lsls	r2, r3, #8
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	430a      	orrs	r2, r1
 800878a:	619a      	str	r2, [r3, #24]
      break;
 800878c:	e043      	b.n	8008816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68b9      	ldr	r1, [r7, #8]
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fac9 	bl	8008d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	69da      	ldr	r2, [r3, #28]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f042 0208 	orr.w	r2, r2, #8
 80087a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	69da      	ldr	r2, [r3, #28]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 0204 	bic.w	r2, r2, #4
 80087b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	69d9      	ldr	r1, [r3, #28]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	691a      	ldr	r2, [r3, #16]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	61da      	str	r2, [r3, #28]
      break;
 80087cc:	e023      	b.n	8008816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68b9      	ldr	r1, [r7, #8]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fb1d 	bl	8008e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	69da      	ldr	r2, [r3, #28]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	69da      	ldr	r2, [r3, #28]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	69d9      	ldr	r1, [r3, #28]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	021a      	lsls	r2, r3, #8
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	430a      	orrs	r2, r1
 800880c:	61da      	str	r2, [r3, #28]
      break;
 800880e:	e002      	b.n	8008816 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	75fb      	strb	r3, [r7, #23]
      break;
 8008814:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800881e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800883c:	2b01      	cmp	r3, #1
 800883e:	d101      	bne.n	8008844 <HAL_TIM_ConfigClockSource+0x1c>
 8008840:	2302      	movs	r3, #2
 8008842:	e0b4      	b.n	80089ae <HAL_TIM_ConfigClockSource+0x186>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800886a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800887c:	d03e      	beq.n	80088fc <HAL_TIM_ConfigClockSource+0xd4>
 800887e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008882:	f200 8087 	bhi.w	8008994 <HAL_TIM_ConfigClockSource+0x16c>
 8008886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800888a:	f000 8086 	beq.w	800899a <HAL_TIM_ConfigClockSource+0x172>
 800888e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008892:	d87f      	bhi.n	8008994 <HAL_TIM_ConfigClockSource+0x16c>
 8008894:	2b70      	cmp	r3, #112	@ 0x70
 8008896:	d01a      	beq.n	80088ce <HAL_TIM_ConfigClockSource+0xa6>
 8008898:	2b70      	cmp	r3, #112	@ 0x70
 800889a:	d87b      	bhi.n	8008994 <HAL_TIM_ConfigClockSource+0x16c>
 800889c:	2b60      	cmp	r3, #96	@ 0x60
 800889e:	d050      	beq.n	8008942 <HAL_TIM_ConfigClockSource+0x11a>
 80088a0:	2b60      	cmp	r3, #96	@ 0x60
 80088a2:	d877      	bhi.n	8008994 <HAL_TIM_ConfigClockSource+0x16c>
 80088a4:	2b50      	cmp	r3, #80	@ 0x50
 80088a6:	d03c      	beq.n	8008922 <HAL_TIM_ConfigClockSource+0xfa>
 80088a8:	2b50      	cmp	r3, #80	@ 0x50
 80088aa:	d873      	bhi.n	8008994 <HAL_TIM_ConfigClockSource+0x16c>
 80088ac:	2b40      	cmp	r3, #64	@ 0x40
 80088ae:	d058      	beq.n	8008962 <HAL_TIM_ConfigClockSource+0x13a>
 80088b0:	2b40      	cmp	r3, #64	@ 0x40
 80088b2:	d86f      	bhi.n	8008994 <HAL_TIM_ConfigClockSource+0x16c>
 80088b4:	2b30      	cmp	r3, #48	@ 0x30
 80088b6:	d064      	beq.n	8008982 <HAL_TIM_ConfigClockSource+0x15a>
 80088b8:	2b30      	cmp	r3, #48	@ 0x30
 80088ba:	d86b      	bhi.n	8008994 <HAL_TIM_ConfigClockSource+0x16c>
 80088bc:	2b20      	cmp	r3, #32
 80088be:	d060      	beq.n	8008982 <HAL_TIM_ConfigClockSource+0x15a>
 80088c0:	2b20      	cmp	r3, #32
 80088c2:	d867      	bhi.n	8008994 <HAL_TIM_ConfigClockSource+0x16c>
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d05c      	beq.n	8008982 <HAL_TIM_ConfigClockSource+0x15a>
 80088c8:	2b10      	cmp	r3, #16
 80088ca:	d05a      	beq.n	8008982 <HAL_TIM_ConfigClockSource+0x15a>
 80088cc:	e062      	b.n	8008994 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088de:	f000 fb69 	bl	8008fb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80088f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	609a      	str	r2, [r3, #8]
      break;
 80088fa:	e04f      	b.n	800899c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800890c:	f000 fb52 	bl	8008fb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	689a      	ldr	r2, [r3, #8]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800891e:	609a      	str	r2, [r3, #8]
      break;
 8008920:	e03c      	b.n	800899c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800892e:	461a      	mov	r2, r3
 8008930:	f000 fac6 	bl	8008ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2150      	movs	r1, #80	@ 0x50
 800893a:	4618      	mov	r0, r3
 800893c:	f000 fb1f 	bl	8008f7e <TIM_ITRx_SetConfig>
      break;
 8008940:	e02c      	b.n	800899c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800894e:	461a      	mov	r2, r3
 8008950:	f000 fae5 	bl	8008f1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2160      	movs	r1, #96	@ 0x60
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fb0f 	bl	8008f7e <TIM_ITRx_SetConfig>
      break;
 8008960:	e01c      	b.n	800899c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800896e:	461a      	mov	r2, r3
 8008970:	f000 faa6 	bl	8008ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2140      	movs	r1, #64	@ 0x40
 800897a:	4618      	mov	r0, r3
 800897c:	f000 faff 	bl	8008f7e <TIM_ITRx_SetConfig>
      break;
 8008980:	e00c      	b.n	800899c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4619      	mov	r1, r3
 800898c:	4610      	mov	r0, r2
 800898e:	f000 faf6 	bl	8008f7e <TIM_ITRx_SetConfig>
      break;
 8008992:	e003      	b.n	800899c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	73fb      	strb	r3, [r7, #15]
      break;
 8008998:	e000      	b.n	800899c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800899a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089be:	bf00      	nop
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089d2:	bf00      	nop
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089e6:	bf00      	nop
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089fa:	bf00      	nop
 80089fc:	370c      	adds	r7, #12
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
	...

08008a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a46      	ldr	r2, [pc, #280]	@ (8008b34 <TIM_Base_SetConfig+0x12c>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d013      	beq.n	8008a48 <TIM_Base_SetConfig+0x40>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a26:	d00f      	beq.n	8008a48 <TIM_Base_SetConfig+0x40>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a43      	ldr	r2, [pc, #268]	@ (8008b38 <TIM_Base_SetConfig+0x130>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00b      	beq.n	8008a48 <TIM_Base_SetConfig+0x40>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a42      	ldr	r2, [pc, #264]	@ (8008b3c <TIM_Base_SetConfig+0x134>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d007      	beq.n	8008a48 <TIM_Base_SetConfig+0x40>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a41      	ldr	r2, [pc, #260]	@ (8008b40 <TIM_Base_SetConfig+0x138>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d003      	beq.n	8008a48 <TIM_Base_SetConfig+0x40>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a40      	ldr	r2, [pc, #256]	@ (8008b44 <TIM_Base_SetConfig+0x13c>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d108      	bne.n	8008a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a35      	ldr	r2, [pc, #212]	@ (8008b34 <TIM_Base_SetConfig+0x12c>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d02b      	beq.n	8008aba <TIM_Base_SetConfig+0xb2>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a68:	d027      	beq.n	8008aba <TIM_Base_SetConfig+0xb2>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a32      	ldr	r2, [pc, #200]	@ (8008b38 <TIM_Base_SetConfig+0x130>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d023      	beq.n	8008aba <TIM_Base_SetConfig+0xb2>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a31      	ldr	r2, [pc, #196]	@ (8008b3c <TIM_Base_SetConfig+0x134>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d01f      	beq.n	8008aba <TIM_Base_SetConfig+0xb2>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a30      	ldr	r2, [pc, #192]	@ (8008b40 <TIM_Base_SetConfig+0x138>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d01b      	beq.n	8008aba <TIM_Base_SetConfig+0xb2>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a2f      	ldr	r2, [pc, #188]	@ (8008b44 <TIM_Base_SetConfig+0x13c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d017      	beq.n	8008aba <TIM_Base_SetConfig+0xb2>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8008b48 <TIM_Base_SetConfig+0x140>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d013      	beq.n	8008aba <TIM_Base_SetConfig+0xb2>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a2d      	ldr	r2, [pc, #180]	@ (8008b4c <TIM_Base_SetConfig+0x144>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d00f      	beq.n	8008aba <TIM_Base_SetConfig+0xb2>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a2c      	ldr	r2, [pc, #176]	@ (8008b50 <TIM_Base_SetConfig+0x148>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d00b      	beq.n	8008aba <TIM_Base_SetConfig+0xb2>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a2b      	ldr	r2, [pc, #172]	@ (8008b54 <TIM_Base_SetConfig+0x14c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d007      	beq.n	8008aba <TIM_Base_SetConfig+0xb2>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a2a      	ldr	r2, [pc, #168]	@ (8008b58 <TIM_Base_SetConfig+0x150>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d003      	beq.n	8008aba <TIM_Base_SetConfig+0xb2>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a29      	ldr	r2, [pc, #164]	@ (8008b5c <TIM_Base_SetConfig+0x154>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d108      	bne.n	8008acc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	689a      	ldr	r2, [r3, #8]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a10      	ldr	r2, [pc, #64]	@ (8008b34 <TIM_Base_SetConfig+0x12c>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d003      	beq.n	8008b00 <TIM_Base_SetConfig+0xf8>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a12      	ldr	r2, [pc, #72]	@ (8008b44 <TIM_Base_SetConfig+0x13c>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d103      	bne.n	8008b08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	691a      	ldr	r2, [r3, #16]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d105      	bne.n	8008b26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f023 0201 	bic.w	r2, r3, #1
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	611a      	str	r2, [r3, #16]
  }
}
 8008b26:	bf00      	nop
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	40010000 	.word	0x40010000
 8008b38:	40000400 	.word	0x40000400
 8008b3c:	40000800 	.word	0x40000800
 8008b40:	40000c00 	.word	0x40000c00
 8008b44:	40010400 	.word	0x40010400
 8008b48:	40014000 	.word	0x40014000
 8008b4c:	40014400 	.word	0x40014400
 8008b50:	40014800 	.word	0x40014800
 8008b54:	40001800 	.word	0x40001800
 8008b58:	40001c00 	.word	0x40001c00
 8008b5c:	40002000 	.word	0x40002000

08008b60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b087      	sub	sp, #28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a1b      	ldr	r3, [r3, #32]
 8008b74:	f023 0201 	bic.w	r2, r3, #1
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f023 0303 	bic.w	r3, r3, #3
 8008b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	f023 0302 	bic.w	r3, r3, #2
 8008ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a20      	ldr	r2, [pc, #128]	@ (8008c38 <TIM_OC1_SetConfig+0xd8>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d003      	beq.n	8008bc4 <TIM_OC1_SetConfig+0x64>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8008c3c <TIM_OC1_SetConfig+0xdc>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d10c      	bne.n	8008bde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	f023 0308 	bic.w	r3, r3, #8
 8008bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	697a      	ldr	r2, [r7, #20]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	f023 0304 	bic.w	r3, r3, #4
 8008bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a15      	ldr	r2, [pc, #84]	@ (8008c38 <TIM_OC1_SetConfig+0xd8>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d003      	beq.n	8008bee <TIM_OC1_SetConfig+0x8e>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a14      	ldr	r2, [pc, #80]	@ (8008c3c <TIM_OC1_SetConfig+0xdc>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d111      	bne.n	8008c12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	621a      	str	r2, [r3, #32]
}
 8008c2c:	bf00      	nop
 8008c2e:	371c      	adds	r7, #28
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	40010000 	.word	0x40010000
 8008c3c:	40010400 	.word	0x40010400

08008c40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	f023 0210 	bic.w	r2, r3, #16
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	021b      	lsls	r3, r3, #8
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	f023 0320 	bic.w	r3, r3, #32
 8008c8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a22      	ldr	r2, [pc, #136]	@ (8008d24 <TIM_OC2_SetConfig+0xe4>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d003      	beq.n	8008ca8 <TIM_OC2_SetConfig+0x68>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a21      	ldr	r2, [pc, #132]	@ (8008d28 <TIM_OC2_SetConfig+0xe8>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d10d      	bne.n	8008cc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	011b      	lsls	r3, r3, #4
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a17      	ldr	r2, [pc, #92]	@ (8008d24 <TIM_OC2_SetConfig+0xe4>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d003      	beq.n	8008cd4 <TIM_OC2_SetConfig+0x94>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a16      	ldr	r2, [pc, #88]	@ (8008d28 <TIM_OC2_SetConfig+0xe8>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d113      	bne.n	8008cfc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008cda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	693a      	ldr	r2, [r7, #16]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	621a      	str	r2, [r3, #32]
}
 8008d16:	bf00      	nop
 8008d18:	371c      	adds	r7, #28
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	40010000 	.word	0x40010000
 8008d28:	40010400 	.word	0x40010400

08008d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
 8008d40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f023 0303 	bic.w	r3, r3, #3
 8008d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	021b      	lsls	r3, r3, #8
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a21      	ldr	r2, [pc, #132]	@ (8008e0c <TIM_OC3_SetConfig+0xe0>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d003      	beq.n	8008d92 <TIM_OC3_SetConfig+0x66>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a20      	ldr	r2, [pc, #128]	@ (8008e10 <TIM_OC3_SetConfig+0xe4>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d10d      	bne.n	8008dae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	021b      	lsls	r3, r3, #8
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a16      	ldr	r2, [pc, #88]	@ (8008e0c <TIM_OC3_SetConfig+0xe0>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d003      	beq.n	8008dbe <TIM_OC3_SetConfig+0x92>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a15      	ldr	r2, [pc, #84]	@ (8008e10 <TIM_OC3_SetConfig+0xe4>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d113      	bne.n	8008de6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	011b      	lsls	r3, r3, #4
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	011b      	lsls	r3, r3, #4
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	697a      	ldr	r2, [r7, #20]
 8008dfe:	621a      	str	r2, [r3, #32]
}
 8008e00:	bf00      	nop
 8008e02:	371c      	adds	r7, #28
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	40010000 	.word	0x40010000
 8008e10:	40010400 	.word	0x40010400

08008e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b087      	sub	sp, #28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a1b      	ldr	r3, [r3, #32]
 8008e28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	021b      	lsls	r3, r3, #8
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	031b      	lsls	r3, r3, #12
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a12      	ldr	r2, [pc, #72]	@ (8008eb8 <TIM_OC4_SetConfig+0xa4>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d003      	beq.n	8008e7c <TIM_OC4_SetConfig+0x68>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a11      	ldr	r2, [pc, #68]	@ (8008ebc <TIM_OC4_SetConfig+0xa8>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d109      	bne.n	8008e90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	019b      	lsls	r3, r3, #6
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	621a      	str	r2, [r3, #32]
}
 8008eaa:	bf00      	nop
 8008eac:	371c      	adds	r7, #28
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	40010000 	.word	0x40010000
 8008ebc:	40010400 	.word	0x40010400

08008ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6a1b      	ldr	r3, [r3, #32]
 8008ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	f023 0201 	bic.w	r2, r3, #1
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	011b      	lsls	r3, r3, #4
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f023 030a 	bic.w	r3, r3, #10
 8008efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	621a      	str	r2, [r3, #32]
}
 8008f12:	bf00      	nop
 8008f14:	371c      	adds	r7, #28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b087      	sub	sp, #28
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	60b9      	str	r1, [r7, #8]
 8008f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	f023 0210 	bic.w	r2, r3, #16
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	031b      	lsls	r3, r3, #12
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	011b      	lsls	r3, r3, #4
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	621a      	str	r2, [r3, #32]
}
 8008f72:	bf00      	nop
 8008f74:	371c      	adds	r7, #28
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b085      	sub	sp, #20
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	f043 0307 	orr.w	r3, r3, #7
 8008fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	609a      	str	r2, [r3, #8]
}
 8008fa8:	bf00      	nop
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b087      	sub	sp, #28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
 8008fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	021a      	lsls	r2, r3, #8
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	609a      	str	r2, [r3, #8]
}
 8008fe8:	bf00      	nop
 8008fea:	371c      	adds	r7, #28
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b087      	sub	sp, #28
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	f003 031f 	and.w	r3, r3, #31
 8009006:	2201      	movs	r2, #1
 8009008:	fa02 f303 	lsl.w	r3, r2, r3
 800900c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6a1a      	ldr	r2, [r3, #32]
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	43db      	mvns	r3, r3
 8009016:	401a      	ands	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6a1a      	ldr	r2, [r3, #32]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	f003 031f 	and.w	r3, r3, #31
 8009026:	6879      	ldr	r1, [r7, #4]
 8009028:	fa01 f303 	lsl.w	r3, r1, r3
 800902c:	431a      	orrs	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	621a      	str	r2, [r3, #32]
}
 8009032:	bf00      	nop
 8009034:	371c      	adds	r7, #28
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
	...

08009040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009054:	2302      	movs	r3, #2
 8009056:	e05a      	b.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2202      	movs	r2, #2
 8009064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800907e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	4313      	orrs	r3, r2
 8009088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a21      	ldr	r2, [pc, #132]	@ (800911c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d022      	beq.n	80090e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090a4:	d01d      	beq.n	80090e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a1d      	ldr	r2, [pc, #116]	@ (8009120 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d018      	beq.n	80090e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a1b      	ldr	r2, [pc, #108]	@ (8009124 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d013      	beq.n	80090e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a1a      	ldr	r2, [pc, #104]	@ (8009128 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d00e      	beq.n	80090e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a18      	ldr	r2, [pc, #96]	@ (800912c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d009      	beq.n	80090e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a17      	ldr	r2, [pc, #92]	@ (8009130 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d004      	beq.n	80090e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a15      	ldr	r2, [pc, #84]	@ (8009134 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d10c      	bne.n	80090fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	40010000 	.word	0x40010000
 8009120:	40000400 	.word	0x40000400
 8009124:	40000800 	.word	0x40000800
 8009128:	40000c00 	.word	0x40000c00
 800912c:	40010400 	.word	0x40010400
 8009130:	40014000 	.word	0x40014000
 8009134:	40001800 	.word	0x40001800

08009138 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e042      	b.n	80091f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d106      	bne.n	800918c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7fb f8e8 	bl	800435c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2224      	movs	r2, #36	@ 0x24
 8009190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68da      	ldr	r2, [r3, #12]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80091a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fcdb 	bl	8009b60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	691a      	ldr	r2, [r3, #16]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	695a      	ldr	r2, [r3, #20]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68da      	ldr	r2, [r3, #12]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2220      	movs	r2, #32
 80091ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	4613      	mov	r3, r2
 800920c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b20      	cmp	r3, #32
 8009218:	d112      	bne.n	8009240 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <HAL_UART_Receive_IT+0x26>
 8009220:	88fb      	ldrh	r3, [r7, #6]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e00b      	b.n	8009242 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009230:	88fb      	ldrh	r3, [r7, #6]
 8009232:	461a      	mov	r2, r3
 8009234:	68b9      	ldr	r1, [r7, #8]
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f000 faba 	bl	80097b0 <UART_Start_Receive_IT>
 800923c:	4603      	mov	r3, r0
 800923e:	e000      	b.n	8009242 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009240:	2302      	movs	r3, #2
  }
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b0ba      	sub	sp, #232	@ 0xe8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009272:	2300      	movs	r3, #0
 8009274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009278:	2300      	movs	r3, #0
 800927a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800927e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009282:	f003 030f 	and.w	r3, r3, #15
 8009286:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800928a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10f      	bne.n	80092b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b00      	cmp	r3, #0
 800929c:	d009      	beq.n	80092b2 <HAL_UART_IRQHandler+0x66>
 800929e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092a2:	f003 0320 	and.w	r3, r3, #32
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fb99 	bl	80099e2 <UART_Receive_IT>
      return;
 80092b0:	e25b      	b.n	800976a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80092b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 80de 	beq.w	8009478 <HAL_UART_IRQHandler+0x22c>
 80092bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d106      	bne.n	80092d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80092c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 80d1 	beq.w	8009478 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80092d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00b      	beq.n	80092fa <HAL_UART_IRQHandler+0xae>
 80092e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d005      	beq.n	80092fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092f2:	f043 0201 	orr.w	r2, r3, #1
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092fe:	f003 0304 	and.w	r3, r3, #4
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00b      	beq.n	800931e <HAL_UART_IRQHandler+0xd2>
 8009306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	2b00      	cmp	r3, #0
 8009310:	d005      	beq.n	800931e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009316:	f043 0202 	orr.w	r2, r3, #2
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800931e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009322:	f003 0302 	and.w	r3, r3, #2
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00b      	beq.n	8009342 <HAL_UART_IRQHandler+0xf6>
 800932a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d005      	beq.n	8009342 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800933a:	f043 0204 	orr.w	r2, r3, #4
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009346:	f003 0308 	and.w	r3, r3, #8
 800934a:	2b00      	cmp	r3, #0
 800934c:	d011      	beq.n	8009372 <HAL_UART_IRQHandler+0x126>
 800934e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	2b00      	cmp	r3, #0
 8009358:	d105      	bne.n	8009366 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800935a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b00      	cmp	r3, #0
 8009364:	d005      	beq.n	8009372 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800936a:	f043 0208 	orr.w	r2, r3, #8
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 81f2 	beq.w	8009760 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800937c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009380:	f003 0320 	and.w	r3, r3, #32
 8009384:	2b00      	cmp	r3, #0
 8009386:	d008      	beq.n	800939a <HAL_UART_IRQHandler+0x14e>
 8009388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800938c:	f003 0320 	and.w	r3, r3, #32
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fb24 	bl	80099e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093a4:	2b40      	cmp	r3, #64	@ 0x40
 80093a6:	bf0c      	ite	eq
 80093a8:	2301      	moveq	r3, #1
 80093aa:	2300      	movne	r3, #0
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093b6:	f003 0308 	and.w	r3, r3, #8
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d103      	bne.n	80093c6 <HAL_UART_IRQHandler+0x17a>
 80093be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d04f      	beq.n	8009466 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fa2c 	bl	8009824 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d6:	2b40      	cmp	r3, #64	@ 0x40
 80093d8:	d141      	bne.n	800945e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3314      	adds	r3, #20
 80093e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093e8:	e853 3f00 	ldrex	r3, [r3]
 80093ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80093f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3314      	adds	r3, #20
 8009402:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009406:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800940a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009412:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009416:	e841 2300 	strex	r3, r2, [r1]
 800941a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800941e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1d9      	bne.n	80093da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800942a:	2b00      	cmp	r3, #0
 800942c:	d013      	beq.n	8009456 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009432:	4a7e      	ldr	r2, [pc, #504]	@ (800962c <HAL_UART_IRQHandler+0x3e0>)
 8009434:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800943a:	4618      	mov	r0, r3
 800943c:	f7fb fdaa 	bl	8004f94 <HAL_DMA_Abort_IT>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d016      	beq.n	8009474 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800944a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009450:	4610      	mov	r0, r2
 8009452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009454:	e00e      	b.n	8009474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f994 	bl	8009784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800945c:	e00a      	b.n	8009474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f990 	bl	8009784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009464:	e006      	b.n	8009474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f98c 	bl	8009784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009472:	e175      	b.n	8009760 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009474:	bf00      	nop
    return;
 8009476:	e173      	b.n	8009760 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800947c:	2b01      	cmp	r3, #1
 800947e:	f040 814f 	bne.w	8009720 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009486:	f003 0310 	and.w	r3, r3, #16
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 8148 	beq.w	8009720 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009494:	f003 0310 	and.w	r3, r3, #16
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 8141 	beq.w	8009720 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800949e:	2300      	movs	r3, #0
 80094a0:	60bb      	str	r3, [r7, #8]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	60bb      	str	r3, [r7, #8]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	60bb      	str	r3, [r7, #8]
 80094b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094be:	2b40      	cmp	r3, #64	@ 0x40
 80094c0:	f040 80b6 	bne.w	8009630 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80094d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 8145 	beq.w	8009764 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80094de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094e2:	429a      	cmp	r2, r3
 80094e4:	f080 813e 	bcs.w	8009764 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094fa:	f000 8088 	beq.w	800960e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	330c      	adds	r3, #12
 8009504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009508:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800950c:	e853 3f00 	ldrex	r3, [r3]
 8009510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009514:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800951c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	330c      	adds	r3, #12
 8009526:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800952a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800952e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009532:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009536:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800953a:	e841 2300 	strex	r3, r2, [r1]
 800953e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1d9      	bne.n	80094fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3314      	adds	r3, #20
 8009550:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800955a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800955c:	f023 0301 	bic.w	r3, r3, #1
 8009560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3314      	adds	r3, #20
 800956a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800956e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009572:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009574:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009576:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e1      	bne.n	800954a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3314      	adds	r3, #20
 800958c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800959c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	3314      	adds	r3, #20
 80095a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80095aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80095ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80095b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80095b2:	e841 2300 	strex	r3, r2, [r1]
 80095b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80095b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1e3      	bne.n	8009586 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	330c      	adds	r3, #12
 80095d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095d6:	e853 3f00 	ldrex	r3, [r3]
 80095da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095de:	f023 0310 	bic.w	r3, r3, #16
 80095e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	330c      	adds	r3, #12
 80095ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80095f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80095f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095f8:	e841 2300 	strex	r3, r2, [r1]
 80095fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80095fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e3      	bne.n	80095cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009608:	4618      	mov	r0, r3
 800960a:	f7fb fc53 	bl	8004eb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2202      	movs	r2, #2
 8009612:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800961c:	b29b      	uxth	r3, r3
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	b29b      	uxth	r3, r3
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f8b7 	bl	8009798 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800962a:	e09b      	b.n	8009764 <HAL_UART_IRQHandler+0x518>
 800962c:	080098eb 	.word	0x080098eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009638:	b29b      	uxth	r3, r3
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009644:	b29b      	uxth	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 808e 	beq.w	8009768 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800964c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 8089 	beq.w	8009768 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	330c      	adds	r3, #12
 800965c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009660:	e853 3f00 	ldrex	r3, [r3]
 8009664:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009668:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800966c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	330c      	adds	r3, #12
 8009676:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800967a:	647a      	str	r2, [r7, #68]	@ 0x44
 800967c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009682:	e841 2300 	strex	r3, r2, [r1]
 8009686:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1e3      	bne.n	8009656 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3314      	adds	r3, #20
 8009694:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009698:	e853 3f00 	ldrex	r3, [r3]
 800969c:	623b      	str	r3, [r7, #32]
   return(result);
 800969e:	6a3b      	ldr	r3, [r7, #32]
 80096a0:	f023 0301 	bic.w	r3, r3, #1
 80096a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	3314      	adds	r3, #20
 80096ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80096b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80096b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e3      	bne.n	800968e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	330c      	adds	r3, #12
 80096da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	e853 3f00 	ldrex	r3, [r3]
 80096e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 0310 	bic.w	r3, r3, #16
 80096ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	330c      	adds	r3, #12
 80096f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80096f8:	61fa      	str	r2, [r7, #28]
 80096fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fc:	69b9      	ldr	r1, [r7, #24]
 80096fe:	69fa      	ldr	r2, [r7, #28]
 8009700:	e841 2300 	strex	r3, r2, [r1]
 8009704:	617b      	str	r3, [r7, #20]
   return(result);
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1e3      	bne.n	80096d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2202      	movs	r2, #2
 8009710:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009712:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f83d 	bl	8009798 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800971e:	e023      	b.n	8009768 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009728:	2b00      	cmp	r3, #0
 800972a:	d009      	beq.n	8009740 <HAL_UART_IRQHandler+0x4f4>
 800972c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009734:	2b00      	cmp	r3, #0
 8009736:	d003      	beq.n	8009740 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f8ea 	bl	8009912 <UART_Transmit_IT>
    return;
 800973e:	e014      	b.n	800976a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00e      	beq.n	800976a <HAL_UART_IRQHandler+0x51e>
 800974c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009754:	2b00      	cmp	r3, #0
 8009756:	d008      	beq.n	800976a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 f92a 	bl	80099b2 <UART_EndTransmit_IT>
    return;
 800975e:	e004      	b.n	800976a <HAL_UART_IRQHandler+0x51e>
    return;
 8009760:	bf00      	nop
 8009762:	e002      	b.n	800976a <HAL_UART_IRQHandler+0x51e>
      return;
 8009764:	bf00      	nop
 8009766:	e000      	b.n	800976a <HAL_UART_IRQHandler+0x51e>
      return;
 8009768:	bf00      	nop
  }
}
 800976a:	37e8      	adds	r7, #232	@ 0xe8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	4613      	mov	r3, r2
 80097bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	88fa      	ldrh	r2, [r7, #6]
 80097c8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	88fa      	ldrh	r2, [r7, #6]
 80097ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2222      	movs	r2, #34	@ 0x22
 80097da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d007      	beq.n	80097f6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68da      	ldr	r2, [r3, #12]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	695a      	ldr	r2, [r3, #20]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f042 0201 	orr.w	r2, r2, #1
 8009804:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68da      	ldr	r2, [r3, #12]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f042 0220 	orr.w	r2, r2, #32
 8009814:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009824:	b480      	push	{r7}
 8009826:	b095      	sub	sp, #84	@ 0x54
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	330c      	adds	r3, #12
 8009832:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009836:	e853 3f00 	ldrex	r3, [r3]
 800983a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800983c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	330c      	adds	r3, #12
 800984a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800984c:	643a      	str	r2, [r7, #64]	@ 0x40
 800984e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009850:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009852:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009854:	e841 2300 	strex	r3, r2, [r1]
 8009858:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800985a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1e5      	bne.n	800982c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3314      	adds	r3, #20
 8009866:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009868:	6a3b      	ldr	r3, [r7, #32]
 800986a:	e853 3f00 	ldrex	r3, [r3]
 800986e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	f023 0301 	bic.w	r3, r3, #1
 8009876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3314      	adds	r3, #20
 800987e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009880:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009882:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009884:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009888:	e841 2300 	strex	r3, r2, [r1]
 800988c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800988e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e5      	bne.n	8009860 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009898:	2b01      	cmp	r3, #1
 800989a:	d119      	bne.n	80098d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	330c      	adds	r3, #12
 80098a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	e853 3f00 	ldrex	r3, [r3]
 80098aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	f023 0310 	bic.w	r3, r3, #16
 80098b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	330c      	adds	r3, #12
 80098ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098bc:	61ba      	str	r2, [r7, #24]
 80098be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c0:	6979      	ldr	r1, [r7, #20]
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	e841 2300 	strex	r3, r2, [r1]
 80098c8:	613b      	str	r3, [r7, #16]
   return(result);
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1e5      	bne.n	800989c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80098de:	bf00      	nop
 80098e0:	3754      	adds	r7, #84	@ 0x54
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b084      	sub	sp, #16
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f7ff ff3d 	bl	8009784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800990a:	bf00      	nop
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009912:	b480      	push	{r7}
 8009914:	b085      	sub	sp, #20
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b21      	cmp	r3, #33	@ 0x21
 8009924:	d13e      	bne.n	80099a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800992e:	d114      	bne.n	800995a <UART_Transmit_IT+0x48>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d110      	bne.n	800995a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a1b      	ldr	r3, [r3, #32]
 800993c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	881b      	ldrh	r3, [r3, #0]
 8009942:	461a      	mov	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800994c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	1c9a      	adds	r2, r3, #2
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	621a      	str	r2, [r3, #32]
 8009958:	e008      	b.n	800996c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	1c59      	adds	r1, r3, #1
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	6211      	str	r1, [r2, #32]
 8009964:	781a      	ldrb	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009970:	b29b      	uxth	r3, r3
 8009972:	3b01      	subs	r3, #1
 8009974:	b29b      	uxth	r3, r3
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	4619      	mov	r1, r3
 800997a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10f      	bne.n	80099a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68da      	ldr	r2, [r3, #12]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800998e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68da      	ldr	r2, [r3, #12]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800999e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	e000      	b.n	80099a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80099a4:	2302      	movs	r3, #2
  }
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b082      	sub	sp, #8
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68da      	ldr	r2, [r3, #12]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2220      	movs	r2, #32
 80099ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f7ff fecc 	bl	8009770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b08c      	sub	sp, #48	@ 0x30
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b22      	cmp	r3, #34	@ 0x22
 80099f4:	f040 80ae 	bne.w	8009b54 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a00:	d117      	bne.n	8009a32 <UART_Receive_IT+0x50>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d113      	bne.n	8009a32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a12:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a2a:	1c9a      	adds	r2, r3, #2
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009a30:	e026      	b.n	8009a80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a44:	d007      	beq.n	8009a56 <UART_Receive_IT+0x74>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10a      	bne.n	8009a64 <UART_Receive_IT+0x82>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d106      	bne.n	8009a64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a60:	701a      	strb	r2, [r3, #0]
 8009a62:	e008      	b.n	8009a76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a7a:	1c5a      	adds	r2, r3, #1
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	3b01      	subs	r3, #1
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d15d      	bne.n	8009b50 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68da      	ldr	r2, [r3, #12]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f022 0220 	bic.w	r2, r2, #32
 8009aa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68da      	ldr	r2, [r3, #12]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009ab2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	695a      	ldr	r2, [r3, #20]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f022 0201 	bic.w	r2, r2, #1
 8009ac2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2220      	movs	r2, #32
 8009ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d135      	bne.n	8009b46 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	330c      	adds	r3, #12
 8009ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	e853 3f00 	ldrex	r3, [r3]
 8009aee:	613b      	str	r3, [r7, #16]
   return(result);
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	f023 0310 	bic.w	r3, r3, #16
 8009af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	330c      	adds	r3, #12
 8009afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b00:	623a      	str	r2, [r7, #32]
 8009b02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b04:	69f9      	ldr	r1, [r7, #28]
 8009b06:	6a3a      	ldr	r2, [r7, #32]
 8009b08:	e841 2300 	strex	r3, r2, [r1]
 8009b0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1e5      	bne.n	8009ae0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 0310 	and.w	r3, r3, #16
 8009b1e:	2b10      	cmp	r3, #16
 8009b20:	d10a      	bne.n	8009b38 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b22:	2300      	movs	r3, #0
 8009b24:	60fb      	str	r3, [r7, #12]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	60fb      	str	r3, [r7, #12]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	60fb      	str	r3, [r7, #12]
 8009b36:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7ff fe2a 	bl	8009798 <HAL_UARTEx_RxEventCallback>
 8009b44:	e002      	b.n	8009b4c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7fa fafe 	bl	8004148 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e002      	b.n	8009b56 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	e000      	b.n	8009b56 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009b54:	2302      	movs	r3, #2
  }
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3730      	adds	r7, #48	@ 0x30
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b64:	b0c0      	sub	sp, #256	@ 0x100
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b7c:	68d9      	ldr	r1, [r3, #12]
 8009b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	ea40 0301 	orr.w	r3, r0, r1
 8009b88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b8e:	689a      	ldr	r2, [r3, #8]
 8009b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	431a      	orrs	r2, r3
 8009b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b9c:	695b      	ldr	r3, [r3, #20]
 8009b9e:	431a      	orrs	r2, r3
 8009ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ba4:	69db      	ldr	r3, [r3, #28]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009bb8:	f021 010c 	bic.w	r1, r1, #12
 8009bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009bc6:	430b      	orrs	r3, r1
 8009bc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	695b      	ldr	r3, [r3, #20]
 8009bd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bda:	6999      	ldr	r1, [r3, #24]
 8009bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	ea40 0301 	orr.w	r3, r0, r1
 8009be6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	4b8f      	ldr	r3, [pc, #572]	@ (8009e2c <UART_SetConfig+0x2cc>)
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d005      	beq.n	8009c00 <UART_SetConfig+0xa0>
 8009bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	4b8d      	ldr	r3, [pc, #564]	@ (8009e30 <UART_SetConfig+0x2d0>)
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d104      	bne.n	8009c0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c00:	f7fd fbe4 	bl	80073cc <HAL_RCC_GetPCLK2Freq>
 8009c04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009c08:	e003      	b.n	8009c12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c0a:	f7fd fbcb 	bl	80073a4 <HAL_RCC_GetPCLK1Freq>
 8009c0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c16:	69db      	ldr	r3, [r3, #28]
 8009c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c1c:	f040 810c 	bne.w	8009e38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c24:	2200      	movs	r2, #0
 8009c26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009c2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009c32:	4622      	mov	r2, r4
 8009c34:	462b      	mov	r3, r5
 8009c36:	1891      	adds	r1, r2, r2
 8009c38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009c3a:	415b      	adcs	r3, r3
 8009c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009c42:	4621      	mov	r1, r4
 8009c44:	eb12 0801 	adds.w	r8, r2, r1
 8009c48:	4629      	mov	r1, r5
 8009c4a:	eb43 0901 	adc.w	r9, r3, r1
 8009c4e:	f04f 0200 	mov.w	r2, #0
 8009c52:	f04f 0300 	mov.w	r3, #0
 8009c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c62:	4690      	mov	r8, r2
 8009c64:	4699      	mov	r9, r3
 8009c66:	4623      	mov	r3, r4
 8009c68:	eb18 0303 	adds.w	r3, r8, r3
 8009c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c70:	462b      	mov	r3, r5
 8009c72:	eb49 0303 	adc.w	r3, r9, r3
 8009c76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009c8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009c8e:	460b      	mov	r3, r1
 8009c90:	18db      	adds	r3, r3, r3
 8009c92:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c94:	4613      	mov	r3, r2
 8009c96:	eb42 0303 	adc.w	r3, r2, r3
 8009c9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009ca0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009ca4:	f7f6 ff24 	bl	8000af0 <__aeabi_uldivmod>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	4b61      	ldr	r3, [pc, #388]	@ (8009e34 <UART_SetConfig+0x2d4>)
 8009cae:	fba3 2302 	umull	r2, r3, r3, r2
 8009cb2:	095b      	lsrs	r3, r3, #5
 8009cb4:	011c      	lsls	r4, r3, #4
 8009cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009cc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009cc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009cc8:	4642      	mov	r2, r8
 8009cca:	464b      	mov	r3, r9
 8009ccc:	1891      	adds	r1, r2, r2
 8009cce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009cd0:	415b      	adcs	r3, r3
 8009cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009cd8:	4641      	mov	r1, r8
 8009cda:	eb12 0a01 	adds.w	sl, r2, r1
 8009cde:	4649      	mov	r1, r9
 8009ce0:	eb43 0b01 	adc.w	fp, r3, r1
 8009ce4:	f04f 0200 	mov.w	r2, #0
 8009ce8:	f04f 0300 	mov.w	r3, #0
 8009cec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009cf0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009cf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cf8:	4692      	mov	sl, r2
 8009cfa:	469b      	mov	fp, r3
 8009cfc:	4643      	mov	r3, r8
 8009cfe:	eb1a 0303 	adds.w	r3, sl, r3
 8009d02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d06:	464b      	mov	r3, r9
 8009d08:	eb4b 0303 	adc.w	r3, fp, r3
 8009d0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009d20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d24:	460b      	mov	r3, r1
 8009d26:	18db      	adds	r3, r3, r3
 8009d28:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	eb42 0303 	adc.w	r3, r2, r3
 8009d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009d36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009d3a:	f7f6 fed9 	bl	8000af0 <__aeabi_uldivmod>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	4611      	mov	r1, r2
 8009d44:	4b3b      	ldr	r3, [pc, #236]	@ (8009e34 <UART_SetConfig+0x2d4>)
 8009d46:	fba3 2301 	umull	r2, r3, r3, r1
 8009d4a:	095b      	lsrs	r3, r3, #5
 8009d4c:	2264      	movs	r2, #100	@ 0x64
 8009d4e:	fb02 f303 	mul.w	r3, r2, r3
 8009d52:	1acb      	subs	r3, r1, r3
 8009d54:	00db      	lsls	r3, r3, #3
 8009d56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009d5a:	4b36      	ldr	r3, [pc, #216]	@ (8009e34 <UART_SetConfig+0x2d4>)
 8009d5c:	fba3 2302 	umull	r2, r3, r3, r2
 8009d60:	095b      	lsrs	r3, r3, #5
 8009d62:	005b      	lsls	r3, r3, #1
 8009d64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009d68:	441c      	add	r4, r3
 8009d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009d78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009d7c:	4642      	mov	r2, r8
 8009d7e:	464b      	mov	r3, r9
 8009d80:	1891      	adds	r1, r2, r2
 8009d82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009d84:	415b      	adcs	r3, r3
 8009d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009d8c:	4641      	mov	r1, r8
 8009d8e:	1851      	adds	r1, r2, r1
 8009d90:	6339      	str	r1, [r7, #48]	@ 0x30
 8009d92:	4649      	mov	r1, r9
 8009d94:	414b      	adcs	r3, r1
 8009d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d98:	f04f 0200 	mov.w	r2, #0
 8009d9c:	f04f 0300 	mov.w	r3, #0
 8009da0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009da4:	4659      	mov	r1, fp
 8009da6:	00cb      	lsls	r3, r1, #3
 8009da8:	4651      	mov	r1, sl
 8009daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009dae:	4651      	mov	r1, sl
 8009db0:	00ca      	lsls	r2, r1, #3
 8009db2:	4610      	mov	r0, r2
 8009db4:	4619      	mov	r1, r3
 8009db6:	4603      	mov	r3, r0
 8009db8:	4642      	mov	r2, r8
 8009dba:	189b      	adds	r3, r3, r2
 8009dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009dc0:	464b      	mov	r3, r9
 8009dc2:	460a      	mov	r2, r1
 8009dc4:	eb42 0303 	adc.w	r3, r2, r3
 8009dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009dd8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009ddc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009de0:	460b      	mov	r3, r1
 8009de2:	18db      	adds	r3, r3, r3
 8009de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009de6:	4613      	mov	r3, r2
 8009de8:	eb42 0303 	adc.w	r3, r2, r3
 8009dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009df2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009df6:	f7f6 fe7b 	bl	8000af0 <__aeabi_uldivmod>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8009e34 <UART_SetConfig+0x2d4>)
 8009e00:	fba3 1302 	umull	r1, r3, r3, r2
 8009e04:	095b      	lsrs	r3, r3, #5
 8009e06:	2164      	movs	r1, #100	@ 0x64
 8009e08:	fb01 f303 	mul.w	r3, r1, r3
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	00db      	lsls	r3, r3, #3
 8009e10:	3332      	adds	r3, #50	@ 0x32
 8009e12:	4a08      	ldr	r2, [pc, #32]	@ (8009e34 <UART_SetConfig+0x2d4>)
 8009e14:	fba2 2303 	umull	r2, r3, r2, r3
 8009e18:	095b      	lsrs	r3, r3, #5
 8009e1a:	f003 0207 	and.w	r2, r3, #7
 8009e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4422      	add	r2, r4
 8009e26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e28:	e106      	b.n	800a038 <UART_SetConfig+0x4d8>
 8009e2a:	bf00      	nop
 8009e2c:	40011000 	.word	0x40011000
 8009e30:	40011400 	.word	0x40011400
 8009e34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009e46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009e4a:	4642      	mov	r2, r8
 8009e4c:	464b      	mov	r3, r9
 8009e4e:	1891      	adds	r1, r2, r2
 8009e50:	6239      	str	r1, [r7, #32]
 8009e52:	415b      	adcs	r3, r3
 8009e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e5a:	4641      	mov	r1, r8
 8009e5c:	1854      	adds	r4, r2, r1
 8009e5e:	4649      	mov	r1, r9
 8009e60:	eb43 0501 	adc.w	r5, r3, r1
 8009e64:	f04f 0200 	mov.w	r2, #0
 8009e68:	f04f 0300 	mov.w	r3, #0
 8009e6c:	00eb      	lsls	r3, r5, #3
 8009e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e72:	00e2      	lsls	r2, r4, #3
 8009e74:	4614      	mov	r4, r2
 8009e76:	461d      	mov	r5, r3
 8009e78:	4643      	mov	r3, r8
 8009e7a:	18e3      	adds	r3, r4, r3
 8009e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e80:	464b      	mov	r3, r9
 8009e82:	eb45 0303 	adc.w	r3, r5, r3
 8009e86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e9a:	f04f 0200 	mov.w	r2, #0
 8009e9e:	f04f 0300 	mov.w	r3, #0
 8009ea2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	008b      	lsls	r3, r1, #2
 8009eaa:	4621      	mov	r1, r4
 8009eac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	008a      	lsls	r2, r1, #2
 8009eb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009eb8:	f7f6 fe1a 	bl	8000af0 <__aeabi_uldivmod>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4b60      	ldr	r3, [pc, #384]	@ (800a044 <UART_SetConfig+0x4e4>)
 8009ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8009ec6:	095b      	lsrs	r3, r3, #5
 8009ec8:	011c      	lsls	r4, r3, #4
 8009eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ed4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009ed8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009edc:	4642      	mov	r2, r8
 8009ede:	464b      	mov	r3, r9
 8009ee0:	1891      	adds	r1, r2, r2
 8009ee2:	61b9      	str	r1, [r7, #24]
 8009ee4:	415b      	adcs	r3, r3
 8009ee6:	61fb      	str	r3, [r7, #28]
 8009ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009eec:	4641      	mov	r1, r8
 8009eee:	1851      	adds	r1, r2, r1
 8009ef0:	6139      	str	r1, [r7, #16]
 8009ef2:	4649      	mov	r1, r9
 8009ef4:	414b      	adcs	r3, r1
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	f04f 0200 	mov.w	r2, #0
 8009efc:	f04f 0300 	mov.w	r3, #0
 8009f00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f04:	4659      	mov	r1, fp
 8009f06:	00cb      	lsls	r3, r1, #3
 8009f08:	4651      	mov	r1, sl
 8009f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f0e:	4651      	mov	r1, sl
 8009f10:	00ca      	lsls	r2, r1, #3
 8009f12:	4610      	mov	r0, r2
 8009f14:	4619      	mov	r1, r3
 8009f16:	4603      	mov	r3, r0
 8009f18:	4642      	mov	r2, r8
 8009f1a:	189b      	adds	r3, r3, r2
 8009f1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f20:	464b      	mov	r3, r9
 8009f22:	460a      	mov	r2, r1
 8009f24:	eb42 0303 	adc.w	r3, r2, r3
 8009f28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009f38:	f04f 0200 	mov.w	r2, #0
 8009f3c:	f04f 0300 	mov.w	r3, #0
 8009f40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009f44:	4649      	mov	r1, r9
 8009f46:	008b      	lsls	r3, r1, #2
 8009f48:	4641      	mov	r1, r8
 8009f4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f4e:	4641      	mov	r1, r8
 8009f50:	008a      	lsls	r2, r1, #2
 8009f52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009f56:	f7f6 fdcb 	bl	8000af0 <__aeabi_uldivmod>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4611      	mov	r1, r2
 8009f60:	4b38      	ldr	r3, [pc, #224]	@ (800a044 <UART_SetConfig+0x4e4>)
 8009f62:	fba3 2301 	umull	r2, r3, r3, r1
 8009f66:	095b      	lsrs	r3, r3, #5
 8009f68:	2264      	movs	r2, #100	@ 0x64
 8009f6a:	fb02 f303 	mul.w	r3, r2, r3
 8009f6e:	1acb      	subs	r3, r1, r3
 8009f70:	011b      	lsls	r3, r3, #4
 8009f72:	3332      	adds	r3, #50	@ 0x32
 8009f74:	4a33      	ldr	r2, [pc, #204]	@ (800a044 <UART_SetConfig+0x4e4>)
 8009f76:	fba2 2303 	umull	r2, r3, r2, r3
 8009f7a:	095b      	lsrs	r3, r3, #5
 8009f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f80:	441c      	add	r4, r3
 8009f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f86:	2200      	movs	r2, #0
 8009f88:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8009f8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009f90:	4642      	mov	r2, r8
 8009f92:	464b      	mov	r3, r9
 8009f94:	1891      	adds	r1, r2, r2
 8009f96:	60b9      	str	r1, [r7, #8]
 8009f98:	415b      	adcs	r3, r3
 8009f9a:	60fb      	str	r3, [r7, #12]
 8009f9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009fa0:	4641      	mov	r1, r8
 8009fa2:	1851      	adds	r1, r2, r1
 8009fa4:	6039      	str	r1, [r7, #0]
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	414b      	adcs	r3, r1
 8009faa:	607b      	str	r3, [r7, #4]
 8009fac:	f04f 0200 	mov.w	r2, #0
 8009fb0:	f04f 0300 	mov.w	r3, #0
 8009fb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009fb8:	4659      	mov	r1, fp
 8009fba:	00cb      	lsls	r3, r1, #3
 8009fbc:	4651      	mov	r1, sl
 8009fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fc2:	4651      	mov	r1, sl
 8009fc4:	00ca      	lsls	r2, r1, #3
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	4619      	mov	r1, r3
 8009fca:	4603      	mov	r3, r0
 8009fcc:	4642      	mov	r2, r8
 8009fce:	189b      	adds	r3, r3, r2
 8009fd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fd2:	464b      	mov	r3, r9
 8009fd4:	460a      	mov	r2, r1
 8009fd6:	eb42 0303 	adc.w	r3, r2, r3
 8009fda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fe6:	667a      	str	r2, [r7, #100]	@ 0x64
 8009fe8:	f04f 0200 	mov.w	r2, #0
 8009fec:	f04f 0300 	mov.w	r3, #0
 8009ff0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009ff4:	4649      	mov	r1, r9
 8009ff6:	008b      	lsls	r3, r1, #2
 8009ff8:	4641      	mov	r1, r8
 8009ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ffe:	4641      	mov	r1, r8
 800a000:	008a      	lsls	r2, r1, #2
 800a002:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a006:	f7f6 fd73 	bl	8000af0 <__aeabi_uldivmod>
 800a00a:	4602      	mov	r2, r0
 800a00c:	460b      	mov	r3, r1
 800a00e:	4b0d      	ldr	r3, [pc, #52]	@ (800a044 <UART_SetConfig+0x4e4>)
 800a010:	fba3 1302 	umull	r1, r3, r3, r2
 800a014:	095b      	lsrs	r3, r3, #5
 800a016:	2164      	movs	r1, #100	@ 0x64
 800a018:	fb01 f303 	mul.w	r3, r1, r3
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	011b      	lsls	r3, r3, #4
 800a020:	3332      	adds	r3, #50	@ 0x32
 800a022:	4a08      	ldr	r2, [pc, #32]	@ (800a044 <UART_SetConfig+0x4e4>)
 800a024:	fba2 2303 	umull	r2, r3, r2, r3
 800a028:	095b      	lsrs	r3, r3, #5
 800a02a:	f003 020f 	and.w	r2, r3, #15
 800a02e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4422      	add	r2, r4
 800a036:	609a      	str	r2, [r3, #8]
}
 800a038:	bf00      	nop
 800a03a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a03e:	46bd      	mov	sp, r7
 800a040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a044:	51eb851f 	.word	0x51eb851f

0800a048 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800a048:	b480      	push	{r7}
 800a04a:	b087      	sub	sp, #28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	6812      	ldr	r2, [r2, #0]
 800a060:	f023 0101 	bic.w	r1, r3, #1
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	2b08      	cmp	r3, #8
 800a070:	d102      	bne.n	800a078 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a072:	2340      	movs	r3, #64	@ 0x40
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	e001      	b.n	800a07c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a078:	2300      	movs	r3, #0
 800a07a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a088:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a08e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a094:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a09a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800a0a0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800a0a6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 800a0ac:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800a0b2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 800a0b8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	693a      	ldr	r2, [r7, #16]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0d0:	693a      	ldr	r2, [r7, #16]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800a0d6:	4b10      	ldr	r3, [pc, #64]	@ (800a118 <FSMC_NORSRAM_Init+0xd0>)
 800a0d8:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a0e0:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800a0e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	43db      	mvns	r3, r3
 800a0f8:	ea02 0103 	and.w	r1, r2, r3
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	4319      	orrs	r1, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	371c      	adds	r7, #28
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	0008fb7f 	.word	0x0008fb7f

0800a11c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	1c5a      	adds	r2, r3, #1
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a132:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	011b      	lsls	r3, r3, #4
 800a140:	431a      	orrs	r2, r3
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	021b      	lsls	r3, r3, #8
 800a148:	431a      	orrs	r2, r3
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	041b      	lsls	r3, r3, #16
 800a150:	431a      	orrs	r2, r3
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	3b01      	subs	r3, #1
 800a158:	051b      	lsls	r3, r3, #20
 800a15a:	431a      	orrs	r2, r3
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	695b      	ldr	r3, [r3, #20]
 800a160:	3b02      	subs	r3, #2
 800a162:	061b      	lsls	r3, r3, #24
 800a164:	431a      	orrs	r2, r3
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	3201      	adds	r2, #1
 800a170:	4319      	orrs	r1, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3714      	adds	r7, #20
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr
	...

0800a188 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a19c:	d11d      	bne.n	800a1da <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a1a6:	4b13      	ldr	r3, [pc, #76]	@ (800a1f4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	6811      	ldr	r1, [r2, #0]
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	6852      	ldr	r2, [r2, #4]
 800a1b2:	0112      	lsls	r2, r2, #4
 800a1b4:	4311      	orrs	r1, r2
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	6892      	ldr	r2, [r2, #8]
 800a1ba:	0212      	lsls	r2, r2, #8
 800a1bc:	4311      	orrs	r1, r2
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	6992      	ldr	r2, [r2, #24]
 800a1c2:	4311      	orrs	r1, r2
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	68d2      	ldr	r2, [r2, #12]
 800a1c8:	0412      	lsls	r2, r2, #16
 800a1ca:	430a      	orrs	r2, r1
 800a1cc:	ea43 0102 	orr.w	r1, r3, r2
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a1d8:	e005      	b.n	800a1e6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800a1e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	cff00000 	.word	0xcff00000

0800a1f8 <memset>:
 800a1f8:	4402      	add	r2, r0
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d100      	bne.n	800a202 <memset+0xa>
 800a200:	4770      	bx	lr
 800a202:	f803 1b01 	strb.w	r1, [r3], #1
 800a206:	e7f9      	b.n	800a1fc <memset+0x4>

0800a208 <__errno>:
 800a208:	4b01      	ldr	r3, [pc, #4]	@ (800a210 <__errno+0x8>)
 800a20a:	6818      	ldr	r0, [r3, #0]
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	20000054 	.word	0x20000054

0800a214 <__libc_init_array>:
 800a214:	b570      	push	{r4, r5, r6, lr}
 800a216:	4d0d      	ldr	r5, [pc, #52]	@ (800a24c <__libc_init_array+0x38>)
 800a218:	4c0d      	ldr	r4, [pc, #52]	@ (800a250 <__libc_init_array+0x3c>)
 800a21a:	1b64      	subs	r4, r4, r5
 800a21c:	10a4      	asrs	r4, r4, #2
 800a21e:	2600      	movs	r6, #0
 800a220:	42a6      	cmp	r6, r4
 800a222:	d109      	bne.n	800a238 <__libc_init_array+0x24>
 800a224:	4d0b      	ldr	r5, [pc, #44]	@ (800a254 <__libc_init_array+0x40>)
 800a226:	4c0c      	ldr	r4, [pc, #48]	@ (800a258 <__libc_init_array+0x44>)
 800a228:	f000 f91e 	bl	800a468 <_init>
 800a22c:	1b64      	subs	r4, r4, r5
 800a22e:	10a4      	asrs	r4, r4, #2
 800a230:	2600      	movs	r6, #0
 800a232:	42a6      	cmp	r6, r4
 800a234:	d105      	bne.n	800a242 <__libc_init_array+0x2e>
 800a236:	bd70      	pop	{r4, r5, r6, pc}
 800a238:	f855 3b04 	ldr.w	r3, [r5], #4
 800a23c:	4798      	blx	r3
 800a23e:	3601      	adds	r6, #1
 800a240:	e7ee      	b.n	800a220 <__libc_init_array+0xc>
 800a242:	f855 3b04 	ldr.w	r3, [r5], #4
 800a246:	4798      	blx	r3
 800a248:	3601      	adds	r6, #1
 800a24a:	e7f2      	b.n	800a232 <__libc_init_array+0x1e>
 800a24c:	0800e8b0 	.word	0x0800e8b0
 800a250:	0800e8b0 	.word	0x0800e8b0
 800a254:	0800e8b0 	.word	0x0800e8b0
 800a258:	0800e8b4 	.word	0x0800e8b4

0800a25c <sqrt>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	ed2d 8b02 	vpush	{d8}
 800a262:	ec55 4b10 	vmov	r4, r5, d0
 800a266:	f000 f825 	bl	800a2b4 <__ieee754_sqrt>
 800a26a:	4622      	mov	r2, r4
 800a26c:	462b      	mov	r3, r5
 800a26e:	4620      	mov	r0, r4
 800a270:	4629      	mov	r1, r5
 800a272:	eeb0 8a40 	vmov.f32	s16, s0
 800a276:	eef0 8a60 	vmov.f32	s17, s1
 800a27a:	f7f6 fc03 	bl	8000a84 <__aeabi_dcmpun>
 800a27e:	b990      	cbnz	r0, 800a2a6 <sqrt+0x4a>
 800a280:	2200      	movs	r2, #0
 800a282:	2300      	movs	r3, #0
 800a284:	4620      	mov	r0, r4
 800a286:	4629      	mov	r1, r5
 800a288:	f7f6 fbd4 	bl	8000a34 <__aeabi_dcmplt>
 800a28c:	b158      	cbz	r0, 800a2a6 <sqrt+0x4a>
 800a28e:	f7ff ffbb 	bl	800a208 <__errno>
 800a292:	2321      	movs	r3, #33	@ 0x21
 800a294:	6003      	str	r3, [r0, #0]
 800a296:	2200      	movs	r2, #0
 800a298:	2300      	movs	r3, #0
 800a29a:	4610      	mov	r0, r2
 800a29c:	4619      	mov	r1, r3
 800a29e:	f7f6 fa81 	bl	80007a4 <__aeabi_ddiv>
 800a2a2:	ec41 0b18 	vmov	d8, r0, r1
 800a2a6:	eeb0 0a48 	vmov.f32	s0, s16
 800a2aa:	eef0 0a68 	vmov.f32	s1, s17
 800a2ae:	ecbd 8b02 	vpop	{d8}
 800a2b2:	bd38      	pop	{r3, r4, r5, pc}

0800a2b4 <__ieee754_sqrt>:
 800a2b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	4a68      	ldr	r2, [pc, #416]	@ (800a45c <__ieee754_sqrt+0x1a8>)
 800a2ba:	ec55 4b10 	vmov	r4, r5, d0
 800a2be:	43aa      	bics	r2, r5
 800a2c0:	462b      	mov	r3, r5
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	d110      	bne.n	800a2e8 <__ieee754_sqrt+0x34>
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	f7f6 f940 	bl	8000550 <__aeabi_dmul>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	f7f5 ff84 	bl	80001e4 <__adddf3>
 800a2dc:	4604      	mov	r4, r0
 800a2de:	460d      	mov	r5, r1
 800a2e0:	ec45 4b10 	vmov	d0, r4, r5
 800a2e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e8:	2d00      	cmp	r5, #0
 800a2ea:	dc0e      	bgt.n	800a30a <__ieee754_sqrt+0x56>
 800a2ec:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a2f0:	4322      	orrs	r2, r4
 800a2f2:	d0f5      	beq.n	800a2e0 <__ieee754_sqrt+0x2c>
 800a2f4:	b19d      	cbz	r5, 800a31e <__ieee754_sqrt+0x6a>
 800a2f6:	4622      	mov	r2, r4
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	f7f5 ff70 	bl	80001e0 <__aeabi_dsub>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	f7f6 fa4e 	bl	80007a4 <__aeabi_ddiv>
 800a308:	e7e8      	b.n	800a2dc <__ieee754_sqrt+0x28>
 800a30a:	152a      	asrs	r2, r5, #20
 800a30c:	d115      	bne.n	800a33a <__ieee754_sqrt+0x86>
 800a30e:	2000      	movs	r0, #0
 800a310:	e009      	b.n	800a326 <__ieee754_sqrt+0x72>
 800a312:	0acb      	lsrs	r3, r1, #11
 800a314:	3a15      	subs	r2, #21
 800a316:	0549      	lsls	r1, r1, #21
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d0fa      	beq.n	800a312 <__ieee754_sqrt+0x5e>
 800a31c:	e7f7      	b.n	800a30e <__ieee754_sqrt+0x5a>
 800a31e:	462a      	mov	r2, r5
 800a320:	e7fa      	b.n	800a318 <__ieee754_sqrt+0x64>
 800a322:	005b      	lsls	r3, r3, #1
 800a324:	3001      	adds	r0, #1
 800a326:	02dc      	lsls	r4, r3, #11
 800a328:	d5fb      	bpl.n	800a322 <__ieee754_sqrt+0x6e>
 800a32a:	1e44      	subs	r4, r0, #1
 800a32c:	1b12      	subs	r2, r2, r4
 800a32e:	f1c0 0420 	rsb	r4, r0, #32
 800a332:	fa21 f404 	lsr.w	r4, r1, r4
 800a336:	4323      	orrs	r3, r4
 800a338:	4081      	lsls	r1, r0
 800a33a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a33e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a346:	07d2      	lsls	r2, r2, #31
 800a348:	bf5c      	itt	pl
 800a34a:	005b      	lslpl	r3, r3, #1
 800a34c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a350:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a354:	bf58      	it	pl
 800a356:	0049      	lslpl	r1, r1, #1
 800a358:	2600      	movs	r6, #0
 800a35a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a35e:	106d      	asrs	r5, r5, #1
 800a360:	0049      	lsls	r1, r1, #1
 800a362:	2016      	movs	r0, #22
 800a364:	4632      	mov	r2, r6
 800a366:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a36a:	1917      	adds	r7, r2, r4
 800a36c:	429f      	cmp	r7, r3
 800a36e:	bfde      	ittt	le
 800a370:	193a      	addle	r2, r7, r4
 800a372:	1bdb      	suble	r3, r3, r7
 800a374:	1936      	addle	r6, r6, r4
 800a376:	0fcf      	lsrs	r7, r1, #31
 800a378:	3801      	subs	r0, #1
 800a37a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a37e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a382:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a386:	d1f0      	bne.n	800a36a <__ieee754_sqrt+0xb6>
 800a388:	4604      	mov	r4, r0
 800a38a:	2720      	movs	r7, #32
 800a38c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a390:	429a      	cmp	r2, r3
 800a392:	eb00 0e0c 	add.w	lr, r0, ip
 800a396:	db02      	blt.n	800a39e <__ieee754_sqrt+0xea>
 800a398:	d113      	bne.n	800a3c2 <__ieee754_sqrt+0x10e>
 800a39a:	458e      	cmp	lr, r1
 800a39c:	d811      	bhi.n	800a3c2 <__ieee754_sqrt+0x10e>
 800a39e:	f1be 0f00 	cmp.w	lr, #0
 800a3a2:	eb0e 000c 	add.w	r0, lr, ip
 800a3a6:	da42      	bge.n	800a42e <__ieee754_sqrt+0x17a>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	db40      	blt.n	800a42e <__ieee754_sqrt+0x17a>
 800a3ac:	f102 0801 	add.w	r8, r2, #1
 800a3b0:	1a9b      	subs	r3, r3, r2
 800a3b2:	458e      	cmp	lr, r1
 800a3b4:	bf88      	it	hi
 800a3b6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a3ba:	eba1 010e 	sub.w	r1, r1, lr
 800a3be:	4464      	add	r4, ip
 800a3c0:	4642      	mov	r2, r8
 800a3c2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a3c6:	3f01      	subs	r7, #1
 800a3c8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a3cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a3d0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a3d4:	d1dc      	bne.n	800a390 <__ieee754_sqrt+0xdc>
 800a3d6:	4319      	orrs	r1, r3
 800a3d8:	d01b      	beq.n	800a412 <__ieee754_sqrt+0x15e>
 800a3da:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a460 <__ieee754_sqrt+0x1ac>
 800a3de:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a464 <__ieee754_sqrt+0x1b0>
 800a3e2:	e9da 0100 	ldrd	r0, r1, [sl]
 800a3e6:	e9db 2300 	ldrd	r2, r3, [fp]
 800a3ea:	f7f5 fef9 	bl	80001e0 <__aeabi_dsub>
 800a3ee:	e9da 8900 	ldrd	r8, r9, [sl]
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	4649      	mov	r1, r9
 800a3fa:	f7f6 fb25 	bl	8000a48 <__aeabi_dcmple>
 800a3fe:	b140      	cbz	r0, 800a412 <__ieee754_sqrt+0x15e>
 800a400:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a404:	e9da 0100 	ldrd	r0, r1, [sl]
 800a408:	e9db 2300 	ldrd	r2, r3, [fp]
 800a40c:	d111      	bne.n	800a432 <__ieee754_sqrt+0x17e>
 800a40e:	3601      	adds	r6, #1
 800a410:	463c      	mov	r4, r7
 800a412:	1072      	asrs	r2, r6, #1
 800a414:	0863      	lsrs	r3, r4, #1
 800a416:	07f1      	lsls	r1, r6, #31
 800a418:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a41c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a420:	bf48      	it	mi
 800a422:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a426:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a42a:	4618      	mov	r0, r3
 800a42c:	e756      	b.n	800a2dc <__ieee754_sqrt+0x28>
 800a42e:	4690      	mov	r8, r2
 800a430:	e7be      	b.n	800a3b0 <__ieee754_sqrt+0xfc>
 800a432:	f7f5 fed7 	bl	80001e4 <__adddf3>
 800a436:	e9da 8900 	ldrd	r8, r9, [sl]
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	4640      	mov	r0, r8
 800a440:	4649      	mov	r1, r9
 800a442:	f7f6 faf7 	bl	8000a34 <__aeabi_dcmplt>
 800a446:	b120      	cbz	r0, 800a452 <__ieee754_sqrt+0x19e>
 800a448:	1ca0      	adds	r0, r4, #2
 800a44a:	bf08      	it	eq
 800a44c:	3601      	addeq	r6, #1
 800a44e:	3402      	adds	r4, #2
 800a450:	e7df      	b.n	800a412 <__ieee754_sqrt+0x15e>
 800a452:	1c63      	adds	r3, r4, #1
 800a454:	f023 0401 	bic.w	r4, r3, #1
 800a458:	e7db      	b.n	800a412 <__ieee754_sqrt+0x15e>
 800a45a:	bf00      	nop
 800a45c:	7ff00000 	.word	0x7ff00000
 800a460:	200000b0 	.word	0x200000b0
 800a464:	200000a8 	.word	0x200000a8

0800a468 <_init>:
 800a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46a:	bf00      	nop
 800a46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46e:	bc08      	pop	{r3}
 800a470:	469e      	mov	lr, r3
 800a472:	4770      	bx	lr

0800a474 <_fini>:
 800a474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a476:	bf00      	nop
 800a478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47a:	bc08      	pop	{r3}
 800a47c:	469e      	mov	lr, r3
 800a47e:	4770      	bx	lr
