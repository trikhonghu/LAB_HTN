
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003118  08008858  08008858  00018858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b970  0800b970  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800b970  0800b970  0001b970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b978  0800b978  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b978  0800b978  0001b978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b97c  0800b97c  0001b97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000468  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004e8  200004e8  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002253c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004674  00000000  00000000  000425ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  00046c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001470  00000000  00000000  00048288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000257f6  00000000  00000000  000496f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4a5  00000000  00000000  0006eeee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d396b  00000000  00000000  0008e393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00161cfe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e18  00000000  00000000  00161d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008840 	.word	0x08008840

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08008840 	.word	0x08008840

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	2108      	movs	r1, #8
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <button_init+0x14>)
 8000582:	f003 fd8f 	bl	80040a4 <HAL_GPIO_WritePin>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40020c00 	.word	0x40020c00

08000590 <button_Scan>:

void button_Scan(){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	482f      	ldr	r0, [pc, #188]	; (8000658 <button_Scan+0xc8>)
 800059c:	f003 fd82 	bl	80040a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2108      	movs	r1, #8
 80005a4:	482c      	ldr	r0, [pc, #176]	; (8000658 <button_Scan+0xc8>)
 80005a6:	f003 fd7d 	bl	80040a4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80005aa:	230a      	movs	r3, #10
 80005ac:	2202      	movs	r2, #2
 80005ae:	492b      	ldr	r1, [pc, #172]	; (800065c <button_Scan+0xcc>)
 80005b0:	482b      	ldr	r0, [pc, #172]	; (8000660 <button_Scan+0xd0>)
 80005b2:	f005 fba4 	bl	8005cfe <HAL_SPI_Receive>
	  int button_index = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005be:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	e03f      	b.n	8000646 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db06      	blt.n	80005da <button_Scan+0x4a>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	dc03      	bgt.n	80005da <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3304      	adds	r3, #4
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e018      	b.n	800060c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	dd07      	ble.n	80005f0 <button_Scan+0x60>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b07      	cmp	r3, #7
 80005e4:	dc04      	bgt.n	80005f0 <button_Scan+0x60>
			  button_index = 7 - i;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f1c3 0307 	rsb	r3, r3, #7
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	e00d      	b.n	800060c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b07      	cmp	r3, #7
 80005f4:	dd06      	ble.n	8000604 <button_Scan+0x74>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0b      	cmp	r3, #11
 80005fa:	dc03      	bgt.n	8000604 <button_Scan+0x74>
			  button_index = i + 4;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3304      	adds	r3, #4
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e003      	b.n	800060c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f1c3 0317 	rsb	r3, r3, #23
 800060a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <button_Scan+0xcc>)
 800060e:	881a      	ldrh	r2, [r3, #0]
 8000610:	897b      	ldrh	r3, [r7, #10]
 8000612:	4013      	ands	r3, r2
 8000614:	b29b      	uxth	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d005      	beq.n	8000626 <button_Scan+0x96>
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <button_Scan+0xd4>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2100      	movs	r1, #0
 8000620:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000624:	e009      	b.n	800063a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <button_Scan+0xd4>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800062e:	3301      	adds	r3, #1
 8000630:	b299      	uxth	r1, r3
 8000632:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <button_Scan+0xd4>)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800063a:	897b      	ldrh	r3, [r7, #10]
 800063c:	085b      	lsrs	r3, r3, #1
 800063e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3301      	adds	r3, #1
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	ddbc      	ble.n	80005c6 <button_Scan+0x36>
	  }
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40020c00 	.word	0x40020c00
 800065c:	2000009c 	.word	0x2000009c
 8000660:	20000280 	.word	0x20000280
 8000664:	20000170 	.word	0x20000170

08000668 <ds3231_Write>:
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
		while(1);
	};
}

void ds3231_Write(uint8_t address, uint8_t value){
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af04      	add	r7, sp, #16
 800066e:	4603      	mov	r3, r0
 8000670:	460a      	mov	r2, r1
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	4613      	mov	r3, r2
 8000676:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	4618      	mov	r0, r3
 800067c:	f003 f8ee 	bl	800385c <DEC2BCD>
 8000680:	4603      	mov	r3, r0
 8000682:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	b29a      	uxth	r2, r3
 8000688:	230a      	movs	r3, #10
 800068a:	9302      	str	r3, [sp, #8]
 800068c:	2301      	movs	r3, #1
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	f107 030f 	add.w	r3, r7, #15
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	21d0      	movs	r1, #208	; 0xd0
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <ds3231_Write+0x40>)
 800069c:	f003 fe7a 	bl	8004394 <HAL_I2C_Mem_Write>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200001f0 	.word	0x200001f0

080006ac <ds3231_ReadTime>:

void ds3231_ReadTime(){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80006b2:	230a      	movs	r3, #10
 80006b4:	9302      	str	r3, [sp, #8]
 80006b6:	2307      	movs	r3, #7
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <ds3231_ReadTime+0xa4>)
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2301      	movs	r3, #1
 80006c0:	2200      	movs	r2, #0
 80006c2:	21d0      	movs	r1, #208	; 0xd0
 80006c4:	4823      	ldr	r0, [pc, #140]	; (8000754 <ds3231_ReadTime+0xa8>)
 80006c6:	f003 ff5f 	bl	8004588 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <ds3231_ReadTime+0xa4>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 f8aa 	bl	8003828 <BCD2DEC>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <ds3231_ReadTime+0xac>)
 80006da:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006dc:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <ds3231_ReadTime+0xa4>)
 80006de:	785b      	ldrb	r3, [r3, #1]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 f8a1 	bl	8003828 <BCD2DEC>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <ds3231_ReadTime+0xb0>)
 80006ec:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <ds3231_ReadTime+0xa4>)
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 f898 	bl	8003828 <BCD2DEC>
 80006f8:	4603      	mov	r3, r0
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <ds3231_ReadTime+0xb4>)
 80006fe:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <ds3231_ReadTime+0xa4>)
 8000702:	78db      	ldrb	r3, [r3, #3]
 8000704:	4618      	mov	r0, r3
 8000706:	f003 f88f 	bl	8003828 <BCD2DEC>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <ds3231_ReadTime+0xb8>)
 8000710:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <ds3231_ReadTime+0xa4>)
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	4618      	mov	r0, r3
 8000718:	f003 f886 	bl	8003828 <BCD2DEC>
 800071c:	4603      	mov	r3, r0
 800071e:	461a      	mov	r2, r3
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <ds3231_ReadTime+0xbc>)
 8000722:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <ds3231_ReadTime+0xa4>)
 8000726:	795b      	ldrb	r3, [r3, #5]
 8000728:	4618      	mov	r0, r3
 800072a:	f003 f87d 	bl	8003828 <BCD2DEC>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <ds3231_ReadTime+0xc0>)
 8000734:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <ds3231_ReadTime+0xa4>)
 8000738:	799b      	ldrb	r3, [r3, #6]
 800073a:	4618      	mov	r0, r3
 800073c:	f003 f874 	bl	8003828 <BCD2DEC>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <ds3231_ReadTime+0xc4>)
 8000746:	701a      	strb	r2, [r3, #0]
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000198 	.word	0x20000198
 8000754:	200001f0 	.word	0x200001f0
 8000758:	20000190 	.word	0x20000190
 800075c:	20000192 	.word	0x20000192
 8000760:	20000195 	.word	0x20000195
 8000764:	20000194 	.word	0x20000194
 8000768:	20000193 	.word	0x20000193
 800076c:	20000196 	.word	0x20000196
 8000770:	20000191 	.word	0x20000191

08000774 <displayTime>:
#include "fsm_mode.h"

uint8_t mode = 0;
uint8_t toggle_normal = 0;

void displayTime(){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 800077a:	4b36      	ldr	r3, [pc, #216]	; (8000854 <displayTime+0xe0>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b29a      	uxth	r2, r3
 8000780:	2318      	movs	r3, #24
 8000782:	9302      	str	r3, [sp, #8]
 8000784:	2300      	movs	r3, #0
 8000786:	9301      	str	r3, [sp, #4]
 8000788:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2302      	movs	r3, #2
 8000790:	2164      	movs	r1, #100	; 0x64
 8000792:	2046      	movs	r0, #70	; 0x46
 8000794:	f001 ff46 	bl	8002624 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <displayTime+0xe4>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b29a      	uxth	r2, r3
 800079e:	2318      	movs	r3, #24
 80007a0:	9302      	str	r3, [sp, #8]
 80007a2:	2300      	movs	r3, #0
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2302      	movs	r3, #2
 80007ae:	2164      	movs	r1, #100	; 0x64
 80007b0:	206e      	movs	r0, #110	; 0x6e
 80007b2:	f001 ff37 	bl	8002624 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80007b6:	4b29      	ldr	r3, [pc, #164]	; (800085c <displayTime+0xe8>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	2318      	movs	r3, #24
 80007be:	9302      	str	r3, [sp, #8]
 80007c0:	2300      	movs	r3, #0
 80007c2:	9301      	str	r3, [sp, #4]
 80007c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2302      	movs	r3, #2
 80007cc:	2164      	movs	r1, #100	; 0x64
 80007ce:	2096      	movs	r0, #150	; 0x96
 80007d0:	f001 ff28 	bl	8002624 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <displayTime+0xec>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b29a      	uxth	r2, r3
 80007da:	2318      	movs	r3, #24
 80007dc:	9302      	str	r3, [sp, #8]
 80007de:	2300      	movs	r3, #0
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2302      	movs	r3, #2
 80007ea:	2182      	movs	r1, #130	; 0x82
 80007ec:	2014      	movs	r0, #20
 80007ee:	f001 ff19 	bl	8002624 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <displayTime+0xf0>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	2318      	movs	r3, #24
 80007fa:	9302      	str	r3, [sp, #8]
 80007fc:	2300      	movs	r3, #0
 80007fe:	9301      	str	r3, [sp, #4]
 8000800:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2302      	movs	r3, #2
 8000808:	2182      	movs	r1, #130	; 0x82
 800080a:	2046      	movs	r0, #70	; 0x46
 800080c:	f001 ff0a 	bl	8002624 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <displayTime+0xf4>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b29a      	uxth	r2, r3
 8000816:	2318      	movs	r3, #24
 8000818:	9302      	str	r3, [sp, #8]
 800081a:	2300      	movs	r3, #0
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	2302      	movs	r3, #2
 8000826:	2182      	movs	r1, #130	; 0x82
 8000828:	206e      	movs	r0, #110	; 0x6e
 800082a:	f001 fefb 	bl	8002624 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <displayTime+0xf8>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b29a      	uxth	r2, r3
 8000834:	2318      	movs	r3, #24
 8000836:	9302      	str	r3, [sp, #8]
 8000838:	2300      	movs	r3, #0
 800083a:	9301      	str	r3, [sp, #4]
 800083c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2302      	movs	r3, #2
 8000844:	2182      	movs	r1, #130	; 0x82
 8000846:	2096      	movs	r0, #150	; 0x96
 8000848:	f001 feec 	bl	8002624 <lcd_ShowIntNum>
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000195 	.word	0x20000195
 8000858:	20000192 	.word	0x20000192
 800085c:	20000190 	.word	0x20000190
 8000860:	20000194 	.word	0x20000194
 8000864:	20000193 	.word	0x20000193
 8000868:	20000196 	.word	0x20000196
 800086c:	20000191 	.word	0x20000191

08000870 <off_all>:

void off_all(){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, BLACK, 24);
 8000876:	4b32      	ldr	r3, [pc, #200]	; (8000940 <off_all+0xd0>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b29a      	uxth	r2, r3
 800087c:	2318      	movs	r3, #24
 800087e:	9302      	str	r3, [sp, #8]
 8000880:	2300      	movs	r3, #0
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	2300      	movs	r3, #0
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2302      	movs	r3, #2
 800088a:	2164      	movs	r1, #100	; 0x64
 800088c:	2046      	movs	r0, #70	; 0x46
 800088e:	f001 fec9 	bl	8002624 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, BLACK, 24);
 8000892:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <off_all+0xd4>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b29a      	uxth	r2, r3
 8000898:	2318      	movs	r3, #24
 800089a:	9302      	str	r3, [sp, #8]
 800089c:	2300      	movs	r3, #0
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	2300      	movs	r3, #0
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2302      	movs	r3, #2
 80008a6:	2164      	movs	r1, #100	; 0x64
 80008a8:	206e      	movs	r0, #110	; 0x6e
 80008aa:	f001 febb 	bl	8002624 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
 80008ae:	4b26      	ldr	r3, [pc, #152]	; (8000948 <off_all+0xd8>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	2318      	movs	r3, #24
 80008b6:	9302      	str	r3, [sp, #8]
 80008b8:	2300      	movs	r3, #0
 80008ba:	9301      	str	r3, [sp, #4]
 80008bc:	2300      	movs	r3, #0
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2302      	movs	r3, #2
 80008c2:	2164      	movs	r1, #100	; 0x64
 80008c4:	2096      	movs	r0, #150	; 0x96
 80008c6:	f001 fead 	bl	8002624 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, BLACK, BLACK, 24);
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <off_all+0xdc>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	2318      	movs	r3, #24
 80008d2:	9302      	str	r3, [sp, #8]
 80008d4:	2300      	movs	r3, #0
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	2300      	movs	r3, #0
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2302      	movs	r3, #2
 80008de:	2182      	movs	r1, #130	; 0x82
 80008e0:	2014      	movs	r0, #20
 80008e2:	f001 fe9f 	bl	8002624 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, BLACK, BLACK, 24);
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <off_all+0xe0>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	2318      	movs	r3, #24
 80008ee:	9302      	str	r3, [sp, #8]
 80008f0:	2300      	movs	r3, #0
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	2300      	movs	r3, #0
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2302      	movs	r3, #2
 80008fa:	2182      	movs	r1, #130	; 0x82
 80008fc:	2046      	movs	r0, #70	; 0x46
 80008fe:	f001 fe91 	bl	8002624 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, BLACK, BLACK, 24);
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <off_all+0xe4>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b29a      	uxth	r2, r3
 8000908:	2318      	movs	r3, #24
 800090a:	9302      	str	r3, [sp, #8]
 800090c:	2300      	movs	r3, #0
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	2300      	movs	r3, #0
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2302      	movs	r3, #2
 8000916:	2182      	movs	r1, #130	; 0x82
 8000918:	206e      	movs	r0, #110	; 0x6e
 800091a:	f001 fe83 	bl	8002624 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, BLACK, BLACK, 24);
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <off_all+0xe8>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	b29a      	uxth	r2, r3
 8000924:	2318      	movs	r3, #24
 8000926:	9302      	str	r3, [sp, #8]
 8000928:	2300      	movs	r3, #0
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	2300      	movs	r3, #0
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2302      	movs	r3, #2
 8000932:	2182      	movs	r1, #130	; 0x82
 8000934:	2096      	movs	r0, #150	; 0x96
 8000936:	f001 fe75 	bl	8002624 <lcd_ShowIntNum>
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000195 	.word	0x20000195
 8000944:	20000192 	.word	0x20000192
 8000948:	20000190 	.word	0x20000190
 800094c:	20000194 	.word	0x20000194
 8000950:	20000193 	.word	0x20000193
 8000954:	20000196 	.word	0x20000196
 8000958:	20000191 	.word	0x20000191

0800095c <fsm_machine_mode>:

void fsm_machine_mode(){
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af04      	add	r7, sp, #16
	switch (mode) {
 8000962:	4b84      	ldr	r3, [pc, #528]	; (8000b74 <fsm_machine_mode+0x218>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b02      	cmp	r3, #2
 8000968:	f000 8081 	beq.w	8000a6e <fsm_machine_mode+0x112>
 800096c:	2b02      	cmp	r3, #2
 800096e:	f300 80f7 	bgt.w	8000b60 <fsm_machine_mode+0x204>
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <fsm_machine_mode+0x20>
 8000976:	2b01      	cmp	r3, #1
 8000978:	d065      	beq.n	8000a46 <fsm_machine_mode+0xea>
				send_string = 0;
				lcd_Clear(BLACK);
			}
			break;
		default:
			break;
 800097a:	e0f1      	b.n	8000b60 <fsm_machine_mode+0x204>
			if(flag_timer7 == 1){
 800097c:	4b7e      	ldr	r3, [pc, #504]	; (8000b78 <fsm_machine_mode+0x21c>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d14e      	bne.n	8000a22 <fsm_machine_mode+0xc6>
				lcd_StrCenter(3,2,"ERROR REQUESTING",BLACK,BLACK,16,1);
 8000984:	2301      	movs	r3, #1
 8000986:	9302      	str	r3, [sp, #8]
 8000988:	2310      	movs	r3, #16
 800098a:	9301      	str	r3, [sp, #4]
 800098c:	2300      	movs	r3, #0
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2300      	movs	r3, #0
 8000992:	4a7a      	ldr	r2, [pc, #488]	; (8000b7c <fsm_machine_mode+0x220>)
 8000994:	2102      	movs	r1, #2
 8000996:	2003      	movs	r0, #3
 8000998:	f002 f8aa 	bl	8002af0 <lcd_StrCenter>
				ds3231_ReadTime();
 800099c:	f7ff fe86 	bl	80006ac <ds3231_ReadTime>
				displayTime();
 80009a0:	f7ff fee8 	bl	8000774 <displayTime>
				lcd_StrCenter(0,2,"TIMER_MODE",BLACK,BLACK,16,1);
 80009a4:	2301      	movs	r3, #1
 80009a6:	9302      	str	r3, [sp, #8]
 80009a8:	2310      	movs	r3, #16
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	2300      	movs	r3, #0
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2300      	movs	r3, #0
 80009b2:	4a73      	ldr	r2, [pc, #460]	; (8000b80 <fsm_machine_mode+0x224>)
 80009b4:	2102      	movs	r1, #2
 80009b6:	2000      	movs	r0, #0
 80009b8:	f002 f89a 	bl	8002af0 <lcd_StrCenter>
				lcd_StrCenter(0,2,"NORMAL_MODE",WHITE,BLUE,16,1);
 80009bc:	2301      	movs	r3, #1
 80009be:	9302      	str	r3, [sp, #8]
 80009c0:	2310      	movs	r3, #16
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	231f      	movs	r3, #31
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009cc:	4a6d      	ldr	r2, [pc, #436]	; (8000b84 <fsm_machine_mode+0x228>)
 80009ce:	2102      	movs	r1, #2
 80009d0:	2000      	movs	r0, #0
 80009d2:	f002 f88d 	bl	8002af0 <lcd_StrCenter>
				if(ds3231_min == min_timer && ds3231_hours == hours_timer && ds3231_sec <10){
 80009d6:	4b6c      	ldr	r3, [pc, #432]	; (8000b88 <fsm_machine_mode+0x22c>)
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	4b6c      	ldr	r3, [pc, #432]	; (8000b8c <fsm_machine_mode+0x230>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d11f      	bne.n	8000a22 <fsm_machine_mode+0xc6>
 80009e2:	4b6b      	ldr	r3, [pc, #428]	; (8000b90 <fsm_machine_mode+0x234>)
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	4b6b      	ldr	r3, [pc, #428]	; (8000b94 <fsm_machine_mode+0x238>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d119      	bne.n	8000a22 <fsm_machine_mode+0xc6>
 80009ee:	4b6a      	ldr	r3, [pc, #424]	; (8000b98 <fsm_machine_mode+0x23c>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b09      	cmp	r3, #9
 80009f4:	d815      	bhi.n	8000a22 <fsm_machine_mode+0xc6>
					if(flag_timer5 == 1){
 80009f6:	4b69      	ldr	r3, [pc, #420]	; (8000b9c <fsm_machine_mode+0x240>)
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d111      	bne.n	8000a22 <fsm_machine_mode+0xc6>
						if(toggle_normal == 1){
 80009fe:	4b68      	ldr	r3, [pc, #416]	; (8000ba0 <fsm_machine_mode+0x244>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d105      	bne.n	8000a12 <fsm_machine_mode+0xb6>
							toggle_normal = 0;
 8000a06:	4b66      	ldr	r3, [pc, #408]	; (8000ba0 <fsm_machine_mode+0x244>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
							displayTime();
 8000a0c:	f7ff feb2 	bl	8000774 <displayTime>
 8000a10:	e004      	b.n	8000a1c <fsm_machine_mode+0xc0>
							off_all();
 8000a12:	f7ff ff2d 	bl	8000870 <off_all>
							toggle_normal = 1;
 8000a16:	4b62      	ldr	r3, [pc, #392]	; (8000ba0 <fsm_machine_mode+0x244>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
						setTimer5(50);
 8000a1c:	2032      	movs	r0, #50	; 0x32
 8000a1e:	f002 fb2d 	bl	800307c <setTimer5>
			if(button_count[0] == 1){
 8000a22:	4b60      	ldr	r3, [pc, #384]	; (8000ba4 <fsm_machine_mode+0x248>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	f040 809c 	bne.w	8000b64 <fsm_machine_mode+0x208>
				mode = SET_TIME_MODE;
 8000a2c:	4b51      	ldr	r3, [pc, #324]	; (8000b74 <fsm_machine_mode+0x218>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
				mode_set_time = MIN_MODE;
 8000a32:	4b5d      	ldr	r3, [pc, #372]	; (8000ba8 <fsm_machine_mode+0x24c>)
 8000a34:	220b      	movs	r2, #11
 8000a36:	701a      	strb	r2, [r3, #0]
				send_string = 0;
 8000a38:	4b5c      	ldr	r3, [pc, #368]	; (8000bac <fsm_machine_mode+0x250>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
				lcd_Clear(BLACK);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f001 fcb2 	bl	80023a8 <lcd_Clear>
			break;
 8000a44:	e08e      	b.n	8000b64 <fsm_machine_mode+0x208>
			fsm_set_time();
 8000a46:	f000 f8c1 	bl	8000bcc <fsm_set_time>
			if(button_count[0] == 1){
 8000a4a:	4b56      	ldr	r3, [pc, #344]	; (8000ba4 <fsm_machine_mode+0x248>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	f040 808a 	bne.w	8000b68 <fsm_machine_mode+0x20c>
				mode = TIMER_MODE;
 8000a54:	4b47      	ldr	r3, [pc, #284]	; (8000b74 <fsm_machine_mode+0x218>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	701a      	strb	r2, [r3, #0]
				mode_timer = MIN_MODE;
 8000a5a:	4b55      	ldr	r3, [pc, #340]	; (8000bb0 <fsm_machine_mode+0x254>)
 8000a5c:	220b      	movs	r2, #11
 8000a5e:	701a      	strb	r2, [r3, #0]
				send_string = 0;
 8000a60:	4b52      	ldr	r3, [pc, #328]	; (8000bac <fsm_machine_mode+0x250>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
				lcd_Clear(BLACK);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f001 fc9e 	bl	80023a8 <lcd_Clear>
			break;
 8000a6c:	e07c      	b.n	8000b68 <fsm_machine_mode+0x20c>
			if(!send_string){
 8000a6e:	4b4f      	ldr	r3, [pc, #316]	; (8000bac <fsm_machine_mode+0x250>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d105      	bne.n	8000a82 <fsm_machine_mode+0x126>
				uart_Rs232SendString("Set alarm\n");
 8000a76:	484f      	ldr	r0, [pc, #316]	; (8000bb4 <fsm_machine_mode+0x258>)
 8000a78:	f002 fd90 	bl	800359c <uart_Rs232SendString>
				send_string = 1;
 8000a7c:	4b4b      	ldr	r3, [pc, #300]	; (8000bac <fsm_machine_mode+0x250>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
 8000a82:	4b45      	ldr	r3, [pc, #276]	; (8000b98 <fsm_machine_mode+0x23c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	2318      	movs	r3, #24
 8000a8a:	9302      	str	r3, [sp, #8]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	2300      	movs	r3, #0
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2302      	movs	r3, #2
 8000a96:	2164      	movs	r1, #100	; 0x64
 8000a98:	2096      	movs	r0, #150	; 0x96
 8000a9a:	f001 fdc3 	bl	8002624 <lcd_ShowIntNum>
			lcd_ShowIntNum(20, 130, ds3231_day, 2, BLACK, BLACK, 24);
 8000a9e:	4b46      	ldr	r3, [pc, #280]	; (8000bb8 <fsm_machine_mode+0x25c>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	2318      	movs	r3, #24
 8000aa6:	9302      	str	r3, [sp, #8]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	9301      	str	r3, [sp, #4]
 8000aac:	2300      	movs	r3, #0
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	2182      	movs	r1, #130	; 0x82
 8000ab4:	2014      	movs	r0, #20
 8000ab6:	f001 fdb5 	bl	8002624 <lcd_ShowIntNum>
			lcd_ShowIntNum(70, 130, ds3231_date, 2, BLACK, BLACK, 24);
 8000aba:	4b40      	ldr	r3, [pc, #256]	; (8000bbc <fsm_machine_mode+0x260>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	2318      	movs	r3, #24
 8000ac2:	9302      	str	r3, [sp, #8]
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	9301      	str	r3, [sp, #4]
 8000ac8:	2300      	movs	r3, #0
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2302      	movs	r3, #2
 8000ace:	2182      	movs	r1, #130	; 0x82
 8000ad0:	2046      	movs	r0, #70	; 0x46
 8000ad2:	f001 fda7 	bl	8002624 <lcd_ShowIntNum>
			lcd_ShowIntNum(110, 130, ds3231_month, 2, BLACK, BLACK, 24);
 8000ad6:	4b3a      	ldr	r3, [pc, #232]	; (8000bc0 <fsm_machine_mode+0x264>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	2318      	movs	r3, #24
 8000ade:	9302      	str	r3, [sp, #8]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	9301      	str	r3, [sp, #4]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	2302      	movs	r3, #2
 8000aea:	2182      	movs	r1, #130	; 0x82
 8000aec:	206e      	movs	r0, #110	; 0x6e
 8000aee:	f001 fd99 	bl	8002624 <lcd_ShowIntNum>
			lcd_ShowIntNum(150, 130, ds3231_year, 2, BLACK, BLACK, 24);
 8000af2:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <fsm_machine_mode+0x268>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	2318      	movs	r3, #24
 8000afa:	9302      	str	r3, [sp, #8]
 8000afc:	2300      	movs	r3, #0
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	2300      	movs	r3, #0
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	2302      	movs	r3, #2
 8000b06:	2182      	movs	r1, #130	; 0x82
 8000b08:	2096      	movs	r0, #150	; 0x96
 8000b0a:	f001 fd8b 	bl	8002624 <lcd_ShowIntNum>
			fsm_timer();
 8000b0e:	f001 f8af 	bl	8001c70 <fsm_timer>
			lcd_StrCenter(0,2,"SET_TIME_MODE",BLACK,BLACK,16,1);
 8000b12:	2301      	movs	r3, #1
 8000b14:	9302      	str	r3, [sp, #8]
 8000b16:	2310      	movs	r3, #16
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <fsm_machine_mode+0x26c>)
 8000b22:	2102      	movs	r1, #2
 8000b24:	2000      	movs	r0, #0
 8000b26:	f001 ffe3 	bl	8002af0 <lcd_StrCenter>
			lcd_StrCenter(0,2,"TIMER_MODE",WHITE,BLUE,16,1);
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	9302      	str	r3, [sp, #8]
 8000b2e:	2310      	movs	r3, #16
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	231f      	movs	r3, #31
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b3a:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <fsm_machine_mode+0x224>)
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f001 ffd6 	bl	8002af0 <lcd_StrCenter>
			if(button_count[0] == 1){
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <fsm_machine_mode+0x248>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d10f      	bne.n	8000b6c <fsm_machine_mode+0x210>
				mode = NORMAL_MODE;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <fsm_machine_mode+0x218>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	701a      	strb	r2, [r3, #0]
				send_string = 0;
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <fsm_machine_mode+0x250>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
				lcd_Clear(BLACK);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f001 fc25 	bl	80023a8 <lcd_Clear>
			break;
 8000b5e:	e005      	b.n	8000b6c <fsm_machine_mode+0x210>
			break;
 8000b60:	bf00      	nop
 8000b62:	e004      	b.n	8000b6e <fsm_machine_mode+0x212>
			break;
 8000b64:	bf00      	nop
 8000b66:	e002      	b.n	8000b6e <fsm_machine_mode+0x212>
			break;
 8000b68:	bf00      	nop
 8000b6a:	e000      	b.n	8000b6e <fsm_machine_mode+0x212>
			break;
 8000b6c:	bf00      	nop
	}

}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2000009e 	.word	0x2000009e
 8000b78:	200000cc 	.word	0x200000cc
 8000b7c:	08008858 	.word	0x08008858
 8000b80:	0800886c 	.word	0x0800886c
 8000b84:	08008878 	.word	0x08008878
 8000b88:	20000192 	.word	0x20000192
 8000b8c:	200000a8 	.word	0x200000a8
 8000b90:	20000195 	.word	0x20000195
 8000b94:	200000a9 	.word	0x200000a9
 8000b98:	20000190 	.word	0x20000190
 8000b9c:	200000c4 	.word	0x200000c4
 8000ba0:	2000009f 	.word	0x2000009f
 8000ba4:	20000170 	.word	0x20000170
 8000ba8:	200000a0 	.word	0x200000a0
 8000bac:	200000a2 	.word	0x200000a2
 8000bb0:	200000a6 	.word	0x200000a6
 8000bb4:	08008884 	.word	0x08008884
 8000bb8:	20000194 	.word	0x20000194
 8000bbc:	20000193 	.word	0x20000193
 8000bc0:	20000196 	.word	0x20000196
 8000bc4:	20000191 	.word	0x20000191
 8000bc8:	08008890 	.word	0x08008890

08000bcc <fsm_set_time>:
uint8_t temp =0;
uint8_t check = 0;
uint8_t count_request = 0;
uint8_t flag;

void fsm_set_time(){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af04      	add	r7, sp, #16
	switch (mode_set_time) {
 8000bd2:	4b9a      	ldr	r3, [pc, #616]	; (8000e3c <fsm_set_time+0x270>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	3b0b      	subs	r3, #11
 8000bd8:	2b05      	cmp	r3, #5
 8000bda:	f201 800e 	bhi.w	8001bfa <fsm_set_time+0x102e>
 8000bde:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <fsm_set_time+0x18>)
 8000be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be4:	08000bfd 	.word	0x08000bfd
 8000be8:	08000e91 	.word	0x08000e91
 8000bec:	080010c3 	.word	0x080010c3
 8000bf0:	08001357 	.word	0x08001357
 8000bf4:	08001719 	.word	0x08001719
 8000bf8:	080019b1 	.word	0x080019b1
		case MIN_MODE:
			check = 0;
 8000bfc:	4b90      	ldr	r3, [pc, #576]	; (8000e40 <fsm_set_time+0x274>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
			if(flag == 1){
 8000c02:	4b90      	ldr	r3, [pc, #576]	; (8000e44 <fsm_set_time+0x278>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d106      	bne.n	8000c18 <fsm_set_time+0x4c>
				rxTail = rxHead;
 8000c0a:	4b8f      	ldr	r3, [pc, #572]	; (8000e48 <fsm_set_time+0x27c>)
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	4b8f      	ldr	r3, [pc, #572]	; (8000e4c <fsm_set_time+0x280>)
 8000c10:	701a      	strb	r2, [r3, #0]
				flag = 0;
 8000c12:	4b8c      	ldr	r3, [pc, #560]	; (8000e44 <fsm_set_time+0x278>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
			}
			if(flag_timer6 == 1){
 8000c18:	4b8d      	ldr	r3, [pc, #564]	; (8000e50 <fsm_set_time+0x284>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d12b      	bne.n	8000c78 <fsm_set_time+0xac>
				if(count_request > 2){
 8000c20:	4b8c      	ldr	r3, [pc, #560]	; (8000e54 <fsm_set_time+0x288>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d91a      	bls.n	8000c5e <fsm_set_time+0x92>
					lcd_Clear(BLACK);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f001 fbbd 	bl	80023a8 <lcd_Clear>
					mode = NORMAL_MODE;
 8000c2e:	4b8a      	ldr	r3, [pc, #552]	; (8000e58 <fsm_set_time+0x28c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
					lcd_StrCenter(3,2,"ERROR REQUESTING",RED,BLACK,16,1);
 8000c34:	2301      	movs	r3, #1
 8000c36:	9302      	str	r3, [sp, #8]
 8000c38:	2310      	movs	r3, #16
 8000c3a:	9301      	str	r3, [sp, #4]
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c44:	4a85      	ldr	r2, [pc, #532]	; (8000e5c <fsm_set_time+0x290>)
 8000c46:	2102      	movs	r1, #2
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f001 ff51 	bl	8002af0 <lcd_StrCenter>
					count_request = 0;
 8000c4e:	4b81      	ldr	r3, [pc, #516]	; (8000e54 <fsm_set_time+0x288>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
					setTimer7(1000);
 8000c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c58:	f002 fa3c 	bl	80030d4 <setTimer7>
 8000c5c:	e00c      	b.n	8000c78 <fsm_set_time+0xac>
				}else{
					uart_Rs232SendString("Request minutes\n");
 8000c5e:	4880      	ldr	r0, [pc, #512]	; (8000e60 <fsm_set_time+0x294>)
 8000c60:	f002 fc9c 	bl	800359c <uart_Rs232SendString>
					count_request++;
 8000c64:	4b7b      	ldr	r3, [pc, #492]	; (8000e54 <fsm_set_time+0x288>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b79      	ldr	r3, [pc, #484]	; (8000e54 <fsm_set_time+0x288>)
 8000c6e:	701a      	strb	r2, [r3, #0]
					setTimer6(5000);
 8000c70:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c74:	f002 fa18 	bl	80030a8 <setTimer6>
				}
			}

			if(!send_string){
 8000c78:	4b7a      	ldr	r3, [pc, #488]	; (8000e64 <fsm_set_time+0x298>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d10f      	bne.n	8000ca0 <fsm_set_time+0xd4>
				//uart_Rs232SendString("UPDATING MINUTE\n");
				send_string = 1;
 8000c80:	4b78      	ldr	r3, [pc, #480]	; (8000e64 <fsm_set_time+0x298>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
				lcd_StrCenter(0,2,"UPDATING_MINUTE",WHITE,BLACK,16,1);
 8000c86:	2301      	movs	r3, #1
 8000c88:	9302      	str	r3, [sp, #8]
 8000c8a:	2310      	movs	r3, #16
 8000c8c:	9301      	str	r3, [sp, #4]
 8000c8e:	2300      	movs	r3, #0
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c96:	4a74      	ldr	r2, [pc, #464]	; (8000e68 <fsm_set_time+0x29c>)
 8000c98:	2102      	movs	r1, #2
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f001 ff28 	bl	8002af0 <lcd_StrCenter>
			}

				if(rxHead != rxTail){
 8000ca0:	4b69      	ldr	r3, [pc, #420]	; (8000e48 <fsm_set_time+0x27c>)
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	4b69      	ldr	r3, [pc, #420]	; (8000e4c <fsm_set_time+0x280>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d06d      	beq.n	8000d88 <fsm_set_time+0x1bc>
					dataReceived = 0;
 8000cac:	4b6f      	ldr	r3, [pc, #444]	; (8000e6c <fsm_set_time+0x2a0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
					uint8_t data = rxBuffer[rxTail];
 8000cb2:	4b66      	ldr	r3, [pc, #408]	; (8000e4c <fsm_set_time+0x280>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b6d      	ldr	r3, [pc, #436]	; (8000e70 <fsm_set_time+0x2a4>)
 8000cba:	5c9b      	ldrb	r3, [r3, r2]
 8000cbc:	70bb      	strb	r3, [r7, #2]
					rxTail = (rxTail + 1)%BUFFER_SIZE;
 8000cbe:	4b63      	ldr	r3, [pc, #396]	; (8000e4c <fsm_set_time+0x280>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	425a      	negs	r2, r3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	bf58      	it	pl
 8000ccc:	4253      	negpl	r3, r2
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	4b5e      	ldr	r3, [pc, #376]	; (8000e4c <fsm_set_time+0x280>)
 8000cd2:	701a      	strb	r2, [r3, #0]
					uart_Rs232SendNum(data);
 8000cd4:	78bb      	ldrb	r3, [r7, #2]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f002 fc7a 	bl	80035d0 <uart_Rs232SendNum>
					uart_Rs232SendString("sent\n");
 8000cdc:	4865      	ldr	r0, [pc, #404]	; (8000e74 <fsm_set_time+0x2a8>)
 8000cde:	f002 fc5d 	bl	800359c <uart_Rs232SendString>
					if(data < 47 || data > 57){// * used to end data
 8000ce2:	78bb      	ldrb	r3, [r7, #2]
 8000ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ce6:	d902      	bls.n	8000cee <fsm_set_time+0x122>
 8000ce8:	78bb      	ldrb	r3, [r7, #2]
 8000cea:	2b39      	cmp	r3, #57	; 0x39
 8000cec:	d908      	bls.n	8000d00 <fsm_set_time+0x134>
						uart_Rs232SendString("syntax, request again");
 8000cee:	4862      	ldr	r0, [pc, #392]	; (8000e78 <fsm_set_time+0x2ac>)
 8000cf0:	f002 fc54 	bl	800359c <uart_Rs232SendString>
						check = 1;
 8000cf4:	4b52      	ldr	r3, [pc, #328]	; (8000e40 <fsm_set_time+0x274>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
						flag = 1;
 8000cfa:	4b52      	ldr	r3, [pc, #328]	; (8000e44 <fsm_set_time+0x278>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	701a      	strb	r2, [r3, #0]
					}
					if(!check && data != 47){
 8000d00:	4b4f      	ldr	r3, [pc, #316]	; (8000e40 <fsm_set_time+0x274>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d111      	bne.n	8000d2c <fsm_set_time+0x160>
 8000d08:	78bb      	ldrb	r3, [r7, #2]
 8000d0a:	2b2f      	cmp	r3, #47	; 0x2f
 8000d0c:	d00e      	beq.n	8000d2c <fsm_set_time+0x160>
						temp = temp*10 + (data - 48);
 8000d0e:	4b5b      	ldr	r3, [pc, #364]	; (8000e7c <fsm_set_time+0x2b0>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	0092      	lsls	r2, r2, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	78bb      	ldrb	r3, [r7, #2]
 8000d1e:	4413      	add	r3, r2
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	3b30      	subs	r3, #48	; 0x30
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b55      	ldr	r3, [pc, #340]	; (8000e7c <fsm_set_time+0x2b0>)
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e02d      	b.n	8000d88 <fsm_set_time+0x1bc>
					}else if(data == 47 && !check){
 8000d2c:	78bb      	ldrb	r3, [r7, #2]
 8000d2e:	2b2f      	cmp	r3, #47	; 0x2f
 8000d30:	d127      	bne.n	8000d82 <fsm_set_time+0x1b6>
 8000d32:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <fsm_set_time+0x274>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d123      	bne.n	8000d82 <fsm_set_time+0x1b6>
						if(temp >= 60)
 8000d3a:	4b50      	ldr	r3, [pc, #320]	; (8000e7c <fsm_set_time+0x2b0>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b3b      	cmp	r3, #59	; 0x3b
 8000d40:	d902      	bls.n	8000d48 <fsm_set_time+0x17c>
							temp = 0;
 8000d42:	4b4e      	ldr	r3, [pc, #312]	; (8000e7c <fsm_set_time+0x2b0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
						ds3231_min = temp;
 8000d48:	4b4c      	ldr	r3, [pc, #304]	; (8000e7c <fsm_set_time+0x2b0>)
 8000d4a:	781a      	ldrb	r2, [r3, #0]
 8000d4c:	4b4c      	ldr	r3, [pc, #304]	; (8000e80 <fsm_set_time+0x2b4>)
 8000d4e:	701a      	strb	r2, [r3, #0]
						ds3231_Write(ADDRESS_MIN, ds3231_min);
 8000d50:	4b4b      	ldr	r3, [pc, #300]	; (8000e80 <fsm_set_time+0x2b4>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff fc86 	bl	8000668 <ds3231_Write>
						check = 0;
 8000d5c:	4b38      	ldr	r3, [pc, #224]	; (8000e40 <fsm_set_time+0x274>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
						temp = 0;
 8000d62:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <fsm_set_time+0x2b0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
						flag = 1;
 8000d68:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <fsm_set_time+0x278>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
						count_request = 0;
 8000d6e:	4b39      	ldr	r3, [pc, #228]	; (8000e54 <fsm_set_time+0x288>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
						lcd_Clear(BLACK);
 8000d74:	2000      	movs	r0, #0
 8000d76:	f001 fb17 	bl	80023a8 <lcd_Clear>
						mode = NORMAL_MODE;
 8000d7a:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <fsm_set_time+0x28c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
 8000d80:	e002      	b.n	8000d88 <fsm_set_time+0x1bc>
					}else{
						temp = 0;
 8000d82:	4b3e      	ldr	r3, [pc, #248]	; (8000e7c <fsm_set_time+0x2b0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
				//uart_Rs232SendNum(data);
				//uart_Rs232SendString(" sent\n");

			//uart_Rs232SendNum(ds3231_min);

			if(button_count[3] == 1 || (button_count[3] >= 40 && button_count[3] % 4 == 1)){
 8000d88:	4b3e      	ldr	r3, [pc, #248]	; (8000e84 <fsm_set_time+0x2b8>)
 8000d8a:	88db      	ldrh	r3, [r3, #6]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d00a      	beq.n	8000da6 <fsm_set_time+0x1da>
 8000d90:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <fsm_set_time+0x2b8>)
 8000d92:	88db      	ldrh	r3, [r3, #6]
 8000d94:	2b27      	cmp	r3, #39	; 0x27
 8000d96:	d90c      	bls.n	8000db2 <fsm_set_time+0x1e6>
 8000d98:	4b3a      	ldr	r3, [pc, #232]	; (8000e84 <fsm_set_time+0x2b8>)
 8000d9a:	88db      	ldrh	r3, [r3, #6]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d105      	bne.n	8000db2 <fsm_set_time+0x1e6>
				ds3231_min++;
 8000da6:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <fsm_set_time+0x2b4>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <fsm_set_time+0x2b4>)
 8000db0:	701a      	strb	r2, [r3, #0]
			}
			if(ds3231_min >= 60){
 8000db2:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <fsm_set_time+0x2b4>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b3b      	cmp	r3, #59	; 0x3b
 8000db8:	d902      	bls.n	8000dc0 <fsm_set_time+0x1f4>
				ds3231_min = 0;
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <fsm_set_time+0x2b4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
			}

			if(flag_timer3 == 1){
 8000dc0:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <fsm_set_time+0x2bc>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d11d      	bne.n	8000e04 <fsm_set_time+0x238>
				if(toggle == 1){
 8000dc8:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <fsm_set_time+0x2c0>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d105      	bne.n	8000ddc <fsm_set_time+0x210>
					toggle = 0;
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <fsm_set_time+0x2c0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
					displayTime();
 8000dd6:	f7ff fccd 	bl	8000774 <displayTime>
 8000dda:	e010      	b.n	8000dfe <fsm_set_time+0x232>
				}else{
					lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, BLACK, 24);
 8000ddc:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <fsm_set_time+0x2b4>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	2318      	movs	r3, #24
 8000de4:	9302      	str	r3, [sp, #8]
 8000de6:	2300      	movs	r3, #0
 8000de8:	9301      	str	r3, [sp, #4]
 8000dea:	2300      	movs	r3, #0
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	2302      	movs	r3, #2
 8000df0:	2164      	movs	r1, #100	; 0x64
 8000df2:	206e      	movs	r0, #110	; 0x6e
 8000df4:	f001 fc16 	bl	8002624 <lcd_ShowIntNum>
					toggle = 1;
 8000df8:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <fsm_set_time+0x2c0>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
				}
				setTimer3(50);
 8000dfe:	2032      	movs	r0, #50	; 0x32
 8000e00:	f002 f910 	bl	8003024 <setTimer3>
			}
			if(button_count[12] == 1){
 8000e04:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <fsm_set_time+0x2b8>)
 8000e06:	8b1b      	ldrh	r3, [r3, #24]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	f040 86f8 	bne.w	8001bfe <fsm_set_time+0x1032>
				mode_set_time = HOUR_MODE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <fsm_set_time+0x270>)
 8000e10:	220c      	movs	r2, #12
 8000e12:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_MIN, ds3231_min);
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <fsm_set_time+0x2b4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f7ff fc24 	bl	8000668 <ds3231_Write>
				send_string--;
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <fsm_set_time+0x298>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <fsm_set_time+0x298>)
 8000e2a:	701a      	strb	r2, [r3, #0]
				lcd_Clear(BLACK);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f001 fabb 	bl	80023a8 <lcd_Clear>
				temp = 0;
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <fsm_set_time+0x2b0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000e38:	f000 bee1 	b.w	8001bfe <fsm_set_time+0x1032>
 8000e3c:	200000a0 	.word	0x200000a0
 8000e40:	200000a4 	.word	0x200000a4
 8000e44:	2000019f 	.word	0x2000019f
 8000e48:	200000d5 	.word	0x200000d5
 8000e4c:	200000d6 	.word	0x200000d6
 8000e50:	200000c8 	.word	0x200000c8
 8000e54:	200000a5 	.word	0x200000a5
 8000e58:	2000009e 	.word	0x2000009e
 8000e5c:	080088a0 	.word	0x080088a0
 8000e60:	080088b4 	.word	0x080088b4
 8000e64:	200000a2 	.word	0x200000a2
 8000e68:	080088c8 	.word	0x080088c8
 8000e6c:	200000d7 	.word	0x200000d7
 8000e70:	20000384 	.word	0x20000384
 8000e74:	080088d8 	.word	0x080088d8
 8000e78:	080088e0 	.word	0x080088e0
 8000e7c:	200000a3 	.word	0x200000a3
 8000e80:	20000192 	.word	0x20000192
 8000e84:	20000170 	.word	0x20000170
 8000e88:	200000bc 	.word	0x200000bc
 8000e8c:	200000a1 	.word	0x200000a1
		case HOUR_MODE:

			check = 0;
 8000e90:	4ba4      	ldr	r3, [pc, #656]	; (8001124 <fsm_set_time+0x558>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
			if(flag == 1){
 8000e96:	4ba4      	ldr	r3, [pc, #656]	; (8001128 <fsm_set_time+0x55c>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d106      	bne.n	8000eac <fsm_set_time+0x2e0>
				rxTail = rxHead;
 8000e9e:	4ba3      	ldr	r3, [pc, #652]	; (800112c <fsm_set_time+0x560>)
 8000ea0:	781a      	ldrb	r2, [r3, #0]
 8000ea2:	4ba3      	ldr	r3, [pc, #652]	; (8001130 <fsm_set_time+0x564>)
 8000ea4:	701a      	strb	r2, [r3, #0]
				flag = 0;
 8000ea6:	4ba0      	ldr	r3, [pc, #640]	; (8001128 <fsm_set_time+0x55c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
			}
			if(flag_timer6 == 1){
 8000eac:	4ba1      	ldr	r3, [pc, #644]	; (8001134 <fsm_set_time+0x568>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d12b      	bne.n	8000f0c <fsm_set_time+0x340>
				if(count_request > 2){
 8000eb4:	4ba0      	ldr	r3, [pc, #640]	; (8001138 <fsm_set_time+0x56c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d91a      	bls.n	8000ef2 <fsm_set_time+0x326>
					lcd_Clear(BLACK);
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f001 fa73 	bl	80023a8 <lcd_Clear>
					mode = NORMAL_MODE;
 8000ec2:	4b9e      	ldr	r3, [pc, #632]	; (800113c <fsm_set_time+0x570>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
					lcd_StrCenter(3,2,"ERROR REQUESTING",RED,BLACK,16,1);
 8000ec8:	2301      	movs	r3, #1
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	2310      	movs	r3, #16
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ed8:	4a99      	ldr	r2, [pc, #612]	; (8001140 <fsm_set_time+0x574>)
 8000eda:	2102      	movs	r1, #2
 8000edc:	2003      	movs	r0, #3
 8000ede:	f001 fe07 	bl	8002af0 <lcd_StrCenter>
					count_request = 0;
 8000ee2:	4b95      	ldr	r3, [pc, #596]	; (8001138 <fsm_set_time+0x56c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
					setTimer7(1000);
 8000ee8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eec:	f002 f8f2 	bl	80030d4 <setTimer7>
 8000ef0:	e00c      	b.n	8000f0c <fsm_set_time+0x340>
				}else{
					uart_Rs232SendString("Request hour\n");
 8000ef2:	4894      	ldr	r0, [pc, #592]	; (8001144 <fsm_set_time+0x578>)
 8000ef4:	f002 fb52 	bl	800359c <uart_Rs232SendString>
					count_request++;
 8000ef8:	4b8f      	ldr	r3, [pc, #572]	; (8001138 <fsm_set_time+0x56c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b8d      	ldr	r3, [pc, #564]	; (8001138 <fsm_set_time+0x56c>)
 8000f02:	701a      	strb	r2, [r3, #0]
					setTimer6(5000);
 8000f04:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f08:	f002 f8ce 	bl	80030a8 <setTimer6>
				}
			}

			if(!send_string){
 8000f0c:	4b8e      	ldr	r3, [pc, #568]	; (8001148 <fsm_set_time+0x57c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10f      	bne.n	8000f34 <fsm_set_time+0x368>
				//uart_Rs232SendString("UPDATING MINUTE\n");
				send_string = 1;
 8000f14:	4b8c      	ldr	r3, [pc, #560]	; (8001148 <fsm_set_time+0x57c>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
				lcd_StrCenter(0,2,"UPDATING_HOUR",WHITE,BLACK,16,1);
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	9302      	str	r3, [sp, #8]
 8000f1e:	2310      	movs	r3, #16
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	2300      	movs	r3, #0
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f2a:	4a88      	ldr	r2, [pc, #544]	; (800114c <fsm_set_time+0x580>)
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f001 fdde 	bl	8002af0 <lcd_StrCenter>
			}

				if(rxHead != rxTail){
 8000f34:	4b7d      	ldr	r3, [pc, #500]	; (800112c <fsm_set_time+0x560>)
 8000f36:	781a      	ldrb	r2, [r3, #0]
 8000f38:	4b7d      	ldr	r3, [pc, #500]	; (8001130 <fsm_set_time+0x564>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d066      	beq.n	800100e <fsm_set_time+0x442>
					dataReceived = 0;
 8000f40:	4b83      	ldr	r3, [pc, #524]	; (8001150 <fsm_set_time+0x584>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
					uint8_t data = rxBuffer[rxTail];
 8000f46:	4b7a      	ldr	r3, [pc, #488]	; (8001130 <fsm_set_time+0x564>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b81      	ldr	r3, [pc, #516]	; (8001154 <fsm_set_time+0x588>)
 8000f4e:	5c9b      	ldrb	r3, [r3, r2]
 8000f50:	70fb      	strb	r3, [r7, #3]
					rxTail = (rxTail + 1)%BUFFER_SIZE;
 8000f52:	4b77      	ldr	r3, [pc, #476]	; (8001130 <fsm_set_time+0x564>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	425a      	negs	r2, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	bf58      	it	pl
 8000f60:	4253      	negpl	r3, r2
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b72      	ldr	r3, [pc, #456]	; (8001130 <fsm_set_time+0x564>)
 8000f66:	701a      	strb	r2, [r3, #0]
					uart_Rs232SendNum(data);
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fb30 	bl	80035d0 <uart_Rs232SendNum>
					uart_Rs232SendString("sent\n");
 8000f70:	4879      	ldr	r0, [pc, #484]	; (8001158 <fsm_set_time+0x58c>)
 8000f72:	f002 fb13 	bl	800359c <uart_Rs232SendString>
					if(data < 47 || data > 57){// * used to end data
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	2b2e      	cmp	r3, #46	; 0x2e
 8000f7a:	d902      	bls.n	8000f82 <fsm_set_time+0x3b6>
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	2b39      	cmp	r3, #57	; 0x39
 8000f80:	d908      	bls.n	8000f94 <fsm_set_time+0x3c8>
						uart_Rs232SendString("syntax, request again");
 8000f82:	4876      	ldr	r0, [pc, #472]	; (800115c <fsm_set_time+0x590>)
 8000f84:	f002 fb0a 	bl	800359c <uart_Rs232SendString>
						check = 1;
 8000f88:	4b66      	ldr	r3, [pc, #408]	; (8001124 <fsm_set_time+0x558>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
						flag = 1;
 8000f8e:	4b66      	ldr	r3, [pc, #408]	; (8001128 <fsm_set_time+0x55c>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
					}
					if(!check && data != 47){
 8000f94:	4b63      	ldr	r3, [pc, #396]	; (8001124 <fsm_set_time+0x558>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d111      	bne.n	8000fc0 <fsm_set_time+0x3f4>
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	2b2f      	cmp	r3, #47	; 0x2f
 8000fa0:	d00e      	beq.n	8000fc0 <fsm_set_time+0x3f4>
						temp = temp*10 + (data - 48);
 8000fa2:	4b6f      	ldr	r3, [pc, #444]	; (8001160 <fsm_set_time+0x594>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	0092      	lsls	r2, r2, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	3b30      	subs	r3, #48	; 0x30
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b69      	ldr	r3, [pc, #420]	; (8001160 <fsm_set_time+0x594>)
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e026      	b.n	800100e <fsm_set_time+0x442>
					}else if(data == 47 && !check){
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	2b2f      	cmp	r3, #47	; 0x2f
 8000fc4:	d120      	bne.n	8001008 <fsm_set_time+0x43c>
 8000fc6:	4b57      	ldr	r3, [pc, #348]	; (8001124 <fsm_set_time+0x558>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11c      	bne.n	8001008 <fsm_set_time+0x43c>
						if(temp >= 24)
							temp;
						ds3231_hours = temp;
 8000fce:	4b64      	ldr	r3, [pc, #400]	; (8001160 <fsm_set_time+0x594>)
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	4b64      	ldr	r3, [pc, #400]	; (8001164 <fsm_set_time+0x598>)
 8000fd4:	701a      	strb	r2, [r3, #0]
						ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8000fd6:	4b63      	ldr	r3, [pc, #396]	; (8001164 <fsm_set_time+0x598>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f7ff fb43 	bl	8000668 <ds3231_Write>
						check = 0;
 8000fe2:	4b50      	ldr	r3, [pc, #320]	; (8001124 <fsm_set_time+0x558>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
						temp = 0;
 8000fe8:	4b5d      	ldr	r3, [pc, #372]	; (8001160 <fsm_set_time+0x594>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
						flag = 1;
 8000fee:	4b4e      	ldr	r3, [pc, #312]	; (8001128 <fsm_set_time+0x55c>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
						count_request = 0;
 8000ff4:	4b50      	ldr	r3, [pc, #320]	; (8001138 <fsm_set_time+0x56c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
						lcd_Clear(BLACK);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f001 f9d4 	bl	80023a8 <lcd_Clear>
						mode = NORMAL_MODE;
 8001000:	4b4e      	ldr	r3, [pc, #312]	; (800113c <fsm_set_time+0x570>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e002      	b.n	800100e <fsm_set_time+0x442>
					}else{
						temp = 0;
 8001008:	4b55      	ldr	r3, [pc, #340]	; (8001160 <fsm_set_time+0x594>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
					}
				}
			if(button_count[3] == 1 || (button_count[3] >= 40 && button_count[3] % 4 == 1)){
 800100e:	4b56      	ldr	r3, [pc, #344]	; (8001168 <fsm_set_time+0x59c>)
 8001010:	88db      	ldrh	r3, [r3, #6]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d00a      	beq.n	800102c <fsm_set_time+0x460>
 8001016:	4b54      	ldr	r3, [pc, #336]	; (8001168 <fsm_set_time+0x59c>)
 8001018:	88db      	ldrh	r3, [r3, #6]
 800101a:	2b27      	cmp	r3, #39	; 0x27
 800101c:	d90c      	bls.n	8001038 <fsm_set_time+0x46c>
 800101e:	4b52      	ldr	r3, [pc, #328]	; (8001168 <fsm_set_time+0x59c>)
 8001020:	88db      	ldrh	r3, [r3, #6]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	b29b      	uxth	r3, r3
 8001028:	2b01      	cmp	r3, #1
 800102a:	d105      	bne.n	8001038 <fsm_set_time+0x46c>
				ds3231_hours++;
 800102c:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <fsm_set_time+0x598>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <fsm_set_time+0x598>)
 8001036:	701a      	strb	r2, [r3, #0]
			}
			if(ds3231_hours >= 24){
 8001038:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <fsm_set_time+0x598>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b17      	cmp	r3, #23
 800103e:	d902      	bls.n	8001046 <fsm_set_time+0x47a>
				ds3231_hours = 0;
 8001040:	4b48      	ldr	r3, [pc, #288]	; (8001164 <fsm_set_time+0x598>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
			}

			if(flag_timer3 == 1){
 8001046:	4b49      	ldr	r3, [pc, #292]	; (800116c <fsm_set_time+0x5a0>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d11d      	bne.n	800108a <fsm_set_time+0x4be>
				if(toggle == 1){
 800104e:	4b48      	ldr	r3, [pc, #288]	; (8001170 <fsm_set_time+0x5a4>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d105      	bne.n	8001062 <fsm_set_time+0x496>
					toggle = 0;
 8001056:	4b46      	ldr	r3, [pc, #280]	; (8001170 <fsm_set_time+0x5a4>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
					displayTime();
 800105c:	f7ff fb8a 	bl	8000774 <displayTime>
 8001060:	e010      	b.n	8001084 <fsm_set_time+0x4b8>
				}else{
					lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, BLACK, 24);
 8001062:	4b40      	ldr	r3, [pc, #256]	; (8001164 <fsm_set_time+0x598>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b29a      	uxth	r2, r3
 8001068:	2318      	movs	r3, #24
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	2300      	movs	r3, #0
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	2300      	movs	r3, #0
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2302      	movs	r3, #2
 8001076:	2164      	movs	r1, #100	; 0x64
 8001078:	2046      	movs	r0, #70	; 0x46
 800107a:	f001 fad3 	bl	8002624 <lcd_ShowIntNum>
					toggle = 1;
 800107e:	4b3c      	ldr	r3, [pc, #240]	; (8001170 <fsm_set_time+0x5a4>)
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
				}
				setTimer3(50);
 8001084:	2032      	movs	r0, #50	; 0x32
 8001086:	f001 ffcd 	bl	8003024 <setTimer3>
			}
			if(button_count[12] == 1){
 800108a:	4b37      	ldr	r3, [pc, #220]	; (8001168 <fsm_set_time+0x59c>)
 800108c:	8b1b      	ldrh	r3, [r3, #24]
 800108e:	2b01      	cmp	r3, #1
 8001090:	f040 85b7 	bne.w	8001c02 <fsm_set_time+0x1036>
				mode_set_time = DAY_MODE;
 8001094:	4b37      	ldr	r3, [pc, #220]	; (8001174 <fsm_set_time+0x5a8>)
 8001096:	220d      	movs	r2, #13
 8001098:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 800109a:	4b32      	ldr	r3, [pc, #200]	; (8001164 <fsm_set_time+0x598>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	2002      	movs	r0, #2
 80010a2:	f7ff fae1 	bl	8000668 <ds3231_Write>
				send_string--;
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <fsm_set_time+0x57c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <fsm_set_time+0x57c>)
 80010b0:	701a      	strb	r2, [r3, #0]
				lcd_Clear(BLACK);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f001 f978 	bl	80023a8 <lcd_Clear>
				temp = 0;
 80010b8:	4b29      	ldr	r3, [pc, #164]	; (8001160 <fsm_set_time+0x594>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80010be:	f000 bda0 	b.w	8001c02 <fsm_set_time+0x1036>
		case DAY_MODE:
			check = 0;
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <fsm_set_time+0x558>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
			if(flag == 1){
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <fsm_set_time+0x55c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d106      	bne.n	80010de <fsm_set_time+0x512>
				rxTail = rxHead;
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <fsm_set_time+0x560>)
 80010d2:	781a      	ldrb	r2, [r3, #0]
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <fsm_set_time+0x564>)
 80010d6:	701a      	strb	r2, [r3, #0]
				flag = 0;
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <fsm_set_time+0x55c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
			}
			if(flag_timer6 == 1){
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <fsm_set_time+0x568>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d155      	bne.n	8001192 <fsm_set_time+0x5c6>
				if(count_request > 2){
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <fsm_set_time+0x56c>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d944      	bls.n	8001178 <fsm_set_time+0x5ac>
					lcd_Clear(BLACK);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f001 f95a 	bl	80023a8 <lcd_Clear>
					mode = NORMAL_MODE;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <fsm_set_time+0x570>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
					lcd_StrCenter(3,2,"ERROR REQUESTING",RED,BLACK,16,1);
 80010fa:	2301      	movs	r3, #1
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	2310      	movs	r3, #16
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	2300      	movs	r3, #0
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800110a:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <fsm_set_time+0x574>)
 800110c:	2102      	movs	r1, #2
 800110e:	2003      	movs	r0, #3
 8001110:	f001 fcee 	bl	8002af0 <lcd_StrCenter>
					count_request = 0;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <fsm_set_time+0x56c>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
					setTimer7(1000);
 800111a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800111e:	f001 ffd9 	bl	80030d4 <setTimer7>
 8001122:	e036      	b.n	8001192 <fsm_set_time+0x5c6>
 8001124:	200000a4 	.word	0x200000a4
 8001128:	2000019f 	.word	0x2000019f
 800112c:	200000d5 	.word	0x200000d5
 8001130:	200000d6 	.word	0x200000d6
 8001134:	200000c8 	.word	0x200000c8
 8001138:	200000a5 	.word	0x200000a5
 800113c:	2000009e 	.word	0x2000009e
 8001140:	080088a0 	.word	0x080088a0
 8001144:	080088f8 	.word	0x080088f8
 8001148:	200000a2 	.word	0x200000a2
 800114c:	08008908 	.word	0x08008908
 8001150:	200000d7 	.word	0x200000d7
 8001154:	20000384 	.word	0x20000384
 8001158:	080088d8 	.word	0x080088d8
 800115c:	080088e0 	.word	0x080088e0
 8001160:	200000a3 	.word	0x200000a3
 8001164:	20000195 	.word	0x20000195
 8001168:	20000170 	.word	0x20000170
 800116c:	200000bc 	.word	0x200000bc
 8001170:	200000a1 	.word	0x200000a1
 8001174:	200000a0 	.word	0x200000a0
				}else{
					uart_Rs232SendString("Request day\n");
 8001178:	488f      	ldr	r0, [pc, #572]	; (80013b8 <fsm_set_time+0x7ec>)
 800117a:	f002 fa0f 	bl	800359c <uart_Rs232SendString>
					count_request++;
 800117e:	4b8f      	ldr	r3, [pc, #572]	; (80013bc <fsm_set_time+0x7f0>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b8d      	ldr	r3, [pc, #564]	; (80013bc <fsm_set_time+0x7f0>)
 8001188:	701a      	strb	r2, [r3, #0]
					setTimer6(5000);
 800118a:	f241 3088 	movw	r0, #5000	; 0x1388
 800118e:	f001 ff8b 	bl	80030a8 <setTimer6>
				}
			}

			if(!send_string){
 8001192:	4b8b      	ldr	r3, [pc, #556]	; (80013c0 <fsm_set_time+0x7f4>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10f      	bne.n	80011ba <fsm_set_time+0x5ee>
				//uart_Rs232SendString("UPDATING MINUTE\n");
				send_string = 1;
 800119a:	4b89      	ldr	r3, [pc, #548]	; (80013c0 <fsm_set_time+0x7f4>)
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
				lcd_StrCenter(0,2,"UPDATING_DAY",WHITE,BLACK,16,1);
 80011a0:	2301      	movs	r3, #1
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	2310      	movs	r3, #16
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	2300      	movs	r3, #0
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b0:	4a84      	ldr	r2, [pc, #528]	; (80013c4 <fsm_set_time+0x7f8>)
 80011b2:	2102      	movs	r1, #2
 80011b4:	2000      	movs	r0, #0
 80011b6:	f001 fc9b 	bl	8002af0 <lcd_StrCenter>
			}

				if(rxHead != rxTail){
 80011ba:	4b83      	ldr	r3, [pc, #524]	; (80013c8 <fsm_set_time+0x7fc>)
 80011bc:	781a      	ldrb	r2, [r3, #0]
 80011be:	4b83      	ldr	r3, [pc, #524]	; (80013cc <fsm_set_time+0x800>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d06d      	beq.n	80012a2 <fsm_set_time+0x6d6>
					dataReceived = 0;
 80011c6:	4b82      	ldr	r3, [pc, #520]	; (80013d0 <fsm_set_time+0x804>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
					uint8_t data = rxBuffer[rxTail];
 80011cc:	4b7f      	ldr	r3, [pc, #508]	; (80013cc <fsm_set_time+0x800>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b80      	ldr	r3, [pc, #512]	; (80013d4 <fsm_set_time+0x808>)
 80011d4:	5c9b      	ldrb	r3, [r3, r2]
 80011d6:	713b      	strb	r3, [r7, #4]
					rxTail = (rxTail + 1)%BUFFER_SIZE;
 80011d8:	4b7c      	ldr	r3, [pc, #496]	; (80013cc <fsm_set_time+0x800>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	425a      	negs	r2, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	bf58      	it	pl
 80011e6:	4253      	negpl	r3, r2
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b78      	ldr	r3, [pc, #480]	; (80013cc <fsm_set_time+0x800>)
 80011ec:	701a      	strb	r2, [r3, #0]
					uart_Rs232SendNum(data);
 80011ee:	793b      	ldrb	r3, [r7, #4]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 f9ed 	bl	80035d0 <uart_Rs232SendNum>
					uart_Rs232SendString("sent\n");
 80011f6:	4878      	ldr	r0, [pc, #480]	; (80013d8 <fsm_set_time+0x80c>)
 80011f8:	f002 f9d0 	bl	800359c <uart_Rs232SendString>
					if(data < 47 || data > 57){// * used to end data
 80011fc:	793b      	ldrb	r3, [r7, #4]
 80011fe:	2b2e      	cmp	r3, #46	; 0x2e
 8001200:	d902      	bls.n	8001208 <fsm_set_time+0x63c>
 8001202:	793b      	ldrb	r3, [r7, #4]
 8001204:	2b39      	cmp	r3, #57	; 0x39
 8001206:	d908      	bls.n	800121a <fsm_set_time+0x64e>
						uart_Rs232SendString("syntax, request again");
 8001208:	4874      	ldr	r0, [pc, #464]	; (80013dc <fsm_set_time+0x810>)
 800120a:	f002 f9c7 	bl	800359c <uart_Rs232SendString>
						check = 1;
 800120e:	4b74      	ldr	r3, [pc, #464]	; (80013e0 <fsm_set_time+0x814>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
						flag = 1;
 8001214:	4b73      	ldr	r3, [pc, #460]	; (80013e4 <fsm_set_time+0x818>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
					}
					if(!check && data != 47){
 800121a:	4b71      	ldr	r3, [pc, #452]	; (80013e0 <fsm_set_time+0x814>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d111      	bne.n	8001246 <fsm_set_time+0x67a>
 8001222:	793b      	ldrb	r3, [r7, #4]
 8001224:	2b2f      	cmp	r3, #47	; 0x2f
 8001226:	d00e      	beq.n	8001246 <fsm_set_time+0x67a>
						temp = temp*10 + (data - 48);
 8001228:	4b6f      	ldr	r3, [pc, #444]	; (80013e8 <fsm_set_time+0x81c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	0092      	lsls	r2, r2, #2
 8001230:	4413      	add	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	b2da      	uxtb	r2, r3
 8001236:	793b      	ldrb	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	3b30      	subs	r3, #48	; 0x30
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b69      	ldr	r3, [pc, #420]	; (80013e8 <fsm_set_time+0x81c>)
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	e02d      	b.n	80012a2 <fsm_set_time+0x6d6>
					}else if(data == 47 && !check){
 8001246:	793b      	ldrb	r3, [r7, #4]
 8001248:	2b2f      	cmp	r3, #47	; 0x2f
 800124a:	d127      	bne.n	800129c <fsm_set_time+0x6d0>
 800124c:	4b64      	ldr	r3, [pc, #400]	; (80013e0 <fsm_set_time+0x814>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d123      	bne.n	800129c <fsm_set_time+0x6d0>
						if(temp > 7)
 8001254:	4b64      	ldr	r3, [pc, #400]	; (80013e8 <fsm_set_time+0x81c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b07      	cmp	r3, #7
 800125a:	d902      	bls.n	8001262 <fsm_set_time+0x696>
							temp = 1;
 800125c:	4b62      	ldr	r3, [pc, #392]	; (80013e8 <fsm_set_time+0x81c>)
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
						ds3231_day = temp;
 8001262:	4b61      	ldr	r3, [pc, #388]	; (80013e8 <fsm_set_time+0x81c>)
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	4b61      	ldr	r3, [pc, #388]	; (80013ec <fsm_set_time+0x820>)
 8001268:	701a      	strb	r2, [r3, #0]
						ds3231_Write(ADDRESS_DAY, ds3231_day);
 800126a:	4b60      	ldr	r3, [pc, #384]	; (80013ec <fsm_set_time+0x820>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4619      	mov	r1, r3
 8001270:	2003      	movs	r0, #3
 8001272:	f7ff f9f9 	bl	8000668 <ds3231_Write>
						check = 0;
 8001276:	4b5a      	ldr	r3, [pc, #360]	; (80013e0 <fsm_set_time+0x814>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
						temp = 0;
 800127c:	4b5a      	ldr	r3, [pc, #360]	; (80013e8 <fsm_set_time+0x81c>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
						flag = 1;
 8001282:	4b58      	ldr	r3, [pc, #352]	; (80013e4 <fsm_set_time+0x818>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
						count_request = 0;
 8001288:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <fsm_set_time+0x7f0>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
						lcd_Clear(BLACK);
 800128e:	2000      	movs	r0, #0
 8001290:	f001 f88a 	bl	80023a8 <lcd_Clear>
						mode = NORMAL_MODE;
 8001294:	4b56      	ldr	r3, [pc, #344]	; (80013f0 <fsm_set_time+0x824>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	e002      	b.n	80012a2 <fsm_set_time+0x6d6>
					}else{
						temp = 0;
 800129c:	4b52      	ldr	r3, [pc, #328]	; (80013e8 <fsm_set_time+0x81c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
					}
				}
			if(button_count[3] == 1 || (button_count[3] >= 40 && button_count[3] % 4 == 1)){
 80012a2:	4b54      	ldr	r3, [pc, #336]	; (80013f4 <fsm_set_time+0x828>)
 80012a4:	88db      	ldrh	r3, [r3, #6]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d00a      	beq.n	80012c0 <fsm_set_time+0x6f4>
 80012aa:	4b52      	ldr	r3, [pc, #328]	; (80013f4 <fsm_set_time+0x828>)
 80012ac:	88db      	ldrh	r3, [r3, #6]
 80012ae:	2b27      	cmp	r3, #39	; 0x27
 80012b0:	d90c      	bls.n	80012cc <fsm_set_time+0x700>
 80012b2:	4b50      	ldr	r3, [pc, #320]	; (80013f4 <fsm_set_time+0x828>)
 80012b4:	88db      	ldrh	r3, [r3, #6]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d105      	bne.n	80012cc <fsm_set_time+0x700>
				ds3231_day++;
 80012c0:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <fsm_set_time+0x820>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b48      	ldr	r3, [pc, #288]	; (80013ec <fsm_set_time+0x820>)
 80012ca:	701a      	strb	r2, [r3, #0]
			}
			if(ds3231_day > 7){
 80012cc:	4b47      	ldr	r3, [pc, #284]	; (80013ec <fsm_set_time+0x820>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b07      	cmp	r3, #7
 80012d2:	d902      	bls.n	80012da <fsm_set_time+0x70e>
				ds3231_day = 1;
 80012d4:	4b45      	ldr	r3, [pc, #276]	; (80013ec <fsm_set_time+0x820>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
			}

			if(flag_timer3 == 1){
 80012da:	4b47      	ldr	r3, [pc, #284]	; (80013f8 <fsm_set_time+0x82c>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d11d      	bne.n	800131e <fsm_set_time+0x752>
				if(toggle == 1){
 80012e2:	4b46      	ldr	r3, [pc, #280]	; (80013fc <fsm_set_time+0x830>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d105      	bne.n	80012f6 <fsm_set_time+0x72a>
					toggle = 0;
 80012ea:	4b44      	ldr	r3, [pc, #272]	; (80013fc <fsm_set_time+0x830>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
					displayTime();
 80012f0:	f7ff fa40 	bl	8000774 <displayTime>
 80012f4:	e010      	b.n	8001318 <fsm_set_time+0x74c>
				}else{
					lcd_ShowIntNum(20, 130, ds3231_day, 2, BLACK, BLACK, 24);
 80012f6:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <fsm_set_time+0x820>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	2318      	movs	r3, #24
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2300      	movs	r3, #0
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	2300      	movs	r3, #0
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2302      	movs	r3, #2
 800130a:	2182      	movs	r1, #130	; 0x82
 800130c:	2014      	movs	r0, #20
 800130e:	f001 f989 	bl	8002624 <lcd_ShowIntNum>
					toggle = 1;
 8001312:	4b3a      	ldr	r3, [pc, #232]	; (80013fc <fsm_set_time+0x830>)
 8001314:	2201      	movs	r2, #1
 8001316:	701a      	strb	r2, [r3, #0]
				}
				setTimer3(50);
 8001318:	2032      	movs	r0, #50	; 0x32
 800131a:	f001 fe83 	bl	8003024 <setTimer3>
			}
			if(button_count[12] == 1){
 800131e:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <fsm_set_time+0x828>)
 8001320:	8b1b      	ldrh	r3, [r3, #24]
 8001322:	2b01      	cmp	r3, #1
 8001324:	f040 846f 	bne.w	8001c06 <fsm_set_time+0x103a>
				mode_set_time = DATE_MODE;
 8001328:	4b35      	ldr	r3, [pc, #212]	; (8001400 <fsm_set_time+0x834>)
 800132a:	220e      	movs	r2, #14
 800132c:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_DAY, ds3231_day);
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <fsm_set_time+0x820>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	4619      	mov	r1, r3
 8001334:	2003      	movs	r0, #3
 8001336:	f7ff f997 	bl	8000668 <ds3231_Write>
				send_string--;
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <fsm_set_time+0x7f4>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	3b01      	subs	r3, #1
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <fsm_set_time+0x7f4>)
 8001344:	701a      	strb	r2, [r3, #0]
				lcd_Clear(BLACK);
 8001346:	2000      	movs	r0, #0
 8001348:	f001 f82e 	bl	80023a8 <lcd_Clear>
				temp = 0;
 800134c:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <fsm_set_time+0x81c>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001352:	f000 bc58 	b.w	8001c06 <fsm_set_time+0x103a>
		case DATE_MODE:

			check = 0;
 8001356:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <fsm_set_time+0x814>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
			if(flag == 1){
 800135c:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <fsm_set_time+0x818>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d106      	bne.n	8001372 <fsm_set_time+0x7a6>
				rxTail = rxHead;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <fsm_set_time+0x7fc>)
 8001366:	781a      	ldrb	r2, [r3, #0]
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <fsm_set_time+0x800>)
 800136a:	701a      	strb	r2, [r3, #0]
				flag = 0;
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <fsm_set_time+0x818>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
			}
			if(flag_timer6 == 1){
 8001372:	4b24      	ldr	r3, [pc, #144]	; (8001404 <fsm_set_time+0x838>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d155      	bne.n	8001426 <fsm_set_time+0x85a>
				if(count_request > 2){
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <fsm_set_time+0x7f0>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d944      	bls.n	800140c <fsm_set_time+0x840>
					lcd_Clear(BLACK);
 8001382:	2000      	movs	r0, #0
 8001384:	f001 f810 	bl	80023a8 <lcd_Clear>
					mode = NORMAL_MODE;
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <fsm_set_time+0x824>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
					lcd_StrCenter(3,2,"ERROR REQUESTING",RED,BLACK,16,1);
 800138e:	2301      	movs	r3, #1
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	2310      	movs	r3, #16
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	2300      	movs	r3, #0
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800139e:	4a1a      	ldr	r2, [pc, #104]	; (8001408 <fsm_set_time+0x83c>)
 80013a0:	2102      	movs	r1, #2
 80013a2:	2003      	movs	r0, #3
 80013a4:	f001 fba4 	bl	8002af0 <lcd_StrCenter>
					count_request = 0;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <fsm_set_time+0x7f0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
					setTimer7(1000);
 80013ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b2:	f001 fe8f 	bl	80030d4 <setTimer7>
 80013b6:	e036      	b.n	8001426 <fsm_set_time+0x85a>
 80013b8:	08008918 	.word	0x08008918
 80013bc:	200000a5 	.word	0x200000a5
 80013c0:	200000a2 	.word	0x200000a2
 80013c4:	08008928 	.word	0x08008928
 80013c8:	200000d5 	.word	0x200000d5
 80013cc:	200000d6 	.word	0x200000d6
 80013d0:	200000d7 	.word	0x200000d7
 80013d4:	20000384 	.word	0x20000384
 80013d8:	080088d8 	.word	0x080088d8
 80013dc:	080088e0 	.word	0x080088e0
 80013e0:	200000a4 	.word	0x200000a4
 80013e4:	2000019f 	.word	0x2000019f
 80013e8:	200000a3 	.word	0x200000a3
 80013ec:	20000194 	.word	0x20000194
 80013f0:	2000009e 	.word	0x2000009e
 80013f4:	20000170 	.word	0x20000170
 80013f8:	200000bc 	.word	0x200000bc
 80013fc:	200000a1 	.word	0x200000a1
 8001400:	200000a0 	.word	0x200000a0
 8001404:	200000c8 	.word	0x200000c8
 8001408:	080088a0 	.word	0x080088a0
				}else{
					uart_Rs232SendString("Request date\n");
 800140c:	4894      	ldr	r0, [pc, #592]	; (8001660 <fsm_set_time+0xa94>)
 800140e:	f002 f8c5 	bl	800359c <uart_Rs232SendString>
					count_request++;
 8001412:	4b94      	ldr	r3, [pc, #592]	; (8001664 <fsm_set_time+0xa98>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	3301      	adds	r3, #1
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4b92      	ldr	r3, [pc, #584]	; (8001664 <fsm_set_time+0xa98>)
 800141c:	701a      	strb	r2, [r3, #0]
					setTimer6(5000);
 800141e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001422:	f001 fe41 	bl	80030a8 <setTimer6>
				}
			}

			if(!send_string){
 8001426:	4b90      	ldr	r3, [pc, #576]	; (8001668 <fsm_set_time+0xa9c>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10f      	bne.n	800144e <fsm_set_time+0x882>
				//uart_Rs232SendString("UPDATING MINUTE\n");
				send_string = 1;
 800142e:	4b8e      	ldr	r3, [pc, #568]	; (8001668 <fsm_set_time+0xa9c>)
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
				lcd_StrCenter(0,2,"UPDATING_DATE",WHITE,BLACK,16,1);
 8001434:	2301      	movs	r3, #1
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	2310      	movs	r3, #16
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	2300      	movs	r3, #0
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001444:	4a89      	ldr	r2, [pc, #548]	; (800166c <fsm_set_time+0xaa0>)
 8001446:	2102      	movs	r1, #2
 8001448:	2000      	movs	r0, #0
 800144a:	f001 fb51 	bl	8002af0 <lcd_StrCenter>
			}

				if(rxHead != rxTail){
 800144e:	4b88      	ldr	r3, [pc, #544]	; (8001670 <fsm_set_time+0xaa4>)
 8001450:	781a      	ldrb	r2, [r3, #0]
 8001452:	4b88      	ldr	r3, [pc, #544]	; (8001674 <fsm_set_time+0xaa8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	f000 80d8 	beq.w	800160c <fsm_set_time+0xa40>
					dataReceived = 0;
 800145c:	4b86      	ldr	r3, [pc, #536]	; (8001678 <fsm_set_time+0xaac>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
					uint8_t data = rxBuffer[rxTail];
 8001462:	4b84      	ldr	r3, [pc, #528]	; (8001674 <fsm_set_time+0xaa8>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	4b84      	ldr	r3, [pc, #528]	; (800167c <fsm_set_time+0xab0>)
 800146a:	5c9b      	ldrb	r3, [r3, r2]
 800146c:	717b      	strb	r3, [r7, #5]
					rxTail = (rxTail + 1)%BUFFER_SIZE;
 800146e:	4b81      	ldr	r3, [pc, #516]	; (8001674 <fsm_set_time+0xaa8>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	3301      	adds	r3, #1
 8001474:	425a      	negs	r2, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	bf58      	it	pl
 800147c:	4253      	negpl	r3, r2
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4b7c      	ldr	r3, [pc, #496]	; (8001674 <fsm_set_time+0xaa8>)
 8001482:	701a      	strb	r2, [r3, #0]
					uart_Rs232SendNum(data);
 8001484:	797b      	ldrb	r3, [r7, #5]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 f8a2 	bl	80035d0 <uart_Rs232SendNum>
					uart_Rs232SendString("sent\n");
 800148c:	487c      	ldr	r0, [pc, #496]	; (8001680 <fsm_set_time+0xab4>)
 800148e:	f002 f885 	bl	800359c <uart_Rs232SendString>
					if(data < 47 || data > 57){// * used to end data
 8001492:	797b      	ldrb	r3, [r7, #5]
 8001494:	2b2e      	cmp	r3, #46	; 0x2e
 8001496:	d902      	bls.n	800149e <fsm_set_time+0x8d2>
 8001498:	797b      	ldrb	r3, [r7, #5]
 800149a:	2b39      	cmp	r3, #57	; 0x39
 800149c:	d908      	bls.n	80014b0 <fsm_set_time+0x8e4>
						uart_Rs232SendString("syntax, request again");
 800149e:	4879      	ldr	r0, [pc, #484]	; (8001684 <fsm_set_time+0xab8>)
 80014a0:	f002 f87c 	bl	800359c <uart_Rs232SendString>
						check = 1;
 80014a4:	4b78      	ldr	r3, [pc, #480]	; (8001688 <fsm_set_time+0xabc>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
						flag = 1;
 80014aa:	4b78      	ldr	r3, [pc, #480]	; (800168c <fsm_set_time+0xac0>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
					}
					if(!check && data != 47){
 80014b0:	4b75      	ldr	r3, [pc, #468]	; (8001688 <fsm_set_time+0xabc>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d111      	bne.n	80014dc <fsm_set_time+0x910>
 80014b8:	797b      	ldrb	r3, [r7, #5]
 80014ba:	2b2f      	cmp	r3, #47	; 0x2f
 80014bc:	d00e      	beq.n	80014dc <fsm_set_time+0x910>
						temp = temp*10 + (data - 48);
 80014be:	4b74      	ldr	r3, [pc, #464]	; (8001690 <fsm_set_time+0xac4>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	797b      	ldrb	r3, [r7, #5]
 80014ce:	4413      	add	r3, r2
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	3b30      	subs	r3, #48	; 0x30
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b6e      	ldr	r3, [pc, #440]	; (8001690 <fsm_set_time+0xac4>)
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	e097      	b.n	800160c <fsm_set_time+0xa40>
					}else if(data == 47 && !check){
 80014dc:	797b      	ldrb	r3, [r7, #5]
 80014de:	2b2f      	cmp	r3, #47	; 0x2f
 80014e0:	f040 8091 	bne.w	8001606 <fsm_set_time+0xa3a>
 80014e4:	4b68      	ldr	r3, [pc, #416]	; (8001688 <fsm_set_time+0xabc>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f040 808c 	bne.w	8001606 <fsm_set_time+0xa3a>
						if(ds3231_month == 1 ||
 80014ee:	4b69      	ldr	r3, [pc, #420]	; (8001694 <fsm_set_time+0xac8>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d017      	beq.n	8001526 <fsm_set_time+0x95a>
								ds3231_month == 3 ||
 80014f6:	4b67      	ldr	r3, [pc, #412]	; (8001694 <fsm_set_time+0xac8>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
						if(ds3231_month == 1 ||
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d013      	beq.n	8001526 <fsm_set_time+0x95a>
								ds3231_month == 5 ||
 80014fe:	4b65      	ldr	r3, [pc, #404]	; (8001694 <fsm_set_time+0xac8>)
 8001500:	781b      	ldrb	r3, [r3, #0]
								ds3231_month == 3 ||
 8001502:	2b05      	cmp	r3, #5
 8001504:	d00f      	beq.n	8001526 <fsm_set_time+0x95a>
								ds3231_month == 7 ||
 8001506:	4b63      	ldr	r3, [pc, #396]	; (8001694 <fsm_set_time+0xac8>)
 8001508:	781b      	ldrb	r3, [r3, #0]
								ds3231_month == 5 ||
 800150a:	2b07      	cmp	r3, #7
 800150c:	d00b      	beq.n	8001526 <fsm_set_time+0x95a>
								ds3231_month == 8 ||
 800150e:	4b61      	ldr	r3, [pc, #388]	; (8001694 <fsm_set_time+0xac8>)
 8001510:	781b      	ldrb	r3, [r3, #0]
								ds3231_month == 7 ||
 8001512:	2b08      	cmp	r3, #8
 8001514:	d007      	beq.n	8001526 <fsm_set_time+0x95a>
								ds3231_month == 10 ||
 8001516:	4b5f      	ldr	r3, [pc, #380]	; (8001694 <fsm_set_time+0xac8>)
 8001518:	781b      	ldrb	r3, [r3, #0]
								ds3231_month == 8 ||
 800151a:	2b0a      	cmp	r3, #10
 800151c:	d003      	beq.n	8001526 <fsm_set_time+0x95a>
								ds3231_month == 12){
 800151e:	4b5d      	ldr	r3, [pc, #372]	; (8001694 <fsm_set_time+0xac8>)
 8001520:	781b      	ldrb	r3, [r3, #0]
								ds3231_month == 10 ||
 8001522:	2b0c      	cmp	r3, #12
 8001524:	d107      	bne.n	8001536 <fsm_set_time+0x96a>
							if(temp > 31)
 8001526:	4b5a      	ldr	r3, [pc, #360]	; (8001690 <fsm_set_time+0xac4>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b1f      	cmp	r3, #31
 800152c:	d94e      	bls.n	80015cc <fsm_set_time+0xa00>
								temp = 1;
 800152e:	4b58      	ldr	r3, [pc, #352]	; (8001690 <fsm_set_time+0xac4>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
							if(temp > 31)
 8001534:	e04a      	b.n	80015cc <fsm_set_time+0xa00>
						}else if(ds3231_month == 4 ||
 8001536:	4b57      	ldr	r3, [pc, #348]	; (8001694 <fsm_set_time+0xac8>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b04      	cmp	r3, #4
 800153c:	d00b      	beq.n	8001556 <fsm_set_time+0x98a>
								ds3231_month == 6 ||
 800153e:	4b55      	ldr	r3, [pc, #340]	; (8001694 <fsm_set_time+0xac8>)
 8001540:	781b      	ldrb	r3, [r3, #0]
						}else if(ds3231_month == 4 ||
 8001542:	2b06      	cmp	r3, #6
 8001544:	d007      	beq.n	8001556 <fsm_set_time+0x98a>
								ds3231_month == 9 ||
 8001546:	4b53      	ldr	r3, [pc, #332]	; (8001694 <fsm_set_time+0xac8>)
 8001548:	781b      	ldrb	r3, [r3, #0]
								ds3231_month == 6 ||
 800154a:	2b09      	cmp	r3, #9
 800154c:	d003      	beq.n	8001556 <fsm_set_time+0x98a>
								ds3231_month == 11){
 800154e:	4b51      	ldr	r3, [pc, #324]	; (8001694 <fsm_set_time+0xac8>)
 8001550:	781b      	ldrb	r3, [r3, #0]
								ds3231_month == 9 ||
 8001552:	2b0b      	cmp	r3, #11
 8001554:	d107      	bne.n	8001566 <fsm_set_time+0x99a>
							if(temp > 30)
 8001556:	4b4e      	ldr	r3, [pc, #312]	; (8001690 <fsm_set_time+0xac4>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b1e      	cmp	r3, #30
 800155c:	d936      	bls.n	80015cc <fsm_set_time+0xa00>
								temp = 1;
 800155e:	4b4c      	ldr	r3, [pc, #304]	; (8001690 <fsm_set_time+0xac4>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
							if(temp > 30)
 8001564:	e032      	b.n	80015cc <fsm_set_time+0xa00>
						}else{
							if ((ds3231_year % 4 == 0 && ds3231_year % 100 != 0)
 8001566:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <fsm_set_time+0xacc>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10c      	bne.n	800158e <fsm_set_time+0x9c2>
 8001574:	4b48      	ldr	r3, [pc, #288]	; (8001698 <fsm_set_time+0xacc>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4a48      	ldr	r2, [pc, #288]	; (800169c <fsm_set_time+0xad0>)
 800157a:	fba2 1203 	umull	r1, r2, r2, r3
 800157e:	0952      	lsrs	r2, r2, #5
 8001580:	2164      	movs	r1, #100	; 0x64
 8001582:	fb01 f202 	mul.w	r2, r1, r2
 8001586:	1a9b      	subs	r3, r3, r2
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <fsm_set_time+0x9e2>
									|| (ds3231_year % 400 == 0)){
 800158e:	4b42      	ldr	r3, [pc, #264]	; (8001698 <fsm_set_time+0xacc>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	4b41      	ldr	r3, [pc, #260]	; (800169c <fsm_set_time+0xad0>)
 8001596:	fb83 1302 	smull	r1, r3, r3, r2
 800159a:	11d9      	asrs	r1, r3, #7
 800159c:	17d3      	asrs	r3, r2, #31
 800159e:	1acb      	subs	r3, r1, r3
 80015a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80015a4:	fb01 f303 	mul.w	r3, r1, r3
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d107      	bne.n	80015be <fsm_set_time+0x9f2>
								if(temp > 29)
 80015ae:	4b38      	ldr	r3, [pc, #224]	; (8001690 <fsm_set_time+0xac4>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b1d      	cmp	r3, #29
 80015b4:	d90a      	bls.n	80015cc <fsm_set_time+0xa00>
									temp = 1;
 80015b6:	4b36      	ldr	r3, [pc, #216]	; (8001690 <fsm_set_time+0xac4>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
								if(temp > 29)
 80015bc:	e006      	b.n	80015cc <fsm_set_time+0xa00>
							}else{
								if(temp > 28)
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <fsm_set_time+0xac4>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b1c      	cmp	r3, #28
 80015c4:	d902      	bls.n	80015cc <fsm_set_time+0xa00>
									temp = 1;
 80015c6:	4b32      	ldr	r3, [pc, #200]	; (8001690 <fsm_set_time+0xac4>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
							}
						}
						ds3231_date = temp;
 80015cc:	4b30      	ldr	r3, [pc, #192]	; (8001690 <fsm_set_time+0xac4>)
 80015ce:	781a      	ldrb	r2, [r3, #0]
 80015d0:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <fsm_set_time+0xad4>)
 80015d2:	701a      	strb	r2, [r3, #0]
						ds3231_Write(ADDRESS_DATE, ds3231_date);
 80015d4:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <fsm_set_time+0xad4>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	2004      	movs	r0, #4
 80015dc:	f7ff f844 	bl	8000668 <ds3231_Write>
						check = 0;
 80015e0:	4b29      	ldr	r3, [pc, #164]	; (8001688 <fsm_set_time+0xabc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
						temp = 0;
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <fsm_set_time+0xac4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
						flag = 1;
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <fsm_set_time+0xac0>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
						count_request = 0;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <fsm_set_time+0xa98>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
						lcd_Clear(BLACK);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f000 fed5 	bl	80023a8 <lcd_Clear>
						mode = NORMAL_MODE;
 80015fe:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <fsm_set_time+0xad8>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	e002      	b.n	800160c <fsm_set_time+0xa40>
					}else{
						temp = 0;
 8001606:	4b22      	ldr	r3, [pc, #136]	; (8001690 <fsm_set_time+0xac4>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
					}
				}
			if(button_count[3] == 1 || (button_count[3] >= 40 && button_count[3] % 4 == 1)){
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <fsm_set_time+0xadc>)
 800160e:	88db      	ldrh	r3, [r3, #6]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d00a      	beq.n	800162a <fsm_set_time+0xa5e>
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <fsm_set_time+0xadc>)
 8001616:	88db      	ldrh	r3, [r3, #6]
 8001618:	2b27      	cmp	r3, #39	; 0x27
 800161a:	d90c      	bls.n	8001636 <fsm_set_time+0xa6a>
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <fsm_set_time+0xadc>)
 800161e:	88db      	ldrh	r3, [r3, #6]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	b29b      	uxth	r3, r3
 8001626:	2b01      	cmp	r3, #1
 8001628:	d105      	bne.n	8001636 <fsm_set_time+0xa6a>
				ds3231_date++;
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <fsm_set_time+0xad4>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <fsm_set_time+0xad4>)
 8001634:	701a      	strb	r2, [r3, #0]
			}
			if(ds3231_date > 31){
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <fsm_set_time+0xad4>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b1f      	cmp	r3, #31
 800163c:	d902      	bls.n	8001644 <fsm_set_time+0xa78>
				ds3231_date = 1;
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <fsm_set_time+0xad4>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
			}

			if(flag_timer3 == 1){
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <fsm_set_time+0xae0>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d147      	bne.n	80016dc <fsm_set_time+0xb10>
				if(toggle == 1){
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <fsm_set_time+0xae4>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d12f      	bne.n	80016b4 <fsm_set_time+0xae8>
					toggle = 0;
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <fsm_set_time+0xae4>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
					displayTime();
 800165a:	f7ff f88b 	bl	8000774 <displayTime>
 800165e:	e03a      	b.n	80016d6 <fsm_set_time+0xb0a>
 8001660:	08008938 	.word	0x08008938
 8001664:	200000a5 	.word	0x200000a5
 8001668:	200000a2 	.word	0x200000a2
 800166c:	08008948 	.word	0x08008948
 8001670:	200000d5 	.word	0x200000d5
 8001674:	200000d6 	.word	0x200000d6
 8001678:	200000d7 	.word	0x200000d7
 800167c:	20000384 	.word	0x20000384
 8001680:	080088d8 	.word	0x080088d8
 8001684:	080088e0 	.word	0x080088e0
 8001688:	200000a4 	.word	0x200000a4
 800168c:	2000019f 	.word	0x2000019f
 8001690:	200000a3 	.word	0x200000a3
 8001694:	20000196 	.word	0x20000196
 8001698:	20000191 	.word	0x20000191
 800169c:	51eb851f 	.word	0x51eb851f
 80016a0:	20000193 	.word	0x20000193
 80016a4:	2000009e 	.word	0x2000009e
 80016a8:	20000170 	.word	0x20000170
 80016ac:	200000bc 	.word	0x200000bc
 80016b0:	200000a1 	.word	0x200000a1
				}else{
					lcd_ShowIntNum(70, 130, ds3231_date, 2, BLACK, BLACK, 24);
 80016b4:	4ba8      	ldr	r3, [pc, #672]	; (8001958 <fsm_set_time+0xd8c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	2318      	movs	r3, #24
 80016bc:	9302      	str	r3, [sp, #8]
 80016be:	2300      	movs	r3, #0
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	2300      	movs	r3, #0
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2302      	movs	r3, #2
 80016c8:	2182      	movs	r1, #130	; 0x82
 80016ca:	2046      	movs	r0, #70	; 0x46
 80016cc:	f000 ffaa 	bl	8002624 <lcd_ShowIntNum>
					toggle = 1;
 80016d0:	4ba2      	ldr	r3, [pc, #648]	; (800195c <fsm_set_time+0xd90>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
				}
				setTimer3(50);
 80016d6:	2032      	movs	r0, #50	; 0x32
 80016d8:	f001 fca4 	bl	8003024 <setTimer3>
			}
			if(button_count[12] == 1){
 80016dc:	4ba0      	ldr	r3, [pc, #640]	; (8001960 <fsm_set_time+0xd94>)
 80016de:	8b1b      	ldrh	r3, [r3, #24]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	f040 8292 	bne.w	8001c0a <fsm_set_time+0x103e>
				mode_set_time = MONTH_MODE;
 80016e6:	4b9f      	ldr	r3, [pc, #636]	; (8001964 <fsm_set_time+0xd98>)
 80016e8:	220f      	movs	r2, #15
 80016ea:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_DATE, ds3231_date);
 80016ec:	4b9a      	ldr	r3, [pc, #616]	; (8001958 <fsm_set_time+0xd8c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	2004      	movs	r0, #4
 80016f4:	f7fe ffb8 	bl	8000668 <ds3231_Write>
				send_string--;
 80016f8:	4b9b      	ldr	r3, [pc, #620]	; (8001968 <fsm_set_time+0xd9c>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b99      	ldr	r3, [pc, #612]	; (8001968 <fsm_set_time+0xd9c>)
 8001702:	701a      	strb	r2, [r3, #0]
				lcd_Clear(BLACK);
 8001704:	2000      	movs	r0, #0
 8001706:	f000 fe4f 	bl	80023a8 <lcd_Clear>
				temp = 0;
 800170a:	4b98      	ldr	r3, [pc, #608]	; (800196c <fsm_set_time+0xda0>)
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
				temp = 0;
 8001710:	4b96      	ldr	r3, [pc, #600]	; (800196c <fsm_set_time+0xda0>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001716:	e278      	b.n	8001c0a <fsm_set_time+0x103e>

		case MONTH_MODE:
			check = 0;
 8001718:	4b95      	ldr	r3, [pc, #596]	; (8001970 <fsm_set_time+0xda4>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
			if(flag == 1){
 800171e:	4b95      	ldr	r3, [pc, #596]	; (8001974 <fsm_set_time+0xda8>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d106      	bne.n	8001734 <fsm_set_time+0xb68>
				rxTail = rxHead;
 8001726:	4b94      	ldr	r3, [pc, #592]	; (8001978 <fsm_set_time+0xdac>)
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	4b94      	ldr	r3, [pc, #592]	; (800197c <fsm_set_time+0xdb0>)
 800172c:	701a      	strb	r2, [r3, #0]
				flag = 0;
 800172e:	4b91      	ldr	r3, [pc, #580]	; (8001974 <fsm_set_time+0xda8>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
			}
			if(flag_timer6 == 1){
 8001734:	4b92      	ldr	r3, [pc, #584]	; (8001980 <fsm_set_time+0xdb4>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d12b      	bne.n	8001794 <fsm_set_time+0xbc8>
				if(count_request > 2){
 800173c:	4b91      	ldr	r3, [pc, #580]	; (8001984 <fsm_set_time+0xdb8>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d91a      	bls.n	800177a <fsm_set_time+0xbae>
					lcd_Clear(BLACK);
 8001744:	2000      	movs	r0, #0
 8001746:	f000 fe2f 	bl	80023a8 <lcd_Clear>
					mode = NORMAL_MODE;
 800174a:	4b8f      	ldr	r3, [pc, #572]	; (8001988 <fsm_set_time+0xdbc>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
					lcd_StrCenter(3,2,"ERROR REQUESTING",RED,BLACK,16,1);
 8001750:	2301      	movs	r3, #1
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2310      	movs	r3, #16
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	2300      	movs	r3, #0
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001760:	4a8a      	ldr	r2, [pc, #552]	; (800198c <fsm_set_time+0xdc0>)
 8001762:	2102      	movs	r1, #2
 8001764:	2003      	movs	r0, #3
 8001766:	f001 f9c3 	bl	8002af0 <lcd_StrCenter>
					count_request = 0;
 800176a:	4b86      	ldr	r3, [pc, #536]	; (8001984 <fsm_set_time+0xdb8>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
					setTimer7(1000);
 8001770:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001774:	f001 fcae 	bl	80030d4 <setTimer7>
 8001778:	e00c      	b.n	8001794 <fsm_set_time+0xbc8>
				}else{
					uart_Rs232SendString("Request month\n");
 800177a:	4885      	ldr	r0, [pc, #532]	; (8001990 <fsm_set_time+0xdc4>)
 800177c:	f001 ff0e 	bl	800359c <uart_Rs232SendString>
					count_request++;
 8001780:	4b80      	ldr	r3, [pc, #512]	; (8001984 <fsm_set_time+0xdb8>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	3301      	adds	r3, #1
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b7e      	ldr	r3, [pc, #504]	; (8001984 <fsm_set_time+0xdb8>)
 800178a:	701a      	strb	r2, [r3, #0]
					setTimer6(5000);
 800178c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001790:	f001 fc8a 	bl	80030a8 <setTimer6>
				}
			}

			if(!send_string){
 8001794:	4b74      	ldr	r3, [pc, #464]	; (8001968 <fsm_set_time+0xd9c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10f      	bne.n	80017bc <fsm_set_time+0xbf0>
				//uart_Rs232SendString("UPDATING MINUTE\n");
				send_string = 1;
 800179c:	4b72      	ldr	r3, [pc, #456]	; (8001968 <fsm_set_time+0xd9c>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
				lcd_StrCenter(0,2,"UPDATING_MINUTE",WHITE,BLACK,16,1);
 80017a2:	2301      	movs	r3, #1
 80017a4:	9302      	str	r3, [sp, #8]
 80017a6:	2310      	movs	r3, #16
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	2300      	movs	r3, #0
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017b2:	4a78      	ldr	r2, [pc, #480]	; (8001994 <fsm_set_time+0xdc8>)
 80017b4:	2102      	movs	r1, #2
 80017b6:	2000      	movs	r0, #0
 80017b8:	f001 f99a 	bl	8002af0 <lcd_StrCenter>
			}

				if(rxHead != rxTail){
 80017bc:	4b6e      	ldr	r3, [pc, #440]	; (8001978 <fsm_set_time+0xdac>)
 80017be:	781a      	ldrb	r2, [r3, #0]
 80017c0:	4b6e      	ldr	r3, [pc, #440]	; (800197c <fsm_set_time+0xdb0>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d06d      	beq.n	80018a4 <fsm_set_time+0xcd8>
					dataReceived = 0;
 80017c8:	4b73      	ldr	r3, [pc, #460]	; (8001998 <fsm_set_time+0xdcc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
					uint8_t data = rxBuffer[rxTail];
 80017ce:	4b6b      	ldr	r3, [pc, #428]	; (800197c <fsm_set_time+0xdb0>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b71      	ldr	r3, [pc, #452]	; (800199c <fsm_set_time+0xdd0>)
 80017d6:	5c9b      	ldrb	r3, [r3, r2]
 80017d8:	71bb      	strb	r3, [r7, #6]
					rxTail = (rxTail + 1)%BUFFER_SIZE;
 80017da:	4b68      	ldr	r3, [pc, #416]	; (800197c <fsm_set_time+0xdb0>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	425a      	negs	r2, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	bf58      	it	pl
 80017e8:	4253      	negpl	r3, r2
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b63      	ldr	r3, [pc, #396]	; (800197c <fsm_set_time+0xdb0>)
 80017ee:	701a      	strb	r2, [r3, #0]
					uart_Rs232SendNum(data);
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 feec 	bl	80035d0 <uart_Rs232SendNum>
					uart_Rs232SendString("sent\n");
 80017f8:	4869      	ldr	r0, [pc, #420]	; (80019a0 <fsm_set_time+0xdd4>)
 80017fa:	f001 fecf 	bl	800359c <uart_Rs232SendString>
					if(data < 47 || data > 57){// * used to end data
 80017fe:	79bb      	ldrb	r3, [r7, #6]
 8001800:	2b2e      	cmp	r3, #46	; 0x2e
 8001802:	d902      	bls.n	800180a <fsm_set_time+0xc3e>
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	2b39      	cmp	r3, #57	; 0x39
 8001808:	d908      	bls.n	800181c <fsm_set_time+0xc50>
						uart_Rs232SendString("syntax, request again");
 800180a:	4866      	ldr	r0, [pc, #408]	; (80019a4 <fsm_set_time+0xdd8>)
 800180c:	f001 fec6 	bl	800359c <uart_Rs232SendString>
						check = 1;
 8001810:	4b57      	ldr	r3, [pc, #348]	; (8001970 <fsm_set_time+0xda4>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
						flag = 1;
 8001816:	4b57      	ldr	r3, [pc, #348]	; (8001974 <fsm_set_time+0xda8>)
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
					}
					if(!check && data != 47){
 800181c:	4b54      	ldr	r3, [pc, #336]	; (8001970 <fsm_set_time+0xda4>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d111      	bne.n	8001848 <fsm_set_time+0xc7c>
 8001824:	79bb      	ldrb	r3, [r7, #6]
 8001826:	2b2f      	cmp	r3, #47	; 0x2f
 8001828:	d00e      	beq.n	8001848 <fsm_set_time+0xc7c>
						temp = temp*10 + (data - 48);
 800182a:	4b50      	ldr	r3, [pc, #320]	; (800196c <fsm_set_time+0xda0>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	0092      	lsls	r2, r2, #2
 8001832:	4413      	add	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	b2da      	uxtb	r2, r3
 8001838:	79bb      	ldrb	r3, [r7, #6]
 800183a:	4413      	add	r3, r2
 800183c:	b2db      	uxtb	r3, r3
 800183e:	3b30      	subs	r3, #48	; 0x30
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b4a      	ldr	r3, [pc, #296]	; (800196c <fsm_set_time+0xda0>)
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	e02d      	b.n	80018a4 <fsm_set_time+0xcd8>
					}else if(data == 47 && !check){
 8001848:	79bb      	ldrb	r3, [r7, #6]
 800184a:	2b2f      	cmp	r3, #47	; 0x2f
 800184c:	d127      	bne.n	800189e <fsm_set_time+0xcd2>
 800184e:	4b48      	ldr	r3, [pc, #288]	; (8001970 <fsm_set_time+0xda4>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d123      	bne.n	800189e <fsm_set_time+0xcd2>
						ds3231_month = temp;
 8001856:	4b45      	ldr	r3, [pc, #276]	; (800196c <fsm_set_time+0xda0>)
 8001858:	781a      	ldrb	r2, [r3, #0]
 800185a:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <fsm_set_time+0xddc>)
 800185c:	701a      	strb	r2, [r3, #0]
						if(temp > 12)
 800185e:	4b43      	ldr	r3, [pc, #268]	; (800196c <fsm_set_time+0xda0>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b0c      	cmp	r3, #12
 8001864:	d902      	bls.n	800186c <fsm_set_time+0xca0>
							temp = 1;
 8001866:	4b41      	ldr	r3, [pc, #260]	; (800196c <fsm_set_time+0xda0>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
						ds3231_Write(ADDRESS_MONTH, ds3231_month);
 800186c:	4b4e      	ldr	r3, [pc, #312]	; (80019a8 <fsm_set_time+0xddc>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	2005      	movs	r0, #5
 8001874:	f7fe fef8 	bl	8000668 <ds3231_Write>
						check = 0;
 8001878:	4b3d      	ldr	r3, [pc, #244]	; (8001970 <fsm_set_time+0xda4>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
						temp = 0;
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <fsm_set_time+0xda0>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
						flag = 1;
 8001884:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <fsm_set_time+0xda8>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
						count_request = 0;
 800188a:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <fsm_set_time+0xdb8>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
						lcd_Clear(BLACK);
 8001890:	2000      	movs	r0, #0
 8001892:	f000 fd89 	bl	80023a8 <lcd_Clear>
						mode = NORMAL_MODE;
 8001896:	4b3c      	ldr	r3, [pc, #240]	; (8001988 <fsm_set_time+0xdbc>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	e002      	b.n	80018a4 <fsm_set_time+0xcd8>
					}else{
						temp = 0;
 800189e:	4b33      	ldr	r3, [pc, #204]	; (800196c <fsm_set_time+0xda0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
					}
				}
			if(button_count[3] == 1 || (button_count[3] >= 40 && button_count[3] % 4 == 1)){
 80018a4:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <fsm_set_time+0xd94>)
 80018a6:	88db      	ldrh	r3, [r3, #6]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d00a      	beq.n	80018c2 <fsm_set_time+0xcf6>
 80018ac:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <fsm_set_time+0xd94>)
 80018ae:	88db      	ldrh	r3, [r3, #6]
 80018b0:	2b27      	cmp	r3, #39	; 0x27
 80018b2:	d90c      	bls.n	80018ce <fsm_set_time+0xd02>
 80018b4:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <fsm_set_time+0xd94>)
 80018b6:	88db      	ldrh	r3, [r3, #6]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	b29b      	uxth	r3, r3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d105      	bne.n	80018ce <fsm_set_time+0xd02>
				ds3231_month++;
 80018c2:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <fsm_set_time+0xddc>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <fsm_set_time+0xddc>)
 80018cc:	701a      	strb	r2, [r3, #0]
			}
			if(ds3231_month >= 13){
 80018ce:	4b36      	ldr	r3, [pc, #216]	; (80019a8 <fsm_set_time+0xddc>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d902      	bls.n	80018dc <fsm_set_time+0xd10>
				ds3231_month = 1;
 80018d6:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <fsm_set_time+0xddc>)
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
			}

			if(flag_timer3 == 1){
 80018dc:	4b33      	ldr	r3, [pc, #204]	; (80019ac <fsm_set_time+0xde0>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d11d      	bne.n	8001920 <fsm_set_time+0xd54>
				if(toggle == 1){
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <fsm_set_time+0xd90>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d105      	bne.n	80018f8 <fsm_set_time+0xd2c>
					toggle = 0;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <fsm_set_time+0xd90>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
					displayTime();
 80018f2:	f7fe ff3f 	bl	8000774 <displayTime>
 80018f6:	e010      	b.n	800191a <fsm_set_time+0xd4e>
				}else{
					lcd_ShowIntNum(110, 130, ds3231_month, 2, BLACK, BLACK, 24);
 80018f8:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <fsm_set_time+0xddc>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	2318      	movs	r3, #24
 8001900:	9302      	str	r3, [sp, #8]
 8001902:	2300      	movs	r3, #0
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2300      	movs	r3, #0
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2302      	movs	r3, #2
 800190c:	2182      	movs	r1, #130	; 0x82
 800190e:	206e      	movs	r0, #110	; 0x6e
 8001910:	f000 fe88 	bl	8002624 <lcd_ShowIntNum>
					toggle = 1;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <fsm_set_time+0xd90>)
 8001916:	2201      	movs	r2, #1
 8001918:	701a      	strb	r2, [r3, #0]
				}
				setTimer3(50);
 800191a:	2032      	movs	r0, #50	; 0x32
 800191c:	f001 fb82 	bl	8003024 <setTimer3>
			}
			if(button_count[12] == 1){
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <fsm_set_time+0xd94>)
 8001922:	8b1b      	ldrh	r3, [r3, #24]
 8001924:	2b01      	cmp	r3, #1
 8001926:	f040 8172 	bne.w	8001c0e <fsm_set_time+0x1042>
				mode_set_time = YEAR_MODE;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <fsm_set_time+0xd98>)
 800192c:	2210      	movs	r2, #16
 800192e:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_MONTH, ds3231_month);
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <fsm_set_time+0xddc>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	2005      	movs	r0, #5
 8001938:	f7fe fe96 	bl	8000668 <ds3231_Write>
				send_string--;
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <fsm_set_time+0xd9c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	3b01      	subs	r3, #1
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <fsm_set_time+0xd9c>)
 8001946:	701a      	strb	r2, [r3, #0]
				lcd_Clear(BLACK);
 8001948:	2000      	movs	r0, #0
 800194a:	f000 fd2d 	bl	80023a8 <lcd_Clear>
				temp = 0;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <fsm_set_time+0xda0>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001954:	e15b      	b.n	8001c0e <fsm_set_time+0x1042>
 8001956:	bf00      	nop
 8001958:	20000193 	.word	0x20000193
 800195c:	200000a1 	.word	0x200000a1
 8001960:	20000170 	.word	0x20000170
 8001964:	200000a0 	.word	0x200000a0
 8001968:	200000a2 	.word	0x200000a2
 800196c:	200000a3 	.word	0x200000a3
 8001970:	200000a4 	.word	0x200000a4
 8001974:	2000019f 	.word	0x2000019f
 8001978:	200000d5 	.word	0x200000d5
 800197c:	200000d6 	.word	0x200000d6
 8001980:	200000c8 	.word	0x200000c8
 8001984:	200000a5 	.word	0x200000a5
 8001988:	2000009e 	.word	0x2000009e
 800198c:	080088a0 	.word	0x080088a0
 8001990:	08008958 	.word	0x08008958
 8001994:	080088c8 	.word	0x080088c8
 8001998:	200000d7 	.word	0x200000d7
 800199c:	20000384 	.word	0x20000384
 80019a0:	080088d8 	.word	0x080088d8
 80019a4:	080088e0 	.word	0x080088e0
 80019a8:	20000196 	.word	0x20000196
 80019ac:	200000bc 	.word	0x200000bc
		case YEAR_MODE:
			check = 0;
 80019b0:	4b9a      	ldr	r3, [pc, #616]	; (8001c1c <fsm_set_time+0x1050>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
			if(flag == 1){
 80019b6:	4b9a      	ldr	r3, [pc, #616]	; (8001c20 <fsm_set_time+0x1054>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d106      	bne.n	80019cc <fsm_set_time+0xe00>
				rxTail = rxHead;
 80019be:	4b99      	ldr	r3, [pc, #612]	; (8001c24 <fsm_set_time+0x1058>)
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	4b99      	ldr	r3, [pc, #612]	; (8001c28 <fsm_set_time+0x105c>)
 80019c4:	701a      	strb	r2, [r3, #0]
				flag = 0;
 80019c6:	4b96      	ldr	r3, [pc, #600]	; (8001c20 <fsm_set_time+0x1054>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
			}
			if(flag_timer6 == 1){
 80019cc:	4b97      	ldr	r3, [pc, #604]	; (8001c2c <fsm_set_time+0x1060>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d12b      	bne.n	8001a2c <fsm_set_time+0xe60>
				if(count_request > 2){
 80019d4:	4b96      	ldr	r3, [pc, #600]	; (8001c30 <fsm_set_time+0x1064>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d91a      	bls.n	8001a12 <fsm_set_time+0xe46>
					lcd_Clear(BLACK);
 80019dc:	2000      	movs	r0, #0
 80019de:	f000 fce3 	bl	80023a8 <lcd_Clear>
					mode = NORMAL_MODE;
 80019e2:	4b94      	ldr	r3, [pc, #592]	; (8001c34 <fsm_set_time+0x1068>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
					lcd_StrCenter(3,2,"ERROR REQUESTING",RED,BLACK,16,1);
 80019e8:	2301      	movs	r3, #1
 80019ea:	9302      	str	r3, [sp, #8]
 80019ec:	2310      	movs	r3, #16
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	2300      	movs	r3, #0
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80019f8:	4a8f      	ldr	r2, [pc, #572]	; (8001c38 <fsm_set_time+0x106c>)
 80019fa:	2102      	movs	r1, #2
 80019fc:	2003      	movs	r0, #3
 80019fe:	f001 f877 	bl	8002af0 <lcd_StrCenter>
					count_request = 0;
 8001a02:	4b8b      	ldr	r3, [pc, #556]	; (8001c30 <fsm_set_time+0x1064>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
					setTimer7(1000);
 8001a08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a0c:	f001 fb62 	bl	80030d4 <setTimer7>
 8001a10:	e00c      	b.n	8001a2c <fsm_set_time+0xe60>
				}else{
					uart_Rs232SendString("Request year\n");
 8001a12:	488a      	ldr	r0, [pc, #552]	; (8001c3c <fsm_set_time+0x1070>)
 8001a14:	f001 fdc2 	bl	800359c <uart_Rs232SendString>
					count_request++;
 8001a18:	4b85      	ldr	r3, [pc, #532]	; (8001c30 <fsm_set_time+0x1064>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b83      	ldr	r3, [pc, #524]	; (8001c30 <fsm_set_time+0x1064>)
 8001a22:	701a      	strb	r2, [r3, #0]
					setTimer6(5000);
 8001a24:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a28:	f001 fb3e 	bl	80030a8 <setTimer6>
				}
			}

			if(!send_string){
 8001a2c:	4b84      	ldr	r3, [pc, #528]	; (8001c40 <fsm_set_time+0x1074>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10f      	bne.n	8001a54 <fsm_set_time+0xe88>
				//uart_Rs232SendString("UPDATING MINUTE\n");
				send_string = 1;
 8001a34:	4b82      	ldr	r3, [pc, #520]	; (8001c40 <fsm_set_time+0x1074>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
				lcd_StrCenter(0,2,"UPDATING_YEAR",WHITE,BLACK,16,1);
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	9302      	str	r3, [sp, #8]
 8001a3e:	2310      	movs	r3, #16
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	2300      	movs	r3, #0
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a4a:	4a7e      	ldr	r2, [pc, #504]	; (8001c44 <fsm_set_time+0x1078>)
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f001 f84e 	bl	8002af0 <lcd_StrCenter>
			}

				if(rxHead != rxTail){
 8001a54:	4b73      	ldr	r3, [pc, #460]	; (8001c24 <fsm_set_time+0x1058>)
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	4b73      	ldr	r3, [pc, #460]	; (8001c28 <fsm_set_time+0x105c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d066      	beq.n	8001b2e <fsm_set_time+0xf62>
					dataReceived = 0;
 8001a60:	4b79      	ldr	r3, [pc, #484]	; (8001c48 <fsm_set_time+0x107c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
					uint8_t data = rxBuffer[rxTail];
 8001a66:	4b70      	ldr	r3, [pc, #448]	; (8001c28 <fsm_set_time+0x105c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b77      	ldr	r3, [pc, #476]	; (8001c4c <fsm_set_time+0x1080>)
 8001a6e:	5c9b      	ldrb	r3, [r3, r2]
 8001a70:	71fb      	strb	r3, [r7, #7]
					rxTail = (rxTail + 1)%BUFFER_SIZE;
 8001a72:	4b6d      	ldr	r3, [pc, #436]	; (8001c28 <fsm_set_time+0x105c>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	425a      	negs	r2, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	bf58      	it	pl
 8001a80:	4253      	negpl	r3, r2
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b68      	ldr	r3, [pc, #416]	; (8001c28 <fsm_set_time+0x105c>)
 8001a86:	701a      	strb	r2, [r3, #0]
					uart_Rs232SendNum(data);
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f001 fda0 	bl	80035d0 <uart_Rs232SendNum>
					uart_Rs232SendString("sent\n");
 8001a90:	486f      	ldr	r0, [pc, #444]	; (8001c50 <fsm_set_time+0x1084>)
 8001a92:	f001 fd83 	bl	800359c <uart_Rs232SendString>
					if(data < 47 || data > 57){// * used to end data
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2b2e      	cmp	r3, #46	; 0x2e
 8001a9a:	d902      	bls.n	8001aa2 <fsm_set_time+0xed6>
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	2b39      	cmp	r3, #57	; 0x39
 8001aa0:	d908      	bls.n	8001ab4 <fsm_set_time+0xee8>
						uart_Rs232SendString("syntax, request again");
 8001aa2:	486c      	ldr	r0, [pc, #432]	; (8001c54 <fsm_set_time+0x1088>)
 8001aa4:	f001 fd7a 	bl	800359c <uart_Rs232SendString>
						check = 1;
 8001aa8:	4b5c      	ldr	r3, [pc, #368]	; (8001c1c <fsm_set_time+0x1050>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
						flag = 1;
 8001aae:	4b5c      	ldr	r3, [pc, #368]	; (8001c20 <fsm_set_time+0x1054>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
					}
					if(!check && data != 47){
 8001ab4:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <fsm_set_time+0x1050>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d111      	bne.n	8001ae0 <fsm_set_time+0xf14>
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	2b2f      	cmp	r3, #47	; 0x2f
 8001ac0:	d00e      	beq.n	8001ae0 <fsm_set_time+0xf14>
						temp = temp*10 + (data - 48);
 8001ac2:	4b65      	ldr	r3, [pc, #404]	; (8001c58 <fsm_set_time+0x108c>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	0092      	lsls	r2, r2, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	3b30      	subs	r3, #48	; 0x30
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4b5f      	ldr	r3, [pc, #380]	; (8001c58 <fsm_set_time+0x108c>)
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	e026      	b.n	8001b2e <fsm_set_time+0xf62>
					}else if(data == 47 && !check){
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	2b2f      	cmp	r3, #47	; 0x2f
 8001ae4:	d120      	bne.n	8001b28 <fsm_set_time+0xf5c>
 8001ae6:	4b4d      	ldr	r3, [pc, #308]	; (8001c1c <fsm_set_time+0x1050>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d11c      	bne.n	8001b28 <fsm_set_time+0xf5c>
						ds3231_year = temp;
 8001aee:	4b5a      	ldr	r3, [pc, #360]	; (8001c58 <fsm_set_time+0x108c>)
 8001af0:	781a      	ldrb	r2, [r3, #0]
 8001af2:	4b5a      	ldr	r3, [pc, #360]	; (8001c5c <fsm_set_time+0x1090>)
 8001af4:	701a      	strb	r2, [r3, #0]
						ds3231_Write(ADDRESS_YEAR, ds3231_year);
 8001af6:	4b59      	ldr	r3, [pc, #356]	; (8001c5c <fsm_set_time+0x1090>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	4619      	mov	r1, r3
 8001afc:	2006      	movs	r0, #6
 8001afe:	f7fe fdb3 	bl	8000668 <ds3231_Write>
						check = 0;
 8001b02:	4b46      	ldr	r3, [pc, #280]	; (8001c1c <fsm_set_time+0x1050>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
						temp = 0;
 8001b08:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <fsm_set_time+0x108c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
						flag = 1;
 8001b0e:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <fsm_set_time+0x1054>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
						count_request = 0;
 8001b14:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <fsm_set_time+0x1064>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
						lcd_Clear(BLACK);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f000 fc44 	bl	80023a8 <lcd_Clear>
						mode = NORMAL_MODE;
 8001b20:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <fsm_set_time+0x1068>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	e002      	b.n	8001b2e <fsm_set_time+0xf62>
					}else{
						temp = 0;
 8001b28:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <fsm_set_time+0x108c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
					}
				}
			if(button_count[3] == 1 || (button_count[3] >= 40 && button_count[3] % 4 == 1)){
 8001b2e:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <fsm_set_time+0x1094>)
 8001b30:	88db      	ldrh	r3, [r3, #6]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d00a      	beq.n	8001b4c <fsm_set_time+0xf80>
 8001b36:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <fsm_set_time+0x1094>)
 8001b38:	88db      	ldrh	r3, [r3, #6]
 8001b3a:	2b27      	cmp	r3, #39	; 0x27
 8001b3c:	d90c      	bls.n	8001b58 <fsm_set_time+0xf8c>
 8001b3e:	4b48      	ldr	r3, [pc, #288]	; (8001c60 <fsm_set_time+0x1094>)
 8001b40:	88db      	ldrh	r3, [r3, #6]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <fsm_set_time+0xf8c>
				ds3231_year++;
 8001b4c:	4b43      	ldr	r3, [pc, #268]	; (8001c5c <fsm_set_time+0x1090>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <fsm_set_time+0x1090>)
 8001b56:	701a      	strb	r2, [r3, #0]
			}

			if(button_count[7] == 1 || (button_count[7] >= 40 && button_count[7] % 4 == 1)){
 8001b58:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <fsm_set_time+0x1094>)
 8001b5a:	89db      	ldrh	r3, [r3, #14]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d00a      	beq.n	8001b76 <fsm_set_time+0xfaa>
 8001b60:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <fsm_set_time+0x1094>)
 8001b62:	89db      	ldrh	r3, [r3, #14]
 8001b64:	2b27      	cmp	r3, #39	; 0x27
 8001b66:	d90c      	bls.n	8001b82 <fsm_set_time+0xfb6>
 8001b68:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <fsm_set_time+0x1094>)
 8001b6a:	89db      	ldrh	r3, [r3, #14]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d105      	bne.n	8001b82 <fsm_set_time+0xfb6>
				ds3231_year--;
 8001b76:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <fsm_set_time+0x1090>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <fsm_set_time+0x1090>)
 8001b80:	701a      	strb	r2, [r3, #0]
			}

			if(ds3231_year < 0) ds3231_year = 0;

			if(flag_timer3 == 1){
 8001b82:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <fsm_set_time+0x1098>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d11d      	bne.n	8001bc6 <fsm_set_time+0xffa>
				if(toggle == 1){
 8001b8a:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <fsm_set_time+0x109c>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d105      	bne.n	8001b9e <fsm_set_time+0xfd2>
					toggle = 0;
 8001b92:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <fsm_set_time+0x109c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
					displayTime();
 8001b98:	f7fe fdec 	bl	8000774 <displayTime>
 8001b9c:	e010      	b.n	8001bc0 <fsm_set_time+0xff4>
				}else{
					lcd_ShowIntNum(150, 130, ds3231_year, 2, BLACK, BLACK, 24);
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <fsm_set_time+0x1090>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	2318      	movs	r3, #24
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	2300      	movs	r3, #0
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	2182      	movs	r1, #130	; 0x82
 8001bb4:	2096      	movs	r0, #150	; 0x96
 8001bb6:	f000 fd35 	bl	8002624 <lcd_ShowIntNum>
					toggle = 1;
 8001bba:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <fsm_set_time+0x109c>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
				}
				setTimer3(50);
 8001bc0:	2032      	movs	r0, #50	; 0x32
 8001bc2:	f001 fa2f 	bl	8003024 <setTimer3>
			}
			if(button_count[12] == 1){
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <fsm_set_time+0x1094>)
 8001bc8:	8b1b      	ldrh	r3, [r3, #24]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d121      	bne.n	8001c12 <fsm_set_time+0x1046>
				mode_set_time = MIN_MODE;
 8001bce:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <fsm_set_time+0x10a0>)
 8001bd0:	220b      	movs	r2, #11
 8001bd2:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_YEAR, ds3231_year);
 8001bd4:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <fsm_set_time+0x1090>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	2006      	movs	r0, #6
 8001bdc:	f7fe fd44 	bl	8000668 <ds3231_Write>
				send_string--;
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <fsm_set_time+0x1074>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <fsm_set_time+0x1074>)
 8001bea:	701a      	strb	r2, [r3, #0]
				lcd_Clear(BLACK);
 8001bec:	2000      	movs	r0, #0
 8001bee:	f000 fbdb 	bl	80023a8 <lcd_Clear>
				temp = 0;
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <fsm_set_time+0x108c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001bf8:	e00b      	b.n	8001c12 <fsm_set_time+0x1046>
		default:
			break;
 8001bfa:	bf00      	nop
 8001bfc:	e00a      	b.n	8001c14 <fsm_set_time+0x1048>
			break;
 8001bfe:	bf00      	nop
 8001c00:	e008      	b.n	8001c14 <fsm_set_time+0x1048>
			break;
 8001c02:	bf00      	nop
 8001c04:	e006      	b.n	8001c14 <fsm_set_time+0x1048>
			break;
 8001c06:	bf00      	nop
 8001c08:	e004      	b.n	8001c14 <fsm_set_time+0x1048>
			break;
 8001c0a:	bf00      	nop
 8001c0c:	e002      	b.n	8001c14 <fsm_set_time+0x1048>
			break;
 8001c0e:	bf00      	nop
 8001c10:	e000      	b.n	8001c14 <fsm_set_time+0x1048>
			break;
 8001c12:	bf00      	nop
	}
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200000a4 	.word	0x200000a4
 8001c20:	2000019f 	.word	0x2000019f
 8001c24:	200000d5 	.word	0x200000d5
 8001c28:	200000d6 	.word	0x200000d6
 8001c2c:	200000c8 	.word	0x200000c8
 8001c30:	200000a5 	.word	0x200000a5
 8001c34:	2000009e 	.word	0x2000009e
 8001c38:	080088a0 	.word	0x080088a0
 8001c3c:	08008968 	.word	0x08008968
 8001c40:	200000a2 	.word	0x200000a2
 8001c44:	08008978 	.word	0x08008978
 8001c48:	200000d7 	.word	0x200000d7
 8001c4c:	20000384 	.word	0x20000384
 8001c50:	080088d8 	.word	0x080088d8
 8001c54:	080088e0 	.word	0x080088e0
 8001c58:	200000a3 	.word	0x200000a3
 8001c5c:	20000191 	.word	0x20000191
 8001c60:	20000170 	.word	0x20000170
 8001c64:	200000bc 	.word	0x200000bc
 8001c68:	200000a1 	.word	0x200000a1
 8001c6c:	200000a0 	.word	0x200000a0

08001c70 <fsm_timer>:

uint8_t min_timer = 0;
uint8_t hours_timer = 0;


void fsm_timer(){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af04      	add	r7, sp, #16
	switch (mode_timer) {
 8001c76:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <fsm_timer+0x1a8>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b0b      	cmp	r3, #11
 8001c7c:	d002      	beq.n	8001c84 <fsm_timer+0x14>
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d062      	beq.n	8001d48 <fsm_timer+0xd8>
				mode_timer = MIN_MODE;
			}
			break;

		default:
			break;
 8001c82:	e0c6      	b.n	8001e12 <fsm_timer+0x1a2>
			if(button_count[3] == 1 || button_count[3] >= 40 && button_count[3] % 4 == 1){
 8001c84:	4b65      	ldr	r3, [pc, #404]	; (8001e1c <fsm_timer+0x1ac>)
 8001c86:	88db      	ldrh	r3, [r3, #6]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d00a      	beq.n	8001ca2 <fsm_timer+0x32>
 8001c8c:	4b63      	ldr	r3, [pc, #396]	; (8001e1c <fsm_timer+0x1ac>)
 8001c8e:	88db      	ldrh	r3, [r3, #6]
 8001c90:	2b27      	cmp	r3, #39	; 0x27
 8001c92:	d90c      	bls.n	8001cae <fsm_timer+0x3e>
 8001c94:	4b61      	ldr	r3, [pc, #388]	; (8001e1c <fsm_timer+0x1ac>)
 8001c96:	88db      	ldrh	r3, [r3, #6]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d105      	bne.n	8001cae <fsm_timer+0x3e>
				min_timer++;
 8001ca2:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <fsm_timer+0x1b0>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <fsm_timer+0x1b0>)
 8001cac:	701a      	strb	r2, [r3, #0]
			if(min_timer >= 60){
 8001cae:	4b5c      	ldr	r3, [pc, #368]	; (8001e20 <fsm_timer+0x1b0>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b3b      	cmp	r3, #59	; 0x3b
 8001cb4:	d902      	bls.n	8001cbc <fsm_timer+0x4c>
				min_timer = 0;
 8001cb6:	4b5a      	ldr	r3, [pc, #360]	; (8001e20 <fsm_timer+0x1b0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
			if(flag_timer4 == 1){
 8001cbc:	4b59      	ldr	r3, [pc, #356]	; (8001e24 <fsm_timer+0x1b4>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d139      	bne.n	8001d38 <fsm_timer+0xc8>
				if(toggle_timer == 1){
 8001cc4:	4b58      	ldr	r3, [pc, #352]	; (8001e28 <fsm_timer+0x1b8>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d121      	bne.n	8001d10 <fsm_timer+0xa0>
					toggle_timer = 0;
 8001ccc:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <fsm_timer+0x1b8>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
					lcd_ShowIntNum(110, 100, min_timer, 2, GREEN, BLACK, 24);
 8001cd2:	4b53      	ldr	r3, [pc, #332]	; (8001e20 <fsm_timer+0x1b0>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	2318      	movs	r3, #24
 8001cda:	9302      	str	r3, [sp, #8]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	2164      	movs	r1, #100	; 0x64
 8001cea:	206e      	movs	r0, #110	; 0x6e
 8001cec:	f000 fc9a 	bl	8002624 <lcd_ShowIntNum>
					lcd_ShowIntNum(70, 100, hours_timer, 2, GREEN, BLACK, 24);
 8001cf0:	4b4e      	ldr	r3, [pc, #312]	; (8001e2c <fsm_timer+0x1bc>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	2318      	movs	r3, #24
 8001cf8:	9302      	str	r3, [sp, #8]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2302      	movs	r3, #2
 8001d06:	2164      	movs	r1, #100	; 0x64
 8001d08:	2046      	movs	r0, #70	; 0x46
 8001d0a:	f000 fc8b 	bl	8002624 <lcd_ShowIntNum>
 8001d0e:	e010      	b.n	8001d32 <fsm_timer+0xc2>
					lcd_ShowIntNum(110, 100, min_timer, 2, BLACK, BLACK, 24);
 8001d10:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <fsm_timer+0x1b0>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	2318      	movs	r3, #24
 8001d18:	9302      	str	r3, [sp, #8]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2302      	movs	r3, #2
 8001d24:	2164      	movs	r1, #100	; 0x64
 8001d26:	206e      	movs	r0, #110	; 0x6e
 8001d28:	f000 fc7c 	bl	8002624 <lcd_ShowIntNum>
					toggle_timer = 1;
 8001d2c:	4b3e      	ldr	r3, [pc, #248]	; (8001e28 <fsm_timer+0x1b8>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
				setTimer4(50);
 8001d32:	2032      	movs	r0, #50	; 0x32
 8001d34:	f001 f98c 	bl	8003050 <setTimer4>
			if(button_count[12] == 1){
 8001d38:	4b38      	ldr	r3, [pc, #224]	; (8001e1c <fsm_timer+0x1ac>)
 8001d3a:	8b1b      	ldrh	r3, [r3, #24]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d165      	bne.n	8001e0c <fsm_timer+0x19c>
				mode_timer = HOUR_MODE;
 8001d40:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <fsm_timer+0x1a8>)
 8001d42:	220c      	movs	r2, #12
 8001d44:	701a      	strb	r2, [r3, #0]
			break;
 8001d46:	e061      	b.n	8001e0c <fsm_timer+0x19c>
			if(button_count[3] == 1 || button_count[3] >= 40 && button_count[3] % 4 == 1){
 8001d48:	4b34      	ldr	r3, [pc, #208]	; (8001e1c <fsm_timer+0x1ac>)
 8001d4a:	88db      	ldrh	r3, [r3, #6]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d00a      	beq.n	8001d66 <fsm_timer+0xf6>
 8001d50:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <fsm_timer+0x1ac>)
 8001d52:	88db      	ldrh	r3, [r3, #6]
 8001d54:	2b27      	cmp	r3, #39	; 0x27
 8001d56:	d90c      	bls.n	8001d72 <fsm_timer+0x102>
 8001d58:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <fsm_timer+0x1ac>)
 8001d5a:	88db      	ldrh	r3, [r3, #6]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d105      	bne.n	8001d72 <fsm_timer+0x102>
				hours_timer++;
 8001d66:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <fsm_timer+0x1bc>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <fsm_timer+0x1bc>)
 8001d70:	701a      	strb	r2, [r3, #0]
			if(hours_timer >= 12){
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <fsm_timer+0x1bc>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b0b      	cmp	r3, #11
 8001d78:	d902      	bls.n	8001d80 <fsm_timer+0x110>
				hours_timer = 0;
 8001d7a:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <fsm_timer+0x1bc>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
			if(flag_timer4 == 1){
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <fsm_timer+0x1b4>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d139      	bne.n	8001dfc <fsm_timer+0x18c>
				if(toggle_timer == 1){
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <fsm_timer+0x1b8>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d121      	bne.n	8001dd4 <fsm_timer+0x164>
					toggle_timer = 0;
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <fsm_timer+0x1b8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
					lcd_ShowIntNum(110, 100, min_timer, 2, GREEN, BLACK, 24);
 8001d96:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <fsm_timer+0x1b0>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	2318      	movs	r3, #24
 8001d9e:	9302      	str	r3, [sp, #8]
 8001da0:	2300      	movs	r3, #0
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2302      	movs	r3, #2
 8001dac:	2164      	movs	r1, #100	; 0x64
 8001dae:	206e      	movs	r0, #110	; 0x6e
 8001db0:	f000 fc38 	bl	8002624 <lcd_ShowIntNum>
					lcd_ShowIntNum(70, 100, hours_timer, 2, GREEN, BLACK, 24);
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <fsm_timer+0x1bc>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	2318      	movs	r3, #24
 8001dbc:	9302      	str	r3, [sp, #8]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2302      	movs	r3, #2
 8001dca:	2164      	movs	r1, #100	; 0x64
 8001dcc:	2046      	movs	r0, #70	; 0x46
 8001dce:	f000 fc29 	bl	8002624 <lcd_ShowIntNum>
 8001dd2:	e010      	b.n	8001df6 <fsm_timer+0x186>
					lcd_ShowIntNum(70, 100, hours_timer, 2, BLACK, BLACK, 24);
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <fsm_timer+0x1bc>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	2318      	movs	r3, #24
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	2300      	movs	r3, #0
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	2300      	movs	r3, #0
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	2302      	movs	r3, #2
 8001de8:	2164      	movs	r1, #100	; 0x64
 8001dea:	2046      	movs	r0, #70	; 0x46
 8001dec:	f000 fc1a 	bl	8002624 <lcd_ShowIntNum>
					toggle_timer = 1;
 8001df0:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <fsm_timer+0x1b8>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
				setTimer4(50);
 8001df6:	2032      	movs	r0, #50	; 0x32
 8001df8:	f001 f92a 	bl	8003050 <setTimer4>
			if(button_count[12] == 1){
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <fsm_timer+0x1ac>)
 8001dfe:	8b1b      	ldrh	r3, [r3, #24]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d105      	bne.n	8001e10 <fsm_timer+0x1a0>
				mode_timer = MIN_MODE;
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <fsm_timer+0x1a8>)
 8001e06:	220b      	movs	r2, #11
 8001e08:	701a      	strb	r2, [r3, #0]
			break;
 8001e0a:	e001      	b.n	8001e10 <fsm_timer+0x1a0>
			break;
 8001e0c:	bf00      	nop
 8001e0e:	e000      	b.n	8001e12 <fsm_timer+0x1a2>
			break;
 8001e10:	bf00      	nop
	}
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200000a6 	.word	0x200000a6
 8001e1c:	20000170 	.word	0x20000170
 8001e20:	200000a8 	.word	0x200000a8
 8001e24:	200000c0 	.word	0x200000c0
 8001e28:	200000a7 	.word	0x200000a7
 8001e2c:	200000a9 	.word	0x200000a9

08001e30 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08e      	sub	sp, #56	; 0x38
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
 8001e44:	611a      	str	r2, [r3, #16]
 8001e46:	615a      	str	r2, [r3, #20]
 8001e48:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
 8001e58:	615a      	str	r2, [r3, #20]
 8001e5a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001e5c:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001e5e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001e62:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001e64:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001e66:	4a2e      	ldr	r2, [pc, #184]	; (8001f20 <MX_FSMC_Init+0xf0>)
 8001e68:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001e6a:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001e70:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001e76:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001e7e:	2210      	movs	r2, #16
 8001e80:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001e88:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001e8e:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001e9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001ea8:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001eaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001ec2:	230f      	movs	r3, #15
 8001ec4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001ec6:	230f      	movs	r3, #15
 8001ec8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001eca:	233c      	movs	r3, #60	; 0x3c
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001ed2:	2310      	movs	r3, #16
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001ed6:	2311      	movs	r3, #17
 8001ed8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001eda:	2300      	movs	r3, #0
 8001edc:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001ede:	2308      	movs	r3, #8
 8001ee0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001ee2:	230f      	movs	r3, #15
 8001ee4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001ee6:	2309      	movs	r3, #9
 8001ee8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001eee:	2310      	movs	r3, #16
 8001ef0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001ef2:	2311      	movs	r3, #17
 8001ef4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001efa:	463a      	mov	r2, r7
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	4619      	mov	r1, r3
 8001f02:	4806      	ldr	r0, [pc, #24]	; (8001f1c <MX_FSMC_Init+0xec>)
 8001f04:	f004 fade 	bl	80064c4 <HAL_SRAM_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001f0e:	f001 f85d 	bl	8002fcc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001f12:	bf00      	nop
 8001f14:	3738      	adds	r7, #56	; 0x38
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200001a0 	.word	0x200001a0
 8001f20:	a0000104 	.word	0xa0000104

08001f24 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001f38:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <HAL_FSMC_MspInit+0x88>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d131      	bne.n	8001fa4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <HAL_FSMC_MspInit+0x88>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_FSMC_MspInit+0x8c>)
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <HAL_FSMC_MspInit+0x8c>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6393      	str	r3, [r2, #56]	; 0x38
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_FSMC_MspInit+0x8c>)
 8001f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001f62:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001f66:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f70:	2303      	movs	r3, #3
 8001f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f74:	230c      	movs	r3, #12
 8001f76:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <HAL_FSMC_MspInit+0x90>)
 8001f7e:	f001 fef5 	bl	8003d6c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001f82:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001f86:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f90:	2303      	movs	r3, #3
 8001f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f94:	230c      	movs	r3, #12
 8001f96:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4806      	ldr	r0, [pc, #24]	; (8001fb8 <HAL_FSMC_MspInit+0x94>)
 8001f9e:	f001 fee5 	bl	8003d6c <HAL_GPIO_Init>
 8001fa2:	e000      	b.n	8001fa6 <HAL_FSMC_MspInit+0x82>
    return;
 8001fa4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200000ac 	.word	0x200000ac
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40020c00 	.word	0x40020c00

08001fbc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001fc4:	f7ff ffae 	bl	8001f24 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08c      	sub	sp, #48	; 0x30
 8001fd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
 8001fe4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	4b6f      	ldr	r3, [pc, #444]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a6e      	ldr	r2, [pc, #440]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8001ff0:	f043 0310 	orr.w	r3, r3, #16
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b6c      	ldr	r3, [pc, #432]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	4b68      	ldr	r3, [pc, #416]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a67      	ldr	r2, [pc, #412]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b65      	ldr	r3, [pc, #404]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b61      	ldr	r3, [pc, #388]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a60      	ldr	r2, [pc, #384]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8002028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b5e      	ldr	r3, [pc, #376]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b5a      	ldr	r3, [pc, #360]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a59      	ldr	r2, [pc, #356]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b57      	ldr	r3, [pc, #348]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a52      	ldr	r2, [pc, #328]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8002060:	f043 0308 	orr.w	r3, r3, #8
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b50      	ldr	r3, [pc, #320]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	4b4c      	ldr	r3, [pc, #304]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a4b      	ldr	r2, [pc, #300]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 800207c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b49      	ldr	r3, [pc, #292]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	4b45      	ldr	r3, [pc, #276]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a44      	ldr	r2, [pc, #272]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b42      	ldr	r3, [pc, #264]	; (80021a8 <MX_GPIO_Init+0x1d8>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2170      	movs	r1, #112	; 0x70
 80020ae:	483f      	ldr	r0, [pc, #252]	; (80021ac <MX_GPIO_Init+0x1dc>)
 80020b0:	f001 fff8 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ba:	483d      	ldr	r0, [pc, #244]	; (80021b0 <MX_GPIO_Init+0x1e0>)
 80020bc:	f001 fff2 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2140      	movs	r1, #64	; 0x40
 80020c4:	483b      	ldr	r0, [pc, #236]	; (80021b4 <MX_GPIO_Init+0x1e4>)
 80020c6:	f001 ffed 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020d0:	4839      	ldr	r0, [pc, #228]	; (80021b8 <MX_GPIO_Init+0x1e8>)
 80020d2:	f001 ffe7 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2108      	movs	r1, #8
 80020da:	4838      	ldr	r0, [pc, #224]	; (80021bc <MX_GPIO_Init+0x1ec>)
 80020dc:	f001 ffe2 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80020e0:	2370      	movs	r3, #112	; 0x70
 80020e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e4:	2301      	movs	r3, #1
 80020e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	4619      	mov	r1, r3
 80020f6:	482d      	ldr	r0, [pc, #180]	; (80021ac <MX_GPIO_Init+0x1dc>)
 80020f8:	f001 fe38 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80020fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002102:	2301      	movs	r3, #1
 8002104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	4619      	mov	r1, r3
 8002114:	4826      	ldr	r0, [pc, #152]	; (80021b0 <MX_GPIO_Init+0x1e0>)
 8002116:	f001 fe29 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800211a:	23c0      	movs	r3, #192	; 0xc0
 800211c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	f107 031c 	add.w	r3, r7, #28
 800212a:	4619      	mov	r1, r3
 800212c:	4822      	ldr	r0, [pc, #136]	; (80021b8 <MX_GPIO_Init+0x1e8>)
 800212e:	f001 fe1d 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8002132:	2330      	movs	r3, #48	; 0x30
 8002134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213e:	f107 031c 	add.w	r3, r7, #28
 8002142:	4619      	mov	r1, r3
 8002144:	481a      	ldr	r0, [pc, #104]	; (80021b0 <MX_GPIO_Init+0x1e0>)
 8002146:	f001 fe11 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800214a:	2340      	movs	r3, #64	; 0x40
 800214c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214e:	2301      	movs	r3, #1
 8002150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2300      	movs	r3, #0
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	4619      	mov	r1, r3
 8002160:	4814      	ldr	r0, [pc, #80]	; (80021b4 <MX_GPIO_Init+0x1e4>)
 8002162:	f001 fe03 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8002166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800216a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216c:	2301      	movs	r3, #1
 800216e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	4619      	mov	r1, r3
 800217e:	480e      	ldr	r0, [pc, #56]	; (80021b8 <MX_GPIO_Init+0x1e8>)
 8002180:	f001 fdf4 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8002184:	2308      	movs	r3, #8
 8002186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002188:	2301      	movs	r3, #1
 800218a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8002194:	f107 031c 	add.w	r3, r7, #28
 8002198:	4619      	mov	r1, r3
 800219a:	4808      	ldr	r0, [pc, #32]	; (80021bc <MX_GPIO_Init+0x1ec>)
 800219c:	f001 fde6 	bl	8003d6c <HAL_GPIO_Init>

}
 80021a0:	bf00      	nop
 80021a2:	3730      	adds	r7, #48	; 0x30
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40020800 	.word	0x40020800
 80021b4:	40021800 	.word	0x40021800
 80021b8:	40020000 	.word	0x40020000
 80021bc:	40020c00 	.word	0x40020c00

080021c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <MX_I2C1_Init+0x50>)
 80021c6:	4a13      	ldr	r2, [pc, #76]	; (8002214 <MX_I2C1_Init+0x54>)
 80021c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <MX_I2C1_Init+0x50>)
 80021cc:	4a12      	ldr	r2, [pc, #72]	; (8002218 <MX_I2C1_Init+0x58>)
 80021ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <MX_I2C1_Init+0x50>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <MX_I2C1_Init+0x50>)
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <MX_I2C1_Init+0x50>)
 80021de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <MX_I2C1_Init+0x50>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <MX_I2C1_Init+0x50>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021f0:	4b07      	ldr	r3, [pc, #28]	; (8002210 <MX_I2C1_Init+0x50>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <MX_I2C1_Init+0x50>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021fc:	4804      	ldr	r0, [pc, #16]	; (8002210 <MX_I2C1_Init+0x50>)
 80021fe:	f001 ff85 	bl	800410c <HAL_I2C_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002208:	f000 fee0 	bl	8002fcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	200001f0 	.word	0x200001f0
 8002214:	40005400 	.word	0x40005400
 8002218:	000186a0 	.word	0x000186a0

0800221c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <HAL_I2C_MspInit+0x84>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d12b      	bne.n	8002296 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <HAL_I2C_MspInit+0x88>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a17      	ldr	r2, [pc, #92]	; (80022a4 <HAL_I2C_MspInit+0x88>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <HAL_I2C_MspInit+0x88>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800225a:	23c0      	movs	r3, #192	; 0xc0
 800225c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800225e:	2312      	movs	r3, #18
 8002260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800226a:	2304      	movs	r3, #4
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	480c      	ldr	r0, [pc, #48]	; (80022a8 <HAL_I2C_MspInit+0x8c>)
 8002276:	f001 fd79 	bl	8003d6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_I2C_MspInit+0x88>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a08      	ldr	r2, [pc, #32]	; (80022a4 <HAL_I2C_MspInit+0x88>)
 8002284:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_I2C_MspInit+0x88>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	; 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40005400 	.word	0x40005400
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020400 	.word	0x40020400

080022ac <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80022b6:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <LCD_WR_REG+0x1c>)
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	8013      	strh	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	600ffffe 	.word	0x600ffffe

080022cc <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80022d6:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <LCD_WR_DATA+0x1c>)
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	8053      	strh	r3, [r2, #2]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	600ffffe 	.word	0x600ffffe

080022ec <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <LCD_RD_DATA+0x20>)
 80022f4:	885b      	ldrh	r3, [r3, #2]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	80fb      	strh	r3, [r7, #6]
	return ram;
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	b29b      	uxth	r3, r3
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	600ffffe 	.word	0x600ffffe

08002310 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4604      	mov	r4, r0
 8002318:	4608      	mov	r0, r1
 800231a:	4611      	mov	r1, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4623      	mov	r3, r4
 8002320:	80fb      	strh	r3, [r7, #6]
 8002322:	4603      	mov	r3, r0
 8002324:	80bb      	strh	r3, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	807b      	strh	r3, [r7, #2]
 800232a:	4613      	mov	r3, r2
 800232c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800232e:	202a      	movs	r0, #42	; 0x2a
 8002330:	f7ff ffbc 	bl	80022ac <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	b29b      	uxth	r3, r3
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ffc6 	bl	80022cc <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	b29b      	uxth	r3, r3
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ffc0 	bl	80022cc <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 800234c:	887b      	ldrh	r3, [r7, #2]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	b29b      	uxth	r3, r3
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ffba 	bl	80022cc <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	b29b      	uxth	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ffb4 	bl	80022cc <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8002364:	202b      	movs	r0, #43	; 0x2b
 8002366:	f7ff ffa1 	bl	80022ac <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800236a:	88bb      	ldrh	r3, [r7, #4]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	b29b      	uxth	r3, r3
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ffab 	bl	80022cc <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8002376:	88bb      	ldrh	r3, [r7, #4]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	b29b      	uxth	r3, r3
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ffa5 	bl	80022cc <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8002382:	883b      	ldrh	r3, [r7, #0]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	b29b      	uxth	r3, r3
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff9f 	bl	80022cc <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800238e:	883b      	ldrh	r3, [r7, #0]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	b29b      	uxth	r3, r3
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff99 	bl	80022cc <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800239a:	202c      	movs	r0, #44	; 0x2c
 800239c:	f7ff ff86 	bl	80022ac <LCD_WR_REG>
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd90      	pop	{r4, r7, pc}

080023a8 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <lcd_Clear+0x70>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <lcd_Clear+0x70>)
 80023cc:	885b      	ldrh	r3, [r3, #2]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2100      	movs	r1, #0
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7ff ff9b 	bl	8002310 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80023da:	2300      	movs	r3, #0
 80023dc:	81fb      	strh	r3, [r7, #14]
 80023de:	e011      	b.n	8002404 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	81bb      	strh	r3, [r7, #12]
 80023e4:	e006      	b.n	80023f4 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff6f 	bl	80022cc <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80023ee:	89bb      	ldrh	r3, [r7, #12]
 80023f0:	3301      	adds	r3, #1
 80023f2:	81bb      	strh	r3, [r7, #12]
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <lcd_Clear+0x70>)
 80023f6:	885b      	ldrh	r3, [r3, #2]
 80023f8:	89ba      	ldrh	r2, [r7, #12]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d3f3      	bcc.n	80023e6 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 80023fe:	89fb      	ldrh	r3, [r7, #14]
 8002400:	3301      	adds	r3, #1
 8002402:	81fb      	strh	r3, [r7, #14]
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <lcd_Clear+0x70>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	89fa      	ldrh	r2, [r7, #14]
 800240a:	429a      	cmp	r2, r3
 800240c:	d3e8      	bcc.n	80023e0 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000244 	.word	0x20000244

0800241c <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	80fb      	strh	r3, [r7, #6]
 8002426:	460b      	mov	r3, r1
 8002428:	80bb      	strh	r3, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800242e:	88bb      	ldrh	r3, [r7, #4]
 8002430:	88fa      	ldrh	r2, [r7, #6]
 8002432:	88b9      	ldrh	r1, [r7, #4]
 8002434:	88f8      	ldrh	r0, [r7, #6]
 8002436:	f7ff ff6b 	bl	8002310 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800243a:	887b      	ldrh	r3, [r7, #2]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff45 	bl	80022cc <LCD_WR_DATA>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	4604      	mov	r4, r0
 8002454:	4608      	mov	r0, r1
 8002456:	4611      	mov	r1, r2
 8002458:	461a      	mov	r2, r3
 800245a:	4623      	mov	r3, r4
 800245c:	80fb      	strh	r3, [r7, #6]
 800245e:	4603      	mov	r3, r0
 8002460:	80bb      	strh	r3, [r7, #4]
 8002462:	460b      	mov	r3, r1
 8002464:	70fb      	strb	r3, [r7, #3]
 8002466:	4613      	mov	r3, r2
 8002468:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 800246a:	2300      	movs	r3, #0
 800246c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8002472:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002476:	085b      	lsrs	r3, r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	08db      	lsrs	r3, r3, #3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf14      	ite	ne
 800248e:	2301      	movne	r3, #1
 8002490:	2300      	moveq	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	4413      	add	r3, r2
 8002496:	b29a      	uxth	r2, r3
 8002498:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800249c:	b29b      	uxth	r3, r3
 800249e:	fb12 f303 	smulbb	r3, r2, r3
 80024a2:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	3b20      	subs	r3, #32
 80024a8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	4413      	add	r3, r2
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29c      	uxth	r4, r3
 80024b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024bc:	b29a      	uxth	r2, r3
 80024be:	88bb      	ldrh	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	88b9      	ldrh	r1, [r7, #4]
 80024ca:	88f8      	ldrh	r0, [r7, #6]
 80024cc:	4622      	mov	r2, r4
 80024ce:	f7ff ff1f 	bl	8002310 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	827b      	strh	r3, [r7, #18]
 80024d6:	e07a      	b.n	80025ce <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80024d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024dc:	2b0c      	cmp	r3, #12
 80024de:	d028      	beq.n	8002532 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 80024e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d108      	bne.n	80024fa <lcd_ShowChar+0xae>
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	8a7b      	ldrh	r3, [r7, #18]
 80024ec:	493c      	ldr	r1, [pc, #240]	; (80025e0 <lcd_ShowChar+0x194>)
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	440a      	add	r2, r1
 80024f2:	4413      	add	r3, r2
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	75fb      	strb	r3, [r7, #23]
 80024f8:	e01b      	b.n	8002532 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 80024fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024fe:	2b18      	cmp	r3, #24
 8002500:	d10b      	bne.n	800251a <lcd_ShowChar+0xce>
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	8a79      	ldrh	r1, [r7, #18]
 8002506:	4837      	ldr	r0, [pc, #220]	; (80025e4 <lcd_ShowChar+0x198>)
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	4403      	add	r3, r0
 8002512:	440b      	add	r3, r1
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	75fb      	strb	r3, [r7, #23]
 8002518:	e00b      	b.n	8002532 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 800251a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800251e:	2b20      	cmp	r3, #32
 8002520:	d15a      	bne.n	80025d8 <lcd_ShowChar+0x18c>
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	8a7b      	ldrh	r3, [r7, #18]
 8002526:	4930      	ldr	r1, [pc, #192]	; (80025e8 <lcd_ShowChar+0x19c>)
 8002528:	0192      	lsls	r2, r2, #6
 800252a:	440a      	add	r2, r1
 800252c:	4413      	add	r3, r2
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8002532:	2300      	movs	r3, #0
 8002534:	75bb      	strb	r3, [r7, #22]
 8002536:	e044      	b.n	80025c2 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8002538:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800253c:	2b00      	cmp	r3, #0
 800253e:	d120      	bne.n	8002582 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8002540:	7dfa      	ldrb	r2, [r7, #23]
 8002542:	7dbb      	ldrb	r3, [r7, #22]
 8002544:	fa42 f303 	asr.w	r3, r2, r3
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <lcd_ShowChar+0x10e>
 8002550:	883b      	ldrh	r3, [r7, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff feba 	bl	80022cc <LCD_WR_DATA>
 8002558:	e003      	b.n	8002562 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 800255a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff feb5 	bl	80022cc <LCD_WR_DATA>
				m++;
 8002562:	7d7b      	ldrb	r3, [r7, #21]
 8002564:	3301      	adds	r3, #1
 8002566:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8002568:	7d7b      	ldrb	r3, [r7, #21]
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002570:	fb02 f201 	mul.w	r2, r2, r1
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d11f      	bne.n	80025bc <lcd_ShowChar+0x170>
				{
					m=0;
 800257c:	2300      	movs	r3, #0
 800257e:	757b      	strb	r3, [r7, #21]
					break;
 8002580:	e022      	b.n	80025c8 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8002582:	7dfa      	ldrb	r2, [r7, #23]
 8002584:	7dbb      	ldrb	r3, [r7, #22]
 8002586:	fa42 f303 	asr.w	r3, r2, r3
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <lcd_ShowChar+0x152>
 8002592:	883a      	ldrh	r2, [r7, #0]
 8002594:	88b9      	ldrh	r1, [r7, #4]
 8002596:	88fb      	ldrh	r3, [r7, #6]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff3f 	bl	800241c <lcd_DrawPoint>
				x++;
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	3301      	adds	r3, #1
 80025a2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80025a4:	88fa      	ldrh	r2, [r7, #6]
 80025a6:	8a3b      	ldrh	r3, [r7, #16]
 80025a8:	1ad2      	subs	r2, r2, r3
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d105      	bne.n	80025bc <lcd_ShowChar+0x170>
				{
					x=x0;
 80025b0:	8a3b      	ldrh	r3, [r7, #16]
 80025b2:	80fb      	strh	r3, [r7, #6]
					y++;
 80025b4:	88bb      	ldrh	r3, [r7, #4]
 80025b6:	3301      	adds	r3, #1
 80025b8:	80bb      	strh	r3, [r7, #4]
					break;
 80025ba:	e005      	b.n	80025c8 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80025bc:	7dbb      	ldrb	r3, [r7, #22]
 80025be:	3301      	adds	r3, #1
 80025c0:	75bb      	strb	r3, [r7, #22]
 80025c2:	7dbb      	ldrb	r3, [r7, #22]
 80025c4:	2b07      	cmp	r3, #7
 80025c6:	d9b7      	bls.n	8002538 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80025c8:	8a7b      	ldrh	r3, [r7, #18]
 80025ca:	3301      	adds	r3, #1
 80025cc:	827b      	strh	r3, [r7, #18]
 80025ce:	8a7a      	ldrh	r2, [r7, #18]
 80025d0:	89bb      	ldrh	r3, [r7, #12]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d380      	bcc.n	80024d8 <lcd_ShowChar+0x8c>
 80025d6:	e000      	b.n	80025da <lcd_ShowChar+0x18e>
		else return;
 80025d8:	bf00      	nop
				}
			}
		}
	}
}
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd90      	pop	{r4, r7, pc}
 80025e0:	080089a4 	.word	0x080089a4
 80025e4:	08008f94 	.word	0x08008f94
 80025e8:	0800a164 	.word	0x0800a164

080025ec <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	460a      	mov	r2, r1
 80025f6:	71fb      	strb	r3, [r7, #7]
 80025f8:	4613      	mov	r3, r2
 80025fa:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 80025fc:	2301      	movs	r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8002600:	e004      	b.n	800260c <mypow+0x20>
 8002602:	79fa      	ldrb	r2, [r7, #7]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	79bb      	ldrb	r3, [r7, #6]
 800260e:	1e5a      	subs	r2, r3, #1
 8002610:	71ba      	strb	r2, [r7, #6]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f5      	bne.n	8002602 <mypow+0x16>
	return result;
 8002616:	68fb      	ldr	r3, [r7, #12]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af04      	add	r7, sp, #16
 800262a:	4604      	mov	r4, r0
 800262c:	4608      	mov	r0, r1
 800262e:	4611      	mov	r1, r2
 8002630:	461a      	mov	r2, r3
 8002632:	4623      	mov	r3, r4
 8002634:	80fb      	strh	r3, [r7, #6]
 8002636:	4603      	mov	r3, r0
 8002638:	80bb      	strh	r3, [r7, #4]
 800263a:	460b      	mov	r3, r1
 800263c:	807b      	strh	r3, [r7, #2]
 800263e:	4613      	mov	r3, r2
 8002640:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8002642:	2300      	movs	r3, #0
 8002644:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8002646:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800264a:	085b      	lsrs	r3, r3, #1
 800264c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
 8002652:	e059      	b.n	8002708 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8002654:	887c      	ldrh	r4, [r7, #2]
 8002656:	787a      	ldrb	r2, [r7, #1]
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	b2db      	uxtb	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b2db      	uxtb	r3, r3
 8002662:	4619      	mov	r1, r3
 8002664:	200a      	movs	r0, #10
 8002666:	f7ff ffc1 	bl	80025ec <mypow>
 800266a:	4603      	mov	r3, r0
 800266c:	fbb4 f1f3 	udiv	r1, r4, r3
 8002670:	4b2a      	ldr	r3, [pc, #168]	; (800271c <lcd_ShowIntNum+0xf8>)
 8002672:	fba3 2301 	umull	r2, r3, r3, r1
 8002676:	08da      	lsrs	r2, r3, #3
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	1aca      	subs	r2, r1, r3
 8002682:	4613      	mov	r3, r2
 8002684:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8002686:	7bbb      	ldrb	r3, [r7, #14]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d121      	bne.n	80026d0 <lcd_ShowIntNum+0xac>
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	787b      	ldrb	r3, [r7, #1]
 8002690:	3b01      	subs	r3, #1
 8002692:	429a      	cmp	r2, r3
 8002694:	da1c      	bge.n	80026d0 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8002696:	7b3b      	ldrb	r3, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d117      	bne.n	80026cc <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	7b7b      	ldrb	r3, [r7, #13]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	fb12 f303 	smulbb	r3, r2, r3
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	4413      	add	r3, r2
 80026ae:	b298      	uxth	r0, r3
 80026b0:	8c3a      	ldrh	r2, [r7, #32]
 80026b2:	88b9      	ldrh	r1, [r7, #4]
 80026b4:	2300      	movs	r3, #0
 80026b6:	9302      	str	r3, [sp, #8]
 80026b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	4613      	mov	r3, r2
 80026c4:	2220      	movs	r2, #32
 80026c6:	f7ff fec1 	bl	800244c <lcd_ShowChar>
				continue;
 80026ca:	e01a      	b.n	8002702 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	7b7b      	ldrb	r3, [r7, #13]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	fb12 f303 	smulbb	r3, r2, r3
 80026dc:	b29a      	uxth	r2, r3
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	4413      	add	r3, r2
 80026e2:	b298      	uxth	r0, r3
 80026e4:	7b3b      	ldrb	r3, [r7, #12]
 80026e6:	3330      	adds	r3, #48	; 0x30
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	8c3c      	ldrh	r4, [r7, #32]
 80026ec:	88b9      	ldrh	r1, [r7, #4]
 80026ee:	2300      	movs	r3, #0
 80026f0:	9302      	str	r3, [sp, #8]
 80026f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	4623      	mov	r3, r4
 80026fe:	f7ff fea5 	bl	800244c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	3301      	adds	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	787b      	ldrb	r3, [r7, #1]
 800270c:	429a      	cmp	r2, r3
 800270e:	d3a1      	bcc.n	8002654 <lcd_ShowIntNum+0x30>
	}
}
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	bf00      	nop
 800271c:	cccccccd 	.word	0xcccccccd

08002720 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <lcd_SetDir+0x44>)
 800273c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002740:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <lcd_SetDir+0x44>)
 8002744:	22f0      	movs	r2, #240	; 0xf0
 8002746:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8002748:	e006      	b.n	8002758 <lcd_SetDir+0x38>
		lcddev.width=240;
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <lcd_SetDir+0x44>)
 800274c:	22f0      	movs	r2, #240	; 0xf0
 800274e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <lcd_SetDir+0x44>)
 8002752:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002756:	805a      	strh	r2, [r3, #2]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	20000244 	.word	0x20000244

08002768 <lcd_init>:


void lcd_init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800276c:	2200      	movs	r2, #0
 800276e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002772:	48aa      	ldr	r0, [pc, #680]	; (8002a1c <lcd_init+0x2b4>)
 8002774:	f001 fc96 	bl	80040a4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002778:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800277c:	f001 f92e 	bl	80039dc <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8002780:	2201      	movs	r2, #1
 8002782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002786:	48a5      	ldr	r0, [pc, #660]	; (8002a1c <lcd_init+0x2b4>)
 8002788:	f001 fc8c 	bl	80040a4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800278c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002790:	f001 f924 	bl	80039dc <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8002794:	2000      	movs	r0, #0
 8002796:	f7ff ffc3 	bl	8002720 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800279a:	20d3      	movs	r0, #211	; 0xd3
 800279c:	f7ff fd86 	bl	80022ac <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80027a0:	f7ff fda4 	bl	80022ec <LCD_RD_DATA>
 80027a4:	4603      	mov	r3, r0
 80027a6:	461a      	mov	r2, r3
 80027a8:	4b9d      	ldr	r3, [pc, #628]	; (8002a20 <lcd_init+0x2b8>)
 80027aa:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80027ac:	f7ff fd9e 	bl	80022ec <LCD_RD_DATA>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b9a      	ldr	r3, [pc, #616]	; (8002a20 <lcd_init+0x2b8>)
 80027b6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80027b8:	f7ff fd98 	bl	80022ec <LCD_RD_DATA>
 80027bc:	4603      	mov	r3, r0
 80027be:	461a      	mov	r2, r3
 80027c0:	4b97      	ldr	r3, [pc, #604]	; (8002a20 <lcd_init+0x2b8>)
 80027c2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80027c4:	4b96      	ldr	r3, [pc, #600]	; (8002a20 <lcd_init+0x2b8>)
 80027c6:	889b      	ldrh	r3, [r3, #4]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	4b94      	ldr	r3, [pc, #592]	; (8002a20 <lcd_init+0x2b8>)
 80027ce:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80027d0:	f7ff fd8c 	bl	80022ec <LCD_RD_DATA>
 80027d4:	4603      	mov	r3, r0
 80027d6:	461a      	mov	r2, r3
 80027d8:	4b91      	ldr	r3, [pc, #580]	; (8002a20 <lcd_init+0x2b8>)
 80027da:	889b      	ldrh	r3, [r3, #4]
 80027dc:	4313      	orrs	r3, r2
 80027de:	b29a      	uxth	r2, r3
 80027e0:	4b8f      	ldr	r3, [pc, #572]	; (8002a20 <lcd_init+0x2b8>)
 80027e2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80027e4:	20cf      	movs	r0, #207	; 0xcf
 80027e6:	f7ff fd61 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7ff fd6e 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80027f0:	20c1      	movs	r0, #193	; 0xc1
 80027f2:	f7ff fd6b 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80027f6:	2030      	movs	r0, #48	; 0x30
 80027f8:	f7ff fd68 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80027fc:	20ed      	movs	r0, #237	; 0xed
 80027fe:	f7ff fd55 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002802:	2064      	movs	r0, #100	; 0x64
 8002804:	f7ff fd62 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002808:	2003      	movs	r0, #3
 800280a:	f7ff fd5f 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800280e:	2012      	movs	r0, #18
 8002810:	f7ff fd5c 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002814:	2081      	movs	r0, #129	; 0x81
 8002816:	f7ff fd59 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800281a:	20e8      	movs	r0, #232	; 0xe8
 800281c:	f7ff fd46 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002820:	2085      	movs	r0, #133	; 0x85
 8002822:	f7ff fd53 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002826:	2010      	movs	r0, #16
 8002828:	f7ff fd50 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 800282c:	207a      	movs	r0, #122	; 0x7a
 800282e:	f7ff fd4d 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8002832:	20cb      	movs	r0, #203	; 0xcb
 8002834:	f7ff fd3a 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002838:	2039      	movs	r0, #57	; 0x39
 800283a:	f7ff fd47 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800283e:	202c      	movs	r0, #44	; 0x2c
 8002840:	f7ff fd44 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002844:	2000      	movs	r0, #0
 8002846:	f7ff fd41 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800284a:	2034      	movs	r0, #52	; 0x34
 800284c:	f7ff fd3e 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002850:	2002      	movs	r0, #2
 8002852:	f7ff fd3b 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002856:	20f7      	movs	r0, #247	; 0xf7
 8002858:	f7ff fd28 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800285c:	2020      	movs	r0, #32
 800285e:	f7ff fd35 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8002862:	20ea      	movs	r0, #234	; 0xea
 8002864:	f7ff fd22 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002868:	2000      	movs	r0, #0
 800286a:	f7ff fd2f 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800286e:	2000      	movs	r0, #0
 8002870:	f7ff fd2c 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002874:	20c0      	movs	r0, #192	; 0xc0
 8002876:	f7ff fd19 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800287a:	201b      	movs	r0, #27
 800287c:	f7ff fd26 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002880:	20c1      	movs	r0, #193	; 0xc1
 8002882:	f7ff fd13 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002886:	2001      	movs	r0, #1
 8002888:	f7ff fd20 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800288c:	20c5      	movs	r0, #197	; 0xc5
 800288e:	f7ff fd0d 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002892:	2030      	movs	r0, #48	; 0x30
 8002894:	f7ff fd1a 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002898:	2030      	movs	r0, #48	; 0x30
 800289a:	f7ff fd17 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800289e:	20c7      	movs	r0, #199	; 0xc7
 80028a0:	f7ff fd04 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80028a4:	20b7      	movs	r0, #183	; 0xb7
 80028a6:	f7ff fd11 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80028aa:	2036      	movs	r0, #54	; 0x36
 80028ac:	f7ff fcfe 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80028b0:	2008      	movs	r0, #8
 80028b2:	f7ff fd0b 	bl	80022cc <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80028b6:	203a      	movs	r0, #58	; 0x3a
 80028b8:	f7ff fcf8 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80028bc:	2055      	movs	r0, #85	; 0x55
 80028be:	f7ff fd05 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80028c2:	20b1      	movs	r0, #177	; 0xb1
 80028c4:	f7ff fcf2 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80028c8:	2000      	movs	r0, #0
 80028ca:	f7ff fcff 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80028ce:	201a      	movs	r0, #26
 80028d0:	f7ff fcfc 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80028d4:	20b6      	movs	r0, #182	; 0xb6
 80028d6:	f7ff fce9 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80028da:	200a      	movs	r0, #10
 80028dc:	f7ff fcf6 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80028e0:	20a2      	movs	r0, #162	; 0xa2
 80028e2:	f7ff fcf3 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80028e6:	20f2      	movs	r0, #242	; 0xf2
 80028e8:	f7ff fce0 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7ff fced 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80028f2:	2026      	movs	r0, #38	; 0x26
 80028f4:	f7ff fcda 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80028f8:	2001      	movs	r0, #1
 80028fa:	f7ff fce7 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80028fe:	20e0      	movs	r0, #224	; 0xe0
 8002900:	f7ff fcd4 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002904:	200f      	movs	r0, #15
 8002906:	f7ff fce1 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800290a:	202a      	movs	r0, #42	; 0x2a
 800290c:	f7ff fcde 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002910:	2028      	movs	r0, #40	; 0x28
 8002912:	f7ff fcdb 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002916:	2008      	movs	r0, #8
 8002918:	f7ff fcd8 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800291c:	200e      	movs	r0, #14
 800291e:	f7ff fcd5 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002922:	2008      	movs	r0, #8
 8002924:	f7ff fcd2 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002928:	2054      	movs	r0, #84	; 0x54
 800292a:	f7ff fccf 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800292e:	20a9      	movs	r0, #169	; 0xa9
 8002930:	f7ff fccc 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002934:	2043      	movs	r0, #67	; 0x43
 8002936:	f7ff fcc9 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800293a:	200a      	movs	r0, #10
 800293c:	f7ff fcc6 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002940:	200f      	movs	r0, #15
 8002942:	f7ff fcc3 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002946:	2000      	movs	r0, #0
 8002948:	f7ff fcc0 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800294c:	2000      	movs	r0, #0
 800294e:	f7ff fcbd 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002952:	2000      	movs	r0, #0
 8002954:	f7ff fcba 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002958:	2000      	movs	r0, #0
 800295a:	f7ff fcb7 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800295e:	20e1      	movs	r0, #225	; 0xe1
 8002960:	f7ff fca4 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002964:	2000      	movs	r0, #0
 8002966:	f7ff fcb1 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800296a:	2015      	movs	r0, #21
 800296c:	f7ff fcae 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002970:	2017      	movs	r0, #23
 8002972:	f7ff fcab 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002976:	2007      	movs	r0, #7
 8002978:	f7ff fca8 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800297c:	2011      	movs	r0, #17
 800297e:	f7ff fca5 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002982:	2006      	movs	r0, #6
 8002984:	f7ff fca2 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002988:	202b      	movs	r0, #43	; 0x2b
 800298a:	f7ff fc9f 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800298e:	2056      	movs	r0, #86	; 0x56
 8002990:	f7ff fc9c 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002994:	203c      	movs	r0, #60	; 0x3c
 8002996:	f7ff fc99 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800299a:	2005      	movs	r0, #5
 800299c:	f7ff fc96 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80029a0:	2010      	movs	r0, #16
 80029a2:	f7ff fc93 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80029a6:	200f      	movs	r0, #15
 80029a8:	f7ff fc90 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80029ac:	203f      	movs	r0, #63	; 0x3f
 80029ae:	f7ff fc8d 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80029b2:	203f      	movs	r0, #63	; 0x3f
 80029b4:	f7ff fc8a 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80029b8:	200f      	movs	r0, #15
 80029ba:	f7ff fc87 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80029be:	202b      	movs	r0, #43	; 0x2b
 80029c0:	f7ff fc74 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7ff fc81 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7ff fc7e 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80029d0:	2001      	movs	r0, #1
 80029d2:	f7ff fc7b 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80029d6:	203f      	movs	r0, #63	; 0x3f
 80029d8:	f7ff fc78 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80029dc:	202a      	movs	r0, #42	; 0x2a
 80029de:	f7ff fc65 	bl	80022ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7ff fc72 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7ff fc6f 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f7ff fc6c 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80029f4:	20ef      	movs	r0, #239	; 0xef
 80029f6:	f7ff fc69 	bl	80022cc <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80029fa:	2011      	movs	r0, #17
 80029fc:	f7ff fc56 	bl	80022ac <LCD_WR_REG>
	HAL_Delay(120);
 8002a00:	2078      	movs	r0, #120	; 0x78
 8002a02:	f000 ffeb 	bl	80039dc <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002a06:	2029      	movs	r0, #41	; 0x29
 8002a08:	f7ff fc50 	bl	80022ac <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a12:	4804      	ldr	r0, [pc, #16]	; (8002a24 <lcd_init+0x2bc>)
 8002a14:	f001 fb46 	bl	80040a4 <HAL_GPIO_WritePin>
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40020800 	.word	0x40020800
 8002a20:	20000244 	.word	0x20000244
 8002a24:	40020000 	.word	0x40020000

08002a28 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002a28:	b590      	push	{r4, r7, lr}
 8002a2a:	b08b      	sub	sp, #44	; 0x2c
 8002a2c:	af04      	add	r7, sp, #16
 8002a2e:	60ba      	str	r2, [r7, #8]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	81fb      	strh	r3, [r7, #14]
 8002a36:	460b      	mov	r3, r1
 8002a38:	81bb      	strh	r3, [r7, #12]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002a46:	e048      	b.n	8002ada <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d145      	bne.n	8002ada <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002a4e:	89fa      	ldrh	r2, [r7, #14]
 8002a50:	4b26      	ldr	r3, [pc, #152]	; (8002aec <lcd_ShowStr+0xc4>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	4619      	mov	r1, r3
 8002a56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	1acb      	subs	r3, r1, r3
 8002a60:	429a      	cmp	r2, r3
 8002a62:	dc3f      	bgt.n	8002ae4 <lcd_ShowStr+0xbc>
 8002a64:	89ba      	ldrh	r2, [r7, #12]
 8002a66:	4b21      	ldr	r3, [pc, #132]	; (8002aec <lcd_ShowStr+0xc4>)
 8002a68:	885b      	ldrh	r3, [r3, #2]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a70:	1acb      	subs	r3, r1, r3
 8002a72:	429a      	cmp	r2, r3
 8002a74:	dc36      	bgt.n	8002ae4 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b80      	cmp	r3, #128	; 0x80
 8002a7c:	d902      	bls.n	8002a84 <lcd_ShowStr+0x5c>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]
 8002a82:	e02a      	b.n	8002ada <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b0d      	cmp	r3, #13
 8002a8a:	d10b      	bne.n	8002aa4 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002a8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	89bb      	ldrh	r3, [r7, #12]
 8002a94:	4413      	add	r3, r2
 8002a96:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002a98:	8abb      	ldrh	r3, [r7, #20]
 8002a9a:	81fb      	strh	r3, [r7, #14]
					str++;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	e017      	b.n	8002ad4 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	88fc      	ldrh	r4, [r7, #6]
 8002aaa:	89b9      	ldrh	r1, [r7, #12]
 8002aac:	89f8      	ldrh	r0, [r7, #14]
 8002aae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002ab2:	9302      	str	r3, [sp, #8]
 8002ab4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	4623      	mov	r3, r4
 8002ac0:	f7ff fcc4 	bl	800244c <lcd_ShowChar>
					x+=sizey/2;
 8002ac4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	89fb      	ldrh	r3, [r7, #14]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1b2      	bne.n	8002a48 <lcd_ShowStr+0x20>
 8002ae2:	e000      	b.n	8002ae6 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002ae4:	bf00      	nop
			}
		}
	}
}
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd90      	pop	{r4, r7, pc}
 8002aec:	20000244 	.word	0x20000244

08002af0 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	; 0x28
 8002af4:	af04      	add	r7, sp, #16
 8002af6:	60ba      	str	r2, [r7, #8]
 8002af8:	461a      	mov	r2, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	81fb      	strh	r3, [r7, #14]
 8002afe:	460b      	mov	r3, r1
 8002b00:	81bb      	strh	r3, [r7, #12]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8002b06:	68b8      	ldr	r0, [r7, #8]
 8002b08:	f7fd fb62 	bl	80001d0 <strlen>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <lcd_StrCenter+0x60>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	8afb      	ldrh	r3, [r7, #22]
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	0fda      	lsrs	r2, r3, #31
 8002b1e:	4413      	add	r3, r2
 8002b20:	105b      	asrs	r3, r3, #1
 8002b22:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8002b24:	89fa      	ldrh	r2, [r7, #14]
 8002b26:	8abb      	ldrh	r3, [r7, #20]
 8002b28:	4413      	add	r3, r2
 8002b2a:	b298      	uxth	r0, r3
 8002b2c:	88fa      	ldrh	r2, [r7, #6]
 8002b2e:	89b9      	ldrh	r1, [r7, #12]
 8002b30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b34:	9302      	str	r3, [sp, #8]
 8002b36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	8c3b      	ldrh	r3, [r7, #32]
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	f7ff ff70 	bl	8002a28 <lcd_ShowStr>
}
 8002b48:	bf00      	nop
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000244 	.word	0x20000244

08002b54 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002b58:	2201      	movs	r2, #1
 8002b5a:	2140      	movs	r1, #64	; 0x40
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <led7_init+0x14>)
 8002b5e:	f001 faa1 	bl	80040a4 <HAL_GPIO_WritePin>
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40021800 	.word	0x40021800

08002b6c <led7_Scan>:

void led7_Scan(){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002b70:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <led7_Scan+0x104>)
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	4b3d      	ldr	r3, [pc, #244]	; (8002c70 <led7_Scan+0x104>)
 8002b7a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002b7c:	4b3d      	ldr	r3, [pc, #244]	; (8002c74 <led7_Scan+0x108>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a3d      	ldr	r2, [pc, #244]	; (8002c78 <led7_Scan+0x10c>)
 8002b82:	5cd3      	ldrb	r3, [r2, r3]
 8002b84:	021b      	lsls	r3, r3, #8
 8002b86:	b21a      	sxth	r2, r3
 8002b88:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <led7_Scan+0x104>)
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	b21b      	sxth	r3, r3
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	b21b      	sxth	r3, r3
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <led7_Scan+0x104>)
 8002b96:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002b98:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <led7_Scan+0x108>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d847      	bhi.n	8002c30 <led7_Scan+0xc4>
 8002ba0:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <led7_Scan+0x3c>)
 8002ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba6:	bf00      	nop
 8002ba8:	08002bb9 	.word	0x08002bb9
 8002bac:	08002bd7 	.word	0x08002bd7
 8002bb0:	08002bf5 	.word	0x08002bf5
 8002bb4:	08002c13 	.word	0x08002c13
	case 0:
		spi_buffer |= 0x00b0;
 8002bb8:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <led7_Scan+0x104>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <led7_Scan+0x104>)
 8002bc4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002bc6:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <led7_Scan+0x104>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <led7_Scan+0x104>)
 8002bd2:	801a      	strh	r2, [r3, #0]
		break;
 8002bd4:	e02d      	b.n	8002c32 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002bd6:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <led7_Scan+0x104>)
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <led7_Scan+0x104>)
 8002be2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002be4:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <led7_Scan+0x104>)
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	f023 0320 	bic.w	r3, r3, #32
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <led7_Scan+0x104>)
 8002bf0:	801a      	strh	r2, [r3, #0]
		break;
 8002bf2:	e01e      	b.n	8002c32 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002bf4:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <led7_Scan+0x104>)
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <led7_Scan+0x104>)
 8002c00:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <led7_Scan+0x104>)
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	f023 0310 	bic.w	r3, r3, #16
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <led7_Scan+0x104>)
 8002c0e:	801a      	strh	r2, [r3, #0]
		break;
 8002c10:	e00f      	b.n	8002c32 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002c12:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <led7_Scan+0x104>)
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <led7_Scan+0x104>)
 8002c1e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002c20:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <led7_Scan+0x104>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <led7_Scan+0x104>)
 8002c2c:	801a      	strh	r2, [r3, #0]
		break;
 8002c2e:	e000      	b.n	8002c32 <led7_Scan+0xc6>
	default:
		break;
 8002c30:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002c32:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <led7_Scan+0x108>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	425a      	negs	r2, r3
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	f002 0203 	and.w	r2, r2, #3
 8002c42:	bf58      	it	pl
 8002c44:	4253      	negpl	r3, r2
 8002c46:	4a0b      	ldr	r2, [pc, #44]	; (8002c74 <led7_Scan+0x108>)
 8002c48:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2140      	movs	r1, #64	; 0x40
 8002c4e:	480b      	ldr	r0, [pc, #44]	; (8002c7c <led7_Scan+0x110>)
 8002c50:	f001 fa28 	bl	80040a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002c54:	2301      	movs	r3, #1
 8002c56:	2202      	movs	r2, #2
 8002c58:	4905      	ldr	r1, [pc, #20]	; (8002c70 <led7_Scan+0x104>)
 8002c5a:	4809      	ldr	r0, [pc, #36]	; (8002c80 <led7_Scan+0x114>)
 8002c5c:	f002 ff13 	bl	8005a86 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002c60:	2201      	movs	r2, #1
 8002c62:	2140      	movs	r1, #64	; 0x40
 8002c64:	4805      	ldr	r0, [pc, #20]	; (8002c7c <led7_Scan+0x110>)
 8002c66:	f001 fa1d 	bl	80040a4 <HAL_GPIO_WritePin>
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	2000000e 	.word	0x2000000e
 8002c74:	200000b0 	.word	0x200000b0
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	40021800 	.word	0x40021800
 8002c80:	20000280 	.word	0x20000280

08002c84 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	db0e      	blt.n	8002cb6 <led7_SetDigit+0x32>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b09      	cmp	r3, #9
 8002c9c:	dc0b      	bgt.n	8002cb6 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <led7_SetDigit+0x40>)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	b2d9      	uxtb	r1, r3
 8002cac:	4a06      	ldr	r2, [pc, #24]	; (8002cc8 <led7_SetDigit+0x44>)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	460a      	mov	r2, r1
 8002cb4:	701a      	strb	r2, [r3, #0]
	}
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000004 	.word	0x20000004
 8002cc8:	20000000 	.word	0x20000000

08002ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cd0:	f000 fe12 	bl	80038f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cd4:	f000 f846 	bl	8002d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cd8:	f7ff f97a 	bl	8001fd0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002cdc:	f000 fbde 	bl	800349c <MX_TIM2_Init>
  MX_SPI1_Init();
 8002ce0:	f000 fab0 	bl	8003244 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002ce4:	f7ff f8a4 	bl	8001e30 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002ce8:	f7ff fa6a 	bl	80021c0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002cec:	f000 fd22 	bl	8003734 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002cf0:	f000 f8a2 	bl	8002e38 <system_init>
  Ringbuf_init();
 8002cf4:	f000 fcf6 	bl	80036e4 <Ringbuf_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(BLACK);
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7ff fb55 	bl	80023a8 <lcd_Clear>
  updateTime();
 8002cfe:	f000 f945 	bl	8002f8c <updateTime>
  mode = NORMAL_MODE;
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <main+0x8c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
  setTimer3(50);
 8002d08:	2032      	movs	r0, #50	; 0x32
 8002d0a:	f000 f98b 	bl	8003024 <setTimer3>
  setTimer4(50);
 8002d0e:	2032      	movs	r0, #50	; 0x32
 8002d10:	f000 f99e 	bl	8003050 <setTimer4>
  setTimer5(50);
 8002d14:	2032      	movs	r0, #50	; 0x32
 8002d16:	f000 f9b1 	bl	800307c <setTimer5>
  setTimer6(50);
 8002d1a:	2032      	movs	r0, #50	; 0x32
 8002d1c:	f000 f9c4 	bl	80030a8 <setTimer6>
  setTimer7(50);
 8002d20:	2032      	movs	r0, #50	; 0x32
 8002d22:	f000 f9d7 	bl	80030d4 <setTimer7>
  flag = 1;
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <main+0x90>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  while(!flag_timer2);
 8002d2c:	bf00      	nop
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <main+0x94>)
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0fb      	beq.n	8002d2e <main+0x62>
	  flag_timer2 = 0;
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <main+0x94>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	801a      	strh	r2, [r3, #0]
	  //ds3231_ReadTime();
	  //displayTime();
	  button_Scan();
 8002d3c:	f7fd fc28 	bl	8000590 <button_Scan>
	  test_button();
 8002d40:	f000 f8c0 	bl	8002ec4 <test_button>
	  fsm_machine_mode(mode);
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <main+0x8c>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fe07 	bl	800095c <fsm_machine_mode>
	  test_LedDebug();
 8002d4e:	f000 f895 	bl	8002e7c <test_LedDebug>
	  //ds3231_ReadTime();
	  test_Uart();
 8002d52:	f000 f8ef 	bl	8002f34 <test_Uart>
	  while(!flag_timer2);
 8002d56:	e7e9      	b.n	8002d2c <main+0x60>
 8002d58:	2000009e 	.word	0x2000009e
 8002d5c:	2000019f 	.word	0x2000019f
 8002d60:	200000b6 	.word	0x200000b6

08002d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b094      	sub	sp, #80	; 0x50
 8002d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d6a:	f107 0320 	add.w	r3, r7, #32
 8002d6e:	2230      	movs	r2, #48	; 0x30
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f005 f92e 	bl	8007fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <SystemClock_Config+0xcc>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	4a27      	ldr	r2, [pc, #156]	; (8002e30 <SystemClock_Config+0xcc>)
 8002d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d96:	6413      	str	r3, [r2, #64]	; 0x40
 8002d98:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <SystemClock_Config+0xcc>)
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002da4:	2300      	movs	r3, #0
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <SystemClock_Config+0xd0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a21      	ldr	r2, [pc, #132]	; (8002e34 <SystemClock_Config+0xd0>)
 8002dae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <SystemClock_Config+0xd0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dc8:	2310      	movs	r3, #16
 8002dca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002dd4:	2308      	movs	r3, #8
 8002dd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002dd8:	23a8      	movs	r3, #168	; 0xa8
 8002dda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002de0:	2304      	movs	r3, #4
 8002de2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002de4:	f107 0320 	add.w	r3, r7, #32
 8002de8:	4618      	mov	r0, r3
 8002dea:	f002 f94f 	bl	800508c <HAL_RCC_OscConfig>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002df4:	f000 f8ea 	bl	8002fcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002df8:	230f      	movs	r3, #15
 8002dfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002e0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e10:	f107 030c 	add.w	r3, r7, #12
 8002e14:	2105      	movs	r1, #5
 8002e16:	4618      	mov	r0, r3
 8002e18:	f002 fbb0 	bl	800557c <HAL_RCC_ClockConfig>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002e22:	f000 f8d3 	bl	8002fcc <Error_Handler>
  }
}
 8002e26:	bf00      	nop
 8002e28:	3750      	adds	r7, #80	; 0x50
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40007000 	.word	0x40007000

08002e38 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2120      	movs	r1, #32
 8002e40:	480d      	ldr	r0, [pc, #52]	; (8002e78 <system_init+0x40>)
 8002e42:	f001 f92f 	bl	80040a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	2140      	movs	r1, #64	; 0x40
 8002e4a:	480b      	ldr	r0, [pc, #44]	; (8002e78 <system_init+0x40>)
 8002e4c:	f001 f92a 	bl	80040a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8002e50:	2200      	movs	r2, #0
 8002e52:	2110      	movs	r1, #16
 8002e54:	4808      	ldr	r0, [pc, #32]	; (8002e78 <system_init+0x40>)
 8002e56:	f001 f925 	bl	80040a4 <HAL_GPIO_WritePin>
	  timer_init();
 8002e5a:	f000 f8bd 	bl	8002fd8 <timer_init>
	  led7_init();
 8002e5e:	f7ff fe79 	bl	8002b54 <led7_init>
	  button_init();
 8002e62:	f7fd fb89 	bl	8000578 <button_init>
	  lcd_init();
 8002e66:	f7ff fc7f 	bl	8002768 <lcd_init>
	  uart_init_rs232();
 8002e6a:	f000 fb89 	bl	8003580 <uart_init_rs232>
	  setTimer2(50);
 8002e6e:	2032      	movs	r0, #50	; 0x32
 8002e70:	f000 f8bc 	bl	8002fec <setTimer2>
}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000

08002e7c <test_LedDebug>:

uint16_t count_led_debug = 0;

void test_LedDebug(){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 8002e80:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <test_LedDebug+0x3c>)
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <test_LedDebug+0x40>)
 8002e88:	fb83 1302 	smull	r1, r3, r3, r2
 8002e8c:	10d9      	asrs	r1, r3, #3
 8002e8e:	17d3      	asrs	r3, r2, #31
 8002e90:	1ac9      	subs	r1, r1, r3
 8002e92:	460b      	mov	r3, r1
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	1ad1      	subs	r1, r2, r3
 8002e9c:	b28a      	uxth	r2, r1
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <test_LedDebug+0x3c>)
 8002ea0:	801a      	strh	r2, [r3, #0]
	if(count_led_debug == 0){
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <test_LedDebug+0x3c>)
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d103      	bne.n	8002eb2 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002eaa:	2110      	movs	r1, #16
 8002eac:	4804      	ldr	r0, [pc, #16]	; (8002ec0 <test_LedDebug+0x44>)
 8002eae:	f001 f912 	bl	80040d6 <HAL_GPIO_TogglePin>
	}
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200000b4 	.word	0x200000b4
 8002ebc:	66666667 	.word	0x66666667
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <test_button>:

void test_button(){
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 16; i++){
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
 8002ece:	e024      	b.n	8002f1a <test_button+0x56>
		if(button_count[i] == 1){
 8002ed0:	4a16      	ldr	r2, [pc, #88]	; (8002f2c <test_button+0x68>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d11b      	bne.n	8002f14 <test_button+0x50>
			led7_SetDigit(i/10, 2, 0);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <test_button+0x6c>)
 8002ee0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ee4:	1092      	asrs	r2, r2, #2
 8002ee6:	17db      	asrs	r3, r3, #31
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2200      	movs	r2, #0
 8002eec:	2102      	movs	r1, #2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fec8 	bl	8002c84 <led7_SetDigit>
			led7_SetDigit(i%10, 3, 0);
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <test_button+0x6c>)
 8002ef8:	fb83 1302 	smull	r1, r3, r3, r2
 8002efc:	1099      	asrs	r1, r3, #2
 8002efe:	17d3      	asrs	r3, r2, #31
 8002f00:	1ac8      	subs	r0, r1, r3
 8002f02:	4603      	mov	r3, r0
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4403      	add	r3, r0
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	1ad0      	subs	r0, r2, r3
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2103      	movs	r1, #3
 8002f10:	f7ff feb8 	bl	8002c84 <led7_SetDigit>
	for(int i = 0; i < 16; i++){
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3301      	adds	r3, #1
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b0f      	cmp	r3, #15
 8002f1e:	ddd7      	ble.n	8002ed0 <test_button+0xc>
		}
	}
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000170 	.word	0x20000170
 8002f30:	66666667 	.word	0x66666667

08002f34 <test_Uart>:

void test_Uart(){
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 8002f38:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <test_Uart+0x40>)
 8002f3a:	8b5b      	ldrh	r3, [r3, #26]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d117      	bne.n	8002f70 <test_Uart+0x3c>
		uart_Rs232SendNum(ds3231_hours);
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <test_Uart+0x44>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 fb43 	bl	80035d0 <uart_Rs232SendNum>
		uart_Rs232SendString(":");
 8002f4a:	480c      	ldr	r0, [pc, #48]	; (8002f7c <test_Uart+0x48>)
 8002f4c:	f000 fb26 	bl	800359c <uart_Rs232SendString>
		uart_Rs232SendNum(ds3231_min);
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <test_Uart+0x4c>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fb3b 	bl	80035d0 <uart_Rs232SendNum>
		uart_Rs232SendString(":");
 8002f5a:	4808      	ldr	r0, [pc, #32]	; (8002f7c <test_Uart+0x48>)
 8002f5c:	f000 fb1e 	bl	800359c <uart_Rs232SendString>
		uart_Rs232SendNum(ds3231_sec);
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <test_Uart+0x50>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fb33 	bl	80035d0 <uart_Rs232SendNum>
		uart_Rs232SendString("\n");
 8002f6a:	4807      	ldr	r0, [pc, #28]	; (8002f88 <test_Uart+0x54>)
 8002f6c:	f000 fb16 	bl	800359c <uart_Rs232SendString>
	}
}
 8002f70:	bf00      	nop
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000170 	.word	0x20000170
 8002f78:	20000195 	.word	0x20000195
 8002f7c:	08008988 	.word	0x08008988
 8002f80:	20000192 	.word	0x20000192
 8002f84:	20000190 	.word	0x20000190
 8002f88:	0800898c 	.word	0x0800898c

08002f8c <updateTime>:

void updateTime(){
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 8002f90:	2117      	movs	r1, #23
 8002f92:	2006      	movs	r0, #6
 8002f94:	f7fd fb68 	bl	8000668 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 10);
 8002f98:	210a      	movs	r1, #10
 8002f9a:	2005      	movs	r0, #5
 8002f9c:	f7fd fb64 	bl	8000668 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 20);
 8002fa0:	2114      	movs	r1, #20
 8002fa2:	2004      	movs	r0, #4
 8002fa4:	f7fd fb60 	bl	8000668 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8002fa8:	2106      	movs	r1, #6
 8002faa:	2003      	movs	r0, #3
 8002fac:	f7fd fb5c 	bl	8000668 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 20);
 8002fb0:	2114      	movs	r1, #20
 8002fb2:	2002      	movs	r0, #2
 8002fb4:	f7fd fb58 	bl	8000668 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 11);
 8002fb8:	210b      	movs	r1, #11
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f7fd fb54 	bl	8000668 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 23);
 8002fc0:	2117      	movs	r1, #23
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7fd fb50 	bl	8000668 <ds3231_Write>
}
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd0:	b672      	cpsid	i
}
 8002fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fd4:	e7fe      	b.n	8002fd4 <Error_Handler+0x8>
	...

08002fd8 <timer_init>:
uint16_t timer6_counter = 0;

uint16_t flag_timer7 = 0;
uint16_t timer7_counter = 0;

void timer_init(){
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002fdc:	4802      	ldr	r0, [pc, #8]	; (8002fe8 <timer_init+0x10>)
 8002fde:	f003 fb05 	bl	80065ec <HAL_TIM_Base_Start_IT>
}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200002d8 	.word	0x200002d8

08002fec <setTimer2>:

void setTimer2(uint16_t duration){
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002ff6:	4a08      	ldr	r2, [pc, #32]	; (8003018 <setTimer2+0x2c>)
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <setTimer2+0x2c>)
 8002ffe:	881a      	ldrh	r2, [r3, #0]
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <setTimer2+0x30>)
 8003002:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <setTimer2+0x34>)
 8003006:	2200      	movs	r2, #0
 8003008:	801a      	strh	r2, [r3, #0]
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	200000ba 	.word	0x200000ba
 800301c:	200000b8 	.word	0x200000b8
 8003020:	200000b6 	.word	0x200000b6

08003024 <setTimer3>:

void setTimer3(uint16_t duration){
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	80fb      	strh	r3, [r7, #6]
	timer3_counter = duration;
 800302e:	4a06      	ldr	r2, [pc, #24]	; (8003048 <setTimer3+0x24>)
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	8013      	strh	r3, [r2, #0]
	flag_timer3 = 0;
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <setTimer3+0x28>)
 8003036:	2200      	movs	r2, #0
 8003038:	801a      	strh	r2, [r3, #0]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	200000be 	.word	0x200000be
 800304c:	200000bc 	.word	0x200000bc

08003050 <setTimer4>:

void setTimer4(uint16_t duration){
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	80fb      	strh	r3, [r7, #6]
	timer4_counter = duration;
 800305a:	4a06      	ldr	r2, [pc, #24]	; (8003074 <setTimer4+0x24>)
 800305c:	88fb      	ldrh	r3, [r7, #6]
 800305e:	8013      	strh	r3, [r2, #0]
	flag_timer4 = 0;
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <setTimer4+0x28>)
 8003062:	2200      	movs	r2, #0
 8003064:	801a      	strh	r2, [r3, #0]
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	200000c2 	.word	0x200000c2
 8003078:	200000c0 	.word	0x200000c0

0800307c <setTimer5>:

void setTimer5(uint16_t duration){
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	80fb      	strh	r3, [r7, #6]
	timer5_counter = duration;
 8003086:	4a06      	ldr	r2, [pc, #24]	; (80030a0 <setTimer5+0x24>)
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	8013      	strh	r3, [r2, #0]
	flag_timer5 = 0;
 800308c:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <setTimer5+0x28>)
 800308e:	2200      	movs	r2, #0
 8003090:	801a      	strh	r2, [r3, #0]
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	200000c6 	.word	0x200000c6
 80030a4:	200000c4 	.word	0x200000c4

080030a8 <setTimer6>:

void setTimer6(uint16_t duration){
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	80fb      	strh	r3, [r7, #6]
	timer6_counter = duration;
 80030b2:	4a06      	ldr	r2, [pc, #24]	; (80030cc <setTimer6+0x24>)
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	8013      	strh	r3, [r2, #0]
	flag_timer6 = 0;
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <setTimer6+0x28>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	801a      	strh	r2, [r3, #0]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	200000ca 	.word	0x200000ca
 80030d0:	200000c8 	.word	0x200000c8

080030d4 <setTimer7>:

void setTimer7(uint16_t duration){
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	80fb      	strh	r3, [r7, #6]
	timer7_counter = duration;
 80030de:	4a06      	ldr	r2, [pc, #24]	; (80030f8 <setTimer7+0x24>)
 80030e0:	88fb      	ldrh	r3, [r7, #6]
 80030e2:	8013      	strh	r3, [r2, #0]
	flag_timer7 = 0;
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <setTimer7+0x28>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	801a      	strh	r2, [r3, #0]
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	200000ce 	.word	0x200000ce
 80030fc:	200000cc 	.word	0x200000cc

08003100 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003110:	d17a      	bne.n	8003208 <HAL_TIM_PeriodElapsedCallback+0x108>
		if(timer2_counter > 0){
 8003112:	4b3f      	ldr	r3, [pc, #252]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d010      	beq.n	800313c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800311a:	4b3d      	ldr	r3, [pc, #244]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003124:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8003126:	4b3a      	ldr	r3, [pc, #232]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800312e:	4b39      	ldr	r3, [pc, #228]	; (8003214 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003130:	2201      	movs	r2, #1
 8003132:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8003134:	4b38      	ldr	r3, [pc, #224]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8003136:	881a      	ldrh	r2, [r3, #0]
 8003138:	4b35      	ldr	r3, [pc, #212]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800313a:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 800313c:	4b37      	ldr	r3, [pc, #220]	; (800321c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00f      	beq.n	8003164 <HAL_TIM_PeriodElapsedCallback+0x64>
			timer3_counter--;
 8003144:	4b35      	ldr	r3, [pc, #212]	; (800321c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	4b33      	ldr	r3, [pc, #204]	; (800321c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800314e:	801a      	strh	r2, [r3, #0]
			if(timer3_counter <= 0){
 8003150:	4b32      	ldr	r3, [pc, #200]	; (800321c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <HAL_TIM_PeriodElapsedCallback+0x64>
				flag_timer3 = 1;
 8003158:	4b31      	ldr	r3, [pc, #196]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800315a:	2201      	movs	r2, #1
 800315c:	801a      	strh	r2, [r3, #0]
				timer3_counter = 0;
 800315e:	4b2f      	ldr	r3, [pc, #188]	; (800321c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003160:	2200      	movs	r2, #0
 8003162:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 8003164:	4b2f      	ldr	r3, [pc, #188]	; (8003224 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00f      	beq.n	800318c <HAL_TIM_PeriodElapsedCallback+0x8c>
			timer4_counter--;
 800316c:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	4b2b      	ldr	r3, [pc, #172]	; (8003224 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003176:	801a      	strh	r2, [r3, #0]
			if(timer4_counter <= 0){
 8003178:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d105      	bne.n	800318c <HAL_TIM_PeriodElapsedCallback+0x8c>
				flag_timer4 = 1;
 8003180:	4b29      	ldr	r3, [pc, #164]	; (8003228 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003182:	2201      	movs	r2, #1
 8003184:	801a      	strh	r2, [r3, #0]
				timer4_counter = 0;
 8003186:	4b27      	ldr	r3, [pc, #156]	; (8003224 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003188:	2200      	movs	r2, #0
 800318a:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer5_counter > 0){
 800318c:	4b27      	ldr	r3, [pc, #156]	; (800322c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00f      	beq.n	80031b4 <HAL_TIM_PeriodElapsedCallback+0xb4>
			timer5_counter--;
 8003194:	4b25      	ldr	r3, [pc, #148]	; (800322c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	4b23      	ldr	r3, [pc, #140]	; (800322c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800319e:	801a      	strh	r2, [r3, #0]
			if(timer5_counter <= 0){
 80031a0:	4b22      	ldr	r3, [pc, #136]	; (800322c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d105      	bne.n	80031b4 <HAL_TIM_PeriodElapsedCallback+0xb4>
				flag_timer5 = 1;
 80031a8:	4b21      	ldr	r3, [pc, #132]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	801a      	strh	r2, [r3, #0]
				timer5_counter = 0;
 80031ae:	4b1f      	ldr	r3, [pc, #124]	; (800322c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer6_counter > 0){
 80031b4:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00f      	beq.n	80031dc <HAL_TIM_PeriodElapsedCallback+0xdc>
			timer6_counter--;
 80031bc:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80031c6:	801a      	strh	r2, [r3, #0]
			if(timer6_counter <= 0){
 80031c8:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <HAL_TIM_PeriodElapsedCallback+0xdc>
				flag_timer6 = 1;
 80031d0:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	801a      	strh	r2, [r3, #0]
				timer6_counter = 0;
 80031d6:	4b17      	ldr	r3, [pc, #92]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80031d8:	2200      	movs	r2, #0
 80031da:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer7_counter > 0){
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00f      	beq.n	8003204 <HAL_TIM_PeriodElapsedCallback+0x104>
			timer7_counter--;
 80031e4:	4b15      	ldr	r3, [pc, #84]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80031ee:	801a      	strh	r2, [r3, #0]
			if(timer7_counter <= 0){
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <HAL_TIM_PeriodElapsedCallback+0x104>
				flag_timer7 = 1;
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	801a      	strh	r2, [r3, #0]
				timer7_counter = 0;
 80031fe:	4b0f      	ldr	r3, [pc, #60]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003200:	2200      	movs	r2, #0
 8003202:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8003204:	f7ff fcb2 	bl	8002b6c <led7_Scan>
	}
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	200000b8 	.word	0x200000b8
 8003214:	200000b6 	.word	0x200000b6
 8003218:	200000ba 	.word	0x200000ba
 800321c:	200000be 	.word	0x200000be
 8003220:	200000bc 	.word	0x200000bc
 8003224:	200000c2 	.word	0x200000c2
 8003228:	200000c0 	.word	0x200000c0
 800322c:	200000c6 	.word	0x200000c6
 8003230:	200000c4 	.word	0x200000c4
 8003234:	200000ca 	.word	0x200000ca
 8003238:	200000c8 	.word	0x200000c8
 800323c:	200000ce 	.word	0x200000ce
 8003240:	200000cc 	.word	0x200000cc

08003244 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003248:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <MX_SPI1_Init+0x64>)
 800324a:	4a18      	ldr	r2, [pc, #96]	; (80032ac <MX_SPI1_Init+0x68>)
 800324c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800324e:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <MX_SPI1_Init+0x64>)
 8003250:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003254:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <MX_SPI1_Init+0x64>)
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <MX_SPI1_Init+0x64>)
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003262:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <MX_SPI1_Init+0x64>)
 8003264:	2200      	movs	r2, #0
 8003266:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <MX_SPI1_Init+0x64>)
 800326a:	2200      	movs	r2, #0
 800326c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800326e:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <MX_SPI1_Init+0x64>)
 8003270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003274:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <MX_SPI1_Init+0x64>)
 8003278:	2200      	movs	r2, #0
 800327a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <MX_SPI1_Init+0x64>)
 800327e:	2200      	movs	r2, #0
 8003280:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <MX_SPI1_Init+0x64>)
 8003284:	2200      	movs	r2, #0
 8003286:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <MX_SPI1_Init+0x64>)
 800328a:	2200      	movs	r2, #0
 800328c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <MX_SPI1_Init+0x64>)
 8003290:	220a      	movs	r2, #10
 8003292:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003294:	4804      	ldr	r0, [pc, #16]	; (80032a8 <MX_SPI1_Init+0x64>)
 8003296:	f002 fb6d 	bl	8005974 <HAL_SPI_Init>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80032a0:	f7ff fe94 	bl	8002fcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032a4:	bf00      	nop
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000280 	.word	0x20000280
 80032ac:	40013000 	.word	0x40013000

080032b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	f107 0314 	add.w	r3, r7, #20
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a19      	ldr	r2, [pc, #100]	; (8003334 <HAL_SPI_MspInit+0x84>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d12b      	bne.n	800332a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	4b18      	ldr	r3, [pc, #96]	; (8003338 <HAL_SPI_MspInit+0x88>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	4a17      	ldr	r2, [pc, #92]	; (8003338 <HAL_SPI_MspInit+0x88>)
 80032dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032e0:	6453      	str	r3, [r2, #68]	; 0x44
 80032e2:	4b15      	ldr	r3, [pc, #84]	; (8003338 <HAL_SPI_MspInit+0x88>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	4b11      	ldr	r3, [pc, #68]	; (8003338 <HAL_SPI_MspInit+0x88>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4a10      	ldr	r2, [pc, #64]	; (8003338 <HAL_SPI_MspInit+0x88>)
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <HAL_SPI_MspInit+0x88>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800330a:	2338      	movs	r3, #56	; 0x38
 800330c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	2302      	movs	r3, #2
 8003310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003316:	2303      	movs	r3, #3
 8003318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800331a:	2305      	movs	r3, #5
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	4619      	mov	r1, r3
 8003324:	4805      	ldr	r0, [pc, #20]	; (800333c <HAL_SPI_MspInit+0x8c>)
 8003326:	f000 fd21 	bl	8003d6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800332a:	bf00      	nop
 800332c:	3728      	adds	r7, #40	; 0x28
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40013000 	.word	0x40013000
 8003338:	40023800 	.word	0x40023800
 800333c:	40020400 	.word	0x40020400

08003340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_MspInit+0x4c>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	4a0f      	ldr	r2, [pc, #60]	; (800338c <HAL_MspInit+0x4c>)
 8003350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003354:	6453      	str	r3, [r2, #68]	; 0x44
 8003356:	4b0d      	ldr	r3, [pc, #52]	; (800338c <HAL_MspInit+0x4c>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335e:	607b      	str	r3, [r7, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	603b      	str	r3, [r7, #0]
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_MspInit+0x4c>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a08      	ldr	r2, [pc, #32]	; (800338c <HAL_MspInit+0x4c>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_MspInit+0x4c>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800

08003390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003394:	e7fe      	b.n	8003394 <NMI_Handler+0x4>

08003396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800339a:	e7fe      	b.n	800339a <HardFault_Handler+0x4>

0800339c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a0:	e7fe      	b.n	80033a0 <MemManage_Handler+0x4>

080033a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033a6:	e7fe      	b.n	80033a6 <BusFault_Handler+0x4>

080033a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033ac:	e7fe      	b.n	80033ac <UsageFault_Handler+0x4>

080033ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033ae:	b480      	push	{r7}
 80033b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ca:	b480      	push	{r7}
 80033cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033dc:	f000 fade 	bl	800399c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <TIM2_IRQHandler+0x10>)
 80033ea:	f003 f96f 	bl	80066cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200002d8 	.word	0x200002d8

080033f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <USART1_IRQHandler+0x10>)
 80033fe:	f003 fe37 	bl	8007070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	2000048c 	.word	0x2000048c

0800340c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <_sbrk+0x5c>)
 8003416:	4b15      	ldr	r3, [pc, #84]	; (800346c <_sbrk+0x60>)
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003420:	4b13      	ldr	r3, [pc, #76]	; (8003470 <_sbrk+0x64>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d102      	bne.n	800342e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <_sbrk+0x64>)
 800342a:	4a12      	ldr	r2, [pc, #72]	; (8003474 <_sbrk+0x68>)
 800342c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <_sbrk+0x64>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	429a      	cmp	r2, r3
 800343a:	d207      	bcs.n	800344c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800343c:	f004 fda0 	bl	8007f80 <__errno>
 8003440:	4603      	mov	r3, r0
 8003442:	220c      	movs	r2, #12
 8003444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003446:	f04f 33ff 	mov.w	r3, #4294967295
 800344a:	e009      	b.n	8003460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <_sbrk+0x64>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <_sbrk+0x64>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	4a05      	ldr	r2, [pc, #20]	; (8003470 <_sbrk+0x64>)
 800345c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20020000 	.word	0x20020000
 800346c:	00000400 	.word	0x00000400
 8003470:	200000d0 	.word	0x200000d0
 8003474:	200004e8 	.word	0x200004e8

08003478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <SystemInit+0x20>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	4a05      	ldr	r2, [pc, #20]	; (8003498 <SystemInit+0x20>)
 8003484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034a2:	f107 0308 	add.w	r3, r7, #8
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	609a      	str	r2, [r3, #8]
 80034ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034b0:	463b      	mov	r3, r7
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <MX_TIM2_Init+0x94>)
 80034ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80034c0:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <MX_TIM2_Init+0x94>)
 80034c2:	f240 3247 	movw	r2, #839	; 0x347
 80034c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c8:	4b19      	ldr	r3, [pc, #100]	; (8003530 <MX_TIM2_Init+0x94>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80034ce:	4b18      	ldr	r3, [pc, #96]	; (8003530 <MX_TIM2_Init+0x94>)
 80034d0:	2263      	movs	r2, #99	; 0x63
 80034d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034d4:	4b16      	ldr	r3, [pc, #88]	; (8003530 <MX_TIM2_Init+0x94>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034da:	4b15      	ldr	r3, [pc, #84]	; (8003530 <MX_TIM2_Init+0x94>)
 80034dc:	2200      	movs	r2, #0
 80034de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034e0:	4813      	ldr	r0, [pc, #76]	; (8003530 <MX_TIM2_Init+0x94>)
 80034e2:	f003 f833 	bl	800654c <HAL_TIM_Base_Init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80034ec:	f7ff fd6e 	bl	8002fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034f6:	f107 0308 	add.w	r3, r7, #8
 80034fa:	4619      	mov	r1, r3
 80034fc:	480c      	ldr	r0, [pc, #48]	; (8003530 <MX_TIM2_Init+0x94>)
 80034fe:	f003 f9ed 	bl	80068dc <HAL_TIM_ConfigClockSource>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003508:	f7ff fd60 	bl	8002fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800350c:	2300      	movs	r3, #0
 800350e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003510:	2300      	movs	r3, #0
 8003512:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003514:	463b      	mov	r3, r7
 8003516:	4619      	mov	r1, r3
 8003518:	4805      	ldr	r0, [pc, #20]	; (8003530 <MX_TIM2_Init+0x94>)
 800351a:	f003 fc09 	bl	8006d30 <HAL_TIMEx_MasterConfigSynchronization>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003524:	f7ff fd52 	bl	8002fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003528:	bf00      	nop
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	200002d8 	.word	0x200002d8

08003534 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003544:	d115      	bne.n	8003572 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	4b0c      	ldr	r3, [pc, #48]	; (800357c <HAL_TIM_Base_MspInit+0x48>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	4a0b      	ldr	r2, [pc, #44]	; (800357c <HAL_TIM_Base_MspInit+0x48>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6413      	str	r3, [r2, #64]	; 0x40
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_TIM_Base_MspInit+0x48>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003562:	2200      	movs	r2, #0
 8003564:	2100      	movs	r1, #0
 8003566:	201c      	movs	r0, #28
 8003568:	f000 fb37 	bl	8003bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800356c:	201c      	movs	r0, #28
 800356e:	f000 fb50 	bl	8003c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003572:	bf00      	nop
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800

08003580 <uart_init_rs232>:
uint8_t rxBuffer[BUFFER_SIZE];
uint8_t rxHead = 0;
uint8_t rxTail = 0;
uint8_t dataReceived = 0;

void uart_init_rs232(){
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003584:	2201      	movs	r2, #1
 8003586:	4903      	ldr	r1, [pc, #12]	; (8003594 <uart_init_rs232+0x14>)
 8003588:	4803      	ldr	r0, [pc, #12]	; (8003598 <uart_init_rs232+0x18>)
 800358a:	f003 fd40 	bl	800700e <HAL_UART_Receive_IT>
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200000d4 	.word	0x200000d4
 8003598:	2000048c 	.word	0x2000048c

0800359c <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4907      	ldr	r1, [pc, #28]	; (80035c4 <uart_Rs232SendString+0x28>)
 80035a8:	4807      	ldr	r0, [pc, #28]	; (80035c8 <uart_Rs232SendString+0x2c>)
 80035aa:	f004 fd1b 	bl	8007fe4 <siprintf>
 80035ae:	4603      	mov	r3, r0
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	230a      	movs	r3, #10
 80035b4:	4904      	ldr	r1, [pc, #16]	; (80035c8 <uart_Rs232SendString+0x2c>)
 80035b6:	4805      	ldr	r0, [pc, #20]	; (80035cc <uart_Rs232SendString+0x30>)
 80035b8:	f003 fc97 	bl	8006eea <HAL_UART_Transmit>
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	08008990 	.word	0x08008990
 80035c8:	20000320 	.word	0x20000320
 80035cc:	2000048c 	.word	0x2000048c

080035d0 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	if(num == 0){
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d103      	bne.n	80035e6 <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 80035de:	4824      	ldr	r0, [pc, #144]	; (8003670 <uart_Rs232SendNum+0xa0>)
 80035e0:	f7ff ffdc 	bl	800359c <uart_Rs232SendString>
		return;
 80035e4:	e040      	b.n	8003668 <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 80035ea:	230a      	movs	r3, #10
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	e038      	b.n	8003662 <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	4619      	mov	r1, r3
 80035f6:	200a      	movs	r0, #10
 80035f8:	f7fe fff8 	bl	80025ec <mypow>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4293      	cmp	r3, r2
 8003604:	d315      	bcc.n	8003632 <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	3b01      	subs	r3, #1
 800360e:	4619      	mov	r1, r3
 8003610:	200a      	movs	r0, #10
 8003612:	f7fe ffeb 	bl	80025ec <mypow>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003620:	461a      	mov	r2, r3
 8003622:	4914      	ldr	r1, [pc, #80]	; (8003674 <uart_Rs232SendNum+0xa4>)
 8003624:	4814      	ldr	r0, [pc, #80]	; (8003678 <uart_Rs232SendNum+0xa8>)
 8003626:	f004 fcdd 	bl	8007fe4 <siprintf>
            uart_Rs232SendString(msg);
 800362a:	4813      	ldr	r0, [pc, #76]	; (8003678 <uart_Rs232SendNum+0xa8>)
 800362c:	f7ff ffb6 	bl	800359c <uart_Rs232SendString>
 8003630:	e005      	b.n	800363e <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 8003638:	480d      	ldr	r0, [pc, #52]	; (8003670 <uart_Rs232SendNum+0xa0>)
 800363a:	f7ff ffaf 	bl	800359c <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	3b01      	subs	r3, #1
 8003642:	4619      	mov	r1, r3
 8003644:	200a      	movs	r0, #10
 8003646:	f7fe ffd1 	bl	80025ec <mypow>
 800364a:	4603      	mov	r3, r0
 800364c:	461a      	mov	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	fbb3 f1f2 	udiv	r1, r3, r2
 8003654:	fb02 f201 	mul.w	r2, r2, r1
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	3b01      	subs	r3, #1
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	dcc3      	bgt.n	80035f0 <uart_Rs232SendNum+0x20>
    }
}
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	08008994 	.word	0x08008994
 8003674:	08008998 	.word	0x08008998
 8003678:	20000320 	.word	0x20000320

0800367c <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a11      	ldr	r2, [pc, #68]	; (80036d0 <HAL_UART_RxCpltCallback+0x54>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d11c      	bne.n	80036c8 <HAL_UART_RxCpltCallback+0x4c>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800368e:	230a      	movs	r3, #10
 8003690:	2201      	movs	r2, #1
 8003692:	4910      	ldr	r1, [pc, #64]	; (80036d4 <HAL_UART_RxCpltCallback+0x58>)
 8003694:	4810      	ldr	r0, [pc, #64]	; (80036d8 <HAL_UART_RxCpltCallback+0x5c>)
 8003696:	f003 fc28 	bl	8006eea <HAL_UART_Transmit>

		// turn on the receice interrupt
		rxBuffer[rxHead] = receive_buffer1;
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <HAL_UART_RxCpltCallback+0x60>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_UART_RxCpltCallback+0x58>)
 80036a2:	7819      	ldrb	r1, [r3, #0]
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <HAL_UART_RxCpltCallback+0x64>)
 80036a6:	5499      	strb	r1, [r3, r2]
		rxHead = (rxHead + 1)%BUFFER_SIZE;
 80036a8:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <HAL_UART_RxCpltCallback+0x60>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	3301      	adds	r3, #1
 80036ae:	425a      	negs	r2, r3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	bf58      	it	pl
 80036b6:	4253      	negpl	r3, r2
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	4b08      	ldr	r3, [pc, #32]	; (80036dc <HAL_UART_RxCpltCallback+0x60>)
 80036bc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80036be:	2201      	movs	r2, #1
 80036c0:	4904      	ldr	r1, [pc, #16]	; (80036d4 <HAL_UART_RxCpltCallback+0x58>)
 80036c2:	4805      	ldr	r0, [pc, #20]	; (80036d8 <HAL_UART_RxCpltCallback+0x5c>)
 80036c4:	f003 fca3 	bl	800700e <HAL_UART_Receive_IT>
	}
}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40011000 	.word	0x40011000
 80036d4:	200000d4 	.word	0x200000d4
 80036d8:	2000048c 	.word	0x2000048c
 80036dc:	200000d5 	.word	0x200000d5
 80036e0:	20000384 	.word	0x20000384

080036e4 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80036e8:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <Ringbuf_init+0x3c>)
 80036ea:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <Ringbuf_init+0x40>)
 80036ec:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80036ee:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <Ringbuf_init+0x44>)
 80036f0:	4a0e      	ldr	r2, [pc, #56]	; (800372c <Ringbuf_init+0x48>)
 80036f2:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80036f4:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <Ringbuf_init+0x4c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <Ringbuf_init+0x4c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <Ringbuf_init+0x4c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <Ringbuf_init+0x4c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0220 	orr.w	r2, r2, #32
 8003712:	60da      	str	r2, [r3, #12]
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000488 	.word	0x20000488
 8003724:	200000d8 	.word	0x200000d8
 8003728:	20000484 	.word	0x20000484
 800372c:	20000120 	.word	0x20000120
 8003730:	2000048c 	.word	0x2000048c

08003734 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <MX_USART1_UART_Init+0x4c>)
 800373a:	4a12      	ldr	r2, [pc, #72]	; (8003784 <MX_USART1_UART_Init+0x50>)
 800373c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <MX_USART1_UART_Init+0x4c>)
 8003740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003746:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <MX_USART1_UART_Init+0x4c>)
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800374c:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <MX_USART1_UART_Init+0x4c>)
 800374e:	2200      	movs	r2, #0
 8003750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <MX_USART1_UART_Init+0x4c>)
 8003754:	2200      	movs	r2, #0
 8003756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <MX_USART1_UART_Init+0x4c>)
 800375a:	220c      	movs	r2, #12
 800375c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <MX_USART1_UART_Init+0x4c>)
 8003760:	2200      	movs	r2, #0
 8003762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003764:	4b06      	ldr	r3, [pc, #24]	; (8003780 <MX_USART1_UART_Init+0x4c>)
 8003766:	2200      	movs	r2, #0
 8003768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800376a:	4805      	ldr	r0, [pc, #20]	; (8003780 <MX_USART1_UART_Init+0x4c>)
 800376c:	f003 fb70 	bl	8006e50 <HAL_UART_Init>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003776:	f7ff fc29 	bl	8002fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	2000048c 	.word	0x2000048c
 8003784:	40011000 	.word	0x40011000

08003788 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08a      	sub	sp, #40	; 0x28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1d      	ldr	r2, [pc, #116]	; (800381c <HAL_UART_MspInit+0x94>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d134      	bne.n	8003814 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <HAL_UART_MspInit+0x98>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	4a1b      	ldr	r2, [pc, #108]	; (8003820 <HAL_UART_MspInit+0x98>)
 80037b4:	f043 0310 	orr.w	r3, r3, #16
 80037b8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ba:	4b19      	ldr	r3, [pc, #100]	; (8003820 <HAL_UART_MspInit+0x98>)
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <HAL_UART_MspInit+0x98>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	4a14      	ldr	r2, [pc, #80]	; (8003820 <HAL_UART_MspInit+0x98>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	6313      	str	r3, [r2, #48]	; 0x30
 80037d6:	4b12      	ldr	r3, [pc, #72]	; (8003820 <HAL_UART_MspInit+0x98>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80037e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e8:	2302      	movs	r3, #2
 80037ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f0:	2303      	movs	r3, #3
 80037f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037f4:	2307      	movs	r3, #7
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f8:	f107 0314 	add.w	r3, r7, #20
 80037fc:	4619      	mov	r1, r3
 80037fe:	4809      	ldr	r0, [pc, #36]	; (8003824 <HAL_UART_MspInit+0x9c>)
 8003800:	f000 fab4 	bl	8003d6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003804:	2200      	movs	r2, #0
 8003806:	2100      	movs	r1, #0
 8003808:	2025      	movs	r0, #37	; 0x25
 800380a:	f000 f9e6 	bl	8003bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800380e:	2025      	movs	r0, #37	; 0x25
 8003810:	f000 f9ff 	bl	8003c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003814:	bf00      	nop
 8003816:	3728      	adds	r7, #40	; 0x28
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40011000 	.word	0x40011000
 8003820:	40023800 	.word	0x40023800
 8003824:	40020000 	.word	0x40020000

08003828 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	b2db      	uxtb	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	0092      	lsls	r2, r2, #2
 800383c:	4413      	add	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	b2da      	uxtb	r2, r3
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	b2db      	uxtb	r3, r3
 800384a:	4413      	add	r3, r2
 800384c:	b2db      	uxtb	r3, r3
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	4a0d      	ldr	r2, [pc, #52]	; (80038a0 <DEC2BCD+0x44>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	08db      	lsrs	r3, r3, #3
 8003870:	b2db      	uxtb	r3, r3
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	b258      	sxtb	r0, r3
 8003876:	79fa      	ldrb	r2, [r7, #7]
 8003878:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <DEC2BCD+0x44>)
 800387a:	fba3 1302 	umull	r1, r3, r3, r2
 800387e:	08d9      	lsrs	r1, r3, #3
 8003880:	460b      	mov	r3, r1
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	b25b      	sxtb	r3, r3
 800388e:	4303      	orrs	r3, r0
 8003890:	b25b      	sxtb	r3, r3
 8003892:	b2db      	uxtb	r3, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	cccccccd 	.word	0xcccccccd

080038a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80038a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038a8:	480d      	ldr	r0, [pc, #52]	; (80038e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038aa:	490e      	ldr	r1, [pc, #56]	; (80038e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038ac:	4a0e      	ldr	r2, [pc, #56]	; (80038e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038b0:	e002      	b.n	80038b8 <LoopCopyDataInit>

080038b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038b6:	3304      	adds	r3, #4

080038b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038bc:	d3f9      	bcc.n	80038b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038be:	4a0b      	ldr	r2, [pc, #44]	; (80038ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80038c0:	4c0b      	ldr	r4, [pc, #44]	; (80038f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80038c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038c4:	e001      	b.n	80038ca <LoopFillZerobss>

080038c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038c8:	3204      	adds	r2, #4

080038ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038cc:	d3fb      	bcc.n	80038c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038ce:	f7ff fdd3 	bl	8003478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038d2:	f004 fb5b 	bl	8007f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038d6:	f7ff f9f9 	bl	8002ccc <main>
  bx  lr    
 80038da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80038dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038e4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80038e8:	0800b980 	.word	0x0800b980
  ldr r2, =_sbss
 80038ec:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80038f0:	200004e8 	.word	0x200004e8

080038f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038f4:	e7fe      	b.n	80038f4 <ADC_IRQHandler>
	...

080038f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038fc:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <HAL_Init+0x40>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0d      	ldr	r2, [pc, #52]	; (8003938 <HAL_Init+0x40>)
 8003902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_Init+0x40>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <HAL_Init+0x40>)
 800390e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003914:	4b08      	ldr	r3, [pc, #32]	; (8003938 <HAL_Init+0x40>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a07      	ldr	r2, [pc, #28]	; (8003938 <HAL_Init+0x40>)
 800391a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003920:	2003      	movs	r0, #3
 8003922:	f000 f94f 	bl	8003bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003926:	200f      	movs	r0, #15
 8003928:	f000 f808 	bl	800393c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800392c:	f7ff fd08 	bl	8003340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40023c00 	.word	0x40023c00

0800393c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003944:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_InitTick+0x54>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <HAL_InitTick+0x58>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	4619      	mov	r1, r3
 800394e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003952:	fbb3 f3f1 	udiv	r3, r3, r1
 8003956:	fbb2 f3f3 	udiv	r3, r2, r3
 800395a:	4618      	mov	r0, r3
 800395c:	f000 f967 	bl	8003c2e <HAL_SYSTICK_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e00e      	b.n	8003988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b0f      	cmp	r3, #15
 800396e:	d80a      	bhi.n	8003986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003970:	2200      	movs	r2, #0
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	f000 f92f 	bl	8003bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800397c:	4a06      	ldr	r2, [pc, #24]	; (8003998 <HAL_InitTick+0x5c>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	e000      	b.n	8003988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
}
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000010 	.word	0x20000010
 8003994:	20000018 	.word	0x20000018
 8003998:	20000014 	.word	0x20000014

0800399c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <HAL_IncTick+0x20>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	461a      	mov	r2, r3
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_IncTick+0x24>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4413      	add	r3, r2
 80039ac:	4a04      	ldr	r2, [pc, #16]	; (80039c0 <HAL_IncTick+0x24>)
 80039ae:	6013      	str	r3, [r2, #0]
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000018 	.word	0x20000018
 80039c0:	200004d4 	.word	0x200004d4

080039c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return uwTick;
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <HAL_GetTick+0x14>)
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	200004d4 	.word	0x200004d4

080039dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039e4:	f7ff ffee 	bl	80039c4 <HAL_GetTick>
 80039e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f4:	d005      	beq.n	8003a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_Delay+0x44>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a02:	bf00      	nop
 8003a04:	f7ff ffde 	bl	80039c4 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d8f7      	bhi.n	8003a04 <HAL_Delay+0x28>
  {
  }
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000018 	.word	0x20000018

08003a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a34:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <__NVIC_SetPriorityGrouping+0x44>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a40:	4013      	ands	r3, r2
 8003a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a56:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <__NVIC_SetPriorityGrouping+0x44>)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	60d3      	str	r3, [r2, #12]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a70:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <__NVIC_GetPriorityGrouping+0x18>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	f003 0307 	and.w	r3, r3, #7
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	db0b      	blt.n	8003ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	f003 021f 	and.w	r2, r3, #31
 8003aa0:	4907      	ldr	r1, [pc, #28]	; (8003ac0 <__NVIC_EnableIRQ+0x38>)
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8003aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	e000e100 	.word	0xe000e100

08003ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	6039      	str	r1, [r7, #0]
 8003ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	db0a      	blt.n	8003aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	490c      	ldr	r1, [pc, #48]	; (8003b10 <__NVIC_SetPriority+0x4c>)
 8003ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae2:	0112      	lsls	r2, r2, #4
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aec:	e00a      	b.n	8003b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	4908      	ldr	r1, [pc, #32]	; (8003b14 <__NVIC_SetPriority+0x50>)
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	3b04      	subs	r3, #4
 8003afc:	0112      	lsls	r2, r2, #4
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	440b      	add	r3, r1
 8003b02:	761a      	strb	r2, [r3, #24]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	e000e100 	.word	0xe000e100
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b089      	sub	sp, #36	; 0x24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f1c3 0307 	rsb	r3, r3, #7
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	bf28      	it	cs
 8003b36:	2304      	movcs	r3, #4
 8003b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	2b06      	cmp	r3, #6
 8003b40:	d902      	bls.n	8003b48 <NVIC_EncodePriority+0x30>
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	3b03      	subs	r3, #3
 8003b46:	e000      	b.n	8003b4a <NVIC_EncodePriority+0x32>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43da      	mvns	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b60:	f04f 31ff 	mov.w	r1, #4294967295
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	43d9      	mvns	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b70:	4313      	orrs	r3, r2
         );
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3724      	adds	r7, #36	; 0x24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b90:	d301      	bcc.n	8003b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b92:	2301      	movs	r3, #1
 8003b94:	e00f      	b.n	8003bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b96:	4a0a      	ldr	r2, [pc, #40]	; (8003bc0 <SysTick_Config+0x40>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b9e:	210f      	movs	r1, #15
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba4:	f7ff ff8e 	bl	8003ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <SysTick_Config+0x40>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bae:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <SysTick_Config+0x40>)
 8003bb0:	2207      	movs	r2, #7
 8003bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	e000e010 	.word	0xe000e010

08003bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff ff29 	bl	8003a24 <__NVIC_SetPriorityGrouping>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b086      	sub	sp, #24
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	4603      	mov	r3, r0
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bec:	f7ff ff3e 	bl	8003a6c <__NVIC_GetPriorityGrouping>
 8003bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	6978      	ldr	r0, [r7, #20]
 8003bf8:	f7ff ff8e 	bl	8003b18 <NVIC_EncodePriority>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff ff5d 	bl	8003ac4 <__NVIC_SetPriority>
}
 8003c0a:	bf00      	nop
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	4603      	mov	r3, r0
 8003c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff ff31 	bl	8003a88 <__NVIC_EnableIRQ>
}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff ffa2 	bl	8003b80 <SysTick_Config>
 8003c3c:	4603      	mov	r3, r0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c54:	f7ff feb6 	bl	80039c4 <HAL_GetTick>
 8003c58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d008      	beq.n	8003c78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2280      	movs	r2, #128	; 0x80
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e052      	b.n	8003d1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0216 	bic.w	r2, r2, #22
 8003c86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d103      	bne.n	8003ca8 <HAL_DMA_Abort+0x62>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0208 	bic.w	r2, r2, #8
 8003cb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0201 	bic.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc8:	e013      	b.n	8003cf2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cca:	f7ff fe7b 	bl	80039c4 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b05      	cmp	r3, #5
 8003cd6:	d90c      	bls.n	8003cf2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2203      	movs	r2, #3
 8003ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e015      	b.n	8003d1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e4      	bne.n	8003cca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d04:	223f      	movs	r2, #63	; 0x3f
 8003d06:	409a      	lsls	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d004      	beq.n	8003d44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2280      	movs	r2, #128	; 0x80
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e00c      	b.n	8003d5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2205      	movs	r2, #5
 8003d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0201 	bic.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b089      	sub	sp, #36	; 0x24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	e16b      	b.n	8004060 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d88:	2201      	movs	r2, #1
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	f040 815a 	bne.w	800405a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d005      	beq.n	8003dbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d130      	bne.n	8003e20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	2203      	movs	r2, #3
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003df4:	2201      	movs	r2, #1
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	091b      	lsrs	r3, r3, #4
 8003e0a:	f003 0201 	and.w	r2, r3, #1
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d017      	beq.n	8003e5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	2203      	movs	r2, #3
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d123      	bne.n	8003eb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	08da      	lsrs	r2, r3, #3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3208      	adds	r2, #8
 8003e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	220f      	movs	r2, #15
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	08da      	lsrs	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3208      	adds	r2, #8
 8003eaa:	69b9      	ldr	r1, [r7, #24]
 8003eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	2203      	movs	r2, #3
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 0203 	and.w	r2, r3, #3
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80b4 	beq.w	800405a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	4b60      	ldr	r3, [pc, #384]	; (8004078 <HAL_GPIO_Init+0x30c>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	4a5f      	ldr	r2, [pc, #380]	; (8004078 <HAL_GPIO_Init+0x30c>)
 8003efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f00:	6453      	str	r3, [r2, #68]	; 0x44
 8003f02:	4b5d      	ldr	r3, [pc, #372]	; (8004078 <HAL_GPIO_Init+0x30c>)
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f0e:	4a5b      	ldr	r2, [pc, #364]	; (800407c <HAL_GPIO_Init+0x310>)
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	089b      	lsrs	r3, r3, #2
 8003f14:	3302      	adds	r3, #2
 8003f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	220f      	movs	r2, #15
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a52      	ldr	r2, [pc, #328]	; (8004080 <HAL_GPIO_Init+0x314>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d02b      	beq.n	8003f92 <HAL_GPIO_Init+0x226>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a51      	ldr	r2, [pc, #324]	; (8004084 <HAL_GPIO_Init+0x318>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d025      	beq.n	8003f8e <HAL_GPIO_Init+0x222>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a50      	ldr	r2, [pc, #320]	; (8004088 <HAL_GPIO_Init+0x31c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01f      	beq.n	8003f8a <HAL_GPIO_Init+0x21e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a4f      	ldr	r2, [pc, #316]	; (800408c <HAL_GPIO_Init+0x320>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d019      	beq.n	8003f86 <HAL_GPIO_Init+0x21a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a4e      	ldr	r2, [pc, #312]	; (8004090 <HAL_GPIO_Init+0x324>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <HAL_GPIO_Init+0x216>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a4d      	ldr	r2, [pc, #308]	; (8004094 <HAL_GPIO_Init+0x328>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00d      	beq.n	8003f7e <HAL_GPIO_Init+0x212>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a4c      	ldr	r2, [pc, #304]	; (8004098 <HAL_GPIO_Init+0x32c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d007      	beq.n	8003f7a <HAL_GPIO_Init+0x20e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a4b      	ldr	r2, [pc, #300]	; (800409c <HAL_GPIO_Init+0x330>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d101      	bne.n	8003f76 <HAL_GPIO_Init+0x20a>
 8003f72:	2307      	movs	r3, #7
 8003f74:	e00e      	b.n	8003f94 <HAL_GPIO_Init+0x228>
 8003f76:	2308      	movs	r3, #8
 8003f78:	e00c      	b.n	8003f94 <HAL_GPIO_Init+0x228>
 8003f7a:	2306      	movs	r3, #6
 8003f7c:	e00a      	b.n	8003f94 <HAL_GPIO_Init+0x228>
 8003f7e:	2305      	movs	r3, #5
 8003f80:	e008      	b.n	8003f94 <HAL_GPIO_Init+0x228>
 8003f82:	2304      	movs	r3, #4
 8003f84:	e006      	b.n	8003f94 <HAL_GPIO_Init+0x228>
 8003f86:	2303      	movs	r3, #3
 8003f88:	e004      	b.n	8003f94 <HAL_GPIO_Init+0x228>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e002      	b.n	8003f94 <HAL_GPIO_Init+0x228>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_GPIO_Init+0x228>
 8003f92:	2300      	movs	r3, #0
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	f002 0203 	and.w	r2, r2, #3
 8003f9a:	0092      	lsls	r2, r2, #2
 8003f9c:	4093      	lsls	r3, r2
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fa4:	4935      	ldr	r1, [pc, #212]	; (800407c <HAL_GPIO_Init+0x310>)
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	089b      	lsrs	r3, r3, #2
 8003faa:	3302      	adds	r3, #2
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fb2:	4b3b      	ldr	r3, [pc, #236]	; (80040a0 <HAL_GPIO_Init+0x334>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fd6:	4a32      	ldr	r2, [pc, #200]	; (80040a0 <HAL_GPIO_Init+0x334>)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fdc:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <HAL_GPIO_Init+0x334>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004000:	4a27      	ldr	r2, [pc, #156]	; (80040a0 <HAL_GPIO_Init+0x334>)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004006:	4b26      	ldr	r3, [pc, #152]	; (80040a0 <HAL_GPIO_Init+0x334>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800402a:	4a1d      	ldr	r2, [pc, #116]	; (80040a0 <HAL_GPIO_Init+0x334>)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <HAL_GPIO_Init+0x334>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004054:	4a12      	ldr	r2, [pc, #72]	; (80040a0 <HAL_GPIO_Init+0x334>)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3301      	adds	r3, #1
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b0f      	cmp	r3, #15
 8004064:	f67f ae90 	bls.w	8003d88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop
 800406c:	3724      	adds	r7, #36	; 0x24
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40023800 	.word	0x40023800
 800407c:	40013800 	.word	0x40013800
 8004080:	40020000 	.word	0x40020000
 8004084:	40020400 	.word	0x40020400
 8004088:	40020800 	.word	0x40020800
 800408c:	40020c00 	.word	0x40020c00
 8004090:	40021000 	.word	0x40021000
 8004094:	40021400 	.word	0x40021400
 8004098:	40021800 	.word	0x40021800
 800409c:	40021c00 	.word	0x40021c00
 80040a0:	40013c00 	.word	0x40013c00

080040a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	807b      	strh	r3, [r7, #2]
 80040b0:	4613      	mov	r3, r2
 80040b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040b4:	787b      	ldrb	r3, [r7, #1]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ba:	887a      	ldrh	r2, [r7, #2]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040c0:	e003      	b.n	80040ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040c2:	887b      	ldrh	r3, [r7, #2]
 80040c4:	041a      	lsls	r2, r3, #16
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	619a      	str	r2, [r3, #24]
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	460b      	mov	r3, r1
 80040e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040e8:	887a      	ldrh	r2, [r7, #2]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4013      	ands	r3, r2
 80040ee:	041a      	lsls	r2, r3, #16
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	43d9      	mvns	r1, r3
 80040f4:	887b      	ldrh	r3, [r7, #2]
 80040f6:	400b      	ands	r3, r1
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	619a      	str	r2, [r3, #24]
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e12b      	b.n	8004376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fe f872 	bl	800221c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2224      	movs	r2, #36	; 0x24
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800415e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800416e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004170:	f001 fbd8 	bl	8005924 <HAL_RCC_GetPCLK1Freq>
 8004174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4a81      	ldr	r2, [pc, #516]	; (8004380 <HAL_I2C_Init+0x274>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d807      	bhi.n	8004190 <HAL_I2C_Init+0x84>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4a80      	ldr	r2, [pc, #512]	; (8004384 <HAL_I2C_Init+0x278>)
 8004184:	4293      	cmp	r3, r2
 8004186:	bf94      	ite	ls
 8004188:	2301      	movls	r3, #1
 800418a:	2300      	movhi	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	e006      	b.n	800419e <HAL_I2C_Init+0x92>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a7d      	ldr	r2, [pc, #500]	; (8004388 <HAL_I2C_Init+0x27c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	bf94      	ite	ls
 8004198:	2301      	movls	r3, #1
 800419a:	2300      	movhi	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e0e7      	b.n	8004376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4a78      	ldr	r2, [pc, #480]	; (800438c <HAL_I2C_Init+0x280>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	0c9b      	lsrs	r3, r3, #18
 80041b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	4a6a      	ldr	r2, [pc, #424]	; (8004380 <HAL_I2C_Init+0x274>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d802      	bhi.n	80041e0 <HAL_I2C_Init+0xd4>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	3301      	adds	r3, #1
 80041de:	e009      	b.n	80041f4 <HAL_I2C_Init+0xe8>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041e6:	fb02 f303 	mul.w	r3, r2, r3
 80041ea:	4a69      	ldr	r2, [pc, #420]	; (8004390 <HAL_I2C_Init+0x284>)
 80041ec:	fba2 2303 	umull	r2, r3, r2, r3
 80041f0:	099b      	lsrs	r3, r3, #6
 80041f2:	3301      	adds	r3, #1
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	430b      	orrs	r3, r1
 80041fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004206:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	495c      	ldr	r1, [pc, #368]	; (8004380 <HAL_I2C_Init+0x274>)
 8004210:	428b      	cmp	r3, r1
 8004212:	d819      	bhi.n	8004248 <HAL_I2C_Init+0x13c>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	1e59      	subs	r1, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004222:	1c59      	adds	r1, r3, #1
 8004224:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004228:	400b      	ands	r3, r1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_I2C_Init+0x138>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1e59      	subs	r1, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	fbb1 f3f3 	udiv	r3, r1, r3
 800423c:	3301      	adds	r3, #1
 800423e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004242:	e051      	b.n	80042e8 <HAL_I2C_Init+0x1dc>
 8004244:	2304      	movs	r3, #4
 8004246:	e04f      	b.n	80042e8 <HAL_I2C_Init+0x1dc>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d111      	bne.n	8004274 <HAL_I2C_Init+0x168>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1e58      	subs	r0, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	440b      	add	r3, r1
 800425e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004262:	3301      	adds	r3, #1
 8004264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	e012      	b.n	800429a <HAL_I2C_Init+0x18e>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	1e58      	subs	r0, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6859      	ldr	r1, [r3, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	0099      	lsls	r1, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	fbb0 f3f3 	udiv	r3, r0, r3
 800428a:	3301      	adds	r3, #1
 800428c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004290:	2b00      	cmp	r3, #0
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_I2C_Init+0x196>
 800429e:	2301      	movs	r3, #1
 80042a0:	e022      	b.n	80042e8 <HAL_I2C_Init+0x1dc>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10e      	bne.n	80042c8 <HAL_I2C_Init+0x1bc>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1e58      	subs	r0, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6859      	ldr	r1, [r3, #4]
 80042b2:	460b      	mov	r3, r1
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	440b      	add	r3, r1
 80042b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80042bc:	3301      	adds	r3, #1
 80042be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c6:	e00f      	b.n	80042e8 <HAL_I2C_Init+0x1dc>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1e58      	subs	r0, r3, #1
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	0099      	lsls	r1, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	fbb0 f3f3 	udiv	r3, r0, r3
 80042de:	3301      	adds	r3, #1
 80042e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	6809      	ldr	r1, [r1, #0]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69da      	ldr	r2, [r3, #28]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004316:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6911      	ldr	r1, [r2, #16]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68d2      	ldr	r2, [r2, #12]
 8004322:	4311      	orrs	r1, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	430b      	orrs	r3, r1
 800432a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	000186a0 	.word	0x000186a0
 8004384:	001e847f 	.word	0x001e847f
 8004388:	003d08ff 	.word	0x003d08ff
 800438c:	431bde83 	.word	0x431bde83
 8004390:	10624dd3 	.word	0x10624dd3

08004394 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	4608      	mov	r0, r1
 800439e:	4611      	mov	r1, r2
 80043a0:	461a      	mov	r2, r3
 80043a2:	4603      	mov	r3, r0
 80043a4:	817b      	strh	r3, [r7, #10]
 80043a6:	460b      	mov	r3, r1
 80043a8:	813b      	strh	r3, [r7, #8]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043ae:	f7ff fb09 	bl	80039c4 <HAL_GetTick>
 80043b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b20      	cmp	r3, #32
 80043be:	f040 80d9 	bne.w	8004574 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	2319      	movs	r3, #25
 80043c8:	2201      	movs	r2, #1
 80043ca:	496d      	ldr	r1, [pc, #436]	; (8004580 <HAL_I2C_Mem_Write+0x1ec>)
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 fc7f 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80043d8:	2302      	movs	r3, #2
 80043da:	e0cc      	b.n	8004576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_I2C_Mem_Write+0x56>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e0c5      	b.n	8004576 <HAL_I2C_Mem_Write+0x1e2>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d007      	beq.n	8004410 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800441e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2221      	movs	r2, #33	; 0x21
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2240      	movs	r2, #64	; 0x40
 800442c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a3a      	ldr	r2, [r7, #32]
 800443a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004440:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4a4d      	ldr	r2, [pc, #308]	; (8004584 <HAL_I2C_Mem_Write+0x1f0>)
 8004450:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004452:	88f8      	ldrh	r0, [r7, #6]
 8004454:	893a      	ldrh	r2, [r7, #8]
 8004456:	8979      	ldrh	r1, [r7, #10]
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	4603      	mov	r3, r0
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 fab6 	bl	80049d4 <I2C_RequestMemoryWrite>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d052      	beq.n	8004514 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e081      	b.n	8004576 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fd00 	bl	8004e7c <I2C_WaitOnTXEFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00d      	beq.n	800449e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	2b04      	cmp	r3, #4
 8004488:	d107      	bne.n	800449a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004498:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e06b      	b.n	8004576 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	781a      	ldrb	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d11b      	bne.n	8004514 <HAL_I2C_Mem_Write+0x180>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d017      	beq.n	8004514 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1aa      	bne.n	8004472 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fcec 	bl	8004efe <I2C_WaitOnBTFFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00d      	beq.n	8004548 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	2b04      	cmp	r3, #4
 8004532:	d107      	bne.n	8004544 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004542:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e016      	b.n	8004576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	e000      	b.n	8004576 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004574:	2302      	movs	r3, #2
  }
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	00100002 	.word	0x00100002
 8004584:	ffff0000 	.word	0xffff0000

08004588 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08c      	sub	sp, #48	; 0x30
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	4608      	mov	r0, r1
 8004592:	4611      	mov	r1, r2
 8004594:	461a      	mov	r2, r3
 8004596:	4603      	mov	r3, r0
 8004598:	817b      	strh	r3, [r7, #10]
 800459a:	460b      	mov	r3, r1
 800459c:	813b      	strh	r3, [r7, #8]
 800459e:	4613      	mov	r3, r2
 80045a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045a2:	f7ff fa0f 	bl	80039c4 <HAL_GetTick>
 80045a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	f040 8208 	bne.w	80049c6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	2319      	movs	r3, #25
 80045bc:	2201      	movs	r2, #1
 80045be:	497b      	ldr	r1, [pc, #492]	; (80047ac <HAL_I2C_Mem_Read+0x224>)
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 fb85 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
 80045ce:	e1fb      	b.n	80049c8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_I2C_Mem_Read+0x56>
 80045da:	2302      	movs	r3, #2
 80045dc:	e1f4      	b.n	80049c8 <HAL_I2C_Mem_Read+0x440>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d007      	beq.n	8004604 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004612:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2222      	movs	r2, #34	; 0x22
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2240      	movs	r2, #64	; 0x40
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800462e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4a5b      	ldr	r2, [pc, #364]	; (80047b0 <HAL_I2C_Mem_Read+0x228>)
 8004644:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004646:	88f8      	ldrh	r0, [r7, #6]
 8004648:	893a      	ldrh	r2, [r7, #8]
 800464a:	8979      	ldrh	r1, [r7, #10]
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	9301      	str	r3, [sp, #4]
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	4603      	mov	r3, r0
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 fa52 	bl	8004b00 <I2C_RequestMemoryRead>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e1b0      	b.n	80049c8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466a:	2b00      	cmp	r3, #0
 800466c:	d113      	bne.n	8004696 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800466e:	2300      	movs	r3, #0
 8004670:	623b      	str	r3, [r7, #32]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	623b      	str	r3, [r7, #32]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	623b      	str	r3, [r7, #32]
 8004682:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	e184      	b.n	80049a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469a:	2b01      	cmp	r3, #1
 800469c:	d11b      	bne.n	80046d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ae:	2300      	movs	r3, #0
 80046b0:	61fb      	str	r3, [r7, #28]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	e164      	b.n	80049a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d11b      	bne.n	8004716 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fe:	2300      	movs	r3, #0
 8004700:	61bb      	str	r3, [r7, #24]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	e144      	b.n	80049a0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800472c:	e138      	b.n	80049a0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004732:	2b03      	cmp	r3, #3
 8004734:	f200 80f1 	bhi.w	800491a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473c:	2b01      	cmp	r3, #1
 800473e:	d123      	bne.n	8004788 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004742:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 fc1b 	bl	8004f80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e139      	b.n	80049c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004786:	e10b      	b.n	80049a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478c:	2b02      	cmp	r3, #2
 800478e:	d14e      	bne.n	800482e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004796:	2200      	movs	r2, #0
 8004798:	4906      	ldr	r1, [pc, #24]	; (80047b4 <HAL_I2C_Mem_Read+0x22c>)
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 fa98 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e10e      	b.n	80049c8 <HAL_I2C_Mem_Read+0x440>
 80047aa:	bf00      	nop
 80047ac:	00100002 	.word	0x00100002
 80047b0:	ffff0000 	.word	0xffff0000
 80047b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691a      	ldr	r2, [r3, #16]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800482c:	e0b8      	b.n	80049a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004834:	2200      	movs	r2, #0
 8004836:	4966      	ldr	r1, [pc, #408]	; (80049d0 <HAL_I2C_Mem_Read+0x448>)
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 fa49 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0bf      	b.n	80049c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004890:	2200      	movs	r2, #0
 8004892:	494f      	ldr	r1, [pc, #316]	; (80049d0 <HAL_I2C_Mem_Read+0x448>)
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 fa1b 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e091      	b.n	80049c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004918:	e042      	b.n	80049a0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800491a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 fb2e 	bl	8004f80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e04c      	b.n	80049c8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b04      	cmp	r3, #4
 800496c:	d118      	bne.n	80049a0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f47f aec2 	bne.w	800472e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	e000      	b.n	80049c8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80049c6:	2302      	movs	r3, #2
  }
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3728      	adds	r7, #40	; 0x28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	00010004 	.word	0x00010004

080049d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af02      	add	r7, sp, #8
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	4608      	mov	r0, r1
 80049de:	4611      	mov	r1, r2
 80049e0:	461a      	mov	r2, r3
 80049e2:	4603      	mov	r3, r0
 80049e4:	817b      	strh	r3, [r7, #10]
 80049e6:	460b      	mov	r3, r1
 80049e8:	813b      	strh	r3, [r7, #8]
 80049ea:	4613      	mov	r3, r2
 80049ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f960 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00d      	beq.n	8004a32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a24:	d103      	bne.n	8004a2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e05f      	b.n	8004af2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a32:	897b      	ldrh	r3, [r7, #10]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	461a      	mov	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	6a3a      	ldr	r2, [r7, #32]
 8004a46:	492d      	ldr	r1, [pc, #180]	; (8004afc <I2C_RequestMemoryWrite+0x128>)
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f998 	bl	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e04c      	b.n	8004af2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a70:	6a39      	ldr	r1, [r7, #32]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 fa02 	bl	8004e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00d      	beq.n	8004a9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d107      	bne.n	8004a96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e02b      	b.n	8004af2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a9a:	88fb      	ldrh	r3, [r7, #6]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d105      	bne.n	8004aac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004aa0:	893b      	ldrh	r3, [r7, #8]
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	611a      	str	r2, [r3, #16]
 8004aaa:	e021      	b.n	8004af0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004aac:	893b      	ldrh	r3, [r7, #8]
 8004aae:	0a1b      	lsrs	r3, r3, #8
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abc:	6a39      	ldr	r1, [r7, #32]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f9dc 	bl	8004e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00d      	beq.n	8004ae6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d107      	bne.n	8004ae2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e005      	b.n	8004af2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ae6:	893b      	ldrh	r3, [r7, #8]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	00010002 	.word	0x00010002

08004b00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	4608      	mov	r0, r1
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4603      	mov	r3, r0
 8004b10:	817b      	strh	r3, [r7, #10]
 8004b12:	460b      	mov	r3, r1
 8004b14:	813b      	strh	r3, [r7, #8]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f8c2 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00d      	beq.n	8004b6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b60:	d103      	bne.n	8004b6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e0aa      	b.n	8004cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b6e:	897b      	ldrh	r3, [r7, #10]
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	6a3a      	ldr	r2, [r7, #32]
 8004b82:	4952      	ldr	r1, [pc, #328]	; (8004ccc <I2C_RequestMemoryRead+0x1cc>)
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f8fa 	bl	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e097      	b.n	8004cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bac:	6a39      	ldr	r1, [r7, #32]
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 f964 	bl	8004e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00d      	beq.n	8004bd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d107      	bne.n	8004bd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e076      	b.n	8004cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d105      	bne.n	8004be8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bdc:	893b      	ldrh	r3, [r7, #8]
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	611a      	str	r2, [r3, #16]
 8004be6:	e021      	b.n	8004c2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004be8:	893b      	ldrh	r3, [r7, #8]
 8004bea:	0a1b      	lsrs	r3, r3, #8
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf8:	6a39      	ldr	r1, [r7, #32]
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f93e 	bl	8004e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00d      	beq.n	8004c22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d107      	bne.n	8004c1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e050      	b.n	8004cc4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c22:	893b      	ldrh	r3, [r7, #8]
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c2e:	6a39      	ldr	r1, [r7, #32]
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f923 	bl	8004e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00d      	beq.n	8004c58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d107      	bne.n	8004c54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e035      	b.n	8004cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f82b 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00d      	beq.n	8004c9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c8e:	d103      	bne.n	8004c98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e013      	b.n	8004cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c9c:	897b      	ldrh	r3, [r7, #10]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	6a3a      	ldr	r2, [r7, #32]
 8004cb0:	4906      	ldr	r1, [pc, #24]	; (8004ccc <I2C_RequestMemoryRead+0x1cc>)
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f863 	bl	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	00010002 	.word	0x00010002

08004cd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ce0:	e025      	b.n	8004d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d021      	beq.n	8004d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cea:	f7fe fe6b 	bl	80039c4 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d116      	bne.n	8004d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f043 0220 	orr.w	r2, r3, #32
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e023      	b.n	8004d76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	0c1b      	lsrs	r3, r3, #16
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d10d      	bne.n	8004d54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4013      	ands	r3, r2
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	bf0c      	ite	eq
 8004d4a:	2301      	moveq	r3, #1
 8004d4c:	2300      	movne	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	e00c      	b.n	8004d6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	43da      	mvns	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	bf0c      	ite	eq
 8004d66:	2301      	moveq	r3, #1
 8004d68:	2300      	movne	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d0b6      	beq.n	8004ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d8c:	e051      	b.n	8004e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9c:	d123      	bne.n	8004de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004db6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f043 0204 	orr.w	r2, r3, #4
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e046      	b.n	8004e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d021      	beq.n	8004e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dee:	f7fe fde9 	bl	80039c4 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d302      	bcc.n	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d116      	bne.n	8004e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f043 0220 	orr.w	r2, r3, #32
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e020      	b.n	8004e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	0c1b      	lsrs	r3, r3, #16
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d10c      	bne.n	8004e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	43da      	mvns	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4013      	ands	r3, r2
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bf14      	ite	ne
 8004e4e:	2301      	movne	r3, #1
 8004e50:	2300      	moveq	r3, #0
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	e00b      	b.n	8004e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	43da      	mvns	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	4013      	ands	r3, r2
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bf14      	ite	ne
 8004e68:	2301      	movne	r3, #1
 8004e6a:	2300      	moveq	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d18d      	bne.n	8004d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e88:	e02d      	b.n	8004ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f8ce 	bl	800502c <I2C_IsAcknowledgeFailed>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e02d      	b.n	8004ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea0:	d021      	beq.n	8004ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea2:	f7fe fd8f 	bl	80039c4 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d302      	bcc.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d116      	bne.n	8004ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f043 0220 	orr.w	r2, r3, #32
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e007      	b.n	8004ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef0:	2b80      	cmp	r3, #128	; 0x80
 8004ef2:	d1ca      	bne.n	8004e8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f0a:	e02d      	b.n	8004f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f88d 	bl	800502c <I2C_IsAcknowledgeFailed>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e02d      	b.n	8004f78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	d021      	beq.n	8004f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f24:	f7fe fd4e 	bl	80039c4 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d302      	bcc.n	8004f3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d116      	bne.n	8004f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	f043 0220 	orr.w	r2, r3, #32
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e007      	b.n	8004f78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d1ca      	bne.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f8c:	e042      	b.n	8005014 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d119      	bne.n	8004fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0210 	mvn.w	r2, #16
 8004fa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e029      	b.n	8005024 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd0:	f7fe fcf8 	bl	80039c4 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d302      	bcc.n	8004fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d116      	bne.n	8005014 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	f043 0220 	orr.w	r2, r3, #32
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e007      	b.n	8005024 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d1b5      	bne.n	8004f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005042:	d11b      	bne.n	800507c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800504c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	f043 0204 	orr.w	r2, r3, #4
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e264      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d075      	beq.n	8005196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050aa:	4ba3      	ldr	r3, [pc, #652]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d00c      	beq.n	80050d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050b6:	4ba0      	ldr	r3, [pc, #640]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d112      	bne.n	80050e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050c2:	4b9d      	ldr	r3, [pc, #628]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050ce:	d10b      	bne.n	80050e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d0:	4b99      	ldr	r3, [pc, #612]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d05b      	beq.n	8005194 <HAL_RCC_OscConfig+0x108>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d157      	bne.n	8005194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e23f      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f0:	d106      	bne.n	8005100 <HAL_RCC_OscConfig+0x74>
 80050f2:	4b91      	ldr	r3, [pc, #580]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a90      	ldr	r2, [pc, #576]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e01d      	b.n	800513c <HAL_RCC_OscConfig+0xb0>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005108:	d10c      	bne.n	8005124 <HAL_RCC_OscConfig+0x98>
 800510a:	4b8b      	ldr	r3, [pc, #556]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a8a      	ldr	r2, [pc, #552]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	4b88      	ldr	r3, [pc, #544]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a87      	ldr	r2, [pc, #540]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 800511c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e00b      	b.n	800513c <HAL_RCC_OscConfig+0xb0>
 8005124:	4b84      	ldr	r3, [pc, #528]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a83      	ldr	r2, [pc, #524]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 800512a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	4b81      	ldr	r3, [pc, #516]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a80      	ldr	r2, [pc, #512]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800513a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d013      	beq.n	800516c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005144:	f7fe fc3e 	bl	80039c4 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800514c:	f7fe fc3a 	bl	80039c4 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b64      	cmp	r3, #100	; 0x64
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e204      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515e:	4b76      	ldr	r3, [pc, #472]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0xc0>
 800516a:	e014      	b.n	8005196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516c:	f7fe fc2a 	bl	80039c4 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005174:	f7fe fc26 	bl	80039c4 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b64      	cmp	r3, #100	; 0x64
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e1f0      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005186:	4b6c      	ldr	r3, [pc, #432]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f0      	bne.n	8005174 <HAL_RCC_OscConfig+0xe8>
 8005192:	e000      	b.n	8005196 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d063      	beq.n	800526a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051a2:	4b65      	ldr	r3, [pc, #404]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 030c 	and.w	r3, r3, #12
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ae:	4b62      	ldr	r3, [pc, #392]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d11c      	bne.n	80051f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ba:	4b5f      	ldr	r3, [pc, #380]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d116      	bne.n	80051f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c6:	4b5c      	ldr	r3, [pc, #368]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d005      	beq.n	80051de <HAL_RCC_OscConfig+0x152>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d001      	beq.n	80051de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e1c4      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051de:	4b56      	ldr	r3, [pc, #344]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4952      	ldr	r1, [pc, #328]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051f2:	e03a      	b.n	800526a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d020      	beq.n	800523e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051fc:	4b4f      	ldr	r3, [pc, #316]	; (800533c <HAL_RCC_OscConfig+0x2b0>)
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005202:	f7fe fbdf 	bl	80039c4 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800520a:	f7fe fbdb 	bl	80039c4 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e1a5      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521c:	4b46      	ldr	r3, [pc, #280]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005228:	4b43      	ldr	r3, [pc, #268]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4940      	ldr	r1, [pc, #256]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005238:	4313      	orrs	r3, r2
 800523a:	600b      	str	r3, [r1, #0]
 800523c:	e015      	b.n	800526a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800523e:	4b3f      	ldr	r3, [pc, #252]	; (800533c <HAL_RCC_OscConfig+0x2b0>)
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fe fbbe 	bl	80039c4 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800524c:	f7fe fbba 	bl	80039c4 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e184      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525e:	4b36      	ldr	r3, [pc, #216]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d030      	beq.n	80052d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d016      	beq.n	80052ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800527e:	4b30      	ldr	r3, [pc, #192]	; (8005340 <HAL_RCC_OscConfig+0x2b4>)
 8005280:	2201      	movs	r2, #1
 8005282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005284:	f7fe fb9e 	bl	80039c4 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800528c:	f7fe fb9a 	bl	80039c4 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e164      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800529e:	4b26      	ldr	r3, [pc, #152]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80052a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0x200>
 80052aa:	e015      	b.n	80052d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ac:	4b24      	ldr	r3, [pc, #144]	; (8005340 <HAL_RCC_OscConfig+0x2b4>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b2:	f7fe fb87 	bl	80039c4 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ba:	f7fe fb83 	bl	80039c4 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e14d      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052cc:	4b1a      	ldr	r3, [pc, #104]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80052ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f0      	bne.n	80052ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 80a0 	beq.w	8005426 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e6:	2300      	movs	r3, #0
 80052e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ea:	4b13      	ldr	r3, [pc, #76]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10f      	bne.n	8005316 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f6:	2300      	movs	r3, #0
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	4b0f      	ldr	r3, [pc, #60]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	4a0e      	ldr	r2, [pc, #56]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005304:	6413      	str	r3, [r2, #64]	; 0x40
 8005306:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <HAL_RCC_OscConfig+0x2ac>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005312:	2301      	movs	r3, #1
 8005314:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <HAL_RCC_OscConfig+0x2b8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531e:	2b00      	cmp	r3, #0
 8005320:	d121      	bne.n	8005366 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005322:	4b08      	ldr	r3, [pc, #32]	; (8005344 <HAL_RCC_OscConfig+0x2b8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a07      	ldr	r2, [pc, #28]	; (8005344 <HAL_RCC_OscConfig+0x2b8>)
 8005328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800532e:	f7fe fb49 	bl	80039c4 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005334:	e011      	b.n	800535a <HAL_RCC_OscConfig+0x2ce>
 8005336:	bf00      	nop
 8005338:	40023800 	.word	0x40023800
 800533c:	42470000 	.word	0x42470000
 8005340:	42470e80 	.word	0x42470e80
 8005344:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005348:	f7fe fb3c 	bl	80039c4 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e106      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800535a:	4b85      	ldr	r3, [pc, #532]	; (8005570 <HAL_RCC_OscConfig+0x4e4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0f0      	beq.n	8005348 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d106      	bne.n	800537c <HAL_RCC_OscConfig+0x2f0>
 800536e:	4b81      	ldr	r3, [pc, #516]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	4a80      	ldr	r2, [pc, #512]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 8005374:	f043 0301 	orr.w	r3, r3, #1
 8005378:	6713      	str	r3, [r2, #112]	; 0x70
 800537a:	e01c      	b.n	80053b6 <HAL_RCC_OscConfig+0x32a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	2b05      	cmp	r3, #5
 8005382:	d10c      	bne.n	800539e <HAL_RCC_OscConfig+0x312>
 8005384:	4b7b      	ldr	r3, [pc, #492]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 8005386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005388:	4a7a      	ldr	r2, [pc, #488]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 800538a:	f043 0304 	orr.w	r3, r3, #4
 800538e:	6713      	str	r3, [r2, #112]	; 0x70
 8005390:	4b78      	ldr	r3, [pc, #480]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 8005392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005394:	4a77      	ldr	r2, [pc, #476]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	6713      	str	r3, [r2, #112]	; 0x70
 800539c:	e00b      	b.n	80053b6 <HAL_RCC_OscConfig+0x32a>
 800539e:	4b75      	ldr	r3, [pc, #468]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	4a74      	ldr	r2, [pc, #464]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	6713      	str	r3, [r2, #112]	; 0x70
 80053aa:	4b72      	ldr	r3, [pc, #456]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ae:	4a71      	ldr	r2, [pc, #452]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 80053b0:	f023 0304 	bic.w	r3, r3, #4
 80053b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d015      	beq.n	80053ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053be:	f7fe fb01 	bl	80039c4 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c4:	e00a      	b.n	80053dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053c6:	f7fe fafd 	bl	80039c4 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e0c5      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053dc:	4b65      	ldr	r3, [pc, #404]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 80053de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0ee      	beq.n	80053c6 <HAL_RCC_OscConfig+0x33a>
 80053e8:	e014      	b.n	8005414 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ea:	f7fe faeb 	bl	80039c4 <HAL_GetTick>
 80053ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f0:	e00a      	b.n	8005408 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053f2:	f7fe fae7 	bl	80039c4 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005400:	4293      	cmp	r3, r2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e0af      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005408:	4b5a      	ldr	r3, [pc, #360]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 800540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1ee      	bne.n	80053f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005414:	7dfb      	ldrb	r3, [r7, #23]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d105      	bne.n	8005426 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800541a:	4b56      	ldr	r3, [pc, #344]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	4a55      	ldr	r2, [pc, #340]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 8005420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005424:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 809b 	beq.w	8005566 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005430:	4b50      	ldr	r3, [pc, #320]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 030c 	and.w	r3, r3, #12
 8005438:	2b08      	cmp	r3, #8
 800543a:	d05c      	beq.n	80054f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d141      	bne.n	80054c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005444:	4b4c      	ldr	r3, [pc, #304]	; (8005578 <HAL_RCC_OscConfig+0x4ec>)
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544a:	f7fe fabb 	bl	80039c4 <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005452:	f7fe fab7 	bl	80039c4 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e081      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005464:	4b43      	ldr	r3, [pc, #268]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1f0      	bne.n	8005452 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	019b      	lsls	r3, r3, #6
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	3b01      	subs	r3, #1
 800548a:	041b      	lsls	r3, r3, #16
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	061b      	lsls	r3, r3, #24
 8005494:	4937      	ldr	r1, [pc, #220]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 8005496:	4313      	orrs	r3, r2
 8005498:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800549a:	4b37      	ldr	r3, [pc, #220]	; (8005578 <HAL_RCC_OscConfig+0x4ec>)
 800549c:	2201      	movs	r2, #1
 800549e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a0:	f7fe fa90 	bl	80039c4 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a8:	f7fe fa8c 	bl	80039c4 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e056      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ba:	4b2e      	ldr	r3, [pc, #184]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f0      	beq.n	80054a8 <HAL_RCC_OscConfig+0x41c>
 80054c6:	e04e      	b.n	8005566 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c8:	4b2b      	ldr	r3, [pc, #172]	; (8005578 <HAL_RCC_OscConfig+0x4ec>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ce:	f7fe fa79 	bl	80039c4 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d6:	f7fe fa75 	bl	80039c4 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e03f      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e8:	4b22      	ldr	r3, [pc, #136]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f0      	bne.n	80054d6 <HAL_RCC_OscConfig+0x44a>
 80054f4:	e037      	b.n	8005566 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d101      	bne.n	8005502 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e032      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005502:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <HAL_RCC_OscConfig+0x4e8>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d028      	beq.n	8005562 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800551a:	429a      	cmp	r2, r3
 800551c:	d121      	bne.n	8005562 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005528:	429a      	cmp	r2, r3
 800552a:	d11a      	bne.n	8005562 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005532:	4013      	ands	r3, r2
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005538:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800553a:	4293      	cmp	r3, r2
 800553c:	d111      	bne.n	8005562 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	085b      	lsrs	r3, r3, #1
 800554a:	3b01      	subs	r3, #1
 800554c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800554e:	429a      	cmp	r2, r3
 8005550:	d107      	bne.n	8005562 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800555e:	429a      	cmp	r2, r3
 8005560:	d001      	beq.n	8005566 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40007000 	.word	0x40007000
 8005574:	40023800 	.word	0x40023800
 8005578:	42470060 	.word	0x42470060

0800557c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0cc      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005590:	4b68      	ldr	r3, [pc, #416]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d90c      	bls.n	80055b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559e:	4b65      	ldr	r3, [pc, #404]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a6:	4b63      	ldr	r3, [pc, #396]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d001      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0b8      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d020      	beq.n	8005606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055d0:	4b59      	ldr	r3, [pc, #356]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	4a58      	ldr	r2, [pc, #352]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055e8:	4b53      	ldr	r3, [pc, #332]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	4a52      	ldr	r2, [pc, #328]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055f4:	4b50      	ldr	r3, [pc, #320]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	494d      	ldr	r1, [pc, #308]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	4313      	orrs	r3, r2
 8005604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d044      	beq.n	800569c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d107      	bne.n	800562a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800561a:	4b47      	ldr	r3, [pc, #284]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d119      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e07f      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d003      	beq.n	800563a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005636:	2b03      	cmp	r3, #3
 8005638:	d107      	bne.n	800564a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800563a:	4b3f      	ldr	r3, [pc, #252]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e06f      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800564a:	4b3b      	ldr	r3, [pc, #236]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e067      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800565a:	4b37      	ldr	r3, [pc, #220]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f023 0203 	bic.w	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4934      	ldr	r1, [pc, #208]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 8005668:	4313      	orrs	r3, r2
 800566a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800566c:	f7fe f9aa 	bl	80039c4 <HAL_GetTick>
 8005670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005672:	e00a      	b.n	800568a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005674:	f7fe f9a6 	bl	80039c4 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005682:	4293      	cmp	r3, r2
 8005684:	d901      	bls.n	800568a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e04f      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568a:	4b2b      	ldr	r3, [pc, #172]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 020c 	and.w	r2, r3, #12
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	429a      	cmp	r2, r3
 800569a:	d1eb      	bne.n	8005674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800569c:	4b25      	ldr	r3, [pc, #148]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d20c      	bcs.n	80056c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056aa:	4b22      	ldr	r3, [pc, #136]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b2:	4b20      	ldr	r3, [pc, #128]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d001      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e032      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d008      	beq.n	80056e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056d0:	4b19      	ldr	r3, [pc, #100]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	4916      	ldr	r1, [pc, #88]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0308 	and.w	r3, r3, #8
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ee:	4b12      	ldr	r3, [pc, #72]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	490e      	ldr	r1, [pc, #56]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005702:	f000 f821 	bl	8005748 <HAL_RCC_GetSysClockFreq>
 8005706:	4602      	mov	r2, r0
 8005708:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	091b      	lsrs	r3, r3, #4
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	490a      	ldr	r1, [pc, #40]	; (800573c <HAL_RCC_ClockConfig+0x1c0>)
 8005714:	5ccb      	ldrb	r3, [r1, r3]
 8005716:	fa22 f303 	lsr.w	r3, r2, r3
 800571a:	4a09      	ldr	r2, [pc, #36]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 800571c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800571e:	4b09      	ldr	r3, [pc, #36]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f7fe f90a 	bl	800393c <HAL_InitTick>

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40023c00 	.word	0x40023c00
 8005738:	40023800 	.word	0x40023800
 800573c:	0800b924 	.word	0x0800b924
 8005740:	20000010 	.word	0x20000010
 8005744:	20000014 	.word	0x20000014

08005748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005748:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	607b      	str	r3, [r7, #4]
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	2300      	movs	r3, #0
 800575a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005760:	4b67      	ldr	r3, [pc, #412]	; (8005900 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 030c 	and.w	r3, r3, #12
 8005768:	2b08      	cmp	r3, #8
 800576a:	d00d      	beq.n	8005788 <HAL_RCC_GetSysClockFreq+0x40>
 800576c:	2b08      	cmp	r3, #8
 800576e:	f200 80bd 	bhi.w	80058ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_RCC_GetSysClockFreq+0x34>
 8005776:	2b04      	cmp	r3, #4
 8005778:	d003      	beq.n	8005782 <HAL_RCC_GetSysClockFreq+0x3a>
 800577a:	e0b7      	b.n	80058ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800577c:	4b61      	ldr	r3, [pc, #388]	; (8005904 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800577e:	60bb      	str	r3, [r7, #8]
       break;
 8005780:	e0b7      	b.n	80058f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005782:	4b61      	ldr	r3, [pc, #388]	; (8005908 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005784:	60bb      	str	r3, [r7, #8]
      break;
 8005786:	e0b4      	b.n	80058f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005788:	4b5d      	ldr	r3, [pc, #372]	; (8005900 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005790:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005792:	4b5b      	ldr	r3, [pc, #364]	; (8005900 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d04d      	beq.n	800583a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800579e:	4b58      	ldr	r3, [pc, #352]	; (8005900 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	099b      	lsrs	r3, r3, #6
 80057a4:	461a      	mov	r2, r3
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057ae:	f04f 0100 	mov.w	r1, #0
 80057b2:	ea02 0800 	and.w	r8, r2, r0
 80057b6:	ea03 0901 	and.w	r9, r3, r1
 80057ba:	4640      	mov	r0, r8
 80057bc:	4649      	mov	r1, r9
 80057be:	f04f 0200 	mov.w	r2, #0
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	014b      	lsls	r3, r1, #5
 80057c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057cc:	0142      	lsls	r2, r0, #5
 80057ce:	4610      	mov	r0, r2
 80057d0:	4619      	mov	r1, r3
 80057d2:	ebb0 0008 	subs.w	r0, r0, r8
 80057d6:	eb61 0109 	sbc.w	r1, r1, r9
 80057da:	f04f 0200 	mov.w	r2, #0
 80057de:	f04f 0300 	mov.w	r3, #0
 80057e2:	018b      	lsls	r3, r1, #6
 80057e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057e8:	0182      	lsls	r2, r0, #6
 80057ea:	1a12      	subs	r2, r2, r0
 80057ec:	eb63 0301 	sbc.w	r3, r3, r1
 80057f0:	f04f 0000 	mov.w	r0, #0
 80057f4:	f04f 0100 	mov.w	r1, #0
 80057f8:	00d9      	lsls	r1, r3, #3
 80057fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057fe:	00d0      	lsls	r0, r2, #3
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	eb12 0208 	adds.w	r2, r2, r8
 8005808:	eb43 0309 	adc.w	r3, r3, r9
 800580c:	f04f 0000 	mov.w	r0, #0
 8005810:	f04f 0100 	mov.w	r1, #0
 8005814:	0259      	lsls	r1, r3, #9
 8005816:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800581a:	0250      	lsls	r0, r2, #9
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4610      	mov	r0, r2
 8005822:	4619      	mov	r1, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	461a      	mov	r2, r3
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	f7fa fd28 	bl	8000280 <__aeabi_uldivmod>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4613      	mov	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	e04a      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800583a:	4b31      	ldr	r3, [pc, #196]	; (8005900 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	099b      	lsrs	r3, r3, #6
 8005840:	461a      	mov	r2, r3
 8005842:	f04f 0300 	mov.w	r3, #0
 8005846:	f240 10ff 	movw	r0, #511	; 0x1ff
 800584a:	f04f 0100 	mov.w	r1, #0
 800584e:	ea02 0400 	and.w	r4, r2, r0
 8005852:	ea03 0501 	and.w	r5, r3, r1
 8005856:	4620      	mov	r0, r4
 8005858:	4629      	mov	r1, r5
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	014b      	lsls	r3, r1, #5
 8005864:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005868:	0142      	lsls	r2, r0, #5
 800586a:	4610      	mov	r0, r2
 800586c:	4619      	mov	r1, r3
 800586e:	1b00      	subs	r0, r0, r4
 8005870:	eb61 0105 	sbc.w	r1, r1, r5
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	018b      	lsls	r3, r1, #6
 800587e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005882:	0182      	lsls	r2, r0, #6
 8005884:	1a12      	subs	r2, r2, r0
 8005886:	eb63 0301 	sbc.w	r3, r3, r1
 800588a:	f04f 0000 	mov.w	r0, #0
 800588e:	f04f 0100 	mov.w	r1, #0
 8005892:	00d9      	lsls	r1, r3, #3
 8005894:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005898:	00d0      	lsls	r0, r2, #3
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	1912      	adds	r2, r2, r4
 80058a0:	eb45 0303 	adc.w	r3, r5, r3
 80058a4:	f04f 0000 	mov.w	r0, #0
 80058a8:	f04f 0100 	mov.w	r1, #0
 80058ac:	0299      	lsls	r1, r3, #10
 80058ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80058b2:	0290      	lsls	r0, r2, #10
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4610      	mov	r0, r2
 80058ba:	4619      	mov	r1, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	461a      	mov	r2, r3
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	f7fa fcdc 	bl	8000280 <__aeabi_uldivmod>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4613      	mov	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058d0:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	0c1b      	lsrs	r3, r3, #16
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	3301      	adds	r3, #1
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e8:	60bb      	str	r3, [r7, #8]
      break;
 80058ea:	e002      	b.n	80058f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80058ee:	60bb      	str	r3, [r7, #8]
      break;
 80058f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058f2:	68bb      	ldr	r3, [r7, #8]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80058fe:	bf00      	nop
 8005900:	40023800 	.word	0x40023800
 8005904:	00f42400 	.word	0x00f42400
 8005908:	007a1200 	.word	0x007a1200

0800590c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005910:	4b03      	ldr	r3, [pc, #12]	; (8005920 <HAL_RCC_GetHCLKFreq+0x14>)
 8005912:	681b      	ldr	r3, [r3, #0]
}
 8005914:	4618      	mov	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	20000010 	.word	0x20000010

08005924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005928:	f7ff fff0 	bl	800590c <HAL_RCC_GetHCLKFreq>
 800592c:	4602      	mov	r2, r0
 800592e:	4b05      	ldr	r3, [pc, #20]	; (8005944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	0a9b      	lsrs	r3, r3, #10
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	4903      	ldr	r1, [pc, #12]	; (8005948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800593a:	5ccb      	ldrb	r3, [r1, r3]
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005940:	4618      	mov	r0, r3
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40023800 	.word	0x40023800
 8005948:	0800b934 	.word	0x0800b934

0800594c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005950:	f7ff ffdc 	bl	800590c <HAL_RCC_GetHCLKFreq>
 8005954:	4602      	mov	r2, r0
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	0b5b      	lsrs	r3, r3, #13
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	4903      	ldr	r1, [pc, #12]	; (8005970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005962:	5ccb      	ldrb	r3, [r1, r3]
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005968:	4618      	mov	r0, r3
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40023800 	.word	0x40023800
 8005970:	0800b934 	.word	0x0800b934

08005974 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e07b      	b.n	8005a7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b00      	cmp	r3, #0
 800598c:	d108      	bne.n	80059a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005996:	d009      	beq.n	80059ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	61da      	str	r2, [r3, #28]
 800599e:	e005      	b.n	80059ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fd fc72 	bl	80032b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059f4:	431a      	orrs	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a30:	ea42 0103 	orr.w	r1, r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	0c1b      	lsrs	r3, r3, #16
 8005a4a:	f003 0104 	and.w	r1, r3, #4
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	f003 0210 	and.w	r2, r3, #16
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69da      	ldr	r2, [r3, #28]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b088      	sub	sp, #32
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	603b      	str	r3, [r7, #0]
 8005a92:	4613      	mov	r3, r2
 8005a94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_SPI_Transmit+0x22>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e126      	b.n	8005cf6 <HAL_SPI_Transmit+0x270>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ab0:	f7fd ff88 	bl	80039c4 <HAL_GetTick>
 8005ab4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d002      	beq.n	8005acc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005aca:	e10b      	b.n	8005ce4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <HAL_SPI_Transmit+0x52>
 8005ad2:	88fb      	ldrh	r3, [r7, #6]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d102      	bne.n	8005ade <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005adc:	e102      	b.n	8005ce4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2203      	movs	r2, #3
 8005ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	88fa      	ldrh	r2, [r7, #6]
 8005af6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b24:	d10f      	bne.n	8005b46 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b50:	2b40      	cmp	r3, #64	; 0x40
 8005b52:	d007      	beq.n	8005b64 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b6c:	d14b      	bne.n	8005c06 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_SPI_Transmit+0xf6>
 8005b76:	8afb      	ldrh	r3, [r7, #22]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d13e      	bne.n	8005bfa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	881a      	ldrh	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8c:	1c9a      	adds	r2, r3, #2
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ba0:	e02b      	b.n	8005bfa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d112      	bne.n	8005bd6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb4:	881a      	ldrh	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc0:	1c9a      	adds	r2, r3, #2
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bd4:	e011      	b.n	8005bfa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bd6:	f7fd fef5 	bl	80039c4 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d803      	bhi.n	8005bee <HAL_SPI_Transmit+0x168>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d102      	bne.n	8005bf4 <HAL_SPI_Transmit+0x16e>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d102      	bne.n	8005bfa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bf8:	e074      	b.n	8005ce4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1ce      	bne.n	8005ba2 <HAL_SPI_Transmit+0x11c>
 8005c04:	e04c      	b.n	8005ca0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <HAL_SPI_Transmit+0x18e>
 8005c0e:	8afb      	ldrh	r3, [r7, #22]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d140      	bne.n	8005c96 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	330c      	adds	r3, #12
 8005c1e:	7812      	ldrb	r2, [r2, #0]
 8005c20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c3a:	e02c      	b.n	8005c96 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d113      	bne.n	8005c72 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	330c      	adds	r3, #12
 8005c54:	7812      	ldrb	r2, [r2, #0]
 8005c56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c70:	e011      	b.n	8005c96 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c72:	f7fd fea7 	bl	80039c4 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d803      	bhi.n	8005c8a <HAL_SPI_Transmit+0x204>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d102      	bne.n	8005c90 <HAL_SPI_Transmit+0x20a>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d102      	bne.n	8005c96 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c94:	e026      	b.n	8005ce4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1cd      	bne.n	8005c3c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fbcb 	bl	8006440 <SPI_EndRxTxTransaction>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	613b      	str	r3, [r7, #16]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	77fb      	strb	r3, [r7, #31]
 8005ce0:	e000      	b.n	8005ce4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005ce2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3720      	adds	r7, #32
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b088      	sub	sp, #32
 8005d02:	af02      	add	r7, sp, #8
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d1a:	d112      	bne.n	8005d42 <HAL_SPI_Receive+0x44>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10e      	bne.n	8005d42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2204      	movs	r2, #4
 8005d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d2c:	88fa      	ldrh	r2, [r7, #6]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	4613      	mov	r3, r2
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f8f1 	bl	8005f20 <HAL_SPI_TransmitReceive>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	e0ea      	b.n	8005f18 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_SPI_Receive+0x52>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e0e3      	b.n	8005f18 <HAL_SPI_Receive+0x21a>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d58:	f7fd fe34 	bl	80039c4 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d002      	beq.n	8005d70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d6e:	e0ca      	b.n	8005f06 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <HAL_SPI_Receive+0x7e>
 8005d76:	88fb      	ldrh	r3, [r7, #6]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d102      	bne.n	8005d82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d80:	e0c1      	b.n	8005f06 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2204      	movs	r2, #4
 8005d86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	88fa      	ldrh	r2, [r7, #6]
 8005d9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc8:	d10f      	bne.n	8005dea <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005de8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df4:	2b40      	cmp	r3, #64	; 0x40
 8005df6:	d007      	beq.n	8005e08 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e06:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d162      	bne.n	8005ed6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e10:	e02e      	b.n	8005e70 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d115      	bne.n	8005e4c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f103 020c 	add.w	r2, r3, #12
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	7812      	ldrb	r2, [r2, #0]
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e4a:	e011      	b.n	8005e70 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e4c:	f7fd fdba 	bl	80039c4 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d803      	bhi.n	8005e64 <HAL_SPI_Receive+0x166>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d102      	bne.n	8005e6a <HAL_SPI_Receive+0x16c>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d102      	bne.n	8005e70 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e6e:	e04a      	b.n	8005f06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1cb      	bne.n	8005e12 <HAL_SPI_Receive+0x114>
 8005e7a:	e031      	b.n	8005ee0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d113      	bne.n	8005eb2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	b292      	uxth	r2, r2
 8005e96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	1c9a      	adds	r2, r3, #2
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005eb0:	e011      	b.n	8005ed6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eb2:	f7fd fd87 	bl	80039c4 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d803      	bhi.n	8005eca <HAL_SPI_Receive+0x1cc>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec8:	d102      	bne.n	8005ed0 <HAL_SPI_Receive+0x1d2>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d102      	bne.n	8005ed6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ed4:	e017      	b.n	8005f06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1cd      	bne.n	8005e7c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fa45 	bl	8006374 <SPI_EndRxTransaction>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	75fb      	strb	r3, [r7, #23]
 8005f02:	e000      	b.n	8005f06 <HAL_SPI_Receive+0x208>
  }

error :
 8005f04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08c      	sub	sp, #48	; 0x30
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_SPI_TransmitReceive+0x26>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e18a      	b.n	800625c <HAL_SPI_TransmitReceive+0x33c>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f4e:	f7fd fd39 	bl	80039c4 <HAL_GetTick>
 8005f52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005f64:	887b      	ldrh	r3, [r7, #2]
 8005f66:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d00f      	beq.n	8005f90 <HAL_SPI_TransmitReceive+0x70>
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f76:	d107      	bne.n	8005f88 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d103      	bne.n	8005f88 <HAL_SPI_TransmitReceive+0x68>
 8005f80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d003      	beq.n	8005f90 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f8e:	e15b      	b.n	8006248 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <HAL_SPI_TransmitReceive+0x82>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <HAL_SPI_TransmitReceive+0x82>
 8005f9c:	887b      	ldrh	r3, [r7, #2]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d103      	bne.n	8005faa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005fa8:	e14e      	b.n	8006248 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d003      	beq.n	8005fbe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2205      	movs	r2, #5
 8005fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	887a      	ldrh	r2, [r7, #2]
 8005fce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	887a      	ldrh	r2, [r7, #2]
 8005fd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	887a      	ldrh	r2, [r7, #2]
 8005fe0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	887a      	ldrh	r2, [r7, #2]
 8005fe6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffe:	2b40      	cmp	r3, #64	; 0x40
 8006000:	d007      	beq.n	8006012 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006010:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800601a:	d178      	bne.n	800610e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <HAL_SPI_TransmitReceive+0x10a>
 8006024:	8b7b      	ldrh	r3, [r7, #26]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d166      	bne.n	80060f8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602e:	881a      	ldrh	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	1c9a      	adds	r2, r3, #2
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006044:	b29b      	uxth	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	b29a      	uxth	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800604e:	e053      	b.n	80060f8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b02      	cmp	r3, #2
 800605c:	d11b      	bne.n	8006096 <HAL_SPI_TransmitReceive+0x176>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d016      	beq.n	8006096 <HAL_SPI_TransmitReceive+0x176>
 8006068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606a:	2b01      	cmp	r3, #1
 800606c:	d113      	bne.n	8006096 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006072:	881a      	ldrh	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	1c9a      	adds	r2, r3, #2
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006088:	b29b      	uxth	r3, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d119      	bne.n	80060d8 <HAL_SPI_TransmitReceive+0x1b8>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d014      	beq.n	80060d8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	b292      	uxth	r2, r2
 80060ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	1c9a      	adds	r2, r3, #2
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060d4:	2301      	movs	r3, #1
 80060d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060d8:	f7fd fc74 	bl	80039c4 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d807      	bhi.n	80060f8 <HAL_SPI_TransmitReceive+0x1d8>
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d003      	beq.n	80060f8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80060f6:	e0a7      	b.n	8006248 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1a6      	bne.n	8006050 <HAL_SPI_TransmitReceive+0x130>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1a1      	bne.n	8006050 <HAL_SPI_TransmitReceive+0x130>
 800610c:	e07c      	b.n	8006208 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <HAL_SPI_TransmitReceive+0x1fc>
 8006116:	8b7b      	ldrh	r3, [r7, #26]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d16b      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	330c      	adds	r3, #12
 8006126:	7812      	ldrb	r2, [r2, #0]
 8006128:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006142:	e057      	b.n	80061f4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b02      	cmp	r3, #2
 8006150:	d11c      	bne.n	800618c <HAL_SPI_TransmitReceive+0x26c>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d017      	beq.n	800618c <HAL_SPI_TransmitReceive+0x26c>
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d114      	bne.n	800618c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	330c      	adds	r3, #12
 800616c:	7812      	ldrb	r2, [r2, #0]
 800616e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b01      	cmp	r3, #1
 8006198:	d119      	bne.n	80061ce <HAL_SPI_TransmitReceive+0x2ae>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d014      	beq.n	80061ce <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061ca:	2301      	movs	r3, #1
 80061cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061ce:	f7fd fbf9 	bl	80039c4 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061da:	429a      	cmp	r2, r3
 80061dc:	d803      	bhi.n	80061e6 <HAL_SPI_TransmitReceive+0x2c6>
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e4:	d102      	bne.n	80061ec <HAL_SPI_TransmitReceive+0x2cc>
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d103      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80061f2:	e029      	b.n	8006248 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1a2      	bne.n	8006144 <HAL_SPI_TransmitReceive+0x224>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d19d      	bne.n	8006144 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 f917 	bl	8006440 <SPI_EndRxTxTransaction>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d006      	beq.n	8006226 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2220      	movs	r2, #32
 8006222:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006224:	e010      	b.n	8006248 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10b      	bne.n	8006246 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	e000      	b.n	8006248 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006246:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006258:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800625c:	4618      	mov	r0, r3
 800625e:	3730      	adds	r7, #48	; 0x30
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	4613      	mov	r3, r2
 8006272:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006274:	f7fd fba6 	bl	80039c4 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	1a9b      	subs	r3, r3, r2
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	4413      	add	r3, r2
 8006282:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006284:	f7fd fb9e 	bl	80039c4 <HAL_GetTick>
 8006288:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800628a:	4b39      	ldr	r3, [pc, #228]	; (8006370 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	015b      	lsls	r3, r3, #5
 8006290:	0d1b      	lsrs	r3, r3, #20
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	fb02 f303 	mul.w	r3, r2, r3
 8006298:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800629a:	e054      	b.n	8006346 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d050      	beq.n	8006346 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062a4:	f7fd fb8e 	bl	80039c4 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d902      	bls.n	80062ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d13d      	bne.n	8006336 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062d2:	d111      	bne.n	80062f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062dc:	d004      	beq.n	80062e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e6:	d107      	bne.n	80062f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006300:	d10f      	bne.n	8006322 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006320:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e017      	b.n	8006366 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	3b01      	subs	r3, #1
 8006344:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4013      	ands	r3, r2
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	429a      	cmp	r2, r3
 8006354:	bf0c      	ite	eq
 8006356:	2301      	moveq	r3, #1
 8006358:	2300      	movne	r3, #0
 800635a:	b2db      	uxtb	r3, r3
 800635c:	461a      	mov	r2, r3
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	429a      	cmp	r2, r3
 8006362:	d19b      	bne.n	800629c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3720      	adds	r7, #32
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000010 	.word	0x20000010

08006374 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af02      	add	r7, sp, #8
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006388:	d111      	bne.n	80063ae <SPI_EndRxTransaction+0x3a>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006392:	d004      	beq.n	800639e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800639c:	d107      	bne.n	80063ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063b6:	d12a      	bne.n	800640e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063c0:	d012      	beq.n	80063e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2200      	movs	r2, #0
 80063ca:	2180      	movs	r1, #128	; 0x80
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f7ff ff49 	bl	8006264 <SPI_WaitFlagStateUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d02d      	beq.n	8006434 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063dc:	f043 0220 	orr.w	r2, r3, #32
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e026      	b.n	8006436 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2200      	movs	r2, #0
 80063f0:	2101      	movs	r1, #1
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7ff ff36 	bl	8006264 <SPI_WaitFlagStateUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d01a      	beq.n	8006434 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006402:	f043 0220 	orr.w	r2, r3, #32
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e013      	b.n	8006436 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2200      	movs	r2, #0
 8006416:	2101      	movs	r1, #1
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f7ff ff23 	bl	8006264 <SPI_WaitFlagStateUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d007      	beq.n	8006434 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006428:	f043 0220 	orr.w	r2, r3, #32
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e000      	b.n	8006436 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800644c:	4b1b      	ldr	r3, [pc, #108]	; (80064bc <SPI_EndRxTxTransaction+0x7c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1b      	ldr	r2, [pc, #108]	; (80064c0 <SPI_EndRxTxTransaction+0x80>)
 8006452:	fba2 2303 	umull	r2, r3, r2, r3
 8006456:	0d5b      	lsrs	r3, r3, #21
 8006458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800645c:	fb02 f303 	mul.w	r3, r2, r3
 8006460:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800646a:	d112      	bne.n	8006492 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2200      	movs	r2, #0
 8006474:	2180      	movs	r1, #128	; 0x80
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f7ff fef4 	bl	8006264 <SPI_WaitFlagStateUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d016      	beq.n	80064b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006486:	f043 0220 	orr.w	r2, r3, #32
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e00f      	b.n	80064b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00a      	beq.n	80064ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	3b01      	subs	r3, #1
 800649c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a8:	2b80      	cmp	r3, #128	; 0x80
 80064aa:	d0f2      	beq.n	8006492 <SPI_EndRxTxTransaction+0x52>
 80064ac:	e000      	b.n	80064b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80064ae:	bf00      	nop
  }

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20000010 	.word	0x20000010
 80064c0:	165e9f81 	.word	0x165e9f81

080064c4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e034      	b.n	8006544 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f7fb fd64 	bl	8001fbc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3308      	adds	r3, #8
 80064fc:	4619      	mov	r1, r3
 80064fe:	4610      	mov	r0, r2
 8006500:	f001 fc6e 	bl	8007de0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6818      	ldr	r0, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	461a      	mov	r2, r3
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	f001 fcb8 	bl	8007e84 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6858      	ldr	r0, [r3, #4]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006520:	6879      	ldr	r1, [r7, #4]
 8006522:	f001 fced 	bl	8007f00 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	6892      	ldr	r2, [r2, #8]
 800652e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	6892      	ldr	r2, [r2, #8]
 800653a:	f041 0101 	orr.w	r1, r1, #1
 800653e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e041      	b.n	80065e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fc ffde 	bl	8003534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3304      	adds	r3, #4
 8006588:	4619      	mov	r1, r3
 800658a:	4610      	mov	r0, r2
 800658c:	f000 fa96 	bl	8006abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d001      	beq.n	8006604 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e04e      	b.n	80066a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a23      	ldr	r2, [pc, #140]	; (80066b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d022      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x80>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800662e:	d01d      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x80>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a1f      	ldr	r2, [pc, #124]	; (80066b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d018      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x80>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a1e      	ldr	r2, [pc, #120]	; (80066b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d013      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x80>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a1c      	ldr	r2, [pc, #112]	; (80066bc <HAL_TIM_Base_Start_IT+0xd0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00e      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x80>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a1b      	ldr	r2, [pc, #108]	; (80066c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d009      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x80>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a19      	ldr	r2, [pc, #100]	; (80066c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d004      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x80>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a18      	ldr	r2, [pc, #96]	; (80066c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d111      	bne.n	8006690 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b06      	cmp	r3, #6
 800667c:	d010      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0201 	orr.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800668e:	e007      	b.n	80066a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0201 	orr.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	40010000 	.word	0x40010000
 80066b4:	40000400 	.word	0x40000400
 80066b8:	40000800 	.word	0x40000800
 80066bc:	40000c00 	.word	0x40000c00
 80066c0:	40010400 	.word	0x40010400
 80066c4:	40014000 	.word	0x40014000
 80066c8:	40001800 	.word	0x40001800

080066cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d122      	bne.n	8006728 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d11b      	bne.n	8006728 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f06f 0202 	mvn.w	r2, #2
 80066f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	f003 0303 	and.w	r3, r3, #3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f9b5 	bl	8006a7e <HAL_TIM_IC_CaptureCallback>
 8006714:	e005      	b.n	8006722 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f9a7 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f9b8 	bl	8006a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	f003 0304 	and.w	r3, r3, #4
 8006732:	2b04      	cmp	r3, #4
 8006734:	d122      	bne.n	800677c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b04      	cmp	r3, #4
 8006742:	d11b      	bne.n	800677c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f06f 0204 	mvn.w	r2, #4
 800674c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2202      	movs	r2, #2
 8006752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f98b 	bl	8006a7e <HAL_TIM_IC_CaptureCallback>
 8006768:	e005      	b.n	8006776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f97d 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f98e 	bl	8006a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b08      	cmp	r3, #8
 8006788:	d122      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f003 0308 	and.w	r3, r3, #8
 8006794:	2b08      	cmp	r3, #8
 8006796:	d11b      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f06f 0208 	mvn.w	r2, #8
 80067a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2204      	movs	r2, #4
 80067a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	f003 0303 	and.w	r3, r3, #3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f961 	bl	8006a7e <HAL_TIM_IC_CaptureCallback>
 80067bc:	e005      	b.n	80067ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f953 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f964 	bl	8006a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0310 	and.w	r3, r3, #16
 80067da:	2b10      	cmp	r3, #16
 80067dc:	d122      	bne.n	8006824 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b10      	cmp	r3, #16
 80067ea:	d11b      	bne.n	8006824 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0210 	mvn.w	r2, #16
 80067f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2208      	movs	r2, #8
 80067fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f937 	bl	8006a7e <HAL_TIM_IC_CaptureCallback>
 8006810:	e005      	b.n	800681e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f929 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f93a 	bl	8006a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b01      	cmp	r3, #1
 8006830:	d10e      	bne.n	8006850 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b01      	cmp	r3, #1
 800683e:	d107      	bne.n	8006850 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f06f 0201 	mvn.w	r2, #1
 8006848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fc fc58 	bl	8003100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685a:	2b80      	cmp	r3, #128	; 0x80
 800685c:	d10e      	bne.n	800687c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006868:	2b80      	cmp	r3, #128	; 0x80
 800686a:	d107      	bne.n	800687c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fae0 	bl	8006e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	d10e      	bne.n	80068a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006894:	2b40      	cmp	r3, #64	; 0x40
 8006896:	d107      	bne.n	80068a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f8ff 	bl	8006aa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f003 0320 	and.w	r3, r3, #32
 80068b2:	2b20      	cmp	r3, #32
 80068b4:	d10e      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d107      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f06f 0220 	mvn.w	r2, #32
 80068cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 faaa 	bl	8006e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068d4:	bf00      	nop
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_TIM_ConfigClockSource+0x1c>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e0b4      	b.n	8006a62 <HAL_TIM_ConfigClockSource+0x186>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800691e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006930:	d03e      	beq.n	80069b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006936:	f200 8087 	bhi.w	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 800693a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693e:	f000 8086 	beq.w	8006a4e <HAL_TIM_ConfigClockSource+0x172>
 8006942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006946:	d87f      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 8006948:	2b70      	cmp	r3, #112	; 0x70
 800694a:	d01a      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0xa6>
 800694c:	2b70      	cmp	r3, #112	; 0x70
 800694e:	d87b      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 8006950:	2b60      	cmp	r3, #96	; 0x60
 8006952:	d050      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x11a>
 8006954:	2b60      	cmp	r3, #96	; 0x60
 8006956:	d877      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 8006958:	2b50      	cmp	r3, #80	; 0x50
 800695a:	d03c      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0xfa>
 800695c:	2b50      	cmp	r3, #80	; 0x50
 800695e:	d873      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 8006960:	2b40      	cmp	r3, #64	; 0x40
 8006962:	d058      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0x13a>
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	d86f      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 8006968:	2b30      	cmp	r3, #48	; 0x30
 800696a:	d064      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x15a>
 800696c:	2b30      	cmp	r3, #48	; 0x30
 800696e:	d86b      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 8006970:	2b20      	cmp	r3, #32
 8006972:	d060      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x15a>
 8006974:	2b20      	cmp	r3, #32
 8006976:	d867      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 8006978:	2b00      	cmp	r3, #0
 800697a:	d05c      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x15a>
 800697c:	2b10      	cmp	r3, #16
 800697e:	d05a      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x15a>
 8006980:	e062      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6899      	ldr	r1, [r3, #8]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f000 f9ad 	bl	8006cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	609a      	str	r2, [r3, #8]
      break;
 80069ae:	e04f      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	6899      	ldr	r1, [r3, #8]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f000 f996 	bl	8006cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069d2:	609a      	str	r2, [r3, #8]
      break;
 80069d4:	e03c      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	6859      	ldr	r1, [r3, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	461a      	mov	r2, r3
 80069e4:	f000 f90a 	bl	8006bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2150      	movs	r1, #80	; 0x50
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 f963 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 80069f4:	e02c      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6859      	ldr	r1, [r3, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	461a      	mov	r2, r3
 8006a04:	f000 f929 	bl	8006c5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2160      	movs	r1, #96	; 0x60
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 f953 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 8006a14:	e01c      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6859      	ldr	r1, [r3, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	461a      	mov	r2, r3
 8006a24:	f000 f8ea 	bl	8006bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2140      	movs	r1, #64	; 0x40
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 f943 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 8006a34:	e00c      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4610      	mov	r0, r2
 8006a42:	f000 f93a 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 8006a46:	e003      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a4c:	e000      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
	...

08006abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a40      	ldr	r2, [pc, #256]	; (8006bd0 <TIM_Base_SetConfig+0x114>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d013      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ada:	d00f      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a3d      	ldr	r2, [pc, #244]	; (8006bd4 <TIM_Base_SetConfig+0x118>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00b      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a3c      	ldr	r2, [pc, #240]	; (8006bd8 <TIM_Base_SetConfig+0x11c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d007      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a3b      	ldr	r2, [pc, #236]	; (8006bdc <TIM_Base_SetConfig+0x120>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d003      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a3a      	ldr	r2, [pc, #232]	; (8006be0 <TIM_Base_SetConfig+0x124>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d108      	bne.n	8006b0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a2f      	ldr	r2, [pc, #188]	; (8006bd0 <TIM_Base_SetConfig+0x114>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d02b      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1c:	d027      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a2c      	ldr	r2, [pc, #176]	; (8006bd4 <TIM_Base_SetConfig+0x118>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d023      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2b      	ldr	r2, [pc, #172]	; (8006bd8 <TIM_Base_SetConfig+0x11c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d01f      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a2a      	ldr	r2, [pc, #168]	; (8006bdc <TIM_Base_SetConfig+0x120>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d01b      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a29      	ldr	r2, [pc, #164]	; (8006be0 <TIM_Base_SetConfig+0x124>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d017      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a28      	ldr	r2, [pc, #160]	; (8006be4 <TIM_Base_SetConfig+0x128>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a27      	ldr	r2, [pc, #156]	; (8006be8 <TIM_Base_SetConfig+0x12c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00f      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a26      	ldr	r2, [pc, #152]	; (8006bec <TIM_Base_SetConfig+0x130>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00b      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a25      	ldr	r2, [pc, #148]	; (8006bf0 <TIM_Base_SetConfig+0x134>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d007      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a24      	ldr	r2, [pc, #144]	; (8006bf4 <TIM_Base_SetConfig+0x138>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d003      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a23      	ldr	r2, [pc, #140]	; (8006bf8 <TIM_Base_SetConfig+0x13c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d108      	bne.n	8006b80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a0a      	ldr	r2, [pc, #40]	; (8006bd0 <TIM_Base_SetConfig+0x114>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d003      	beq.n	8006bb4 <TIM_Base_SetConfig+0xf8>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a0c      	ldr	r2, [pc, #48]	; (8006be0 <TIM_Base_SetConfig+0x124>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d103      	bne.n	8006bbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	615a      	str	r2, [r3, #20]
}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40000400 	.word	0x40000400
 8006bd8:	40000800 	.word	0x40000800
 8006bdc:	40000c00 	.word	0x40000c00
 8006be0:	40010400 	.word	0x40010400
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40014400 	.word	0x40014400
 8006bec:	40014800 	.word	0x40014800
 8006bf0:	40001800 	.word	0x40001800
 8006bf4:	40001c00 	.word	0x40001c00
 8006bf8:	40002000 	.word	0x40002000

08006bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	f023 0201 	bic.w	r2, r3, #1
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f023 030a 	bic.w	r3, r3, #10
 8006c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	621a      	str	r2, [r3, #32]
}
 8006c4e:	bf00      	nop
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b087      	sub	sp, #28
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f023 0210 	bic.w	r2, r3, #16
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	031b      	lsls	r3, r3, #12
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	621a      	str	r2, [r3, #32]
}
 8006cae:	bf00      	nop
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b085      	sub	sp, #20
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	f043 0307 	orr.w	r3, r3, #7
 8006cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	609a      	str	r2, [r3, #8]
}
 8006ce4:	bf00      	nop
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	021a      	lsls	r2, r3, #8
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	609a      	str	r2, [r3, #8]
}
 8006d24:	bf00      	nop
 8006d26:	371c      	adds	r7, #28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e05a      	b.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a21      	ldr	r2, [pc, #132]	; (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d022      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d94:	d01d      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a1d      	ldr	r2, [pc, #116]	; (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d018      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a1b      	ldr	r2, [pc, #108]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d013      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a1a      	ldr	r2, [pc, #104]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00e      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a18      	ldr	r2, [pc, #96]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d009      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a17      	ldr	r2, [pc, #92]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d004      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a15      	ldr	r2, [pc, #84]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d10c      	bne.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	40010000 	.word	0x40010000
 8006e10:	40000400 	.word	0x40000400
 8006e14:	40000800 	.word	0x40000800
 8006e18:	40000c00 	.word	0x40000c00
 8006e1c:	40010400 	.word	0x40010400
 8006e20:	40014000 	.word	0x40014000
 8006e24:	40001800 	.word	0x40001800

08006e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e03f      	b.n	8006ee2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fc fc86 	bl	8003788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2224      	movs	r2, #36	; 0x24
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fddb 	bl	8007a50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691a      	ldr	r2, [r3, #16]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	695a      	ldr	r2, [r3, #20]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68da      	ldr	r2, [r3, #12]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b08a      	sub	sp, #40	; 0x28
 8006eee:	af02      	add	r7, sp, #8
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	603b      	str	r3, [r7, #0]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b20      	cmp	r3, #32
 8006f08:	d17c      	bne.n	8007004 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <HAL_UART_Transmit+0x2c>
 8006f10:	88fb      	ldrh	r3, [r7, #6]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e075      	b.n	8007006 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_UART_Transmit+0x3e>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e06e      	b.n	8007006 <HAL_UART_Transmit+0x11c>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2221      	movs	r2, #33	; 0x21
 8006f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f3e:	f7fc fd41 	bl	80039c4 <HAL_GetTick>
 8006f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	88fa      	ldrh	r2, [r7, #6]
 8006f48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	88fa      	ldrh	r2, [r7, #6]
 8006f4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f58:	d108      	bne.n	8006f6c <HAL_UART_Transmit+0x82>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d104      	bne.n	8006f6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	61bb      	str	r3, [r7, #24]
 8006f6a:	e003      	b.n	8006f74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f7c:	e02a      	b.n	8006fd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2200      	movs	r2, #0
 8006f86:	2180      	movs	r1, #128	; 0x80
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fb1f 	bl	80075cc <UART_WaitOnFlagUntilTimeout>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e036      	b.n	8007006 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10b      	bne.n	8006fb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	3302      	adds	r3, #2
 8006fb2:	61bb      	str	r3, [r7, #24]
 8006fb4:	e007      	b.n	8006fc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	781a      	ldrb	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1cf      	bne.n	8006f7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2140      	movs	r1, #64	; 0x40
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 faef 	bl	80075cc <UART_WaitOnFlagUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e006      	b.n	8007006 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	e000      	b.n	8007006 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007004:	2302      	movs	r3, #2
  }
}
 8007006:	4618      	mov	r0, r3
 8007008:	3720      	adds	r7, #32
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	4613      	mov	r3, r2
 800701a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b20      	cmp	r3, #32
 8007026:	d11d      	bne.n	8007064 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <HAL_UART_Receive_IT+0x26>
 800702e:	88fb      	ldrh	r3, [r7, #6]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e016      	b.n	8007066 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800703e:	2b01      	cmp	r3, #1
 8007040:	d101      	bne.n	8007046 <HAL_UART_Receive_IT+0x38>
 8007042:	2302      	movs	r3, #2
 8007044:	e00f      	b.n	8007066 <HAL_UART_Receive_IT+0x58>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007054:	88fb      	ldrh	r3, [r7, #6]
 8007056:	461a      	mov	r2, r3
 8007058:	68b9      	ldr	r1, [r7, #8]
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 fb24 	bl	80076a8 <UART_Start_Receive_IT>
 8007060:	4603      	mov	r3, r0
 8007062:	e000      	b.n	8007066 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007064:	2302      	movs	r3, #2
  }
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b0ba      	sub	sp, #232	; 0xe8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007096:	2300      	movs	r3, #0
 8007098:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800709c:	2300      	movs	r3, #0
 800709e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a6:	f003 030f 	and.w	r3, r3, #15
 80070aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10f      	bne.n	80070d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <HAL_UART_IRQHandler+0x66>
 80070c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fc03 	bl	80078da <UART_Receive_IT>
      return;
 80070d4:	e256      	b.n	8007584 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 80de 	beq.w	800729c <HAL_UART_IRQHandler+0x22c>
 80070e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d106      	bne.n	80070fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 80d1 	beq.w	800729c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00b      	beq.n	800711e <HAL_UART_IRQHandler+0xae>
 8007106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800710a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800710e:	2b00      	cmp	r3, #0
 8007110:	d005      	beq.n	800711e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	f043 0201 	orr.w	r2, r3, #1
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800711e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007122:	f003 0304 	and.w	r3, r3, #4
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00b      	beq.n	8007142 <HAL_UART_IRQHandler+0xd2>
 800712a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b00      	cmp	r3, #0
 8007134:	d005      	beq.n	8007142 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	f043 0202 	orr.w	r2, r3, #2
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00b      	beq.n	8007166 <HAL_UART_IRQHandler+0xf6>
 800714e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d005      	beq.n	8007166 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	f043 0204 	orr.w	r2, r3, #4
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d011      	beq.n	8007196 <HAL_UART_IRQHandler+0x126>
 8007172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d105      	bne.n	800718a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800717e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d005      	beq.n	8007196 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	f043 0208 	orr.w	r2, r3, #8
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 81ed 	beq.w	800757a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d008      	beq.n	80071be <HAL_UART_IRQHandler+0x14e>
 80071ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d002      	beq.n	80071be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fb8e 	bl	80078da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c8:	2b40      	cmp	r3, #64	; 0x40
 80071ca:	bf0c      	ite	eq
 80071cc:	2301      	moveq	r3, #1
 80071ce:	2300      	movne	r3, #0
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d103      	bne.n	80071ea <HAL_UART_IRQHandler+0x17a>
 80071e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d04f      	beq.n	800728a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fa96 	bl	800771c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fa:	2b40      	cmp	r3, #64	; 0x40
 80071fc:	d141      	bne.n	8007282 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3314      	adds	r3, #20
 8007204:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007214:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800721c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3314      	adds	r3, #20
 8007226:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800722a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800722e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007236:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1d9      	bne.n	80071fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	2b00      	cmp	r3, #0
 8007250:	d013      	beq.n	800727a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	4a7d      	ldr	r2, [pc, #500]	; (800744c <HAL_UART_IRQHandler+0x3dc>)
 8007258:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	4618      	mov	r0, r3
 8007260:	f7fc fd61 	bl	8003d26 <HAL_DMA_Abort_IT>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d016      	beq.n	8007298 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007274:	4610      	mov	r0, r2
 8007276:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007278:	e00e      	b.n	8007298 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f990 	bl	80075a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007280:	e00a      	b.n	8007298 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f98c 	bl	80075a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007288:	e006      	b.n	8007298 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f988 	bl	80075a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007296:	e170      	b.n	800757a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007298:	bf00      	nop
    return;
 800729a:	e16e      	b.n	800757a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	f040 814a 	bne.w	800753a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072aa:	f003 0310 	and.w	r3, r3, #16
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 8143 	beq.w	800753a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b8:	f003 0310 	and.w	r3, r3, #16
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 813c 	beq.w	800753a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072c2:	2300      	movs	r3, #0
 80072c4:	60bb      	str	r3, [r7, #8]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60bb      	str	r3, [r7, #8]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	60bb      	str	r3, [r7, #8]
 80072d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e2:	2b40      	cmp	r3, #64	; 0x40
 80072e4:	f040 80b4 	bne.w	8007450 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 8140 	beq.w	800757e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007306:	429a      	cmp	r2, r3
 8007308:	f080 8139 	bcs.w	800757e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007312:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800731e:	f000 8088 	beq.w	8007432 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	330c      	adds	r3, #12
 8007328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007330:	e853 3f00 	ldrex	r3, [r3]
 8007334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007338:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800733c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007340:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	330c      	adds	r3, #12
 800734a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800734e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800735a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1d9      	bne.n	8007322 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3314      	adds	r3, #20
 8007374:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800737e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007380:	f023 0301 	bic.w	r3, r3, #1
 8007384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3314      	adds	r3, #20
 800738e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007392:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007396:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800739a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e1      	bne.n	800736e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3314      	adds	r3, #20
 80073b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3314      	adds	r3, #20
 80073ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e3      	bne.n	80073aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	330c      	adds	r3, #12
 80073f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fa:	e853 3f00 	ldrex	r3, [r3]
 80073fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007402:	f023 0310 	bic.w	r3, r3, #16
 8007406:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	330c      	adds	r3, #12
 8007410:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007414:	65ba      	str	r2, [r7, #88]	; 0x58
 8007416:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800741a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800741c:	e841 2300 	strex	r3, r2, [r1]
 8007420:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e3      	bne.n	80073f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	4618      	mov	r0, r3
 800742e:	f7fc fc0a 	bl	8003c46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800743a:	b29b      	uxth	r3, r3
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	b29b      	uxth	r3, r3
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f8b6 	bl	80075b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007448:	e099      	b.n	800757e <HAL_UART_IRQHandler+0x50e>
 800744a:	bf00      	nop
 800744c:	080077e3 	.word	0x080077e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007458:	b29b      	uxth	r3, r3
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 808b 	beq.w	8007582 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800746c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 8086 	beq.w	8007582 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	330c      	adds	r3, #12
 800747c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007488:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800748c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	330c      	adds	r3, #12
 8007496:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800749a:	647a      	str	r2, [r7, #68]	; 0x44
 800749c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074a2:	e841 2300 	strex	r3, r2, [r1]
 80074a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1e3      	bne.n	8007476 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3314      	adds	r3, #20
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	623b      	str	r3, [r7, #32]
   return(result);
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	f023 0301 	bic.w	r3, r3, #1
 80074c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3314      	adds	r3, #20
 80074ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074d2:	633a      	str	r2, [r7, #48]	; 0x30
 80074d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e3      	bne.n	80074ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	330c      	adds	r3, #12
 80074fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	e853 3f00 	ldrex	r3, [r3]
 8007502:	60fb      	str	r3, [r7, #12]
   return(result);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0310 	bic.w	r3, r3, #16
 800750a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	330c      	adds	r3, #12
 8007514:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007518:	61fa      	str	r2, [r7, #28]
 800751a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	69b9      	ldr	r1, [r7, #24]
 800751e:	69fa      	ldr	r2, [r7, #28]
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	617b      	str	r3, [r7, #20]
   return(result);
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e3      	bne.n	80074f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800752c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f83e 	bl	80075b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007538:	e023      	b.n	8007582 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800753a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007542:	2b00      	cmp	r3, #0
 8007544:	d009      	beq.n	800755a <HAL_UART_IRQHandler+0x4ea>
 8007546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800754a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f959 	bl	800780a <UART_Transmit_IT>
    return;
 8007558:	e014      	b.n	8007584 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800755a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800755e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00e      	beq.n	8007584 <HAL_UART_IRQHandler+0x514>
 8007566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800756a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756e:	2b00      	cmp	r3, #0
 8007570:	d008      	beq.n	8007584 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f999 	bl	80078aa <UART_EndTransmit_IT>
    return;
 8007578:	e004      	b.n	8007584 <HAL_UART_IRQHandler+0x514>
    return;
 800757a:	bf00      	nop
 800757c:	e002      	b.n	8007584 <HAL_UART_IRQHandler+0x514>
      return;
 800757e:	bf00      	nop
 8007580:	e000      	b.n	8007584 <HAL_UART_IRQHandler+0x514>
      return;
 8007582:	bf00      	nop
  }
}
 8007584:	37e8      	adds	r7, #232	; 0xe8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop

0800758c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b090      	sub	sp, #64	; 0x40
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	603b      	str	r3, [r7, #0]
 80075d8:	4613      	mov	r3, r2
 80075da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075dc:	e050      	b.n	8007680 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e4:	d04c      	beq.n	8007680 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80075e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d007      	beq.n	80075fc <UART_WaitOnFlagUntilTimeout+0x30>
 80075ec:	f7fc f9ea 	bl	80039c4 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d241      	bcs.n	8007680 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	330c      	adds	r3, #12
 8007602:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	330c      	adds	r3, #12
 800761a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800761c:	637a      	str	r2, [r7, #52]	; 0x34
 800761e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007620:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007624:	e841 2300 	strex	r3, r2, [r1]
 8007628:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800762a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1e5      	bne.n	80075fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3314      	adds	r3, #20
 8007636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	e853 3f00 	ldrex	r3, [r3]
 800763e:	613b      	str	r3, [r7, #16]
   return(result);
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	f023 0301 	bic.w	r3, r3, #1
 8007646:	63bb      	str	r3, [r7, #56]	; 0x38
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3314      	adds	r3, #20
 800764e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007650:	623a      	str	r2, [r7, #32]
 8007652:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	69f9      	ldr	r1, [r7, #28]
 8007656:	6a3a      	ldr	r2, [r7, #32]
 8007658:	e841 2300 	strex	r3, r2, [r1]
 800765c:	61bb      	str	r3, [r7, #24]
   return(result);
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e5      	bne.n	8007630 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2220      	movs	r2, #32
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2220      	movs	r2, #32
 8007670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e00f      	b.n	80076a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	4013      	ands	r3, r2
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	429a      	cmp	r2, r3
 800768e:	bf0c      	ite	eq
 8007690:	2301      	moveq	r3, #1
 8007692:	2300      	movne	r3, #0
 8007694:	b2db      	uxtb	r3, r3
 8007696:	461a      	mov	r2, r3
 8007698:	79fb      	ldrb	r3, [r7, #7]
 800769a:	429a      	cmp	r2, r3
 800769c:	d09f      	beq.n	80075de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3740      	adds	r7, #64	; 0x40
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	4613      	mov	r3, r2
 80076b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	88fa      	ldrh	r2, [r7, #6]
 80076c0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	88fa      	ldrh	r2, [r7, #6]
 80076c6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2222      	movs	r2, #34	; 0x22
 80076d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68da      	ldr	r2, [r3, #12]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076ec:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	695a      	ldr	r2, [r3, #20]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f042 0201 	orr.w	r2, r2, #1
 80076fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68da      	ldr	r2, [r3, #12]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f042 0220 	orr.w	r2, r2, #32
 800770c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800771c:	b480      	push	{r7}
 800771e:	b095      	sub	sp, #84	; 0x54
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	330c      	adds	r3, #12
 800772a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800773a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	330c      	adds	r3, #12
 8007742:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007744:	643a      	str	r2, [r7, #64]	; 0x40
 8007746:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800774a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e5      	bne.n	8007724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3314      	adds	r3, #20
 800775e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	e853 3f00 	ldrex	r3, [r3]
 8007766:	61fb      	str	r3, [r7, #28]
   return(result);
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	f023 0301 	bic.w	r3, r3, #1
 800776e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3314      	adds	r3, #20
 8007776:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007778:	62fa      	str	r2, [r7, #44]	; 0x2c
 800777a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800777e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007780:	e841 2300 	strex	r3, r2, [r1]
 8007784:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e5      	bne.n	8007758 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007790:	2b01      	cmp	r3, #1
 8007792:	d119      	bne.n	80077c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	330c      	adds	r3, #12
 800779a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f023 0310 	bic.w	r3, r3, #16
 80077aa:	647b      	str	r3, [r7, #68]	; 0x44
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	330c      	adds	r3, #12
 80077b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077b4:	61ba      	str	r2, [r7, #24]
 80077b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6979      	ldr	r1, [r7, #20]
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	613b      	str	r3, [r7, #16]
   return(result);
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e5      	bne.n	8007794 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077d6:	bf00      	nop
 80077d8:	3754      	adds	r7, #84	; 0x54
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b084      	sub	sp, #16
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f7ff fecf 	bl	80075a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007802:	bf00      	nop
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800780a:	b480      	push	{r7}
 800780c:	b085      	sub	sp, #20
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b21      	cmp	r3, #33	; 0x21
 800781c:	d13e      	bne.n	800789c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007826:	d114      	bne.n	8007852 <UART_Transmit_IT+0x48>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d110      	bne.n	8007852 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a1b      	ldr	r3, [r3, #32]
 8007834:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007844:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	1c9a      	adds	r2, r3, #2
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	621a      	str	r2, [r3, #32]
 8007850:	e008      	b.n	8007864 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	1c59      	adds	r1, r3, #1
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	6211      	str	r1, [r2, #32]
 800785c:	781a      	ldrb	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007868:	b29b      	uxth	r3, r3
 800786a:	3b01      	subs	r3, #1
 800786c:	b29b      	uxth	r3, r3
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	4619      	mov	r1, r3
 8007872:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10f      	bne.n	8007898 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68da      	ldr	r2, [r3, #12]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007886:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007896:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	e000      	b.n	800789e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800789c:	2302      	movs	r3, #2
  }
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2220      	movs	r2, #32
 80078c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7ff fe5e 	bl	800758c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b08c      	sub	sp, #48	; 0x30
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b22      	cmp	r3, #34	; 0x22
 80078ec:	f040 80ab 	bne.w	8007a46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f8:	d117      	bne.n	800792a <UART_Receive_IT+0x50>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d113      	bne.n	800792a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	b29b      	uxth	r3, r3
 8007914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007918:	b29a      	uxth	r2, r3
 800791a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007922:	1c9a      	adds	r2, r3, #2
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	629a      	str	r2, [r3, #40]	; 0x28
 8007928:	e026      	b.n	8007978 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007930:	2300      	movs	r3, #0
 8007932:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800793c:	d007      	beq.n	800794e <UART_Receive_IT+0x74>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10a      	bne.n	800795c <UART_Receive_IT+0x82>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d106      	bne.n	800795c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	b2da      	uxtb	r2, r3
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	701a      	strb	r2, [r3, #0]
 800795a:	e008      	b.n	800796e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	b2db      	uxtb	r3, r3
 8007964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007968:	b2da      	uxtb	r2, r3
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800797c:	b29b      	uxth	r3, r3
 800797e:	3b01      	subs	r3, #1
 8007980:	b29b      	uxth	r3, r3
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	4619      	mov	r1, r3
 8007986:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007988:	2b00      	cmp	r3, #0
 800798a:	d15a      	bne.n	8007a42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0220 	bic.w	r2, r2, #32
 800799a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	695a      	ldr	r2, [r3, #20]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0201 	bic.w	r2, r2, #1
 80079ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2220      	movs	r2, #32
 80079c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d135      	bne.n	8007a38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	330c      	adds	r3, #12
 80079d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	613b      	str	r3, [r7, #16]
   return(result);
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f023 0310 	bic.w	r3, r3, #16
 80079e8:	627b      	str	r3, [r7, #36]	; 0x24
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	330c      	adds	r3, #12
 80079f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f2:	623a      	str	r2, [r7, #32]
 80079f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f6:	69f9      	ldr	r1, [r7, #28]
 80079f8:	6a3a      	ldr	r2, [r7, #32]
 80079fa:	e841 2300 	strex	r3, r2, [r1]
 80079fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1e5      	bne.n	80079d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0310 	and.w	r3, r3, #16
 8007a10:	2b10      	cmp	r3, #16
 8007a12:	d10a      	bne.n	8007a2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a14:	2300      	movs	r3, #0
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff fdbf 	bl	80075b4 <HAL_UARTEx_RxEventCallback>
 8007a36:	e002      	b.n	8007a3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7fb fe1f 	bl	800367c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e002      	b.n	8007a48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	e000      	b.n	8007a48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a46:	2302      	movs	r3, #2
  }
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3730      	adds	r7, #48	; 0x30
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	b09f      	sub	sp, #124	; 0x7c
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a66:	68d9      	ldr	r1, [r3, #12]
 8007a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	ea40 0301 	orr.w	r3, r0, r1
 8007a70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	431a      	orrs	r2, r3
 8007a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a94:	f021 010c 	bic.w	r1, r1, #12
 8007a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a9e:	430b      	orrs	r3, r1
 8007aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aae:	6999      	ldr	r1, [r3, #24]
 8007ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	ea40 0301 	orr.w	r3, r0, r1
 8007ab8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	4bc5      	ldr	r3, [pc, #788]	; (8007dd4 <UART_SetConfig+0x384>)
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d004      	beq.n	8007ace <UART_SetConfig+0x7e>
 8007ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	4bc3      	ldr	r3, [pc, #780]	; (8007dd8 <UART_SetConfig+0x388>)
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d103      	bne.n	8007ad6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ace:	f7fd ff3d 	bl	800594c <HAL_RCC_GetPCLK2Freq>
 8007ad2:	6778      	str	r0, [r7, #116]	; 0x74
 8007ad4:	e002      	b.n	8007adc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ad6:	f7fd ff25 	bl	8005924 <HAL_RCC_GetPCLK1Freq>
 8007ada:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ade:	69db      	ldr	r3, [r3, #28]
 8007ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ae4:	f040 80b6 	bne.w	8007c54 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aea:	461c      	mov	r4, r3
 8007aec:	f04f 0500 	mov.w	r5, #0
 8007af0:	4622      	mov	r2, r4
 8007af2:	462b      	mov	r3, r5
 8007af4:	1891      	adds	r1, r2, r2
 8007af6:	6439      	str	r1, [r7, #64]	; 0x40
 8007af8:	415b      	adcs	r3, r3
 8007afa:	647b      	str	r3, [r7, #68]	; 0x44
 8007afc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b00:	1912      	adds	r2, r2, r4
 8007b02:	eb45 0303 	adc.w	r3, r5, r3
 8007b06:	f04f 0000 	mov.w	r0, #0
 8007b0a:	f04f 0100 	mov.w	r1, #0
 8007b0e:	00d9      	lsls	r1, r3, #3
 8007b10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b14:	00d0      	lsls	r0, r2, #3
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	1911      	adds	r1, r2, r4
 8007b1c:	6639      	str	r1, [r7, #96]	; 0x60
 8007b1e:	416b      	adcs	r3, r5
 8007b20:	667b      	str	r3, [r7, #100]	; 0x64
 8007b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	461a      	mov	r2, r3
 8007b28:	f04f 0300 	mov.w	r3, #0
 8007b2c:	1891      	adds	r1, r2, r2
 8007b2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b30:	415b      	adcs	r3, r3
 8007b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b38:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007b3c:	f7f8 fba0 	bl	8000280 <__aeabi_uldivmod>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	4ba5      	ldr	r3, [pc, #660]	; (8007ddc <UART_SetConfig+0x38c>)
 8007b46:	fba3 2302 	umull	r2, r3, r3, r2
 8007b4a:	095b      	lsrs	r3, r3, #5
 8007b4c:	011e      	lsls	r6, r3, #4
 8007b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b50:	461c      	mov	r4, r3
 8007b52:	f04f 0500 	mov.w	r5, #0
 8007b56:	4622      	mov	r2, r4
 8007b58:	462b      	mov	r3, r5
 8007b5a:	1891      	adds	r1, r2, r2
 8007b5c:	6339      	str	r1, [r7, #48]	; 0x30
 8007b5e:	415b      	adcs	r3, r3
 8007b60:	637b      	str	r3, [r7, #52]	; 0x34
 8007b62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007b66:	1912      	adds	r2, r2, r4
 8007b68:	eb45 0303 	adc.w	r3, r5, r3
 8007b6c:	f04f 0000 	mov.w	r0, #0
 8007b70:	f04f 0100 	mov.w	r1, #0
 8007b74:	00d9      	lsls	r1, r3, #3
 8007b76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b7a:	00d0      	lsls	r0, r2, #3
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	1911      	adds	r1, r2, r4
 8007b82:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b84:	416b      	adcs	r3, r5
 8007b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	f04f 0300 	mov.w	r3, #0
 8007b92:	1891      	adds	r1, r2, r2
 8007b94:	62b9      	str	r1, [r7, #40]	; 0x28
 8007b96:	415b      	adcs	r3, r3
 8007b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b9e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007ba2:	f7f8 fb6d 	bl	8000280 <__aeabi_uldivmod>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4b8c      	ldr	r3, [pc, #560]	; (8007ddc <UART_SetConfig+0x38c>)
 8007bac:	fba3 1302 	umull	r1, r3, r3, r2
 8007bb0:	095b      	lsrs	r3, r3, #5
 8007bb2:	2164      	movs	r1, #100	; 0x64
 8007bb4:	fb01 f303 	mul.w	r3, r1, r3
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	3332      	adds	r3, #50	; 0x32
 8007bbe:	4a87      	ldr	r2, [pc, #540]	; (8007ddc <UART_SetConfig+0x38c>)
 8007bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc4:	095b      	lsrs	r3, r3, #5
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007bcc:	441e      	add	r6, r3
 8007bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f04f 0100 	mov.w	r1, #0
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	1894      	adds	r4, r2, r2
 8007bdc:	623c      	str	r4, [r7, #32]
 8007bde:	415b      	adcs	r3, r3
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
 8007be2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007be6:	1812      	adds	r2, r2, r0
 8007be8:	eb41 0303 	adc.w	r3, r1, r3
 8007bec:	f04f 0400 	mov.w	r4, #0
 8007bf0:	f04f 0500 	mov.w	r5, #0
 8007bf4:	00dd      	lsls	r5, r3, #3
 8007bf6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007bfa:	00d4      	lsls	r4, r2, #3
 8007bfc:	4622      	mov	r2, r4
 8007bfe:	462b      	mov	r3, r5
 8007c00:	1814      	adds	r4, r2, r0
 8007c02:	653c      	str	r4, [r7, #80]	; 0x50
 8007c04:	414b      	adcs	r3, r1
 8007c06:	657b      	str	r3, [r7, #84]	; 0x54
 8007c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	f04f 0300 	mov.w	r3, #0
 8007c12:	1891      	adds	r1, r2, r2
 8007c14:	61b9      	str	r1, [r7, #24]
 8007c16:	415b      	adcs	r3, r3
 8007c18:	61fb      	str	r3, [r7, #28]
 8007c1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c1e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007c22:	f7f8 fb2d 	bl	8000280 <__aeabi_uldivmod>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4b6c      	ldr	r3, [pc, #432]	; (8007ddc <UART_SetConfig+0x38c>)
 8007c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c30:	095b      	lsrs	r3, r3, #5
 8007c32:	2164      	movs	r1, #100	; 0x64
 8007c34:	fb01 f303 	mul.w	r3, r1, r3
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	3332      	adds	r3, #50	; 0x32
 8007c3e:	4a67      	ldr	r2, [pc, #412]	; (8007ddc <UART_SetConfig+0x38c>)
 8007c40:	fba2 2303 	umull	r2, r3, r2, r3
 8007c44:	095b      	lsrs	r3, r3, #5
 8007c46:	f003 0207 	and.w	r2, r3, #7
 8007c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4432      	add	r2, r6
 8007c50:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c52:	e0b9      	b.n	8007dc8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c56:	461c      	mov	r4, r3
 8007c58:	f04f 0500 	mov.w	r5, #0
 8007c5c:	4622      	mov	r2, r4
 8007c5e:	462b      	mov	r3, r5
 8007c60:	1891      	adds	r1, r2, r2
 8007c62:	6139      	str	r1, [r7, #16]
 8007c64:	415b      	adcs	r3, r3
 8007c66:	617b      	str	r3, [r7, #20]
 8007c68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c6c:	1912      	adds	r2, r2, r4
 8007c6e:	eb45 0303 	adc.w	r3, r5, r3
 8007c72:	f04f 0000 	mov.w	r0, #0
 8007c76:	f04f 0100 	mov.w	r1, #0
 8007c7a:	00d9      	lsls	r1, r3, #3
 8007c7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c80:	00d0      	lsls	r0, r2, #3
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	eb12 0804 	adds.w	r8, r2, r4
 8007c8a:	eb43 0905 	adc.w	r9, r3, r5
 8007c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f04f 0100 	mov.w	r1, #0
 8007c98:	f04f 0200 	mov.w	r2, #0
 8007c9c:	f04f 0300 	mov.w	r3, #0
 8007ca0:	008b      	lsls	r3, r1, #2
 8007ca2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ca6:	0082      	lsls	r2, r0, #2
 8007ca8:	4640      	mov	r0, r8
 8007caa:	4649      	mov	r1, r9
 8007cac:	f7f8 fae8 	bl	8000280 <__aeabi_uldivmod>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4b49      	ldr	r3, [pc, #292]	; (8007ddc <UART_SetConfig+0x38c>)
 8007cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8007cba:	095b      	lsrs	r3, r3, #5
 8007cbc:	011e      	lsls	r6, r3, #4
 8007cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f04f 0100 	mov.w	r1, #0
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	1894      	adds	r4, r2, r2
 8007ccc:	60bc      	str	r4, [r7, #8]
 8007cce:	415b      	adcs	r3, r3
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cd6:	1812      	adds	r2, r2, r0
 8007cd8:	eb41 0303 	adc.w	r3, r1, r3
 8007cdc:	f04f 0400 	mov.w	r4, #0
 8007ce0:	f04f 0500 	mov.w	r5, #0
 8007ce4:	00dd      	lsls	r5, r3, #3
 8007ce6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007cea:	00d4      	lsls	r4, r2, #3
 8007cec:	4622      	mov	r2, r4
 8007cee:	462b      	mov	r3, r5
 8007cf0:	1814      	adds	r4, r2, r0
 8007cf2:	64bc      	str	r4, [r7, #72]	; 0x48
 8007cf4:	414b      	adcs	r3, r1
 8007cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f04f 0100 	mov.w	r1, #0
 8007d02:	f04f 0200 	mov.w	r2, #0
 8007d06:	f04f 0300 	mov.w	r3, #0
 8007d0a:	008b      	lsls	r3, r1, #2
 8007d0c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d10:	0082      	lsls	r2, r0, #2
 8007d12:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007d16:	f7f8 fab3 	bl	8000280 <__aeabi_uldivmod>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4b2f      	ldr	r3, [pc, #188]	; (8007ddc <UART_SetConfig+0x38c>)
 8007d20:	fba3 1302 	umull	r1, r3, r3, r2
 8007d24:	095b      	lsrs	r3, r3, #5
 8007d26:	2164      	movs	r1, #100	; 0x64
 8007d28:	fb01 f303 	mul.w	r3, r1, r3
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	011b      	lsls	r3, r3, #4
 8007d30:	3332      	adds	r3, #50	; 0x32
 8007d32:	4a2a      	ldr	r2, [pc, #168]	; (8007ddc <UART_SetConfig+0x38c>)
 8007d34:	fba2 2303 	umull	r2, r3, r2, r3
 8007d38:	095b      	lsrs	r3, r3, #5
 8007d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d3e:	441e      	add	r6, r3
 8007d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d42:	4618      	mov	r0, r3
 8007d44:	f04f 0100 	mov.w	r1, #0
 8007d48:	4602      	mov	r2, r0
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	1894      	adds	r4, r2, r2
 8007d4e:	603c      	str	r4, [r7, #0]
 8007d50:	415b      	adcs	r3, r3
 8007d52:	607b      	str	r3, [r7, #4]
 8007d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d58:	1812      	adds	r2, r2, r0
 8007d5a:	eb41 0303 	adc.w	r3, r1, r3
 8007d5e:	f04f 0400 	mov.w	r4, #0
 8007d62:	f04f 0500 	mov.w	r5, #0
 8007d66:	00dd      	lsls	r5, r3, #3
 8007d68:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d6c:	00d4      	lsls	r4, r2, #3
 8007d6e:	4622      	mov	r2, r4
 8007d70:	462b      	mov	r3, r5
 8007d72:	eb12 0a00 	adds.w	sl, r2, r0
 8007d76:	eb43 0b01 	adc.w	fp, r3, r1
 8007d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f04f 0100 	mov.w	r1, #0
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	f04f 0300 	mov.w	r3, #0
 8007d8c:	008b      	lsls	r3, r1, #2
 8007d8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d92:	0082      	lsls	r2, r0, #2
 8007d94:	4650      	mov	r0, sl
 8007d96:	4659      	mov	r1, fp
 8007d98:	f7f8 fa72 	bl	8000280 <__aeabi_uldivmod>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4b0e      	ldr	r3, [pc, #56]	; (8007ddc <UART_SetConfig+0x38c>)
 8007da2:	fba3 1302 	umull	r1, r3, r3, r2
 8007da6:	095b      	lsrs	r3, r3, #5
 8007da8:	2164      	movs	r1, #100	; 0x64
 8007daa:	fb01 f303 	mul.w	r3, r1, r3
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	3332      	adds	r3, #50	; 0x32
 8007db4:	4a09      	ldr	r2, [pc, #36]	; (8007ddc <UART_SetConfig+0x38c>)
 8007db6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dba:	095b      	lsrs	r3, r3, #5
 8007dbc:	f003 020f 	and.w	r2, r3, #15
 8007dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4432      	add	r2, r6
 8007dc6:	609a      	str	r2, [r3, #8]
}
 8007dc8:	bf00      	nop
 8007dca:	377c      	adds	r7, #124	; 0x7c
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd2:	bf00      	nop
 8007dd4:	40011000 	.word	0x40011000
 8007dd8:	40011400 	.word	0x40011400
 8007ddc:	51eb851f 	.word	0x51eb851f

08007de0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4b20      	ldr	r3, [pc, #128]	; (8007e80 <FSMC_NORSRAM_Init+0xa0>)
 8007dfe:	4013      	ands	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007e0a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007e10:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007e16:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007e1c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007e22:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007e28:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007e2e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007e34:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007e3a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007e40:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007e46:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007e4c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d103      	bne.n	8007e64 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e62:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68f9      	ldr	r1, [r7, #12]
 8007e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	fff00080 	.word	0xfff00080

08007e84 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007ea6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007eb2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007eba:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007ec2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007ecc:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	3b02      	subs	r3, #2
 8007ed4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007ed6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007edc:	4313      	orrs	r3, r2
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6979      	ldr	r1, [r7, #20]
 8007eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
	...

08007f00 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
 8007f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f18:	d122      	bne.n	8007f60 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f22:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	4b15      	ldr	r3, [pc, #84]	; (8007f7c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007f28:	4013      	ands	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f36:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007f3e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007f46:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007f4c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	6979      	ldr	r1, [r7, #20]
 8007f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007f5e:	e005      	b.n	8007f6c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	cff00000 	.word	0xcff00000

08007f80 <__errno>:
 8007f80:	4b01      	ldr	r3, [pc, #4]	; (8007f88 <__errno+0x8>)
 8007f82:	6818      	ldr	r0, [r3, #0]
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	2000001c 	.word	0x2000001c

08007f8c <__libc_init_array>:
 8007f8c:	b570      	push	{r4, r5, r6, lr}
 8007f8e:	4d0d      	ldr	r5, [pc, #52]	; (8007fc4 <__libc_init_array+0x38>)
 8007f90:	4c0d      	ldr	r4, [pc, #52]	; (8007fc8 <__libc_init_array+0x3c>)
 8007f92:	1b64      	subs	r4, r4, r5
 8007f94:	10a4      	asrs	r4, r4, #2
 8007f96:	2600      	movs	r6, #0
 8007f98:	42a6      	cmp	r6, r4
 8007f9a:	d109      	bne.n	8007fb0 <__libc_init_array+0x24>
 8007f9c:	4d0b      	ldr	r5, [pc, #44]	; (8007fcc <__libc_init_array+0x40>)
 8007f9e:	4c0c      	ldr	r4, [pc, #48]	; (8007fd0 <__libc_init_array+0x44>)
 8007fa0:	f000 fc4e 	bl	8008840 <_init>
 8007fa4:	1b64      	subs	r4, r4, r5
 8007fa6:	10a4      	asrs	r4, r4, #2
 8007fa8:	2600      	movs	r6, #0
 8007faa:	42a6      	cmp	r6, r4
 8007fac:	d105      	bne.n	8007fba <__libc_init_array+0x2e>
 8007fae:	bd70      	pop	{r4, r5, r6, pc}
 8007fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fb4:	4798      	blx	r3
 8007fb6:	3601      	adds	r6, #1
 8007fb8:	e7ee      	b.n	8007f98 <__libc_init_array+0xc>
 8007fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fbe:	4798      	blx	r3
 8007fc0:	3601      	adds	r6, #1
 8007fc2:	e7f2      	b.n	8007faa <__libc_init_array+0x1e>
 8007fc4:	0800b978 	.word	0x0800b978
 8007fc8:	0800b978 	.word	0x0800b978
 8007fcc:	0800b978 	.word	0x0800b978
 8007fd0:	0800b97c 	.word	0x0800b97c

08007fd4 <memset>:
 8007fd4:	4402      	add	r2, r0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d100      	bne.n	8007fde <memset+0xa>
 8007fdc:	4770      	bx	lr
 8007fde:	f803 1b01 	strb.w	r1, [r3], #1
 8007fe2:	e7f9      	b.n	8007fd8 <memset+0x4>

08007fe4 <siprintf>:
 8007fe4:	b40e      	push	{r1, r2, r3}
 8007fe6:	b500      	push	{lr}
 8007fe8:	b09c      	sub	sp, #112	; 0x70
 8007fea:	ab1d      	add	r3, sp, #116	; 0x74
 8007fec:	9002      	str	r0, [sp, #8]
 8007fee:	9006      	str	r0, [sp, #24]
 8007ff0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ff4:	4809      	ldr	r0, [pc, #36]	; (800801c <siprintf+0x38>)
 8007ff6:	9107      	str	r1, [sp, #28]
 8007ff8:	9104      	str	r1, [sp, #16]
 8007ffa:	4909      	ldr	r1, [pc, #36]	; (8008020 <siprintf+0x3c>)
 8007ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008000:	9105      	str	r1, [sp, #20]
 8008002:	6800      	ldr	r0, [r0, #0]
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	a902      	add	r1, sp, #8
 8008008:	f000 f868 	bl	80080dc <_svfiprintf_r>
 800800c:	9b02      	ldr	r3, [sp, #8]
 800800e:	2200      	movs	r2, #0
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	b01c      	add	sp, #112	; 0x70
 8008014:	f85d eb04 	ldr.w	lr, [sp], #4
 8008018:	b003      	add	sp, #12
 800801a:	4770      	bx	lr
 800801c:	2000001c 	.word	0x2000001c
 8008020:	ffff0208 	.word	0xffff0208

08008024 <__ssputs_r>:
 8008024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008028:	688e      	ldr	r6, [r1, #8]
 800802a:	429e      	cmp	r6, r3
 800802c:	4682      	mov	sl, r0
 800802e:	460c      	mov	r4, r1
 8008030:	4690      	mov	r8, r2
 8008032:	461f      	mov	r7, r3
 8008034:	d838      	bhi.n	80080a8 <__ssputs_r+0x84>
 8008036:	898a      	ldrh	r2, [r1, #12]
 8008038:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800803c:	d032      	beq.n	80080a4 <__ssputs_r+0x80>
 800803e:	6825      	ldr	r5, [r4, #0]
 8008040:	6909      	ldr	r1, [r1, #16]
 8008042:	eba5 0901 	sub.w	r9, r5, r1
 8008046:	6965      	ldr	r5, [r4, #20]
 8008048:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800804c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008050:	3301      	adds	r3, #1
 8008052:	444b      	add	r3, r9
 8008054:	106d      	asrs	r5, r5, #1
 8008056:	429d      	cmp	r5, r3
 8008058:	bf38      	it	cc
 800805a:	461d      	movcc	r5, r3
 800805c:	0553      	lsls	r3, r2, #21
 800805e:	d531      	bpl.n	80080c4 <__ssputs_r+0xa0>
 8008060:	4629      	mov	r1, r5
 8008062:	f000 fb47 	bl	80086f4 <_malloc_r>
 8008066:	4606      	mov	r6, r0
 8008068:	b950      	cbnz	r0, 8008080 <__ssputs_r+0x5c>
 800806a:	230c      	movs	r3, #12
 800806c:	f8ca 3000 	str.w	r3, [sl]
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008076:	81a3      	strh	r3, [r4, #12]
 8008078:	f04f 30ff 	mov.w	r0, #4294967295
 800807c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008080:	6921      	ldr	r1, [r4, #16]
 8008082:	464a      	mov	r2, r9
 8008084:	f000 fabe 	bl	8008604 <memcpy>
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800808e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	6126      	str	r6, [r4, #16]
 8008096:	6165      	str	r5, [r4, #20]
 8008098:	444e      	add	r6, r9
 800809a:	eba5 0509 	sub.w	r5, r5, r9
 800809e:	6026      	str	r6, [r4, #0]
 80080a0:	60a5      	str	r5, [r4, #8]
 80080a2:	463e      	mov	r6, r7
 80080a4:	42be      	cmp	r6, r7
 80080a6:	d900      	bls.n	80080aa <__ssputs_r+0x86>
 80080a8:	463e      	mov	r6, r7
 80080aa:	4632      	mov	r2, r6
 80080ac:	6820      	ldr	r0, [r4, #0]
 80080ae:	4641      	mov	r1, r8
 80080b0:	f000 fab6 	bl	8008620 <memmove>
 80080b4:	68a3      	ldr	r3, [r4, #8]
 80080b6:	6822      	ldr	r2, [r4, #0]
 80080b8:	1b9b      	subs	r3, r3, r6
 80080ba:	4432      	add	r2, r6
 80080bc:	60a3      	str	r3, [r4, #8]
 80080be:	6022      	str	r2, [r4, #0]
 80080c0:	2000      	movs	r0, #0
 80080c2:	e7db      	b.n	800807c <__ssputs_r+0x58>
 80080c4:	462a      	mov	r2, r5
 80080c6:	f000 fb6f 	bl	80087a8 <_realloc_r>
 80080ca:	4606      	mov	r6, r0
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d1e1      	bne.n	8008094 <__ssputs_r+0x70>
 80080d0:	6921      	ldr	r1, [r4, #16]
 80080d2:	4650      	mov	r0, sl
 80080d4:	f000 fabe 	bl	8008654 <_free_r>
 80080d8:	e7c7      	b.n	800806a <__ssputs_r+0x46>
	...

080080dc <_svfiprintf_r>:
 80080dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	4698      	mov	r8, r3
 80080e2:	898b      	ldrh	r3, [r1, #12]
 80080e4:	061b      	lsls	r3, r3, #24
 80080e6:	b09d      	sub	sp, #116	; 0x74
 80080e8:	4607      	mov	r7, r0
 80080ea:	460d      	mov	r5, r1
 80080ec:	4614      	mov	r4, r2
 80080ee:	d50e      	bpl.n	800810e <_svfiprintf_r+0x32>
 80080f0:	690b      	ldr	r3, [r1, #16]
 80080f2:	b963      	cbnz	r3, 800810e <_svfiprintf_r+0x32>
 80080f4:	2140      	movs	r1, #64	; 0x40
 80080f6:	f000 fafd 	bl	80086f4 <_malloc_r>
 80080fa:	6028      	str	r0, [r5, #0]
 80080fc:	6128      	str	r0, [r5, #16]
 80080fe:	b920      	cbnz	r0, 800810a <_svfiprintf_r+0x2e>
 8008100:	230c      	movs	r3, #12
 8008102:	603b      	str	r3, [r7, #0]
 8008104:	f04f 30ff 	mov.w	r0, #4294967295
 8008108:	e0d1      	b.n	80082ae <_svfiprintf_r+0x1d2>
 800810a:	2340      	movs	r3, #64	; 0x40
 800810c:	616b      	str	r3, [r5, #20]
 800810e:	2300      	movs	r3, #0
 8008110:	9309      	str	r3, [sp, #36]	; 0x24
 8008112:	2320      	movs	r3, #32
 8008114:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008118:	f8cd 800c 	str.w	r8, [sp, #12]
 800811c:	2330      	movs	r3, #48	; 0x30
 800811e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80082c8 <_svfiprintf_r+0x1ec>
 8008122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008126:	f04f 0901 	mov.w	r9, #1
 800812a:	4623      	mov	r3, r4
 800812c:	469a      	mov	sl, r3
 800812e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008132:	b10a      	cbz	r2, 8008138 <_svfiprintf_r+0x5c>
 8008134:	2a25      	cmp	r2, #37	; 0x25
 8008136:	d1f9      	bne.n	800812c <_svfiprintf_r+0x50>
 8008138:	ebba 0b04 	subs.w	fp, sl, r4
 800813c:	d00b      	beq.n	8008156 <_svfiprintf_r+0x7a>
 800813e:	465b      	mov	r3, fp
 8008140:	4622      	mov	r2, r4
 8008142:	4629      	mov	r1, r5
 8008144:	4638      	mov	r0, r7
 8008146:	f7ff ff6d 	bl	8008024 <__ssputs_r>
 800814a:	3001      	adds	r0, #1
 800814c:	f000 80aa 	beq.w	80082a4 <_svfiprintf_r+0x1c8>
 8008150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008152:	445a      	add	r2, fp
 8008154:	9209      	str	r2, [sp, #36]	; 0x24
 8008156:	f89a 3000 	ldrb.w	r3, [sl]
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 80a2 	beq.w	80082a4 <_svfiprintf_r+0x1c8>
 8008160:	2300      	movs	r3, #0
 8008162:	f04f 32ff 	mov.w	r2, #4294967295
 8008166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800816a:	f10a 0a01 	add.w	sl, sl, #1
 800816e:	9304      	str	r3, [sp, #16]
 8008170:	9307      	str	r3, [sp, #28]
 8008172:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008176:	931a      	str	r3, [sp, #104]	; 0x68
 8008178:	4654      	mov	r4, sl
 800817a:	2205      	movs	r2, #5
 800817c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008180:	4851      	ldr	r0, [pc, #324]	; (80082c8 <_svfiprintf_r+0x1ec>)
 8008182:	f7f8 f82d 	bl	80001e0 <memchr>
 8008186:	9a04      	ldr	r2, [sp, #16]
 8008188:	b9d8      	cbnz	r0, 80081c2 <_svfiprintf_r+0xe6>
 800818a:	06d0      	lsls	r0, r2, #27
 800818c:	bf44      	itt	mi
 800818e:	2320      	movmi	r3, #32
 8008190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008194:	0711      	lsls	r1, r2, #28
 8008196:	bf44      	itt	mi
 8008198:	232b      	movmi	r3, #43	; 0x2b
 800819a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800819e:	f89a 3000 	ldrb.w	r3, [sl]
 80081a2:	2b2a      	cmp	r3, #42	; 0x2a
 80081a4:	d015      	beq.n	80081d2 <_svfiprintf_r+0xf6>
 80081a6:	9a07      	ldr	r2, [sp, #28]
 80081a8:	4654      	mov	r4, sl
 80081aa:	2000      	movs	r0, #0
 80081ac:	f04f 0c0a 	mov.w	ip, #10
 80081b0:	4621      	mov	r1, r4
 80081b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081b6:	3b30      	subs	r3, #48	; 0x30
 80081b8:	2b09      	cmp	r3, #9
 80081ba:	d94e      	bls.n	800825a <_svfiprintf_r+0x17e>
 80081bc:	b1b0      	cbz	r0, 80081ec <_svfiprintf_r+0x110>
 80081be:	9207      	str	r2, [sp, #28]
 80081c0:	e014      	b.n	80081ec <_svfiprintf_r+0x110>
 80081c2:	eba0 0308 	sub.w	r3, r0, r8
 80081c6:	fa09 f303 	lsl.w	r3, r9, r3
 80081ca:	4313      	orrs	r3, r2
 80081cc:	9304      	str	r3, [sp, #16]
 80081ce:	46a2      	mov	sl, r4
 80081d0:	e7d2      	b.n	8008178 <_svfiprintf_r+0x9c>
 80081d2:	9b03      	ldr	r3, [sp, #12]
 80081d4:	1d19      	adds	r1, r3, #4
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	9103      	str	r1, [sp, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	bfbb      	ittet	lt
 80081de:	425b      	neglt	r3, r3
 80081e0:	f042 0202 	orrlt.w	r2, r2, #2
 80081e4:	9307      	strge	r3, [sp, #28]
 80081e6:	9307      	strlt	r3, [sp, #28]
 80081e8:	bfb8      	it	lt
 80081ea:	9204      	strlt	r2, [sp, #16]
 80081ec:	7823      	ldrb	r3, [r4, #0]
 80081ee:	2b2e      	cmp	r3, #46	; 0x2e
 80081f0:	d10c      	bne.n	800820c <_svfiprintf_r+0x130>
 80081f2:	7863      	ldrb	r3, [r4, #1]
 80081f4:	2b2a      	cmp	r3, #42	; 0x2a
 80081f6:	d135      	bne.n	8008264 <_svfiprintf_r+0x188>
 80081f8:	9b03      	ldr	r3, [sp, #12]
 80081fa:	1d1a      	adds	r2, r3, #4
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	9203      	str	r2, [sp, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	bfb8      	it	lt
 8008204:	f04f 33ff 	movlt.w	r3, #4294967295
 8008208:	3402      	adds	r4, #2
 800820a:	9305      	str	r3, [sp, #20]
 800820c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082d8 <_svfiprintf_r+0x1fc>
 8008210:	7821      	ldrb	r1, [r4, #0]
 8008212:	2203      	movs	r2, #3
 8008214:	4650      	mov	r0, sl
 8008216:	f7f7 ffe3 	bl	80001e0 <memchr>
 800821a:	b140      	cbz	r0, 800822e <_svfiprintf_r+0x152>
 800821c:	2340      	movs	r3, #64	; 0x40
 800821e:	eba0 000a 	sub.w	r0, r0, sl
 8008222:	fa03 f000 	lsl.w	r0, r3, r0
 8008226:	9b04      	ldr	r3, [sp, #16]
 8008228:	4303      	orrs	r3, r0
 800822a:	3401      	adds	r4, #1
 800822c:	9304      	str	r3, [sp, #16]
 800822e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008232:	4826      	ldr	r0, [pc, #152]	; (80082cc <_svfiprintf_r+0x1f0>)
 8008234:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008238:	2206      	movs	r2, #6
 800823a:	f7f7 ffd1 	bl	80001e0 <memchr>
 800823e:	2800      	cmp	r0, #0
 8008240:	d038      	beq.n	80082b4 <_svfiprintf_r+0x1d8>
 8008242:	4b23      	ldr	r3, [pc, #140]	; (80082d0 <_svfiprintf_r+0x1f4>)
 8008244:	bb1b      	cbnz	r3, 800828e <_svfiprintf_r+0x1b2>
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	3307      	adds	r3, #7
 800824a:	f023 0307 	bic.w	r3, r3, #7
 800824e:	3308      	adds	r3, #8
 8008250:	9303      	str	r3, [sp, #12]
 8008252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008254:	4433      	add	r3, r6
 8008256:	9309      	str	r3, [sp, #36]	; 0x24
 8008258:	e767      	b.n	800812a <_svfiprintf_r+0x4e>
 800825a:	fb0c 3202 	mla	r2, ip, r2, r3
 800825e:	460c      	mov	r4, r1
 8008260:	2001      	movs	r0, #1
 8008262:	e7a5      	b.n	80081b0 <_svfiprintf_r+0xd4>
 8008264:	2300      	movs	r3, #0
 8008266:	3401      	adds	r4, #1
 8008268:	9305      	str	r3, [sp, #20]
 800826a:	4619      	mov	r1, r3
 800826c:	f04f 0c0a 	mov.w	ip, #10
 8008270:	4620      	mov	r0, r4
 8008272:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008276:	3a30      	subs	r2, #48	; 0x30
 8008278:	2a09      	cmp	r2, #9
 800827a:	d903      	bls.n	8008284 <_svfiprintf_r+0x1a8>
 800827c:	2b00      	cmp	r3, #0
 800827e:	d0c5      	beq.n	800820c <_svfiprintf_r+0x130>
 8008280:	9105      	str	r1, [sp, #20]
 8008282:	e7c3      	b.n	800820c <_svfiprintf_r+0x130>
 8008284:	fb0c 2101 	mla	r1, ip, r1, r2
 8008288:	4604      	mov	r4, r0
 800828a:	2301      	movs	r3, #1
 800828c:	e7f0      	b.n	8008270 <_svfiprintf_r+0x194>
 800828e:	ab03      	add	r3, sp, #12
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	462a      	mov	r2, r5
 8008294:	4b0f      	ldr	r3, [pc, #60]	; (80082d4 <_svfiprintf_r+0x1f8>)
 8008296:	a904      	add	r1, sp, #16
 8008298:	4638      	mov	r0, r7
 800829a:	f3af 8000 	nop.w
 800829e:	1c42      	adds	r2, r0, #1
 80082a0:	4606      	mov	r6, r0
 80082a2:	d1d6      	bne.n	8008252 <_svfiprintf_r+0x176>
 80082a4:	89ab      	ldrh	r3, [r5, #12]
 80082a6:	065b      	lsls	r3, r3, #25
 80082a8:	f53f af2c 	bmi.w	8008104 <_svfiprintf_r+0x28>
 80082ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082ae:	b01d      	add	sp, #116	; 0x74
 80082b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b4:	ab03      	add	r3, sp, #12
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	462a      	mov	r2, r5
 80082ba:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <_svfiprintf_r+0x1f8>)
 80082bc:	a904      	add	r1, sp, #16
 80082be:	4638      	mov	r0, r7
 80082c0:	f000 f87a 	bl	80083b8 <_printf_i>
 80082c4:	e7eb      	b.n	800829e <_svfiprintf_r+0x1c2>
 80082c6:	bf00      	nop
 80082c8:	0800b93c 	.word	0x0800b93c
 80082cc:	0800b946 	.word	0x0800b946
 80082d0:	00000000 	.word	0x00000000
 80082d4:	08008025 	.word	0x08008025
 80082d8:	0800b942 	.word	0x0800b942

080082dc <_printf_common>:
 80082dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e0:	4616      	mov	r6, r2
 80082e2:	4699      	mov	r9, r3
 80082e4:	688a      	ldr	r2, [r1, #8]
 80082e6:	690b      	ldr	r3, [r1, #16]
 80082e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082ec:	4293      	cmp	r3, r2
 80082ee:	bfb8      	it	lt
 80082f0:	4613      	movlt	r3, r2
 80082f2:	6033      	str	r3, [r6, #0]
 80082f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082f8:	4607      	mov	r7, r0
 80082fa:	460c      	mov	r4, r1
 80082fc:	b10a      	cbz	r2, 8008302 <_printf_common+0x26>
 80082fe:	3301      	adds	r3, #1
 8008300:	6033      	str	r3, [r6, #0]
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	0699      	lsls	r1, r3, #26
 8008306:	bf42      	ittt	mi
 8008308:	6833      	ldrmi	r3, [r6, #0]
 800830a:	3302      	addmi	r3, #2
 800830c:	6033      	strmi	r3, [r6, #0]
 800830e:	6825      	ldr	r5, [r4, #0]
 8008310:	f015 0506 	ands.w	r5, r5, #6
 8008314:	d106      	bne.n	8008324 <_printf_common+0x48>
 8008316:	f104 0a19 	add.w	sl, r4, #25
 800831a:	68e3      	ldr	r3, [r4, #12]
 800831c:	6832      	ldr	r2, [r6, #0]
 800831e:	1a9b      	subs	r3, r3, r2
 8008320:	42ab      	cmp	r3, r5
 8008322:	dc26      	bgt.n	8008372 <_printf_common+0x96>
 8008324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008328:	1e13      	subs	r3, r2, #0
 800832a:	6822      	ldr	r2, [r4, #0]
 800832c:	bf18      	it	ne
 800832e:	2301      	movne	r3, #1
 8008330:	0692      	lsls	r2, r2, #26
 8008332:	d42b      	bmi.n	800838c <_printf_common+0xb0>
 8008334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008338:	4649      	mov	r1, r9
 800833a:	4638      	mov	r0, r7
 800833c:	47c0      	blx	r8
 800833e:	3001      	adds	r0, #1
 8008340:	d01e      	beq.n	8008380 <_printf_common+0xa4>
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	68e5      	ldr	r5, [r4, #12]
 8008346:	6832      	ldr	r2, [r6, #0]
 8008348:	f003 0306 	and.w	r3, r3, #6
 800834c:	2b04      	cmp	r3, #4
 800834e:	bf08      	it	eq
 8008350:	1aad      	subeq	r5, r5, r2
 8008352:	68a3      	ldr	r3, [r4, #8]
 8008354:	6922      	ldr	r2, [r4, #16]
 8008356:	bf0c      	ite	eq
 8008358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800835c:	2500      	movne	r5, #0
 800835e:	4293      	cmp	r3, r2
 8008360:	bfc4      	itt	gt
 8008362:	1a9b      	subgt	r3, r3, r2
 8008364:	18ed      	addgt	r5, r5, r3
 8008366:	2600      	movs	r6, #0
 8008368:	341a      	adds	r4, #26
 800836a:	42b5      	cmp	r5, r6
 800836c:	d11a      	bne.n	80083a4 <_printf_common+0xc8>
 800836e:	2000      	movs	r0, #0
 8008370:	e008      	b.n	8008384 <_printf_common+0xa8>
 8008372:	2301      	movs	r3, #1
 8008374:	4652      	mov	r2, sl
 8008376:	4649      	mov	r1, r9
 8008378:	4638      	mov	r0, r7
 800837a:	47c0      	blx	r8
 800837c:	3001      	adds	r0, #1
 800837e:	d103      	bne.n	8008388 <_printf_common+0xac>
 8008380:	f04f 30ff 	mov.w	r0, #4294967295
 8008384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008388:	3501      	adds	r5, #1
 800838a:	e7c6      	b.n	800831a <_printf_common+0x3e>
 800838c:	18e1      	adds	r1, r4, r3
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	2030      	movs	r0, #48	; 0x30
 8008392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008396:	4422      	add	r2, r4
 8008398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800839c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083a0:	3302      	adds	r3, #2
 80083a2:	e7c7      	b.n	8008334 <_printf_common+0x58>
 80083a4:	2301      	movs	r3, #1
 80083a6:	4622      	mov	r2, r4
 80083a8:	4649      	mov	r1, r9
 80083aa:	4638      	mov	r0, r7
 80083ac:	47c0      	blx	r8
 80083ae:	3001      	adds	r0, #1
 80083b0:	d0e6      	beq.n	8008380 <_printf_common+0xa4>
 80083b2:	3601      	adds	r6, #1
 80083b4:	e7d9      	b.n	800836a <_printf_common+0x8e>
	...

080083b8 <_printf_i>:
 80083b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083bc:	460c      	mov	r4, r1
 80083be:	4691      	mov	r9, r2
 80083c0:	7e27      	ldrb	r7, [r4, #24]
 80083c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083c4:	2f78      	cmp	r7, #120	; 0x78
 80083c6:	4680      	mov	r8, r0
 80083c8:	469a      	mov	sl, r3
 80083ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083ce:	d807      	bhi.n	80083e0 <_printf_i+0x28>
 80083d0:	2f62      	cmp	r7, #98	; 0x62
 80083d2:	d80a      	bhi.n	80083ea <_printf_i+0x32>
 80083d4:	2f00      	cmp	r7, #0
 80083d6:	f000 80d8 	beq.w	800858a <_printf_i+0x1d2>
 80083da:	2f58      	cmp	r7, #88	; 0x58
 80083dc:	f000 80a3 	beq.w	8008526 <_printf_i+0x16e>
 80083e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083e8:	e03a      	b.n	8008460 <_printf_i+0xa8>
 80083ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083ee:	2b15      	cmp	r3, #21
 80083f0:	d8f6      	bhi.n	80083e0 <_printf_i+0x28>
 80083f2:	a001      	add	r0, pc, #4	; (adr r0, 80083f8 <_printf_i+0x40>)
 80083f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083f8:	08008451 	.word	0x08008451
 80083fc:	08008465 	.word	0x08008465
 8008400:	080083e1 	.word	0x080083e1
 8008404:	080083e1 	.word	0x080083e1
 8008408:	080083e1 	.word	0x080083e1
 800840c:	080083e1 	.word	0x080083e1
 8008410:	08008465 	.word	0x08008465
 8008414:	080083e1 	.word	0x080083e1
 8008418:	080083e1 	.word	0x080083e1
 800841c:	080083e1 	.word	0x080083e1
 8008420:	080083e1 	.word	0x080083e1
 8008424:	08008571 	.word	0x08008571
 8008428:	08008495 	.word	0x08008495
 800842c:	08008553 	.word	0x08008553
 8008430:	080083e1 	.word	0x080083e1
 8008434:	080083e1 	.word	0x080083e1
 8008438:	08008593 	.word	0x08008593
 800843c:	080083e1 	.word	0x080083e1
 8008440:	08008495 	.word	0x08008495
 8008444:	080083e1 	.word	0x080083e1
 8008448:	080083e1 	.word	0x080083e1
 800844c:	0800855b 	.word	0x0800855b
 8008450:	680b      	ldr	r3, [r1, #0]
 8008452:	1d1a      	adds	r2, r3, #4
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	600a      	str	r2, [r1, #0]
 8008458:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800845c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008460:	2301      	movs	r3, #1
 8008462:	e0a3      	b.n	80085ac <_printf_i+0x1f4>
 8008464:	6825      	ldr	r5, [r4, #0]
 8008466:	6808      	ldr	r0, [r1, #0]
 8008468:	062e      	lsls	r6, r5, #24
 800846a:	f100 0304 	add.w	r3, r0, #4
 800846e:	d50a      	bpl.n	8008486 <_printf_i+0xce>
 8008470:	6805      	ldr	r5, [r0, #0]
 8008472:	600b      	str	r3, [r1, #0]
 8008474:	2d00      	cmp	r5, #0
 8008476:	da03      	bge.n	8008480 <_printf_i+0xc8>
 8008478:	232d      	movs	r3, #45	; 0x2d
 800847a:	426d      	negs	r5, r5
 800847c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008480:	485e      	ldr	r0, [pc, #376]	; (80085fc <_printf_i+0x244>)
 8008482:	230a      	movs	r3, #10
 8008484:	e019      	b.n	80084ba <_printf_i+0x102>
 8008486:	f015 0f40 	tst.w	r5, #64	; 0x40
 800848a:	6805      	ldr	r5, [r0, #0]
 800848c:	600b      	str	r3, [r1, #0]
 800848e:	bf18      	it	ne
 8008490:	b22d      	sxthne	r5, r5
 8008492:	e7ef      	b.n	8008474 <_printf_i+0xbc>
 8008494:	680b      	ldr	r3, [r1, #0]
 8008496:	6825      	ldr	r5, [r4, #0]
 8008498:	1d18      	adds	r0, r3, #4
 800849a:	6008      	str	r0, [r1, #0]
 800849c:	0628      	lsls	r0, r5, #24
 800849e:	d501      	bpl.n	80084a4 <_printf_i+0xec>
 80084a0:	681d      	ldr	r5, [r3, #0]
 80084a2:	e002      	b.n	80084aa <_printf_i+0xf2>
 80084a4:	0669      	lsls	r1, r5, #25
 80084a6:	d5fb      	bpl.n	80084a0 <_printf_i+0xe8>
 80084a8:	881d      	ldrh	r5, [r3, #0]
 80084aa:	4854      	ldr	r0, [pc, #336]	; (80085fc <_printf_i+0x244>)
 80084ac:	2f6f      	cmp	r7, #111	; 0x6f
 80084ae:	bf0c      	ite	eq
 80084b0:	2308      	moveq	r3, #8
 80084b2:	230a      	movne	r3, #10
 80084b4:	2100      	movs	r1, #0
 80084b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084ba:	6866      	ldr	r6, [r4, #4]
 80084bc:	60a6      	str	r6, [r4, #8]
 80084be:	2e00      	cmp	r6, #0
 80084c0:	bfa2      	ittt	ge
 80084c2:	6821      	ldrge	r1, [r4, #0]
 80084c4:	f021 0104 	bicge.w	r1, r1, #4
 80084c8:	6021      	strge	r1, [r4, #0]
 80084ca:	b90d      	cbnz	r5, 80084d0 <_printf_i+0x118>
 80084cc:	2e00      	cmp	r6, #0
 80084ce:	d04d      	beq.n	800856c <_printf_i+0x1b4>
 80084d0:	4616      	mov	r6, r2
 80084d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80084d6:	fb03 5711 	mls	r7, r3, r1, r5
 80084da:	5dc7      	ldrb	r7, [r0, r7]
 80084dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084e0:	462f      	mov	r7, r5
 80084e2:	42bb      	cmp	r3, r7
 80084e4:	460d      	mov	r5, r1
 80084e6:	d9f4      	bls.n	80084d2 <_printf_i+0x11a>
 80084e8:	2b08      	cmp	r3, #8
 80084ea:	d10b      	bne.n	8008504 <_printf_i+0x14c>
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	07df      	lsls	r7, r3, #31
 80084f0:	d508      	bpl.n	8008504 <_printf_i+0x14c>
 80084f2:	6923      	ldr	r3, [r4, #16]
 80084f4:	6861      	ldr	r1, [r4, #4]
 80084f6:	4299      	cmp	r1, r3
 80084f8:	bfde      	ittt	le
 80084fa:	2330      	movle	r3, #48	; 0x30
 80084fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008500:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008504:	1b92      	subs	r2, r2, r6
 8008506:	6122      	str	r2, [r4, #16]
 8008508:	f8cd a000 	str.w	sl, [sp]
 800850c:	464b      	mov	r3, r9
 800850e:	aa03      	add	r2, sp, #12
 8008510:	4621      	mov	r1, r4
 8008512:	4640      	mov	r0, r8
 8008514:	f7ff fee2 	bl	80082dc <_printf_common>
 8008518:	3001      	adds	r0, #1
 800851a:	d14c      	bne.n	80085b6 <_printf_i+0x1fe>
 800851c:	f04f 30ff 	mov.w	r0, #4294967295
 8008520:	b004      	add	sp, #16
 8008522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008526:	4835      	ldr	r0, [pc, #212]	; (80085fc <_printf_i+0x244>)
 8008528:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	680e      	ldr	r6, [r1, #0]
 8008530:	061f      	lsls	r7, r3, #24
 8008532:	f856 5b04 	ldr.w	r5, [r6], #4
 8008536:	600e      	str	r6, [r1, #0]
 8008538:	d514      	bpl.n	8008564 <_printf_i+0x1ac>
 800853a:	07d9      	lsls	r1, r3, #31
 800853c:	bf44      	itt	mi
 800853e:	f043 0320 	orrmi.w	r3, r3, #32
 8008542:	6023      	strmi	r3, [r4, #0]
 8008544:	b91d      	cbnz	r5, 800854e <_printf_i+0x196>
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	f023 0320 	bic.w	r3, r3, #32
 800854c:	6023      	str	r3, [r4, #0]
 800854e:	2310      	movs	r3, #16
 8008550:	e7b0      	b.n	80084b4 <_printf_i+0xfc>
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	f043 0320 	orr.w	r3, r3, #32
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	2378      	movs	r3, #120	; 0x78
 800855c:	4828      	ldr	r0, [pc, #160]	; (8008600 <_printf_i+0x248>)
 800855e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008562:	e7e3      	b.n	800852c <_printf_i+0x174>
 8008564:	065e      	lsls	r6, r3, #25
 8008566:	bf48      	it	mi
 8008568:	b2ad      	uxthmi	r5, r5
 800856a:	e7e6      	b.n	800853a <_printf_i+0x182>
 800856c:	4616      	mov	r6, r2
 800856e:	e7bb      	b.n	80084e8 <_printf_i+0x130>
 8008570:	680b      	ldr	r3, [r1, #0]
 8008572:	6826      	ldr	r6, [r4, #0]
 8008574:	6960      	ldr	r0, [r4, #20]
 8008576:	1d1d      	adds	r5, r3, #4
 8008578:	600d      	str	r5, [r1, #0]
 800857a:	0635      	lsls	r5, r6, #24
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	d501      	bpl.n	8008584 <_printf_i+0x1cc>
 8008580:	6018      	str	r0, [r3, #0]
 8008582:	e002      	b.n	800858a <_printf_i+0x1d2>
 8008584:	0671      	lsls	r1, r6, #25
 8008586:	d5fb      	bpl.n	8008580 <_printf_i+0x1c8>
 8008588:	8018      	strh	r0, [r3, #0]
 800858a:	2300      	movs	r3, #0
 800858c:	6123      	str	r3, [r4, #16]
 800858e:	4616      	mov	r6, r2
 8008590:	e7ba      	b.n	8008508 <_printf_i+0x150>
 8008592:	680b      	ldr	r3, [r1, #0]
 8008594:	1d1a      	adds	r2, r3, #4
 8008596:	600a      	str	r2, [r1, #0]
 8008598:	681e      	ldr	r6, [r3, #0]
 800859a:	6862      	ldr	r2, [r4, #4]
 800859c:	2100      	movs	r1, #0
 800859e:	4630      	mov	r0, r6
 80085a0:	f7f7 fe1e 	bl	80001e0 <memchr>
 80085a4:	b108      	cbz	r0, 80085aa <_printf_i+0x1f2>
 80085a6:	1b80      	subs	r0, r0, r6
 80085a8:	6060      	str	r0, [r4, #4]
 80085aa:	6863      	ldr	r3, [r4, #4]
 80085ac:	6123      	str	r3, [r4, #16]
 80085ae:	2300      	movs	r3, #0
 80085b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085b4:	e7a8      	b.n	8008508 <_printf_i+0x150>
 80085b6:	6923      	ldr	r3, [r4, #16]
 80085b8:	4632      	mov	r2, r6
 80085ba:	4649      	mov	r1, r9
 80085bc:	4640      	mov	r0, r8
 80085be:	47d0      	blx	sl
 80085c0:	3001      	adds	r0, #1
 80085c2:	d0ab      	beq.n	800851c <_printf_i+0x164>
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	079b      	lsls	r3, r3, #30
 80085c8:	d413      	bmi.n	80085f2 <_printf_i+0x23a>
 80085ca:	68e0      	ldr	r0, [r4, #12]
 80085cc:	9b03      	ldr	r3, [sp, #12]
 80085ce:	4298      	cmp	r0, r3
 80085d0:	bfb8      	it	lt
 80085d2:	4618      	movlt	r0, r3
 80085d4:	e7a4      	b.n	8008520 <_printf_i+0x168>
 80085d6:	2301      	movs	r3, #1
 80085d8:	4632      	mov	r2, r6
 80085da:	4649      	mov	r1, r9
 80085dc:	4640      	mov	r0, r8
 80085de:	47d0      	blx	sl
 80085e0:	3001      	adds	r0, #1
 80085e2:	d09b      	beq.n	800851c <_printf_i+0x164>
 80085e4:	3501      	adds	r5, #1
 80085e6:	68e3      	ldr	r3, [r4, #12]
 80085e8:	9903      	ldr	r1, [sp, #12]
 80085ea:	1a5b      	subs	r3, r3, r1
 80085ec:	42ab      	cmp	r3, r5
 80085ee:	dcf2      	bgt.n	80085d6 <_printf_i+0x21e>
 80085f0:	e7eb      	b.n	80085ca <_printf_i+0x212>
 80085f2:	2500      	movs	r5, #0
 80085f4:	f104 0619 	add.w	r6, r4, #25
 80085f8:	e7f5      	b.n	80085e6 <_printf_i+0x22e>
 80085fa:	bf00      	nop
 80085fc:	0800b94d 	.word	0x0800b94d
 8008600:	0800b95e 	.word	0x0800b95e

08008604 <memcpy>:
 8008604:	440a      	add	r2, r1
 8008606:	4291      	cmp	r1, r2
 8008608:	f100 33ff 	add.w	r3, r0, #4294967295
 800860c:	d100      	bne.n	8008610 <memcpy+0xc>
 800860e:	4770      	bx	lr
 8008610:	b510      	push	{r4, lr}
 8008612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800861a:	4291      	cmp	r1, r2
 800861c:	d1f9      	bne.n	8008612 <memcpy+0xe>
 800861e:	bd10      	pop	{r4, pc}

08008620 <memmove>:
 8008620:	4288      	cmp	r0, r1
 8008622:	b510      	push	{r4, lr}
 8008624:	eb01 0402 	add.w	r4, r1, r2
 8008628:	d902      	bls.n	8008630 <memmove+0x10>
 800862a:	4284      	cmp	r4, r0
 800862c:	4623      	mov	r3, r4
 800862e:	d807      	bhi.n	8008640 <memmove+0x20>
 8008630:	1e43      	subs	r3, r0, #1
 8008632:	42a1      	cmp	r1, r4
 8008634:	d008      	beq.n	8008648 <memmove+0x28>
 8008636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800863a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800863e:	e7f8      	b.n	8008632 <memmove+0x12>
 8008640:	4402      	add	r2, r0
 8008642:	4601      	mov	r1, r0
 8008644:	428a      	cmp	r2, r1
 8008646:	d100      	bne.n	800864a <memmove+0x2a>
 8008648:	bd10      	pop	{r4, pc}
 800864a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800864e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008652:	e7f7      	b.n	8008644 <memmove+0x24>

08008654 <_free_r>:
 8008654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008656:	2900      	cmp	r1, #0
 8008658:	d048      	beq.n	80086ec <_free_r+0x98>
 800865a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800865e:	9001      	str	r0, [sp, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f1a1 0404 	sub.w	r4, r1, #4
 8008666:	bfb8      	it	lt
 8008668:	18e4      	addlt	r4, r4, r3
 800866a:	f000 f8d3 	bl	8008814 <__malloc_lock>
 800866e:	4a20      	ldr	r2, [pc, #128]	; (80086f0 <_free_r+0x9c>)
 8008670:	9801      	ldr	r0, [sp, #4]
 8008672:	6813      	ldr	r3, [r2, #0]
 8008674:	4615      	mov	r5, r2
 8008676:	b933      	cbnz	r3, 8008686 <_free_r+0x32>
 8008678:	6063      	str	r3, [r4, #4]
 800867a:	6014      	str	r4, [r2, #0]
 800867c:	b003      	add	sp, #12
 800867e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008682:	f000 b8cd 	b.w	8008820 <__malloc_unlock>
 8008686:	42a3      	cmp	r3, r4
 8008688:	d90b      	bls.n	80086a2 <_free_r+0x4e>
 800868a:	6821      	ldr	r1, [r4, #0]
 800868c:	1862      	adds	r2, r4, r1
 800868e:	4293      	cmp	r3, r2
 8008690:	bf04      	itt	eq
 8008692:	681a      	ldreq	r2, [r3, #0]
 8008694:	685b      	ldreq	r3, [r3, #4]
 8008696:	6063      	str	r3, [r4, #4]
 8008698:	bf04      	itt	eq
 800869a:	1852      	addeq	r2, r2, r1
 800869c:	6022      	streq	r2, [r4, #0]
 800869e:	602c      	str	r4, [r5, #0]
 80086a0:	e7ec      	b.n	800867c <_free_r+0x28>
 80086a2:	461a      	mov	r2, r3
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	b10b      	cbz	r3, 80086ac <_free_r+0x58>
 80086a8:	42a3      	cmp	r3, r4
 80086aa:	d9fa      	bls.n	80086a2 <_free_r+0x4e>
 80086ac:	6811      	ldr	r1, [r2, #0]
 80086ae:	1855      	adds	r5, r2, r1
 80086b0:	42a5      	cmp	r5, r4
 80086b2:	d10b      	bne.n	80086cc <_free_r+0x78>
 80086b4:	6824      	ldr	r4, [r4, #0]
 80086b6:	4421      	add	r1, r4
 80086b8:	1854      	adds	r4, r2, r1
 80086ba:	42a3      	cmp	r3, r4
 80086bc:	6011      	str	r1, [r2, #0]
 80086be:	d1dd      	bne.n	800867c <_free_r+0x28>
 80086c0:	681c      	ldr	r4, [r3, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	6053      	str	r3, [r2, #4]
 80086c6:	4421      	add	r1, r4
 80086c8:	6011      	str	r1, [r2, #0]
 80086ca:	e7d7      	b.n	800867c <_free_r+0x28>
 80086cc:	d902      	bls.n	80086d4 <_free_r+0x80>
 80086ce:	230c      	movs	r3, #12
 80086d0:	6003      	str	r3, [r0, #0]
 80086d2:	e7d3      	b.n	800867c <_free_r+0x28>
 80086d4:	6825      	ldr	r5, [r4, #0]
 80086d6:	1961      	adds	r1, r4, r5
 80086d8:	428b      	cmp	r3, r1
 80086da:	bf04      	itt	eq
 80086dc:	6819      	ldreq	r1, [r3, #0]
 80086de:	685b      	ldreq	r3, [r3, #4]
 80086e0:	6063      	str	r3, [r4, #4]
 80086e2:	bf04      	itt	eq
 80086e4:	1949      	addeq	r1, r1, r5
 80086e6:	6021      	streq	r1, [r4, #0]
 80086e8:	6054      	str	r4, [r2, #4]
 80086ea:	e7c7      	b.n	800867c <_free_r+0x28>
 80086ec:	b003      	add	sp, #12
 80086ee:	bd30      	pop	{r4, r5, pc}
 80086f0:	20000168 	.word	0x20000168

080086f4 <_malloc_r>:
 80086f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f6:	1ccd      	adds	r5, r1, #3
 80086f8:	f025 0503 	bic.w	r5, r5, #3
 80086fc:	3508      	adds	r5, #8
 80086fe:	2d0c      	cmp	r5, #12
 8008700:	bf38      	it	cc
 8008702:	250c      	movcc	r5, #12
 8008704:	2d00      	cmp	r5, #0
 8008706:	4606      	mov	r6, r0
 8008708:	db01      	blt.n	800870e <_malloc_r+0x1a>
 800870a:	42a9      	cmp	r1, r5
 800870c:	d903      	bls.n	8008716 <_malloc_r+0x22>
 800870e:	230c      	movs	r3, #12
 8008710:	6033      	str	r3, [r6, #0]
 8008712:	2000      	movs	r0, #0
 8008714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008716:	f000 f87d 	bl	8008814 <__malloc_lock>
 800871a:	4921      	ldr	r1, [pc, #132]	; (80087a0 <_malloc_r+0xac>)
 800871c:	680a      	ldr	r2, [r1, #0]
 800871e:	4614      	mov	r4, r2
 8008720:	b99c      	cbnz	r4, 800874a <_malloc_r+0x56>
 8008722:	4f20      	ldr	r7, [pc, #128]	; (80087a4 <_malloc_r+0xb0>)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	b923      	cbnz	r3, 8008732 <_malloc_r+0x3e>
 8008728:	4621      	mov	r1, r4
 800872a:	4630      	mov	r0, r6
 800872c:	f000 f862 	bl	80087f4 <_sbrk_r>
 8008730:	6038      	str	r0, [r7, #0]
 8008732:	4629      	mov	r1, r5
 8008734:	4630      	mov	r0, r6
 8008736:	f000 f85d 	bl	80087f4 <_sbrk_r>
 800873a:	1c43      	adds	r3, r0, #1
 800873c:	d123      	bne.n	8008786 <_malloc_r+0x92>
 800873e:	230c      	movs	r3, #12
 8008740:	6033      	str	r3, [r6, #0]
 8008742:	4630      	mov	r0, r6
 8008744:	f000 f86c 	bl	8008820 <__malloc_unlock>
 8008748:	e7e3      	b.n	8008712 <_malloc_r+0x1e>
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	1b5b      	subs	r3, r3, r5
 800874e:	d417      	bmi.n	8008780 <_malloc_r+0x8c>
 8008750:	2b0b      	cmp	r3, #11
 8008752:	d903      	bls.n	800875c <_malloc_r+0x68>
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	441c      	add	r4, r3
 8008758:	6025      	str	r5, [r4, #0]
 800875a:	e004      	b.n	8008766 <_malloc_r+0x72>
 800875c:	6863      	ldr	r3, [r4, #4]
 800875e:	42a2      	cmp	r2, r4
 8008760:	bf0c      	ite	eq
 8008762:	600b      	streq	r3, [r1, #0]
 8008764:	6053      	strne	r3, [r2, #4]
 8008766:	4630      	mov	r0, r6
 8008768:	f000 f85a 	bl	8008820 <__malloc_unlock>
 800876c:	f104 000b 	add.w	r0, r4, #11
 8008770:	1d23      	adds	r3, r4, #4
 8008772:	f020 0007 	bic.w	r0, r0, #7
 8008776:	1ac2      	subs	r2, r0, r3
 8008778:	d0cc      	beq.n	8008714 <_malloc_r+0x20>
 800877a:	1a1b      	subs	r3, r3, r0
 800877c:	50a3      	str	r3, [r4, r2]
 800877e:	e7c9      	b.n	8008714 <_malloc_r+0x20>
 8008780:	4622      	mov	r2, r4
 8008782:	6864      	ldr	r4, [r4, #4]
 8008784:	e7cc      	b.n	8008720 <_malloc_r+0x2c>
 8008786:	1cc4      	adds	r4, r0, #3
 8008788:	f024 0403 	bic.w	r4, r4, #3
 800878c:	42a0      	cmp	r0, r4
 800878e:	d0e3      	beq.n	8008758 <_malloc_r+0x64>
 8008790:	1a21      	subs	r1, r4, r0
 8008792:	4630      	mov	r0, r6
 8008794:	f000 f82e 	bl	80087f4 <_sbrk_r>
 8008798:	3001      	adds	r0, #1
 800879a:	d1dd      	bne.n	8008758 <_malloc_r+0x64>
 800879c:	e7cf      	b.n	800873e <_malloc_r+0x4a>
 800879e:	bf00      	nop
 80087a0:	20000168 	.word	0x20000168
 80087a4:	2000016c 	.word	0x2000016c

080087a8 <_realloc_r>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	4607      	mov	r7, r0
 80087ac:	4614      	mov	r4, r2
 80087ae:	460e      	mov	r6, r1
 80087b0:	b921      	cbnz	r1, 80087bc <_realloc_r+0x14>
 80087b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087b6:	4611      	mov	r1, r2
 80087b8:	f7ff bf9c 	b.w	80086f4 <_malloc_r>
 80087bc:	b922      	cbnz	r2, 80087c8 <_realloc_r+0x20>
 80087be:	f7ff ff49 	bl	8008654 <_free_r>
 80087c2:	4625      	mov	r5, r4
 80087c4:	4628      	mov	r0, r5
 80087c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c8:	f000 f830 	bl	800882c <_malloc_usable_size_r>
 80087cc:	42a0      	cmp	r0, r4
 80087ce:	d20f      	bcs.n	80087f0 <_realloc_r+0x48>
 80087d0:	4621      	mov	r1, r4
 80087d2:	4638      	mov	r0, r7
 80087d4:	f7ff ff8e 	bl	80086f4 <_malloc_r>
 80087d8:	4605      	mov	r5, r0
 80087da:	2800      	cmp	r0, #0
 80087dc:	d0f2      	beq.n	80087c4 <_realloc_r+0x1c>
 80087de:	4631      	mov	r1, r6
 80087e0:	4622      	mov	r2, r4
 80087e2:	f7ff ff0f 	bl	8008604 <memcpy>
 80087e6:	4631      	mov	r1, r6
 80087e8:	4638      	mov	r0, r7
 80087ea:	f7ff ff33 	bl	8008654 <_free_r>
 80087ee:	e7e9      	b.n	80087c4 <_realloc_r+0x1c>
 80087f0:	4635      	mov	r5, r6
 80087f2:	e7e7      	b.n	80087c4 <_realloc_r+0x1c>

080087f4 <_sbrk_r>:
 80087f4:	b538      	push	{r3, r4, r5, lr}
 80087f6:	4d06      	ldr	r5, [pc, #24]	; (8008810 <_sbrk_r+0x1c>)
 80087f8:	2300      	movs	r3, #0
 80087fa:	4604      	mov	r4, r0
 80087fc:	4608      	mov	r0, r1
 80087fe:	602b      	str	r3, [r5, #0]
 8008800:	f7fa fe04 	bl	800340c <_sbrk>
 8008804:	1c43      	adds	r3, r0, #1
 8008806:	d102      	bne.n	800880e <_sbrk_r+0x1a>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	b103      	cbz	r3, 800880e <_sbrk_r+0x1a>
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	bd38      	pop	{r3, r4, r5, pc}
 8008810:	200004d8 	.word	0x200004d8

08008814 <__malloc_lock>:
 8008814:	4801      	ldr	r0, [pc, #4]	; (800881c <__malloc_lock+0x8>)
 8008816:	f000 b811 	b.w	800883c <__retarget_lock_acquire_recursive>
 800881a:	bf00      	nop
 800881c:	200004e0 	.word	0x200004e0

08008820 <__malloc_unlock>:
 8008820:	4801      	ldr	r0, [pc, #4]	; (8008828 <__malloc_unlock+0x8>)
 8008822:	f000 b80c 	b.w	800883e <__retarget_lock_release_recursive>
 8008826:	bf00      	nop
 8008828:	200004e0 	.word	0x200004e0

0800882c <_malloc_usable_size_r>:
 800882c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008830:	1f18      	subs	r0, r3, #4
 8008832:	2b00      	cmp	r3, #0
 8008834:	bfbc      	itt	lt
 8008836:	580b      	ldrlt	r3, [r1, r0]
 8008838:	18c0      	addlt	r0, r0, r3
 800883a:	4770      	bx	lr

0800883c <__retarget_lock_acquire_recursive>:
 800883c:	4770      	bx	lr

0800883e <__retarget_lock_release_recursive>:
 800883e:	4770      	bx	lr

08008840 <_init>:
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	bf00      	nop
 8008844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008846:	bc08      	pop	{r3}
 8008848:	469e      	mov	lr, r3
 800884a:	4770      	bx	lr

0800884c <_fini>:
 800884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884e:	bf00      	nop
 8008850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008852:	bc08      	pop	{r3}
 8008854:	469e      	mov	lr, r3
 8008856:	4770      	bx	lr
