
Bai2_Timer_7seg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cfc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002e84  08002e84  00003e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e94  08002e94  00004024  2**0
                  CONTENTS
  4 .ARM          00000008  08002e94  08002e94  00003e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e9c  08002e9c  00004024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e9c  08002e9c  00003e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ea0  08002ea0  00003ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002ea4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004024  2**0
                  CONTENTS
 10 .bss          000000d0  20000024  20000024  00004024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  00004024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bcd1  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002307  00000000  00000000  0000fd25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  00012030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000099b  00000000  00000000  00012cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e00  00000000  00000000  00013663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f7f2  00000000  00000000  00034463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6e6d  00000000  00000000  00043c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010aac2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032ac  00000000  00000000  0010ab08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0010ddb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e6c 	.word	0x08002e6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08002e6c 	.word	0x08002e6c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <clock_fsm>:
uint8_t second = 0;

uint8_t state_colon = 0;
uint8_t buffer[4] = {1, 2, 3, 0};

void clock_fsm(){
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
	second =  (second + 1)%60;
 80004bc:	4b38      	ldr	r3, [pc, #224]	@ (80005a0 <clock_fsm+0xe8>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	1c5a      	adds	r2, r3, #1
 80004c2:	4b38      	ldr	r3, [pc, #224]	@ (80005a4 <clock_fsm+0xec>)
 80004c4:	fb83 1302 	smull	r1, r3, r3, r2
 80004c8:	4413      	add	r3, r2
 80004ca:	1159      	asrs	r1, r3, #5
 80004cc:	17d3      	asrs	r3, r2, #31
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	460b      	mov	r3, r1
 80004d2:	011b      	lsls	r3, r3, #4
 80004d4:	1a5b      	subs	r3, r3, r1
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	1ad1      	subs	r1, r2, r3
 80004da:	b2ca      	uxtb	r2, r1
 80004dc:	4b30      	ldr	r3, [pc, #192]	@ (80005a0 <clock_fsm+0xe8>)
 80004de:	701a      	strb	r2, [r3, #0]
	if(second == 0){
 80004e0:	4b2f      	ldr	r3, [pc, #188]	@ (80005a0 <clock_fsm+0xe8>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d155      	bne.n	8000594 <clock_fsm+0xdc>
		min = (min + 1)%60;
 80004e8:	4b2f      	ldr	r3, [pc, #188]	@ (80005a8 <clock_fsm+0xf0>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	1c5a      	adds	r2, r3, #1
 80004ee:	4b2d      	ldr	r3, [pc, #180]	@ (80005a4 <clock_fsm+0xec>)
 80004f0:	fb83 1302 	smull	r1, r3, r3, r2
 80004f4:	4413      	add	r3, r2
 80004f6:	1159      	asrs	r1, r3, #5
 80004f8:	17d3      	asrs	r3, r2, #31
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	460b      	mov	r3, r1
 80004fe:	011b      	lsls	r3, r3, #4
 8000500:	1a5b      	subs	r3, r3, r1
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	1ad1      	subs	r1, r2, r3
 8000506:	b2ca      	uxtb	r2, r1
 8000508:	4b27      	ldr	r3, [pc, #156]	@ (80005a8 <clock_fsm+0xf0>)
 800050a:	701a      	strb	r2, [r3, #0]
		if(min == 0){
 800050c:	4b26      	ldr	r3, [pc, #152]	@ (80005a8 <clock_fsm+0xf0>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d13f      	bne.n	8000594 <clock_fsm+0xdc>
			hour = (hour + 1)%60;
 8000514:	4b25      	ldr	r3, [pc, #148]	@ (80005ac <clock_fsm+0xf4>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	1c5a      	adds	r2, r3, #1
 800051a:	4b22      	ldr	r3, [pc, #136]	@ (80005a4 <clock_fsm+0xec>)
 800051c:	fb83 1302 	smull	r1, r3, r3, r2
 8000520:	4413      	add	r3, r2
 8000522:	1159      	asrs	r1, r3, #5
 8000524:	17d3      	asrs	r3, r2, #31
 8000526:	1ac9      	subs	r1, r1, r3
 8000528:	460b      	mov	r3, r1
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	1ad1      	subs	r1, r2, r3
 8000532:	b2ca      	uxtb	r2, r1
 8000534:	4b1d      	ldr	r3, [pc, #116]	@ (80005ac <clock_fsm+0xf4>)
 8000536:	701a      	strb	r2, [r3, #0]
			buffer[0] = hour/10;
 8000538:	4b1c      	ldr	r3, [pc, #112]	@ (80005ac <clock_fsm+0xf4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4a1c      	ldr	r2, [pc, #112]	@ (80005b0 <clock_fsm+0xf8>)
 800053e:	fba2 2303 	umull	r2, r3, r2, r3
 8000542:	08db      	lsrs	r3, r3, #3
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4b1b      	ldr	r3, [pc, #108]	@ (80005b4 <clock_fsm+0xfc>)
 8000548:	701a      	strb	r2, [r3, #0]
			buffer[1] = hour%10;
 800054a:	4b18      	ldr	r3, [pc, #96]	@ (80005ac <clock_fsm+0xf4>)
 800054c:	781a      	ldrb	r2, [r3, #0]
 800054e:	4b18      	ldr	r3, [pc, #96]	@ (80005b0 <clock_fsm+0xf8>)
 8000550:	fba3 1302 	umull	r1, r3, r3, r2
 8000554:	08d9      	lsrs	r1, r3, #3
 8000556:	460b      	mov	r3, r1
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	440b      	add	r3, r1
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b14      	ldr	r3, [pc, #80]	@ (80005b4 <clock_fsm+0xfc>)
 8000564:	705a      	strb	r2, [r3, #1]
			buffer[2] = min/10;
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <clock_fsm+0xf0>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4a11      	ldr	r2, [pc, #68]	@ (80005b0 <clock_fsm+0xf8>)
 800056c:	fba2 2303 	umull	r2, r3, r2, r3
 8000570:	08db      	lsrs	r3, r3, #3
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b0f      	ldr	r3, [pc, #60]	@ (80005b4 <clock_fsm+0xfc>)
 8000576:	709a      	strb	r2, [r3, #2]
			buffer[3] = min%10;
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <clock_fsm+0xf0>)
 800057a:	781a      	ldrb	r2, [r3, #0]
 800057c:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <clock_fsm+0xf8>)
 800057e:	fba3 1302 	umull	r1, r3, r3, r2
 8000582:	08d9      	lsrs	r1, r3, #3
 8000584:	460b      	mov	r3, r1
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	440b      	add	r3, r1
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <clock_fsm+0xfc>)
 8000592:	70da      	strb	r2, [r3, #3]
		}
	}
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000040 	.word	0x20000040
 80005a4:	88888889 	.word	0x88888889
 80005a8:	20000001 	.word	0x20000001
 80005ac:	20000000 	.word	0x20000000
 80005b0:	cccccccd 	.word	0xcccccccd
 80005b4:	20000004 	.word	0x20000004

080005b8 <blink_colon>:

void blink_colon(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	if(state_colon == 0){
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <blink_colon+0x28>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d103      	bne.n	80005cc <blink_colon+0x14>
		state_colon = 1;
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <blink_colon+0x28>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
 80005ca:	e002      	b.n	80005d2 <blink_colon+0x1a>
	}else{
		state_colon = 0;
 80005cc:	4b04      	ldr	r3, [pc, #16]	@ (80005e0 <blink_colon+0x28>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
	}
	led7_SetColon(state_colon);
 80005d2:	4b03      	ldr	r3, [pc, #12]	@ (80005e0 <blink_colon+0x28>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f98e 	bl	80008f8 <led7_SetColon>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000041 	.word	0x20000041

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	@ 0x30
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
 80005fe:	4b5a      	ldr	r3, [pc, #360]	@ (8000768 <MX_GPIO_Init+0x184>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a59      	ldr	r2, [pc, #356]	@ (8000768 <MX_GPIO_Init+0x184>)
 8000604:	f043 0310 	orr.w	r3, r3, #16
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b57      	ldr	r3, [pc, #348]	@ (8000768 <MX_GPIO_Init+0x184>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0310 	and.w	r3, r3, #16
 8000612:	61bb      	str	r3, [r7, #24]
 8000614:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	4b53      	ldr	r3, [pc, #332]	@ (8000768 <MX_GPIO_Init+0x184>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a52      	ldr	r2, [pc, #328]	@ (8000768 <MX_GPIO_Init+0x184>)
 8000620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b50      	ldr	r3, [pc, #320]	@ (8000768 <MX_GPIO_Init+0x184>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	4b4c      	ldr	r3, [pc, #304]	@ (8000768 <MX_GPIO_Init+0x184>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	4a4b      	ldr	r2, [pc, #300]	@ (8000768 <MX_GPIO_Init+0x184>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6313      	str	r3, [r2, #48]	@ 0x30
 8000642:	4b49      	ldr	r3, [pc, #292]	@ (8000768 <MX_GPIO_Init+0x184>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	4b45      	ldr	r3, [pc, #276]	@ (8000768 <MX_GPIO_Init+0x184>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	4a44      	ldr	r2, [pc, #272]	@ (8000768 <MX_GPIO_Init+0x184>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	6313      	str	r3, [r2, #48]	@ 0x30
 800065e:	4b42      	ldr	r3, [pc, #264]	@ (8000768 <MX_GPIO_Init+0x184>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	4b3e      	ldr	r3, [pc, #248]	@ (8000768 <MX_GPIO_Init+0x184>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a3d      	ldr	r2, [pc, #244]	@ (8000768 <MX_GPIO_Init+0x184>)
 8000674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b3b      	ldr	r3, [pc, #236]	@ (8000768 <MX_GPIO_Init+0x184>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b37      	ldr	r3, [pc, #220]	@ (8000768 <MX_GPIO_Init+0x184>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a36      	ldr	r2, [pc, #216]	@ (8000768 <MX_GPIO_Init+0x184>)
 8000690:	f043 0308 	orr.w	r3, r3, #8
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b34      	ldr	r3, [pc, #208]	@ (8000768 <MX_GPIO_Init+0x184>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0308 	and.w	r3, r3, #8
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <MX_GPIO_Init+0x184>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a2f      	ldr	r2, [pc, #188]	@ (8000768 <MX_GPIO_Init+0x184>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <MX_GPIO_Init+0x184>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2170      	movs	r1, #112	@ 0x70
 80006c2:	482a      	ldr	r0, [pc, #168]	@ (800076c <MX_GPIO_Init+0x188>)
 80006c4:	f001 f808 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2140      	movs	r1, #64	@ 0x40
 80006cc:	4828      	ldr	r0, [pc, #160]	@ (8000770 <MX_GPIO_Init+0x18c>)
 80006ce:	f001 f803 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2108      	movs	r1, #8
 80006d6:	4827      	ldr	r0, [pc, #156]	@ (8000774 <MX_GPIO_Init+0x190>)
 80006d8:	f000 fffe 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80006dc:	2370      	movs	r3, #112	@ 0x70
 80006de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	481e      	ldr	r0, [pc, #120]	@ (800076c <MX_GPIO_Init+0x188>)
 80006f4:	f000 fe54 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80006f8:	23c0      	movs	r3, #192	@ 0xc0
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	481b      	ldr	r0, [pc, #108]	@ (8000778 <MX_GPIO_Init+0x194>)
 800070c:	f000 fe48 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000710:	2330      	movs	r3, #48	@ 0x30
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4816      	ldr	r0, [pc, #88]	@ (800077c <MX_GPIO_Init+0x198>)
 8000724:	f000 fe3c 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000728:	2340      	movs	r3, #64	@ 0x40
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4619      	mov	r1, r3
 800073e:	480c      	ldr	r0, [pc, #48]	@ (8000770 <MX_GPIO_Init+0x18c>)
 8000740:	f000 fe2e 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000744:	2308      	movs	r3, #8
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	4806      	ldr	r0, [pc, #24]	@ (8000774 <MX_GPIO_Init+0x190>)
 800075c:	f000 fe20 	bl	80013a0 <HAL_GPIO_Init>

}
 8000760:	bf00      	nop
 8000762:	3730      	adds	r7, #48	@ 0x30
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40021000 	.word	0x40021000
 8000770:	40021800 	.word	0x40021800
 8000774:	40020c00 	.word	0x40020c00
 8000778:	40020000 	.word	0x40020000
 800077c:	40020800 	.word	0x40020800

08000780 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000784:	2201      	movs	r2, #1
 8000786:	2140      	movs	r1, #64	@ 0x40
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <led7_init+0x14>)
 800078a:	f000 ffa5 	bl	80016d8 <HAL_GPIO_WritePin>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021800 	.word	0x40021800

08000798 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800079c:	4b3f      	ldr	r3, [pc, #252]	@ (800089c <led7_Scan+0x104>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b3d      	ldr	r3, [pc, #244]	@ (800089c <led7_Scan+0x104>)
 80007a6:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80007a8:	4b3d      	ldr	r3, [pc, #244]	@ (80008a0 <led7_Scan+0x108>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b3d      	ldr	r3, [pc, #244]	@ (80008a4 <led7_Scan+0x10c>)
 80007b0:	5c9b      	ldrb	r3, [r3, r2]
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	4b39      	ldr	r3, [pc, #228]	@ (800089c <led7_Scan+0x104>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b36      	ldr	r3, [pc, #216]	@ (800089c <led7_Scan+0x104>)
 80007c4:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80007c6:	4b36      	ldr	r3, [pc, #216]	@ (80008a0 <led7_Scan+0x108>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	d846      	bhi.n	800085c <led7_Scan+0xc4>
 80007ce:	a201      	add	r2, pc, #4	@ (adr r2, 80007d4 <led7_Scan+0x3c>)
 80007d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d4:	080007e5 	.word	0x080007e5
 80007d8:	08000803 	.word	0x08000803
 80007dc:	08000821 	.word	0x08000821
 80007e0:	0800083f 	.word	0x0800083f
	case 0:
		spi_buffer |= 0x00b0;
 80007e4:	4b2d      	ldr	r3, [pc, #180]	@ (800089c <led7_Scan+0x104>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	4b2b      	ldr	r3, [pc, #172]	@ (800089c <led7_Scan+0x104>)
 80007f0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80007f2:	4b2a      	ldr	r3, [pc, #168]	@ (800089c <led7_Scan+0x104>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	4b27      	ldr	r3, [pc, #156]	@ (800089c <led7_Scan+0x104>)
 80007fe:	801a      	strh	r2, [r3, #0]
		break;
 8000800:	e02d      	b.n	800085e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8000802:	4b26      	ldr	r3, [pc, #152]	@ (800089c <led7_Scan+0x104>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 800080a:	b29a      	uxth	r2, r3
 800080c:	4b23      	ldr	r3, [pc, #140]	@ (800089c <led7_Scan+0x104>)
 800080e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8000810:	4b22      	ldr	r3, [pc, #136]	@ (800089c <led7_Scan+0x104>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	f023 0320 	bic.w	r3, r3, #32
 8000818:	b29a      	uxth	r2, r3
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <led7_Scan+0x104>)
 800081c:	801a      	strh	r2, [r3, #0]
		break;
 800081e:	e01e      	b.n	800085e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <led7_Scan+0x104>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <led7_Scan+0x104>)
 800082c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800082e:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <led7_Scan+0x104>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	f023 0310 	bic.w	r3, r3, #16
 8000836:	b29a      	uxth	r2, r3
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <led7_Scan+0x104>)
 800083a:	801a      	strh	r2, [r3, #0]
		break;
 800083c:	e00f      	b.n	800085e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <led7_Scan+0x104>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000846:	b29a      	uxth	r2, r3
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <led7_Scan+0x104>)
 800084a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800084c:	4b13      	ldr	r3, [pc, #76]	@ (800089c <led7_Scan+0x104>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <led7_Scan+0x104>)
 8000858:	801a      	strh	r2, [r3, #0]
		break;
 800085a:	e000      	b.n	800085e <led7_Scan+0xc6>
	default:
		break;
 800085c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <led7_Scan+0x108>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	425a      	negs	r2, r3
 8000866:	f003 0303 	and.w	r3, r3, #3
 800086a:	f002 0203 	and.w	r2, r2, #3
 800086e:	bf58      	it	pl
 8000870:	4253      	negpl	r3, r2
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <led7_Scan+0x108>)
 8000876:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2140      	movs	r1, #64	@ 0x40
 800087c:	480a      	ldr	r0, [pc, #40]	@ (80008a8 <led7_Scan+0x110>)
 800087e:	f000 ff2b 	bl	80016d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8000882:	2301      	movs	r3, #1
 8000884:	2202      	movs	r2, #2
 8000886:	4905      	ldr	r1, [pc, #20]	@ (800089c <led7_Scan+0x104>)
 8000888:	4808      	ldr	r0, [pc, #32]	@ (80008ac <led7_Scan+0x114>)
 800088a:	f001 fc2c 	bl	80020e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800088e:	2201      	movs	r2, #1
 8000890:	2140      	movs	r1, #64	@ 0x40
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <led7_Scan+0x110>)
 8000894:	f000 ff20 	bl	80016d8 <HAL_GPIO_WritePin>
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000016 	.word	0x20000016
 80008a0:	20000042 	.word	0x20000042
 80008a4:	20000008 	.word	0x20000008
 80008a8:	40021800 	.word	0x40021800
 80008ac:	20000050 	.word	0x20000050

080008b0 <led7_SetDigit>:
  * @param  num	Number displayed
  * @param  pos	The position displayed (index from 0)
  * @param  show_dot Show dot in the led or not
  * @retval None
  */
void led7_SetDigit(int num, int position, uint8_t show_dot){
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	4613      	mov	r3, r2
 80008bc:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db0e      	blt.n	80008e2 <led7_SetDigit+0x32>
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2b09      	cmp	r3, #9
 80008c8:	dc0b      	bgt.n	80008e2 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80008ca:	4a09      	ldr	r2, [pc, #36]	@ (80008f0 <led7_SetDigit+0x40>)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	b2d9      	uxtb	r1, r3
 80008d8:	4a06      	ldr	r2, [pc, #24]	@ (80008f4 <led7_SetDigit+0x44>)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	4413      	add	r3, r2
 80008de:	460a      	mov	r2, r1
 80008e0:	701a      	strb	r2, [r3, #0]
	}
}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	2000000c 	.word	0x2000000c
 80008f4:	20000008 	.word	0x20000008

080008f8 <led7_SetColon>:
  *          This parameter can be one of the following values:
  *            @arg 0: Turn off
  *            @arg 1: Turn on
  * @retval None
  */
void led7_SetColon(uint8_t status){
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d107      	bne.n	8000918 <led7_SetColon+0x20>
 8000908:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <led7_SetColon+0x3c>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	f023 0308 	bic.w	r3, r3, #8
 8000910:	b29a      	uxth	r2, r3
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <led7_SetColon+0x3c>)
 8000914:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 8000916:	e006      	b.n	8000926 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <led7_SetColon+0x3c>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	b29a      	uxth	r2, r3
 8000922:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <led7_SetColon+0x3c>)
 8000924:	801a      	strh	r2, [r3, #0]
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000016 	.word	0x20000016

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093c:	f000 fbac 	bl	8001098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000940:	f000 f820 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000944:	f7ff fe4e 	bl	80005e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000948:	f000 fac8 	bl	8000edc <MX_TIM2_Init>
  MX_SPI1_Init();
 800094c:	f000 f9d4 	bl	8000cf8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8000950:	f000 f882 	bl	8000a58 <system_init>
  led7_SetColon(1);
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff ffcf 	bl	80008f8 <led7_SetColon>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 800095a:	bf00      	nop
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <main+0x48>)
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0fb      	beq.n	800095c <main+0x24>
	  flag_timer2 = 0;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <main+0x48>)
 8000966:	2200      	movs	r2, #0
 8000968:	801a      	strh	r2, [r3, #0]
	  // main task, every 50ms
//	  test_LedDebug();
//	  test_LedY0();
//	  test_LedY1();
	  test_7seg();
 800096a:	f000 f891 	bl	8000a90 <test_7seg>
	  traffic_light();
 800096e:	f000 f8b1 	bl	8000ad4 <traffic_light>
	  clock_call_back();
 8000972:	f000 f8f1 	bl	8000b58 <clock_call_back>
	  colon_call_back();
 8000976:	f000 f90f 	bl	8000b98 <colon_call_back>
	  shift_led();
 800097a:	f000 f92b 	bl	8000bd4 <shift_led>
	  while(!flag_timer2);
 800097e:	e7ec      	b.n	800095a <main+0x22>
 8000980:	2000004a 	.word	0x2000004a

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b094      	sub	sp, #80	@ 0x50
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0320 	add.w	r3, r7, #32
 800098e:	2230      	movs	r2, #48	@ 0x30
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f002 fa3e 	bl	8002e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	4b28      	ldr	r3, [pc, #160]	@ (8000a50 <SystemClock_Config+0xcc>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	4a27      	ldr	r2, [pc, #156]	@ (8000a50 <SystemClock_Config+0xcc>)
 80009b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b8:	4b25      	ldr	r3, [pc, #148]	@ (8000a50 <SystemClock_Config+0xcc>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <SystemClock_Config+0xd0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a21      	ldr	r2, [pc, #132]	@ (8000a54 <SystemClock_Config+0xd0>)
 80009ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <SystemClock_Config+0xd0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e0:	2302      	movs	r3, #2
 80009e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e4:	2301      	movs	r3, #1
 80009e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e8:	2310      	movs	r3, #16
 80009ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009f4:	2308      	movs	r3, #8
 80009f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009f8:	23a8      	movs	r3, #168	@ 0xa8
 80009fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a00:	2304      	movs	r3, #4
 8000a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a04:	f107 0320 	add.w	r3, r7, #32
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 fe7f 	bl	800170c <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a14:	f000 f91a 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a18:	230f      	movs	r3, #15
 8000a1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a24:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000a2a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	2105      	movs	r1, #5
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 f8e0 	bl	8001bfc <HAL_RCC_ClockConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a42:	f000 f903 	bl	8000c4c <Error_Handler>
  }
}
 8000a46:	bf00      	nop
 8000a48:	3750      	adds	r7, #80	@ 0x50
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40007000 	.word	0x40007000

08000a58 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2120      	movs	r1, #32
 8000a60:	480a      	ldr	r0, [pc, #40]	@ (8000a8c <system_init+0x34>)
 8000a62:	f000 fe39 	bl	80016d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2140      	movs	r1, #64	@ 0x40
 8000a6a:	4808      	ldr	r0, [pc, #32]	@ (8000a8c <system_init+0x34>)
 8000a6c:	f000 fe34 	bl	80016d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2110      	movs	r1, #16
 8000a74:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <system_init+0x34>)
 8000a76:	f000 fe2f 	bl	80016d8 <HAL_GPIO_WritePin>
	  timer_init();
 8000a7a:	f000 f8ed 	bl	8000c58 <timer_init>
	  led7_init();
 8000a7e:	f7ff fe7f 	bl	8000780 <led7_init>
	  setTimer2(50);
 8000a82:	2032      	movs	r0, #50	@ 0x32
 8000a84:	f000 f8f2 	bl	8000c6c <setTimer2>
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021000 	.word	0x40021000

08000a90 <test_7seg>:
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y1_Pin, 1);
	}
}

void test_7seg(){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	//write number1 at led index 0 (not show dot)
	led7_SetDigit(buffer[0], 0, 0);
 8000a94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <test_7seg+0x40>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff07 	bl	80008b0 <led7_SetDigit>
	led7_SetDigit(buffer[1], 1, 0);
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <test_7seg+0x40>)
 8000aa4:	785b      	ldrb	r3, [r3, #1]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff00 	bl	80008b0 <led7_SetDigit>
	led7_SetDigit(buffer[2], 2, 0);
 8000ab0:	4b07      	ldr	r3, [pc, #28]	@ (8000ad0 <test_7seg+0x40>)
 8000ab2:	789b      	ldrb	r3, [r3, #2]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2102      	movs	r1, #2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fef9 	bl	80008b0 <led7_SetDigit>
	led7_SetDigit(buffer[3], 3, 0);
 8000abe:	4b04      	ldr	r3, [pc, #16]	@ (8000ad0 <test_7seg+0x40>)
 8000ac0:	78db      	ldrb	r3, [r3, #3]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fef2 	bl	80008b0 <led7_SetDigit>
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <traffic_light>:
uint8_t count_traffic = 0;
uint8_t state = 0;
void traffic_light(){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	count_traffic++;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <traffic_light+0x7c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <traffic_light+0x7c>)
 8000ae2:	701a      	strb	r2, [r3, #0]
	if(state == 0){
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <traffic_light+0x80>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10c      	bne.n	8000b06 <traffic_light+0x32>
		if(count_traffic >= 100){
 8000aec:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <traffic_light+0x7c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b63      	cmp	r3, #99	@ 0x63
 8000af2:	d908      	bls.n	8000b06 <traffic_light+0x32>
			count_traffic = 0;
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <traffic_light+0x7c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
			state = 1;
 8000afa:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <traffic_light+0x80>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
			traffic_light_state(1);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f000 fa5d 	bl	8000fc0 <traffic_light_state>
		}
	}
	if(state == 1){
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <traffic_light+0x80>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d10c      	bne.n	8000b28 <traffic_light+0x54>
		if(count_traffic >= 60){
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <traffic_light+0x7c>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b3b      	cmp	r3, #59	@ 0x3b
 8000b14:	d908      	bls.n	8000b28 <traffic_light+0x54>
			count_traffic = 0;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <traffic_light+0x7c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
			state = 2;
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <traffic_light+0x80>)
 8000b1e:	2202      	movs	r2, #2
 8000b20:	701a      	strb	r2, [r3, #0]
			traffic_light_state(2);
 8000b22:	2002      	movs	r0, #2
 8000b24:	f000 fa4c 	bl	8000fc0 <traffic_light_state>
		}
	}
	if(state == 2){
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <traffic_light+0x80>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d10c      	bne.n	8000b4a <traffic_light+0x76>
		if(count_traffic >= 40){
 8000b30:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <traffic_light+0x7c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b27      	cmp	r3, #39	@ 0x27
 8000b36:	d908      	bls.n	8000b4a <traffic_light+0x76>
			count_traffic = 0;
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <traffic_light+0x7c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
			state = 0;
 8000b3e:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <traffic_light+0x80>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
			traffic_light_state(0);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 fa3b 	bl	8000fc0 <traffic_light_state>
		}
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000044 	.word	0x20000044
 8000b54:	20000045 	.word	0x20000045

08000b58 <clock_call_back>:

uint16_t count_clock = 0;
void clock_call_back(){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	count_clock = (count_clock + 1)%20;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <clock_call_back+0x38>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	1c5a      	adds	r2, r3, #1
 8000b62:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <clock_call_back+0x3c>)
 8000b64:	fb83 1302 	smull	r1, r3, r3, r2
 8000b68:	10d9      	asrs	r1, r3, #3
 8000b6a:	17d3      	asrs	r3, r2, #31
 8000b6c:	1ac9      	subs	r1, r1, r3
 8000b6e:	460b      	mov	r3, r1
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	440b      	add	r3, r1
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	1ad1      	subs	r1, r2, r3
 8000b78:	b28a      	uxth	r2, r1
 8000b7a:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <clock_call_back+0x38>)
 8000b7c:	801a      	strh	r2, [r3, #0]
	if(count_clock == 0)
 8000b7e:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <clock_call_back+0x38>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <clock_call_back+0x32>
		clock_fsm();
 8000b86:	f7ff fc97 	bl	80004b8 <clock_fsm>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000046 	.word	0x20000046
 8000b94:	66666667 	.word	0x66666667

08000b98 <colon_call_back>:

uint8_t count_colon =0;
void colon_call_back(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	count_colon = (count_colon+1) %5;
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <colon_call_back+0x34>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	1c5a      	adds	r2, r3, #1
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <colon_call_back+0x38>)
 8000ba4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ba8:	1059      	asrs	r1, r3, #1
 8000baa:	17d3      	asrs	r3, r2, #31
 8000bac:	1ac9      	subs	r1, r1, r3
 8000bae:	460b      	mov	r3, r1
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	1ad1      	subs	r1, r2, r3
 8000bb6:	b2ca      	uxtb	r2, r1
 8000bb8:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <colon_call_back+0x34>)
 8000bba:	701a      	strb	r2, [r3, #0]
	if(count_colon == 0)
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <colon_call_back+0x34>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <colon_call_back+0x30>
		blink_colon();
 8000bc4:	f7ff fcf8 	bl	80005b8 <blink_colon>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000048 	.word	0x20000048
 8000bd0:	66666667 	.word	0x66666667

08000bd4 <shift_led>:

uint8_t count_shift = 0;
void shift_led(){
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
	count_shift = (count_shift + 1)%20;
 8000bda:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <shift_led+0x6c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <shift_led+0x70>)
 8000be2:	fb83 1302 	smull	r1, r3, r3, r2
 8000be6:	10d9      	asrs	r1, r3, #3
 8000be8:	17d3      	asrs	r3, r2, #31
 8000bea:	1ac9      	subs	r1, r1, r3
 8000bec:	460b      	mov	r3, r1
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	1ad1      	subs	r1, r2, r3
 8000bf6:	b2ca      	uxtb	r2, r1
 8000bf8:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <shift_led+0x6c>)
 8000bfa:	701a      	strb	r2, [r3, #0]
	if(count_shift == 0){
 8000bfc:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <shift_led+0x6c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d117      	bne.n	8000c34 <shift_led+0x60>
		uint8_t temp = buffer[0];
 8000c04:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <shift_led+0x74>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	70fb      	strb	r3, [r7, #3]
		for(int i = 0; i < 3; i++){
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	e00b      	b.n	8000c28 <shift_led+0x54>
			buffer[i] = buffer[i+1];
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3301      	adds	r3, #1
 8000c14:	4a0c      	ldr	r2, [pc, #48]	@ (8000c48 <shift_led+0x74>)
 8000c16:	5cd1      	ldrb	r1, [r2, r3]
 8000c18:	4a0b      	ldr	r2, [pc, #44]	@ (8000c48 <shift_led+0x74>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	460a      	mov	r2, r1
 8000c20:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 3; i++){
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3301      	adds	r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	ddf0      	ble.n	8000c10 <shift_led+0x3c>
		}
		buffer[3] = temp;
 8000c2e:	4a06      	ldr	r2, [pc, #24]	@ (8000c48 <shift_led+0x74>)
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	70d3      	strb	r3, [r2, #3]
	}
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	20000049 	.word	0x20000049
 8000c44:	66666667 	.word	0x66666667
 8000c48:	20000004 	.word	0x20000004

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <Error_Handler+0x8>

08000c58 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <timer_init+0x10>)
 8000c5e:	f001 fcb3 	bl	80025c8 <HAL_TIM_Base_Start_IT>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000a8 	.word	0x200000a8

08000c6c <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8000c76:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <setTimer2+0x2c>)
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <setTimer2+0x2c>)
 8000c7e:	881a      	ldrh	r2, [r3, #0]
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <setTimer2+0x30>)
 8000c82:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <setTimer2+0x34>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	801a      	strh	r2, [r3, #0]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	2000004e 	.word	0x2000004e
 8000c9c:	2000004c 	.word	0x2000004c
 8000ca0:	2000004a 	.word	0x2000004a

08000ca4 <HAL_TIM_PeriodElapsedCallback>:
  * @note	This callback function is called by system
  * @retval None
  */
uint16_t count_7_seg = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cb4:	d116      	bne.n	8000ce4 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d010      	beq.n	8000ce0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cc8:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d106      	bne.n	8000ce0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000cda:	881a      	ldrh	r2, [r3, #0]
 8000cdc:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cde:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
//		count_7_seg = (count_7_seg + 1)%4;
//		if(count_7_seg == 0)
			led7_Scan();
 8000ce0:	f7ff fd5a 	bl	8000798 <led7_Scan>
	}
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2000004c 	.word	0x2000004c
 8000cf0:	2000004a 	.word	0x2000004a
 8000cf4:	2000004e 	.word	0x2000004e

08000cf8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <MX_SPI1_Init+0x64>)
 8000cfe:	4a18      	ldr	r2, [pc, #96]	@ (8000d60 <MX_SPI1_Init+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d02:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <MX_SPI1_Init+0x64>)
 8000d04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <MX_SPI1_Init+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <MX_SPI1_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <MX_SPI1_Init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <MX_SPI1_Init+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <MX_SPI1_Init+0x64>)
 8000d24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <MX_SPI1_Init+0x64>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d30:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <MX_SPI1_Init+0x64>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d36:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <MX_SPI1_Init+0x64>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d3c:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <MX_SPI1_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <MX_SPI1_Init+0x64>)
 8000d44:	220a      	movs	r2, #10
 8000d46:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d48:	4804      	ldr	r0, [pc, #16]	@ (8000d5c <MX_SPI1_Init+0x64>)
 8000d4a:	f001 f943 	bl	8001fd4 <HAL_SPI_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d54:	f7ff ff7a 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000050 	.word	0x20000050
 8000d60:	40013000 	.word	0x40013000

08000d64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a19      	ldr	r2, [pc, #100]	@ (8000de8 <HAL_SPI_MspInit+0x84>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d12b      	bne.n	8000dde <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <HAL_SPI_MspInit+0x88>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8e:	4a17      	ldr	r2, [pc, #92]	@ (8000dec <HAL_SPI_MspInit+0x88>)
 8000d90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <HAL_SPI_MspInit+0x88>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <HAL_SPI_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a10      	ldr	r2, [pc, #64]	@ (8000dec <HAL_SPI_MspInit+0x88>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <HAL_SPI_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000dbe:	2338      	movs	r3, #56	@ 0x38
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dce:	2305      	movs	r3, #5
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <HAL_SPI_MspInit+0x8c>)
 8000dda:	f000 fae1 	bl	80013a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	@ 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40013000 	.word	0x40013000
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020400 	.word	0x40020400

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	4a0f      	ldr	r2, [pc, #60]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <NMI_Handler+0x4>

08000e4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9a:	f000 f94f 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <TIM2_IRQHandler+0x10>)
 8000eaa:	f001 fbfd 	bl	80026a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200000a8 	.word	0x200000a8

08000eb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ebc:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <SystemInit+0x20>)
 8000ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ec2:	4a05      	ldr	r2, [pc, #20]	@ (8000ed8 <SystemInit+0x20>)
 8000ec4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <MX_TIM2_Init+0x94>)
 8000efa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000efe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <MX_TIM2_Init+0x94>)
 8000f02:	f240 3247 	movw	r2, #839	@ 0x347
 8000f06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b19      	ldr	r3, [pc, #100]	@ (8000f70 <MX_TIM2_Init+0x94>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <MX_TIM2_Init+0x94>)
 8000f10:	2263      	movs	r2, #99	@ 0x63
 8000f12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f14:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <MX_TIM2_Init+0x94>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <MX_TIM2_Init+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f20:	4813      	ldr	r0, [pc, #76]	@ (8000f70 <MX_TIM2_Init+0x94>)
 8000f22:	f001 fb01 	bl	8002528 <HAL_TIM_Base_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f2c:	f7ff fe8e 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <MX_TIM2_Init+0x94>)
 8000f3e:	f001 fca3 	bl	8002888 <HAL_TIM_ConfigClockSource>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f48:	f7ff fe80 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <MX_TIM2_Init+0x94>)
 8000f5a:	f001 fecb 	bl	8002cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f64:	f7ff fe72 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200000a8 	.word	0x200000a8

08000f74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f84:	d115      	bne.n	8000fb2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <HAL_TIM_Base_MspInit+0x48>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fbc <HAL_TIM_Base_MspInit+0x48>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <HAL_TIM_Base_MspInit+0x48>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	201c      	movs	r0, #28
 8000fa8:	f000 f9c3 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fac:	201c      	movs	r0, #28
 8000fae:	f000 f9dc 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <traffic_light_state>:
uint8_t flag_red;
uint8_t flag_yellow;
uint8_t flag_green;

//uint8_t state;
void traffic_light_state(uint8_t state){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	if(state == 0){
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10e      	bne.n	8000fee <traffic_light_state+0x2e>
		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2110      	movs	r1, #16
 8000fd4:	481a      	ldr	r0, [pc, #104]	@ (8001040 <traffic_light_state+0x80>)
 8000fd6:	f000 fb7f 	bl	80016d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2120      	movs	r1, #32
 8000fde:	4818      	ldr	r0, [pc, #96]	@ (8001040 <traffic_light_state+0x80>)
 8000fe0:	f000 fb7a 	bl	80016d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2140      	movs	r1, #64	@ 0x40
 8000fe8:	4815      	ldr	r0, [pc, #84]	@ (8001040 <traffic_light_state+0x80>)
 8000fea:	f000 fb75 	bl	80016d8 <HAL_GPIO_WritePin>
	}
	if(state == 1){
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d10e      	bne.n	8001012 <traffic_light_state+0x52>
		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4811      	ldr	r0, [pc, #68]	@ (8001040 <traffic_light_state+0x80>)
 8000ffa:	f000 fb6d 	bl	80016d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2120      	movs	r1, #32
 8001002:	480f      	ldr	r0, [pc, #60]	@ (8001040 <traffic_light_state+0x80>)
 8001004:	f000 fb68 	bl	80016d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2140      	movs	r1, #64	@ 0x40
 800100c:	480c      	ldr	r0, [pc, #48]	@ (8001040 <traffic_light_state+0x80>)
 800100e:	f000 fb63 	bl	80016d8 <HAL_GPIO_WritePin>
	}
	if(state == 2){
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d10e      	bne.n	8001036 <traffic_light_state+0x76>
		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2110      	movs	r1, #16
 800101c:	4808      	ldr	r0, [pc, #32]	@ (8001040 <traffic_light_state+0x80>)
 800101e:	f000 fb5b 	bl	80016d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2120      	movs	r1, #32
 8001026:	4806      	ldr	r0, [pc, #24]	@ (8001040 <traffic_light_state+0x80>)
 8001028:	f000 fb56 	bl	80016d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 1);
 800102c:	2201      	movs	r2, #1
 800102e:	2140      	movs	r1, #64	@ 0x40
 8001030:	4803      	ldr	r0, [pc, #12]	@ (8001040 <traffic_light_state+0x80>)
 8001032:	f000 fb51 	bl	80016d8 <HAL_GPIO_WritePin>
	}
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001044:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800107c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001048:	480d      	ldr	r0, [pc, #52]	@ (8001080 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800104a:	490e      	ldr	r1, [pc, #56]	@ (8001084 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800104c:	4a0e      	ldr	r2, [pc, #56]	@ (8001088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a0b      	ldr	r2, [pc, #44]	@ (800108c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001060:	4c0b      	ldr	r4, [pc, #44]	@ (8001090 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800106e:	f7ff ff23 	bl	8000eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001072:	f001 fed7 	bl	8002e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001076:	f7ff fc5f 	bl	8000938 <main>
  bx  lr    
 800107a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800107c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001088:	08002ea4 	.word	0x08002ea4
  ldr r2, =_sbss
 800108c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001090:	200000f4 	.word	0x200000f4

08001094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC_IRQHandler>
	...

08001098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800109c:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <HAL_Init+0x40>)
 80010a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <HAL_Init+0x40>)
 80010ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <HAL_Init+0x40>)
 80010ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f000 f92b 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c6:	200f      	movs	r0, #15
 80010c8:	f000 f808 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010cc:	f7ff fe92 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023c00 	.word	0x40023c00

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <HAL_InitTick+0x54>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x58>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f943 	bl	8001386 <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f000 f90b 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <HAL_InitTick+0x5c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000018 	.word	0x20000018
 8001134:	20000020 	.word	0x20000020
 8001138:	2000001c 	.word	0x2000001c

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000020 	.word	0x20000020
 8001160:	200000f0 	.word	0x200000f0

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	200000f0 	.word	0x200000f0

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	@ (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	@ (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	@ (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	@ 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	@ 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff29 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff3e 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff8e 	bl	8001270 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5d 	bl	800121c <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff31 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffa2 	bl	80012d8 <SysTick_Config>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e16b      	b.n	8001694 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013bc:	2201      	movs	r2, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 815a 	bne.w	800168e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d005      	beq.n	80013f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d130      	bne.n	8001454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 0201 	and.w	r2, r3, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b03      	cmp	r3, #3
 800145e:	d017      	beq.n	8001490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d123      	bne.n	80014e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	69b9      	ldr	r1, [r7, #24]
 80014e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80b4 	beq.w	800168e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b60      	ldr	r3, [pc, #384]	@ (80016ac <HAL_GPIO_Init+0x30c>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	4a5f      	ldr	r2, [pc, #380]	@ (80016ac <HAL_GPIO_Init+0x30c>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001534:	6453      	str	r3, [r2, #68]	@ 0x44
 8001536:	4b5d      	ldr	r3, [pc, #372]	@ (80016ac <HAL_GPIO_Init+0x30c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001542:	4a5b      	ldr	r2, [pc, #364]	@ (80016b0 <HAL_GPIO_Init+0x310>)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a52      	ldr	r2, [pc, #328]	@ (80016b4 <HAL_GPIO_Init+0x314>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d02b      	beq.n	80015c6 <HAL_GPIO_Init+0x226>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a51      	ldr	r2, [pc, #324]	@ (80016b8 <HAL_GPIO_Init+0x318>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d025      	beq.n	80015c2 <HAL_GPIO_Init+0x222>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a50      	ldr	r2, [pc, #320]	@ (80016bc <HAL_GPIO_Init+0x31c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d01f      	beq.n	80015be <HAL_GPIO_Init+0x21e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4f      	ldr	r2, [pc, #316]	@ (80016c0 <HAL_GPIO_Init+0x320>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d019      	beq.n	80015ba <HAL_GPIO_Init+0x21a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4e      	ldr	r2, [pc, #312]	@ (80016c4 <HAL_GPIO_Init+0x324>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0x216>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4d      	ldr	r2, [pc, #308]	@ (80016c8 <HAL_GPIO_Init+0x328>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d00d      	beq.n	80015b2 <HAL_GPIO_Init+0x212>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4c      	ldr	r2, [pc, #304]	@ (80016cc <HAL_GPIO_Init+0x32c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d007      	beq.n	80015ae <HAL_GPIO_Init+0x20e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4b      	ldr	r2, [pc, #300]	@ (80016d0 <HAL_GPIO_Init+0x330>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_GPIO_Init+0x20a>
 80015a6:	2307      	movs	r3, #7
 80015a8:	e00e      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015aa:	2308      	movs	r3, #8
 80015ac:	e00c      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015ae:	2306      	movs	r3, #6
 80015b0:	e00a      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015b2:	2305      	movs	r3, #5
 80015b4:	e008      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015b6:	2304      	movs	r3, #4
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015ba:	2303      	movs	r3, #3
 80015bc:	e004      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015be:	2302      	movs	r3, #2
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015c6:	2300      	movs	r3, #0
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	f002 0203 	and.w	r2, r2, #3
 80015ce:	0092      	lsls	r2, r2, #2
 80015d0:	4093      	lsls	r3, r2
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d8:	4935      	ldr	r1, [pc, #212]	@ (80016b0 <HAL_GPIO_Init+0x310>)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015e6:	4b3b      	ldr	r3, [pc, #236]	@ (80016d4 <HAL_GPIO_Init+0x334>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800160a:	4a32      	ldr	r2, [pc, #200]	@ (80016d4 <HAL_GPIO_Init+0x334>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001610:	4b30      	ldr	r3, [pc, #192]	@ (80016d4 <HAL_GPIO_Init+0x334>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001634:	4a27      	ldr	r2, [pc, #156]	@ (80016d4 <HAL_GPIO_Init+0x334>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800163a:	4b26      	ldr	r3, [pc, #152]	@ (80016d4 <HAL_GPIO_Init+0x334>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800165e:	4a1d      	ldr	r2, [pc, #116]	@ (80016d4 <HAL_GPIO_Init+0x334>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001664:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <HAL_GPIO_Init+0x334>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001688:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <HAL_GPIO_Init+0x334>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3301      	adds	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	f67f ae90 	bls.w	80013bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	@ 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40013800 	.word	0x40013800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40020800 	.word	0x40020800
 80016c0:	40020c00 	.word	0x40020c00
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40021400 	.word	0x40021400
 80016cc:	40021800 	.word	0x40021800
 80016d0:	40021c00 	.word	0x40021c00
 80016d4:	40013c00 	.word	0x40013c00

080016d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f4:	e003      	b.n	80016fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	619a      	str	r2, [r3, #24]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e267      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d075      	beq.n	8001816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800172a:	4b88      	ldr	r3, [pc, #544]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b04      	cmp	r3, #4
 8001734:	d00c      	beq.n	8001750 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001736:	4b85      	ldr	r3, [pc, #532]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800173e:	2b08      	cmp	r3, #8
 8001740:	d112      	bne.n	8001768 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001742:	4b82      	ldr	r3, [pc, #520]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800174e:	d10b      	bne.n	8001768 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	4b7e      	ldr	r3, [pc, #504]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d05b      	beq.n	8001814 <HAL_RCC_OscConfig+0x108>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d157      	bne.n	8001814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e242      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001770:	d106      	bne.n	8001780 <HAL_RCC_OscConfig+0x74>
 8001772:	4b76      	ldr	r3, [pc, #472]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a75      	ldr	r2, [pc, #468]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e01d      	b.n	80017bc <HAL_RCC_OscConfig+0xb0>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x98>
 800178a:	4b70      	ldr	r3, [pc, #448]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6f      	ldr	r2, [pc, #444]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	4b6d      	ldr	r3, [pc, #436]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6c      	ldr	r2, [pc, #432]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e00b      	b.n	80017bc <HAL_RCC_OscConfig+0xb0>
 80017a4:	4b69      	ldr	r3, [pc, #420]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a68      	ldr	r2, [pc, #416]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b66      	ldr	r3, [pc, #408]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a65      	ldr	r2, [pc, #404]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d013      	beq.n	80017ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fcce 	bl	8001164 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fcca 	bl	8001164 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	@ 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e207      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b5b      	ldr	r3, [pc, #364]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0xc0>
 80017ea:	e014      	b.n	8001816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fcba 	bl	8001164 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fcb6 	bl	8001164 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	@ 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e1f3      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	4b51      	ldr	r3, [pc, #324]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0xe8>
 8001812:	e000      	b.n	8001816 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d063      	beq.n	80018ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001822:	4b4a      	ldr	r3, [pc, #296]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00b      	beq.n	8001846 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182e:	4b47      	ldr	r3, [pc, #284]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001836:	2b08      	cmp	r3, #8
 8001838:	d11c      	bne.n	8001874 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183a:	4b44      	ldr	r3, [pc, #272]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d116      	bne.n	8001874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	4b41      	ldr	r3, [pc, #260]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_RCC_OscConfig+0x152>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d001      	beq.n	800185e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e1c7      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185e:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4937      	ldr	r1, [pc, #220]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	e03a      	b.n	80018ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d020      	beq.n	80018be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187c:	4b34      	ldr	r3, [pc, #208]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fc6f 	bl	8001164 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fc6b 	bl	8001164 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e1a8      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b28      	ldr	r3, [pc, #160]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4925      	ldr	r1, [pc, #148]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fc4e 	bl	8001164 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018cc:	f7ff fc4a 	bl	8001164 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e187      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d036      	beq.n	8001964 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d016      	beq.n	800192c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <HAL_RCC_OscConfig+0x248>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff fc2e 	bl	8001164 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff fc2a 	bl	8001164 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e167      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x200>
 800192a:	e01b      	b.n	8001964 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_RCC_OscConfig+0x248>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff fc17 	bl	8001164 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	e00e      	b.n	8001958 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff fc13 	bl	8001164 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d907      	bls.n	8001958 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e150      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
 800194c:	40023800 	.word	0x40023800
 8001950:	42470000 	.word	0x42470000
 8001954:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	4b88      	ldr	r3, [pc, #544]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 800195a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ea      	bne.n	800193a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 8097 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001976:	4b81      	ldr	r3, [pc, #516]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10f      	bne.n	80019a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b7d      	ldr	r3, [pc, #500]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4a7c      	ldr	r2, [pc, #496]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40
 8001992:	4b7a      	ldr	r3, [pc, #488]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	4b77      	ldr	r3, [pc, #476]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d118      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ae:	4b74      	ldr	r3, [pc, #464]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a73      	ldr	r2, [pc, #460]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fbd3 	bl	8001164 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7ff fbcf 	bl	8001164 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e10c      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x2ea>
 80019e8:	4b64      	ldr	r3, [pc, #400]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ec:	4a63      	ldr	r2, [pc, #396]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f4:	e01c      	b.n	8001a30 <HAL_RCC_OscConfig+0x324>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b05      	cmp	r3, #5
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x30c>
 80019fe:	4b5f      	ldr	r3, [pc, #380]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a02:	4a5e      	ldr	r2, [pc, #376]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a0e:	4a5b      	ldr	r2, [pc, #364]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0x324>
 8001a18:	4b58      	ldr	r3, [pc, #352]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1c:	4a57      	ldr	r2, [pc, #348]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a24:	4b55      	ldr	r3, [pc, #340]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a28:	4a54      	ldr	r2, [pc, #336]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a2a:	f023 0304 	bic.w	r3, r3, #4
 8001a2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d015      	beq.n	8001a64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff fb94 	bl	8001164 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a40:	f7ff fb90 	bl	8001164 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0cb      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a56:	4b49      	ldr	r3, [pc, #292]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0ee      	beq.n	8001a40 <HAL_RCC_OscConfig+0x334>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a64:	f7ff fb7e 	bl	8001164 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fb7a 	bl	8001164 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e0b5      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a82:	4b3e      	ldr	r3, [pc, #248]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1ee      	bne.n	8001a6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d105      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a94:	4b39      	ldr	r3, [pc, #228]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	4a38      	ldr	r2, [pc, #224]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a1 	beq.w	8001bec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aaa:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d05c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d141      	bne.n	8001b42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abe:	4b31      	ldr	r3, [pc, #196]	@ (8001b84 <HAL_RCC_OscConfig+0x478>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fb4e 	bl	8001164 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff fb4a 	bl	8001164 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e087      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	4b27      	ldr	r3, [pc, #156]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af8:	019b      	lsls	r3, r3, #6
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	3b01      	subs	r3, #1
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	491b      	ldr	r1, [pc, #108]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b14:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <HAL_RCC_OscConfig+0x478>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fb23 	bl	8001164 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff fb1f 	bl	8001164 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e05c      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b34:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x416>
 8001b40:	e054      	b.n	8001bec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <HAL_RCC_OscConfig+0x478>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fb0c 	bl	8001164 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff fb08 	bl	8001164 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e045      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x444>
 8001b6e:	e03d      	b.n	8001bec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e038      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40007000 	.word	0x40007000
 8001b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ec>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d028      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d121      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d11a      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bb8:	4013      	ands	r3, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d111      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bce:	085b      	lsrs	r3, r3, #1
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0cc      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b68      	ldr	r3, [pc, #416]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d90c      	bls.n	8001c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b65      	ldr	r3, [pc, #404]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b63      	ldr	r3, [pc, #396]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0b8      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c50:	4b59      	ldr	r3, [pc, #356]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4a58      	ldr	r2, [pc, #352]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c68:	4b53      	ldr	r3, [pc, #332]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a52      	ldr	r2, [pc, #328]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b50      	ldr	r3, [pc, #320]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	494d      	ldr	r1, [pc, #308]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d044      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b47      	ldr	r3, [pc, #284]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d119      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e07f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d003      	beq.n	8001cba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b3f      	ldr	r3, [pc, #252]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e06f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b3b      	ldr	r3, [pc, #236]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e067      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b37      	ldr	r3, [pc, #220]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4934      	ldr	r1, [pc, #208]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cec:	f7ff fa3a 	bl	8001164 <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7ff fa36 	bl	8001164 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e04f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d20c      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e032      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4916      	ldr	r1, [pc, #88]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6e:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	490e      	ldr	r1, [pc, #56]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d82:	f000 f821 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	490a      	ldr	r1, [pc, #40]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9a:	4a09      	ldr	r2, [pc, #36]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f99a 	bl	80010dc <HAL_InitTick>

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	08002e84 	.word	0x08002e84
 8001dc0:	20000018 	.word	0x20000018
 8001dc4:	2000001c 	.word	0x2000001c

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dcc:	b094      	sub	sp, #80	@ 0x50
 8001dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de0:	4b79      	ldr	r3, [pc, #484]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d00d      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x40>
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	f200 80e1 	bhi.w	8001fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x34>
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dfa:	e0db      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b73      	ldr	r3, [pc, #460]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e00:	e0db      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e02:	4b73      	ldr	r3, [pc, #460]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e06:	e0d8      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e08:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e12:	4b6d      	ldr	r3, [pc, #436]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d063      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	2200      	movs	r2, #0
 8001e26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e30:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e32:	2300      	movs	r3, #0
 8001e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e3a:	4622      	mov	r2, r4
 8001e3c:	462b      	mov	r3, r5
 8001e3e:	f04f 0000 	mov.w	r0, #0
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	0159      	lsls	r1, r3, #5
 8001e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e4c:	0150      	lsls	r0, r2, #5
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4621      	mov	r1, r4
 8001e54:	1a51      	subs	r1, r2, r1
 8001e56:	6139      	str	r1, [r7, #16]
 8001e58:	4629      	mov	r1, r5
 8001e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e6c:	4659      	mov	r1, fp
 8001e6e:	018b      	lsls	r3, r1, #6
 8001e70:	4651      	mov	r1, sl
 8001e72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e76:	4651      	mov	r1, sl
 8001e78:	018a      	lsls	r2, r1, #6
 8001e7a:	4651      	mov	r1, sl
 8001e7c:	ebb2 0801 	subs.w	r8, r2, r1
 8001e80:	4659      	mov	r1, fp
 8001e82:	eb63 0901 	sbc.w	r9, r3, r1
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e9a:	4690      	mov	r8, r2
 8001e9c:	4699      	mov	r9, r3
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	eb18 0303 	adds.w	r3, r8, r3
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	eb49 0303 	adc.w	r3, r9, r3
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eba:	4629      	mov	r1, r5
 8001ebc:	024b      	lsls	r3, r1, #9
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	024a      	lsls	r2, r1, #9
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ece:	2200      	movs	r2, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ed4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ed8:	f7fe f976 	bl	80001c8 <__aeabi_uldivmod>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ee4:	e058      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee6:	4b38      	ldr	r3, [pc, #224]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	099b      	lsrs	r3, r3, #6
 8001eec:	2200      	movs	r2, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ef6:	623b      	str	r3, [r7, #32]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f00:	4642      	mov	r2, r8
 8001f02:	464b      	mov	r3, r9
 8001f04:	f04f 0000 	mov.w	r0, #0
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	0159      	lsls	r1, r3, #5
 8001f0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f12:	0150      	lsls	r0, r2, #5
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4641      	mov	r1, r8
 8001f1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f1e:	4649      	mov	r1, r9
 8001f20:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f38:	ebb2 040a 	subs.w	r4, r2, sl
 8001f3c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	00eb      	lsls	r3, r5, #3
 8001f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f4e:	00e2      	lsls	r2, r4, #3
 8001f50:	4614      	mov	r4, r2
 8001f52:	461d      	mov	r5, r3
 8001f54:	4643      	mov	r3, r8
 8001f56:	18e3      	adds	r3, r4, r3
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	eb45 0303 	adc.w	r3, r5, r3
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f6e:	4629      	mov	r1, r5
 8001f70:	028b      	lsls	r3, r1, #10
 8001f72:	4621      	mov	r1, r4
 8001f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f78:	4621      	mov	r1, r4
 8001f7a:	028a      	lsls	r2, r1, #10
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f82:	2200      	movs	r2, #0
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	61fa      	str	r2, [r7, #28]
 8001f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f8c:	f7fe f91c 	bl	80001c8 <__aeabi_uldivmod>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4613      	mov	r3, r2
 8001f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f98:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001fa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb2:	e002      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3750      	adds	r7, #80	@ 0x50
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	00f42400 	.word	0x00f42400
 8001fd0:	007a1200 	.word	0x007a1200

08001fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e07b      	b.n	80020de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d108      	bne.n	8002000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ff6:	d009      	beq.n	800200c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
 8001ffe:	e005      	b.n	800200c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fe9c 	bl	8000d64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002042:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002090:	ea42 0103 	orr.w	r1, r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	0c1b      	lsrs	r3, r3, #16
 80020aa:	f003 0104 	and.w	r1, r3, #4
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b2:	f003 0210 	and.w	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	69da      	ldr	r2, [r3, #28]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b088      	sub	sp, #32
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	4613      	mov	r3, r2
 80020f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020f6:	f7ff f835 	bl	8001164 <HAL_GetTick>
 80020fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d001      	beq.n	8002110 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800210c:	2302      	movs	r3, #2
 800210e:	e12a      	b.n	8002366 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <HAL_SPI_Transmit+0x36>
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e122      	b.n	8002366 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_SPI_Transmit+0x48>
 800212a:	2302      	movs	r3, #2
 800212c:	e11b      	b.n	8002366 <HAL_SPI_Transmit+0x280>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2203      	movs	r2, #3
 800213a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	88fa      	ldrh	r2, [r7, #6]
 800214e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	88fa      	ldrh	r2, [r7, #6]
 8002154:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800217c:	d10f      	bne.n	800219e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800218c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800219c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a8:	2b40      	cmp	r3, #64	@ 0x40
 80021aa:	d007      	beq.n	80021bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021c4:	d152      	bne.n	800226c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_SPI_Transmit+0xee>
 80021ce:	8b7b      	ldrh	r3, [r7, #26]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d145      	bne.n	8002260 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d8:	881a      	ldrh	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e4:	1c9a      	adds	r2, r3, #2
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021f8:	e032      	b.n	8002260 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b02      	cmp	r3, #2
 8002206:	d112      	bne.n	800222e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220c:	881a      	ldrh	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002218:	1c9a      	adds	r2, r3, #2
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800222c:	e018      	b.n	8002260 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800222e:	f7fe ff99 	bl	8001164 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d803      	bhi.n	8002246 <HAL_SPI_Transmit+0x160>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d102      	bne.n	800224c <HAL_SPI_Transmit+0x166>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d109      	bne.n	8002260 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e082      	b.n	8002366 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1c7      	bne.n	80021fa <HAL_SPI_Transmit+0x114>
 800226a:	e053      	b.n	8002314 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_SPI_Transmit+0x194>
 8002274:	8b7b      	ldrh	r3, [r7, #26]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d147      	bne.n	800230a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	330c      	adds	r3, #12
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022a0:	e033      	b.n	800230a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d113      	bne.n	80022d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	330c      	adds	r3, #12
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80022d6:	e018      	b.n	800230a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022d8:	f7fe ff44 	bl	8001164 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d803      	bhi.n	80022f0 <HAL_SPI_Transmit+0x20a>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ee:	d102      	bne.n	80022f6 <HAL_SPI_Transmit+0x210>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e02d      	b.n	8002366 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1c6      	bne.n	80022a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f8b1 	bl	8002480 <SPI_EndRxTxTransaction>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2220      	movs	r2, #32
 8002328:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10a      	bne.n	8002348 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002364:	2300      	movs	r3, #0
  }
}
 8002366:	4618      	mov	r0, r3
 8002368:	3720      	adds	r7, #32
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002380:	f7fe fef0 	bl	8001164 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	4413      	add	r3, r2
 800238e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002390:	f7fe fee8 	bl	8001164 <HAL_GetTick>
 8002394:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002396:	4b39      	ldr	r3, [pc, #228]	@ (800247c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	015b      	lsls	r3, r3, #5
 800239c:	0d1b      	lsrs	r3, r3, #20
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023a6:	e054      	b.n	8002452 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ae:	d050      	beq.n	8002452 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023b0:	f7fe fed8 	bl	8001164 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d902      	bls.n	80023c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d13d      	bne.n	8002442 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80023d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023de:	d111      	bne.n	8002404 <SPI_WaitFlagStateUntilTimeout+0x94>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023e8:	d004      	beq.n	80023f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f2:	d107      	bne.n	8002404 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002402:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800240c:	d10f      	bne.n	800242e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800242c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e017      	b.n	8002472 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	3b01      	subs	r3, #1
 8002450:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4013      	ands	r3, r2
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	429a      	cmp	r2, r3
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	429a      	cmp	r2, r3
 800246e:	d19b      	bne.n	80023a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000018 	.word	0x20000018

08002480 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2201      	movs	r2, #1
 8002494:	2102      	movs	r1, #2
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f7ff ff6a 	bl	8002370 <SPI_WaitFlagStateUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a6:	f043 0220 	orr.w	r2, r3, #32
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e032      	b.n	8002518 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80024b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <SPI_EndRxTxTransaction+0xa0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002524 <SPI_EndRxTxTransaction+0xa4>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	0d5b      	lsrs	r3, r3, #21
 80024be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024d0:	d112      	bne.n	80024f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2200      	movs	r2, #0
 80024da:	2180      	movs	r1, #128	@ 0x80
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff ff47 	bl	8002370 <SPI_WaitFlagStateUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d016      	beq.n	8002516 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ec:	f043 0220 	orr.w	r2, r3, #32
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e00f      	b.n	8002518 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3b01      	subs	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800250e:	2b80      	cmp	r3, #128	@ 0x80
 8002510:	d0f2      	beq.n	80024f8 <SPI_EndRxTxTransaction+0x78>
 8002512:	e000      	b.n	8002516 <SPI_EndRxTxTransaction+0x96>
        break;
 8002514:	bf00      	nop
  }

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000018 	.word	0x20000018
 8002524:	165e9f81 	.word	0x165e9f81

08002528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e041      	b.n	80025be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe fd10 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3304      	adds	r3, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f000 fa7e 	bl	8002a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d001      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e04e      	b.n	800267e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a23      	ldr	r2, [pc, #140]	@ (800268c <HAL_TIM_Base_Start_IT+0xc4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d022      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x80>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260a:	d01d      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x80>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1f      	ldr	r2, [pc, #124]	@ (8002690 <HAL_TIM_Base_Start_IT+0xc8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d018      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x80>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1e      	ldr	r2, [pc, #120]	@ (8002694 <HAL_TIM_Base_Start_IT+0xcc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d013      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x80>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1c      	ldr	r2, [pc, #112]	@ (8002698 <HAL_TIM_Base_Start_IT+0xd0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00e      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x80>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1b      	ldr	r2, [pc, #108]	@ (800269c <HAL_TIM_Base_Start_IT+0xd4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d009      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x80>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a19      	ldr	r2, [pc, #100]	@ (80026a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d004      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x80>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a18      	ldr	r2, [pc, #96]	@ (80026a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d111      	bne.n	800266c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b06      	cmp	r3, #6
 8002658:	d010      	beq.n	800267c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0201 	orr.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266a:	e007      	b.n	800267c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40010000 	.word	0x40010000
 8002690:	40000400 	.word	0x40000400
 8002694:	40000800 	.word	0x40000800
 8002698:	40000c00 	.word	0x40000c00
 800269c:	40010400 	.word	0x40010400
 80026a0:	40014000 	.word	0x40014000
 80026a4:	40001800 	.word	0x40001800

080026a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d020      	beq.n	800270c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01b      	beq.n	800270c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0202 	mvn.w	r2, #2
 80026dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f999 	bl	8002a2a <HAL_TIM_IC_CaptureCallback>
 80026f8:	e005      	b.n	8002706 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f98b 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f99c 	bl	8002a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	d020      	beq.n	8002758 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01b      	beq.n	8002758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0204 	mvn.w	r2, #4
 8002728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2202      	movs	r2, #2
 800272e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f973 	bl	8002a2a <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f965 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f976 	bl	8002a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d020      	beq.n	80027a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01b      	beq.n	80027a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0208 	mvn.w	r2, #8
 8002774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2204      	movs	r2, #4
 800277a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f94d 	bl	8002a2a <HAL_TIM_IC_CaptureCallback>
 8002790:	e005      	b.n	800279e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f93f 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f950 	bl	8002a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d020      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01b      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0210 	mvn.w	r2, #16
 80027c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2208      	movs	r2, #8
 80027c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f927 	bl	8002a2a <HAL_TIM_IC_CaptureCallback>
 80027dc:	e005      	b.n	80027ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f919 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f92a 	bl	8002a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00c      	beq.n	8002814 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0201 	mvn.w	r2, #1
 800280c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe fa48 	bl	8000ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00c      	beq.n	8002838 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002824:	2b00      	cmp	r3, #0
 8002826:	d007      	beq.n	8002838 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fae4 	bl	8002e00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00c      	beq.n	800285c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f8fb 	bl	8002a52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00c      	beq.n	8002880 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0220 	mvn.w	r2, #32
 8002878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fab6 	bl	8002dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_TIM_ConfigClockSource+0x1c>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e0b4      	b.n	8002a0e <HAL_TIM_ConfigClockSource+0x186>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028dc:	d03e      	beq.n	800295c <HAL_TIM_ConfigClockSource+0xd4>
 80028de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028e2:	f200 8087 	bhi.w	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 80028e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ea:	f000 8086 	beq.w	80029fa <HAL_TIM_ConfigClockSource+0x172>
 80028ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028f2:	d87f      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 80028f4:	2b70      	cmp	r3, #112	@ 0x70
 80028f6:	d01a      	beq.n	800292e <HAL_TIM_ConfigClockSource+0xa6>
 80028f8:	2b70      	cmp	r3, #112	@ 0x70
 80028fa:	d87b      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 80028fc:	2b60      	cmp	r3, #96	@ 0x60
 80028fe:	d050      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x11a>
 8002900:	2b60      	cmp	r3, #96	@ 0x60
 8002902:	d877      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002904:	2b50      	cmp	r3, #80	@ 0x50
 8002906:	d03c      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0xfa>
 8002908:	2b50      	cmp	r3, #80	@ 0x50
 800290a:	d873      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 800290c:	2b40      	cmp	r3, #64	@ 0x40
 800290e:	d058      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x13a>
 8002910:	2b40      	cmp	r3, #64	@ 0x40
 8002912:	d86f      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002914:	2b30      	cmp	r3, #48	@ 0x30
 8002916:	d064      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002918:	2b30      	cmp	r3, #48	@ 0x30
 800291a:	d86b      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 800291c:	2b20      	cmp	r3, #32
 800291e:	d060      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002920:	2b20      	cmp	r3, #32
 8002922:	d867      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002924:	2b00      	cmp	r3, #0
 8002926:	d05c      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002928:	2b10      	cmp	r3, #16
 800292a:	d05a      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15a>
 800292c:	e062      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800293e:	f000 f9b9 	bl	8002cb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	609a      	str	r2, [r3, #8]
      break;
 800295a:	e04f      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800296c:	f000 f9a2 	bl	8002cb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800297e:	609a      	str	r2, [r3, #8]
      break;
 8002980:	e03c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800298e:	461a      	mov	r2, r3
 8002990:	f000 f916 	bl	8002bc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2150      	movs	r1, #80	@ 0x50
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f96f 	bl	8002c7e <TIM_ITRx_SetConfig>
      break;
 80029a0:	e02c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ae:	461a      	mov	r2, r3
 80029b0:	f000 f935 	bl	8002c1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2160      	movs	r1, #96	@ 0x60
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f95f 	bl	8002c7e <TIM_ITRx_SetConfig>
      break;
 80029c0:	e01c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ce:	461a      	mov	r2, r3
 80029d0:	f000 f8f6 	bl	8002bc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2140      	movs	r1, #64	@ 0x40
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 f94f 	bl	8002c7e <TIM_ITRx_SetConfig>
      break;
 80029e0:	e00c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4619      	mov	r1, r3
 80029ec:	4610      	mov	r0, r2
 80029ee:	f000 f946 	bl	8002c7e <TIM_ITRx_SetConfig>
      break;
 80029f2:	e003      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      break;
 80029f8:	e000      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a46      	ldr	r2, [pc, #280]	@ (8002b94 <TIM_Base_SetConfig+0x12c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d013      	beq.n	8002aa8 <TIM_Base_SetConfig+0x40>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a86:	d00f      	beq.n	8002aa8 <TIM_Base_SetConfig+0x40>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a43      	ldr	r2, [pc, #268]	@ (8002b98 <TIM_Base_SetConfig+0x130>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00b      	beq.n	8002aa8 <TIM_Base_SetConfig+0x40>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a42      	ldr	r2, [pc, #264]	@ (8002b9c <TIM_Base_SetConfig+0x134>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d007      	beq.n	8002aa8 <TIM_Base_SetConfig+0x40>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a41      	ldr	r2, [pc, #260]	@ (8002ba0 <TIM_Base_SetConfig+0x138>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d003      	beq.n	8002aa8 <TIM_Base_SetConfig+0x40>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a40      	ldr	r2, [pc, #256]	@ (8002ba4 <TIM_Base_SetConfig+0x13c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d108      	bne.n	8002aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a35      	ldr	r2, [pc, #212]	@ (8002b94 <TIM_Base_SetConfig+0x12c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d02b      	beq.n	8002b1a <TIM_Base_SetConfig+0xb2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac8:	d027      	beq.n	8002b1a <TIM_Base_SetConfig+0xb2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a32      	ldr	r2, [pc, #200]	@ (8002b98 <TIM_Base_SetConfig+0x130>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d023      	beq.n	8002b1a <TIM_Base_SetConfig+0xb2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a31      	ldr	r2, [pc, #196]	@ (8002b9c <TIM_Base_SetConfig+0x134>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01f      	beq.n	8002b1a <TIM_Base_SetConfig+0xb2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a30      	ldr	r2, [pc, #192]	@ (8002ba0 <TIM_Base_SetConfig+0x138>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01b      	beq.n	8002b1a <TIM_Base_SetConfig+0xb2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a2f      	ldr	r2, [pc, #188]	@ (8002ba4 <TIM_Base_SetConfig+0x13c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d017      	beq.n	8002b1a <TIM_Base_SetConfig+0xb2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a2e      	ldr	r2, [pc, #184]	@ (8002ba8 <TIM_Base_SetConfig+0x140>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <TIM_Base_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a2d      	ldr	r2, [pc, #180]	@ (8002bac <TIM_Base_SetConfig+0x144>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00f      	beq.n	8002b1a <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb0 <TIM_Base_SetConfig+0x148>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00b      	beq.n	8002b1a <TIM_Base_SetConfig+0xb2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb4 <TIM_Base_SetConfig+0x14c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d007      	beq.n	8002b1a <TIM_Base_SetConfig+0xb2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8002bb8 <TIM_Base_SetConfig+0x150>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d003      	beq.n	8002b1a <TIM_Base_SetConfig+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a29      	ldr	r2, [pc, #164]	@ (8002bbc <TIM_Base_SetConfig+0x154>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d108      	bne.n	8002b2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a10      	ldr	r2, [pc, #64]	@ (8002b94 <TIM_Base_SetConfig+0x12c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d003      	beq.n	8002b60 <TIM_Base_SetConfig+0xf8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <TIM_Base_SetConfig+0x13c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d103      	bne.n	8002b68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d105      	bne.n	8002b86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f023 0201 	bic.w	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	611a      	str	r2, [r3, #16]
  }
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40010000 	.word	0x40010000
 8002b98:	40000400 	.word	0x40000400
 8002b9c:	40000800 	.word	0x40000800
 8002ba0:	40000c00 	.word	0x40000c00
 8002ba4:	40010400 	.word	0x40010400
 8002ba8:	40014000 	.word	0x40014000
 8002bac:	40014400 	.word	0x40014400
 8002bb0:	40014800 	.word	0x40014800
 8002bb4:	40001800 	.word	0x40001800
 8002bb8:	40001c00 	.word	0x40001c00
 8002bbc:	40002000 	.word	0x40002000

08002bc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	f023 0201 	bic.w	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f023 030a 	bic.w	r3, r3, #10
 8002bfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	621a      	str	r2, [r3, #32]
}
 8002c12:	bf00      	nop
 8002c14:	371c      	adds	r7, #28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b087      	sub	sp, #28
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f023 0210 	bic.w	r2, r3, #16
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	031b      	lsls	r3, r3, #12
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	621a      	str	r2, [r3, #32]
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b085      	sub	sp, #20
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f043 0307 	orr.w	r3, r3, #7
 8002ca0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	609a      	str	r2, [r3, #8]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	021a      	lsls	r2, r3, #8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	609a      	str	r2, [r3, #8]
}
 8002ce8:	bf00      	nop
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e05a      	b.n	8002dc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a21      	ldr	r2, [pc, #132]	@ (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d022      	beq.n	8002d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d58:	d01d      	beq.n	8002d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d018      	beq.n	8002d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1a      	ldr	r2, [pc, #104]	@ (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00e      	beq.n	8002d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a18      	ldr	r2, [pc, #96]	@ (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d009      	beq.n	8002d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a17      	ldr	r2, [pc, #92]	@ (8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a15      	ldr	r2, [pc, #84]	@ (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d10c      	bne.n	8002db0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800
 8002ddc:	40000c00 	.word	0x40000c00
 8002de0:	40010400 	.word	0x40010400
 8002de4:	40014000 	.word	0x40014000
 8002de8:	40001800 	.word	0x40001800

08002dec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <memset>:
 8002e14:	4402      	add	r2, r0
 8002e16:	4603      	mov	r3, r0
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d100      	bne.n	8002e1e <memset+0xa>
 8002e1c:	4770      	bx	lr
 8002e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e22:	e7f9      	b.n	8002e18 <memset+0x4>

08002e24 <__libc_init_array>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	4d0d      	ldr	r5, [pc, #52]	@ (8002e5c <__libc_init_array+0x38>)
 8002e28:	4c0d      	ldr	r4, [pc, #52]	@ (8002e60 <__libc_init_array+0x3c>)
 8002e2a:	1b64      	subs	r4, r4, r5
 8002e2c:	10a4      	asrs	r4, r4, #2
 8002e2e:	2600      	movs	r6, #0
 8002e30:	42a6      	cmp	r6, r4
 8002e32:	d109      	bne.n	8002e48 <__libc_init_array+0x24>
 8002e34:	4d0b      	ldr	r5, [pc, #44]	@ (8002e64 <__libc_init_array+0x40>)
 8002e36:	4c0c      	ldr	r4, [pc, #48]	@ (8002e68 <__libc_init_array+0x44>)
 8002e38:	f000 f818 	bl	8002e6c <_init>
 8002e3c:	1b64      	subs	r4, r4, r5
 8002e3e:	10a4      	asrs	r4, r4, #2
 8002e40:	2600      	movs	r6, #0
 8002e42:	42a6      	cmp	r6, r4
 8002e44:	d105      	bne.n	8002e52 <__libc_init_array+0x2e>
 8002e46:	bd70      	pop	{r4, r5, r6, pc}
 8002e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e4c:	4798      	blx	r3
 8002e4e:	3601      	adds	r6, #1
 8002e50:	e7ee      	b.n	8002e30 <__libc_init_array+0xc>
 8002e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e56:	4798      	blx	r3
 8002e58:	3601      	adds	r6, #1
 8002e5a:	e7f2      	b.n	8002e42 <__libc_init_array+0x1e>
 8002e5c:	08002e9c 	.word	0x08002e9c
 8002e60:	08002e9c 	.word	0x08002e9c
 8002e64:	08002e9c 	.word	0x08002e9c
 8002e68:	08002ea0 	.word	0x08002ea0

08002e6c <_init>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	bf00      	nop
 8002e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e72:	bc08      	pop	{r3}
 8002e74:	469e      	mov	lr, r3
 8002e76:	4770      	bx	lr

08002e78 <_fini>:
 8002e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7a:	bf00      	nop
 8002e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7e:	bc08      	pop	{r3}
 8002e80:	469e      	mov	lr, r3
 8002e82:	4770      	bx	lr
